config MMU boolean {
 default [y] if []
}
config ZONE_DMA boolean {
 default [y] if []
}
config RWSEM_GENERIC_SPINLOCK boolean {
 default [y] if []
}
config RWSEM_XCHGADD_ALGORITHM boolean {
}
config GENERIC_IOMAP boolean {
 default [y] if []
}
config ARCH_HAS_ILOG2_U32 boolean {
 default [n] if []
}
config ARCH_HAS_ILOG2_U64 boolean {
 default [n] if []
}
config GENERIC_FIND_NEXT_BIT boolean {
 default [y] if []
}
config GENERIC_HWEIGHT boolean {
 default [y] if []
}
config GENERIC_CALIBRATE_DELAY boolean {
 default [y] if []
}
config NO_IOPORT boolean {
 default [y] if []
}
config FORCE_MAX_ZONEORDER integer {
 default [6] if []
}
config CRIS boolean {
 default [y] if []
 select HAVE_IDE if []
}
config HZ integer {
 default [100] if []
}
config ARCH string {
 env ARCH if []
 default ["cris"] if []
}
config KERNELVERSION string {
 env KERNELVERSION if []
 default ["2.6.33.3"] if []
}
config DEFCONFIG_LIST string {
 depends on [!UML]
 default ["/lib/modules/$UNAME_RELEASE/.config"] if [!UML]
 default ["/etc/kernel-config"] if [!UML]
 default ["/boot/config-$UNAME_RELEASE"] if [!UML]
 default ["$ARCH_DEFCONFIG"] if [!UML]
 default ["arch/$ARCH/defconfig"] if [!UML]
 inherited [!UML]
}
config CONSTRUCTORS boolean {
 depends on [!UML]
 default [y] if [!UML]
 inherited [!UML]
}
menu "General setup" {
 config EXPERIMENTAL boolean {
  prompt "Prompt for development and/or incomplete code/drivers" if []
 }
 config BROKEN boolean {
 }
 config BROKEN_ON_SMP boolean {
  depends on [BROKEN || !SMP]
  default [y] if [BROKEN || !SMP]
  inherited [BROKEN || !SMP]
 }
 config LOCK_KERNEL boolean {
  depends on [SMP || PREEMPT]
  default [y] if [SMP || PREEMPT]
  inherited [SMP || PREEMPT]
 }
 config INIT_ENV_ARG_LIMIT integer {
  default [32] if [!UML]
  default [128] if [UML]
 }
 config LOCALVERSION string {
  prompt "Local version - append to kernel release" if []
 }
 config LOCALVERSION_AUTO boolean {
  prompt "Automatically append version information to the version string" if []
  default [y] if []
 }
 config HAVE_KERNEL_GZIP boolean {
 }
 config HAVE_KERNEL_BZIP2 boolean {
 }
 config HAVE_KERNEL_LZMA boolean {
 }
 config HAVE_KERNEL_LZO boolean {
 }
 choice boolean {
  prompt "Kernel compression mode" if [HAVE_KERNEL_GZIP || HAVE_KERNEL_BZIP2 || HAVE_KERNEL_LZMA || HAVE_KERNEL_LZO]
  default [KERNEL_GZIP] if [HAVE_KERNEL_GZIP || HAVE_KERNEL_BZIP2 || HAVE_KERNEL_LZMA || HAVE_KERNEL_LZO]
  depends on [HAVE_KERNEL_GZIP || HAVE_KERNEL_BZIP2 || HAVE_KERNEL_LZMA || HAVE_KERNEL_LZO]
  config KERNEL_GZIP boolean {
   prompt "Gzip" if [<choice> && HAVE_KERNEL_GZIP]
   depends on [HAVE_KERNEL_GZIP]
   inherited [<choice> && HAVE_KERNEL_GZIP]
  }
  config KERNEL_BZIP2 boolean {
   prompt "Bzip2" if [<choice> && HAVE_KERNEL_BZIP2]
   depends on [HAVE_KERNEL_BZIP2]
   inherited [<choice> && HAVE_KERNEL_BZIP2]
  }
  config KERNEL_LZMA boolean {
   prompt "LZMA" if [<choice> && HAVE_KERNEL_LZMA]
   depends on [HAVE_KERNEL_LZMA]
   inherited [<choice> && HAVE_KERNEL_LZMA]
  }
  config KERNEL_LZO boolean {
   prompt "LZO" if [<choice> && HAVE_KERNEL_LZO]
   depends on [HAVE_KERNEL_LZO]
   inherited [<choice> && HAVE_KERNEL_LZO]
  }
 }
 config SWAP boolean {
  prompt "Support for paging of anonymous memory (swap)" if [MMU && BLOCK]
  depends on [MMU && BLOCK]
  default [y] if [MMU && BLOCK]
  inherited [MMU && BLOCK]
 }
 config SYSVIPC boolean {
  prompt "System V IPC" if []
  config SYSVIPC_SYSCTL boolean {
   depends on [SYSVIPC]
   depends on [SYSCTL]
   default [y] if [SYSVIPC && SYSCTL]
   inherited [SYSVIPC && SYSCTL]
  }
 }
 config POSIX_MQUEUE boolean {
  prompt "POSIX Message Queues" if [NET && EXPERIMENTAL]
  depends on [NET && EXPERIMENTAL]
  inherited [NET && EXPERIMENTAL]
  config POSIX_MQUEUE_SYSCTL boolean {
   depends on [POSIX_MQUEUE]
   depends on [SYSCTL]
   default [y] if [POSIX_MQUEUE && SYSCTL]
   inherited [POSIX_MQUEUE && SYSCTL]
  }
 }
 config BSD_PROCESS_ACCT boolean {
  prompt "BSD Process Accounting" if []
  config BSD_PROCESS_ACCT_V3 boolean {
   prompt "BSD Process Accounting version 3 file format" if [BSD_PROCESS_ACCT]
   depends on [BSD_PROCESS_ACCT]
   default [n] if [BSD_PROCESS_ACCT]
   inherited [BSD_PROCESS_ACCT]
  }
 }
 config TASKSTATS boolean {
  prompt "Export task/process statistics through netlink (EXPERIMENTAL)" if [NET]
  depends on [NET]
  default [n] if [NET]
  inherited [NET]
  config TASK_DELAY_ACCT boolean {
   prompt "Enable per-task delay accounting (EXPERIMENTAL)" if [TASKSTATS]
   depends on [TASKSTATS]
   inherited [TASKSTATS]
  }
  config TASK_XACCT boolean {
   prompt "Enable extended accounting over taskstats (EXPERIMENTAL)" if [TASKSTATS]
   depends on [TASKSTATS]
   inherited [TASKSTATS]
   config TASK_IO_ACCOUNTING boolean {
    prompt "Enable per-task storage I/O accounting (EXPERIMENTAL)" if [TASK_XACCT]
    depends on [TASK_XACCT]
    inherited [TASK_XACCT]
   }
  }
 }
 config AUDIT boolean {
  prompt "Auditing support" if [NET]
  depends on [NET]
  inherited [NET]
  config AUDITSYSCALL boolean {
   prompt "Enable system-call auditing support" if [AUDIT && (X86 || PPC || S390 || IA64 || UML || SPARC64 || SUPERH)]
   depends on [AUDIT && (X86 || PPC || S390 || IA64 || UML || SPARC64 || SUPERH)]
   default [y] if [AUDIT && (X86 || PPC || S390 || IA64 || UML || SPARC64 || SUPERH) && SECURITY_SELINUX]
   inherited [AUDIT && (X86 || PPC || S390 || IA64 || UML || SPARC64 || SUPERH)]
   config AUDIT_TREE boolean {
    default [y] if [AUDITSYSCALL]
    depends on [AUDITSYSCALL]
    select INOTIFY if [AUDITSYSCALL]
    inherited [AUDITSYSCALL]
   }
  }
 }
 menu "RCU Subsystem" {
  choice boolean {
   prompt "RCU Implementation" if []
   default [TREE_RCU] if []
   config TREE_RCU boolean {
    prompt "Tree-based hierarchical RCU" if [<choice>]
    inherited [<choice>]
   }
   config TREE_PREEMPT_RCU boolean {
    prompt "Preemptable tree-based hierarchical RCU" if [<choice> && PREEMPT]
    depends on [PREEMPT]
    inherited [<choice> && PREEMPT]
   }
   config TINY_RCU boolean {
    prompt "UP-only small-memory-footprint RCU" if [<choice> && !SMP]
    depends on [!SMP]
    inherited [<choice> && !SMP]
   }
  }
  config RCU_TRACE boolean {
   prompt "Enable tracing for RCU" if [TREE_RCU || TREE_PREEMPT_RCU]
   depends on [TREE_RCU || TREE_PREEMPT_RCU]
   inherited [TREE_RCU || TREE_PREEMPT_RCU]
  }
  config RCU_FANOUT integer {
   prompt "Tree-based hierarchical RCU fanout value" if [TREE_RCU || TREE_PREEMPT_RCU]
   range [2 64] if [(TREE_RCU || TREE_PREEMPT_RCU) && 64BIT]
   range [2 32] if [(TREE_RCU || TREE_PREEMPT_RCU) && !64BIT]
   depends on [TREE_RCU || TREE_PREEMPT_RCU]
   default [64] if [(TREE_RCU || TREE_PREEMPT_RCU) && 64BIT]
   default [32] if [(TREE_RCU || TREE_PREEMPT_RCU) && !64BIT]
   inherited [TREE_RCU || TREE_PREEMPT_RCU]
  }
  config RCU_FANOUT_EXACT boolean {
   prompt "Disable tree-based hierarchical RCU auto-balancing" if [TREE_RCU || TREE_PREEMPT_RCU]
   depends on [TREE_RCU || TREE_PREEMPT_RCU]
   default [n] if [TREE_RCU || TREE_PREEMPT_RCU]
   inherited [TREE_RCU || TREE_PREEMPT_RCU]
  }
  config TREE_RCU_TRACE boolean {
   default [RCU_TRACE && (TREE_RCU || TREE_PREEMPT_RCU)] if []
   select DEBUG_FS if []
  }
 }
 config IKCONFIG tristate {
  prompt "Kernel .config support" if []
  config IKCONFIG_PROC boolean {
   prompt "Enable access to .config through /proc/config.gz" if [IKCONFIG && PROC_FS]
   depends on [IKCONFIG && PROC_FS]
   inherited [IKCONFIG && PROC_FS]
  }
 }
 config LOG_BUF_SHIFT integer {
  prompt "Kernel log buffer size (16 => 64KB, 17 => 128KB)" if []
  range [12 21] if []
  default [17] if []
 }
 config HAVE_UNSTABLE_SCHED_CLOCK boolean {
 }
 config GROUP_SCHED boolean {
  prompt "Group CPU scheduler" if [EXPERIMENTAL]
  depends on [EXPERIMENTAL]
  default [n] if [EXPERIMENTAL]
  inherited [EXPERIMENTAL]
  config FAIR_GROUP_SCHED boolean {
   prompt "Group scheduling for SCHED_OTHER" if [GROUP_SCHED]
   depends on [GROUP_SCHED]
   default [GROUP_SCHED] if [GROUP_SCHED]
   inherited [GROUP_SCHED]
  }
  config RT_GROUP_SCHED boolean {
   prompt "Group scheduling for SCHED_RR/FIFO" if [EXPERIMENTAL && GROUP_SCHED]
   depends on [EXPERIMENTAL]
   depends on [GROUP_SCHED]
   default [n] if [EXPERIMENTAL && GROUP_SCHED]
   inherited [EXPERIMENTAL && GROUP_SCHED]
  }
  choice boolean {
   depends on [GROUP_SCHED]
   prompt "Basis for grouping tasks" if [GROUP_SCHED]
   default [USER_SCHED] if [GROUP_SCHED]
   config USER_SCHED boolean {
    prompt "user id" if [<choice>]
    inherited [<choice>]
   }
   config CGROUP_SCHED boolean {
    prompt "Control groups" if [<choice> && CGROUPS]
    depends on [CGROUPS]
    inherited [<choice> && CGROUPS]
   }
  }
 }
 menuconfig CGROUPS boolean {
  prompt "Control Group support" if []
  if [CGROUPS] {
   config CGROUP_DEBUG boolean {
    prompt "Example debug cgroup subsystem" if [CGROUPS]
    depends on [CGROUPS]
    default [n] if [CGROUPS]
    inherited [CGROUPS]
   }
   config CGROUP_NS boolean {
    prompt "Namespace cgroup subsystem" if [CGROUPS]
    depends on [CGROUPS]
    inherited [CGROUPS]
   }
   config CGROUP_FREEZER boolean {
    prompt "Freezer cgroup subsystem" if [CGROUPS]
    depends on [CGROUPS]
    inherited [CGROUPS]
   }
   config CGROUP_DEVICE boolean {
    prompt "Device controller for cgroups" if [CGROUPS && EXPERIMENTAL]
    depends on [CGROUPS && EXPERIMENTAL]
    inherited [CGROUPS && EXPERIMENTAL]
   }
   config CPUSETS boolean {
    prompt "Cpuset support" if [CGROUPS]
    depends on [CGROUPS]
    inherited [CGROUPS]
    config PROC_PID_CPUSET boolean {
     prompt "Include legacy /proc/<pid>/cpuset file" if [CGROUPS && CPUSETS]
     depends on [CPUSETS]
     default [y] if [CGROUPS && CPUSETS]
     inherited [CGROUPS && CPUSETS]
    }
   }
   config CGROUP_CPUACCT boolean {
    prompt "Simple CPU accounting cgroup subsystem" if [CGROUPS]
    depends on [CGROUPS]
    inherited [CGROUPS]
   }
   config RESOURCE_COUNTERS boolean {
    prompt "Resource counters" if [CGROUPS]
    depends on [CGROUPS]
    inherited [CGROUPS]
    config CGROUP_MEM_RES_CTLR boolean {
     prompt "Memory Resource Controller for Control Groups" if [CGROUPS && RESOURCE_COUNTERS]
     depends on [CGROUPS && RESOURCE_COUNTERS]
     select MM_OWNER if [CGROUPS && RESOURCE_COUNTERS]
     inherited [CGROUPS && RESOURCE_COUNTERS]
     config CGROUP_MEM_RES_CTLR_SWAP boolean {
      prompt "Memory Resource Controller Swap Extension(EXPERIMENTAL)" if [CGROUPS && CGROUP_MEM_RES_CTLR && SWAP && EXPERIMENTAL]
      depends on [CGROUP_MEM_RES_CTLR && SWAP && EXPERIMENTAL]
      inherited [CGROUPS && CGROUP_MEM_RES_CTLR && SWAP && EXPERIMENTAL]
     }
    }
   }
  }
 }
 config MM_OWNER boolean {
 }
 config SYSFS_DEPRECATED boolean {
 }
 config SYSFS_DEPRECATED_V2 boolean {
  prompt "enable deprecated sysfs features to support old userspace tools" if [SYSFS]
  depends on [SYSFS]
  default [n] if [SYSFS]
  select SYSFS_DEPRECATED if [SYSFS]
  inherited [SYSFS]
 }
 config RELAY boolean {
  prompt "Kernel->user space relay support (formerly relayfs)" if []
 }
 config NAMESPACES boolean {
  prompt "Namespaces support" if [EMBEDDED]
  default [!EMBEDDED] if []
  config UTS_NS boolean {
   prompt "UTS namespace" if [NAMESPACES]
   depends on [NAMESPACES]
   inherited [NAMESPACES]
  }
  config IPC_NS boolean {
   prompt "IPC namespace" if [NAMESPACES && (SYSVIPC || POSIX_MQUEUE)]
   depends on [NAMESPACES && (SYSVIPC || POSIX_MQUEUE)]
   inherited [NAMESPACES && (SYSVIPC || POSIX_MQUEUE)]
  }
  config USER_NS boolean {
   prompt "User namespace (EXPERIMENTAL)" if [NAMESPACES && EXPERIMENTAL]
   depends on [NAMESPACES && EXPERIMENTAL]
   inherited [NAMESPACES && EXPERIMENTAL]
  }
  config PID_NS boolean {
   prompt "PID Namespaces (EXPERIMENTAL)" if [NAMESPACES && EXPERIMENTAL]
   default [n] if [NAMESPACES && EXPERIMENTAL]
   depends on [NAMESPACES && EXPERIMENTAL]
   inherited [NAMESPACES && EXPERIMENTAL]
  }
  config NET_NS boolean {
   prompt "Network namespace" if [NAMESPACES && EXPERIMENTAL && NET]
   default [n] if [NAMESPACES && EXPERIMENTAL && NET]
   depends on [NAMESPACES && EXPERIMENTAL && NET]
   inherited [NAMESPACES && EXPERIMENTAL && NET]
  }
 }
 config BLK_DEV_INITRD boolean {
  prompt "Initial RAM filesystem and RAM disk (initramfs/initrd) support" if [BROKEN || !FRV]
  depends on [BROKEN || !FRV]
  inherited [BROKEN || !FRV]
  if [BLK_DEV_INITRD] {
   config INITRAMFS_SOURCE string {
    prompt "Initramfs source file(s)" if [BLK_DEV_INITRD]
    default [""] if [BLK_DEV_INITRD]
    inherited [BLK_DEV_INITRD]
    config INITRAMFS_ROOT_UID integer {
     prompt "User ID to map to 0 (user root)" if [BLK_DEV_INITRD && INITRAMFS_SOURCE!=""]
     depends on [INITRAMFS_SOURCE!=""]
     default [0] if [BLK_DEV_INITRD && INITRAMFS_SOURCE!=""]
     inherited [BLK_DEV_INITRD && INITRAMFS_SOURCE!=""]
    }
    config INITRAMFS_ROOT_GID integer {
     prompt "Group ID to map to 0 (group root)" if [BLK_DEV_INITRD && INITRAMFS_SOURCE!=""]
     depends on [INITRAMFS_SOURCE!=""]
     default [0] if [BLK_DEV_INITRD && INITRAMFS_SOURCE!=""]
     inherited [BLK_DEV_INITRD && INITRAMFS_SOURCE!=""]
    }
   }
   config RD_GZIP boolean {
    prompt "Support initial ramdisks compressed using gzip" if [BLK_DEV_INITRD && EMBEDDED]
    default [y] if [BLK_DEV_INITRD]
    depends on [BLK_DEV_INITRD]
    select DECOMPRESS_GZIP if [BLK_DEV_INITRD]
    inherited [BLK_DEV_INITRD]
   }
   config RD_BZIP2 boolean {
    prompt "Support initial ramdisks compressed using bzip2" if [BLK_DEV_INITRD && EMBEDDED]
    default [!EMBEDDED] if [BLK_DEV_INITRD]
    depends on [BLK_DEV_INITRD]
    select DECOMPRESS_BZIP2 if [BLK_DEV_INITRD]
    inherited [BLK_DEV_INITRD]
   }
   config RD_LZMA boolean {
    prompt "Support initial ramdisks compressed using LZMA" if [BLK_DEV_INITRD && EMBEDDED]
    default [!EMBEDDED] if [BLK_DEV_INITRD]
    depends on [BLK_DEV_INITRD]
    select DECOMPRESS_LZMA if [BLK_DEV_INITRD]
    inherited [BLK_DEV_INITRD]
   }
   config RD_LZO boolean {
    prompt "Support initial ramdisks compressed using LZO" if [BLK_DEV_INITRD && EMBEDDED]
    default [!EMBEDDED] if [BLK_DEV_INITRD]
    depends on [BLK_DEV_INITRD]
    select DECOMPRESS_LZO if [BLK_DEV_INITRD]
    inherited [BLK_DEV_INITRD]
   }
   choice boolean {
    prompt "Built-in initramfs compression mode" if [BLK_DEV_INITRD && INITRAMFS_SOURCE!=""]
    config INITRAMFS_COMPRESSION_NONE boolean {
     prompt "None" if [<choice>]
     inherited [<choice>]
    }
    config INITRAMFS_COMPRESSION_GZIP boolean {
     prompt "Gzip" if [<choice> && RD_GZIP]
     depends on [RD_GZIP]
     inherited [<choice> && RD_GZIP]
    }
    config INITRAMFS_COMPRESSION_BZIP2 boolean {
     prompt "Bzip2" if [<choice> && RD_BZIP2]
     depends on [RD_BZIP2]
     inherited [<choice> && RD_BZIP2]
    }
    config INITRAMFS_COMPRESSION_LZMA boolean {
     prompt "LZMA" if [<choice> && RD_LZMA]
     depends on [RD_LZMA]
     inherited [<choice> && RD_LZMA]
    }
    config INITRAMFS_COMPRESSION_LZO boolean {
     prompt "LZO" if [<choice> && RD_LZO]
     depends on [RD_LZO]
     inherited [<choice> && RD_LZO]
    }
   }
  }
 }
 config CC_OPTIMIZE_FOR_SIZE boolean {
  prompt "Optimize for size" if []
  default [y] if []
 }
 config SYSCTL boolean {
 }
 config ANON_INODES boolean {
 }
 menuconfig EMBEDDED boolean {
  prompt "Configure standard kernel features (for small systems)" if []
  config UID16 boolean {
   prompt "Enable 16-bit UID system calls" if [(ARM || BLACKFIN || CRIS || FRV || H8300 || X86_32 || M68K || S390 && !64BIT || SUPERH || SPARC32 || SPARC64 && COMPAT || UML || X86_64 && IA32_EMULATION) && EMBEDDED]
   depends on [ARM || BLACKFIN || CRIS || FRV || H8300 || X86_32 || M68K || S390 && !64BIT || SUPERH || SPARC32 || SPARC64 && COMPAT || UML || X86_64 && IA32_EMULATION]
   default [y] if [ARM || BLACKFIN || CRIS || FRV || H8300 || X86_32 || M68K || S390 && !64BIT || SUPERH || SPARC32 || SPARC64 && COMPAT || UML || X86_64 && IA32_EMULATION]
   inherited [ARM || BLACKFIN || CRIS || FRV || H8300 || X86_32 || M68K || S390 && !64BIT || SUPERH || SPARC32 || SPARC64 && COMPAT || UML || X86_64 && IA32_EMULATION]
  }
  config SYSCTL_SYSCALL boolean {
   prompt "Sysctl syscall support" if [PROC_SYSCTL && EMBEDDED]
   depends on [PROC_SYSCTL]
   default [y] if [PROC_SYSCTL]
   select SYSCTL if [PROC_SYSCTL]
   inherited [PROC_SYSCTL]
  }
  config KALLSYMS boolean {
   prompt "Load all symbols for debugging/ksymoops" if [EMBEDDED]
   default [y] if []
   config KALLSYMS_ALL boolean {
    prompt "Include all symbols in kallsyms" if [DEBUG_KERNEL && KALLSYMS]
    depends on [DEBUG_KERNEL && KALLSYMS]
    inherited [DEBUG_KERNEL && KALLSYMS]
   }
   config KALLSYMS_EXTRA_PASS boolean {
    prompt "Do an extra kallsyms pass" if [KALLSYMS]
    depends on [KALLSYMS]
    inherited [KALLSYMS]
   }
  }
  config HOTPLUG boolean {
   prompt "Support for hot-pluggable devices" if [EMBEDDED]
   default [y] if []
  }
  config PRINTK boolean {
   default [y] if []
   prompt "Enable support for printk" if [EMBEDDED]
  }
  config BUG boolean {
   prompt "BUG() support" if [EMBEDDED]
   default [y] if []
  }
  config ELF_CORE boolean {
   default [y] if []
   prompt "Enable ELF core dumps" if [EMBEDDED]
  }
  config PCSPKR_PLATFORM boolean {
   prompt "Enable PC-Speaker support" if [(ALPHA || X86 || MIPS || PPC_PREP || PPC_CHRP || PPC_PSERIES) && EMBEDDED]
   depends on [ALPHA || X86 || MIPS || PPC_PREP || PPC_CHRP || PPC_PSERIES]
   default [y] if [ALPHA || X86 || MIPS || PPC_PREP || PPC_CHRP || PPC_PSERIES]
   inherited [ALPHA || X86 || MIPS || PPC_PREP || PPC_CHRP || PPC_PSERIES]
  }
  config BASE_FULL boolean {
   default [y] if []
   prompt "Enable full-sized data structures for core" if [EMBEDDED]
  }
  config FUTEX boolean {
   prompt "Enable futex support" if [EMBEDDED]
   default [y] if []
   select RT_MUTEXES if []
  }
  config EPOLL boolean {
   prompt "Enable eventpoll support" if [EMBEDDED]
   default [y] if []
   select ANON_INODES if []
  }
  config SIGNALFD boolean {
   prompt "Enable signalfd() system call" if [EMBEDDED]
   select ANON_INODES if []
   default [y] if []
  }
  config TIMERFD boolean {
   prompt "Enable timerfd() system call" if [EMBEDDED]
   select ANON_INODES if []
   default [y] if []
  }
  config EVENTFD boolean {
   prompt "Enable eventfd() system call" if [EMBEDDED]
   select ANON_INODES if []
   default [y] if []
  }
  config SHMEM boolean {
   prompt "Use full shmem filesystem" if [MMU && EMBEDDED]
   default [y] if [MMU]
   depends on [MMU]
   inherited [MMU]
  }
  config AIO boolean {
   prompt "Enable AIO support" if [EMBEDDED]
   default [y] if []
  }
 }
 config HAVE_PERF_EVENTS boolean {
 }
 config PERF_USE_VMALLOC boolean {
 }
 menu "Kernel Performance Events And Counters" {
  config PERF_EVENTS boolean {
   prompt "Kernel performance events and counters" if [HAVE_PERF_EVENTS]
   default [y] if [HAVE_PERF_EVENTS && (PROFILING || PERF_COUNTERS)]
   depends on [HAVE_PERF_EVENTS]
   select ANON_INODES if [HAVE_PERF_EVENTS]
   inherited [HAVE_PERF_EVENTS]
   config EVENT_PROFILE boolean {
    prompt "Tracepoint profiling sources" if [PERF_EVENTS && EVENT_TRACING]
    depends on [PERF_EVENTS && EVENT_TRACING]
    default [y] if [PERF_EVENTS && EVENT_TRACING]
    inherited [PERF_EVENTS && EVENT_TRACING]
   }
  }
  config PERF_COUNTERS boolean {
   prompt "Kernel performance counters (old config option)" if [HAVE_PERF_EVENTS]
   depends on [HAVE_PERF_EVENTS]
   inherited [HAVE_PERF_EVENTS]
  }
  config DEBUG_PERF_USE_VMALLOC boolean {
   default [n] if [PERF_EVENTS && DEBUG_KERNEL]
   prompt "Debug: use vmalloc to back perf mmap() buffers" if [PERF_EVENTS && DEBUG_KERNEL]
   depends on [PERF_EVENTS && DEBUG_KERNEL]
   select PERF_USE_VMALLOC if [PERF_EVENTS && DEBUG_KERNEL]
   inherited [PERF_EVENTS && DEBUG_KERNEL]
  }
 }
 config VM_EVENT_COUNTERS boolean {
  default [y] if []
  prompt "Enable VM event counters for /proc/vmstat" if [EMBEDDED]
 }
 config PCI_QUIRKS boolean {
  default [y] if [PCI]
  prompt "Enable PCI quirk workarounds" if [PCI && EMBEDDED]
  depends on [PCI]
  inherited [PCI]
 }
 config SLUB_DEBUG boolean {
  default [y] if [SLUB && SYSFS]
  prompt "Enable SLUB debugging support" if [SLUB && SYSFS && EMBEDDED]
  depends on [SLUB && SYSFS]
  inherited [SLUB && SYSFS]
 }
 config COMPAT_BRK boolean {
  prompt "Disable heap randomization" if []
  default [y] if []
 }
 choice boolean {
  prompt "Choose SLAB allocator" if []
  default [SLUB] if []
  config SLAB boolean {
   prompt "SLAB" if [<choice>]
   inherited [<choice>]
  }
  config SLUB boolean {
   prompt "SLUB (Unqueued Allocator)" if [<choice>]
   inherited [<choice>]
  }
  config SLOB boolean {
   depends on [EMBEDDED]
   prompt "SLOB (Simple Allocator)" if [<choice> && EMBEDDED]
   inherited [<choice> && EMBEDDED]
  }
 }
 config MMAP_ALLOW_UNINITIALIZED boolean {
  prompt "Allow mmapped anonymous memory to be uninitialized" if [EMBEDDED && !MMU]
  depends on [EMBEDDED && !MMU]
  default [n] if [EMBEDDED && !MMU]
  inherited [EMBEDDED && !MMU]
 }
 config PROFILING boolean {
  prompt "Profiling support (EXPERIMENTAL)" if []
  prompt "Kernel profiling support" if []
 }
 config TRACEPOINTS boolean {
 }
 config OPROFILE tristate {
  prompt "OProfile system profiling (EXPERIMENTAL)" if [PROFILING && HAVE_OPROFILE]
  depends on [PROFILING]
  depends on [HAVE_OPROFILE]
  select RING_BUFFER if [PROFILING && HAVE_OPROFILE]
  select RING_BUFFER_ALLOW_SWAP if [PROFILING && HAVE_OPROFILE]
  inherited [PROFILING && HAVE_OPROFILE]
  config OPROFILE_IBS boolean {
   prompt "OProfile AMD IBS support (EXPERIMENTAL)" if [OPROFILE && SMP && X86]
   default [n] if [OPROFILE && SMP && X86]
   depends on [OPROFILE && SMP && X86]
   inherited [OPROFILE && SMP && X86]
  }
  config OPROFILE_EVENT_MULTIPLEX boolean {
   prompt "OProfile multiplexing support (EXPERIMENTAL)" if [OPROFILE && X86]
   default [n] if [OPROFILE && X86]
   depends on [OPROFILE && X86]
   inherited [OPROFILE && X86]
  }
 }
 config HAVE_OPROFILE boolean {
 }
 config KPROBES boolean {
  prompt "Kprobes" if [KALLSYMS && MODULES && HAVE_KPROBES]
  depends on [KALLSYMS && MODULES]
  depends on [HAVE_KPROBES]
  inherited [KALLSYMS && MODULES && HAVE_KPROBES]
 }
 config HAVE_EFFICIENT_UNALIGNED_ACCESS boolean {
 }
 config HAVE_SYSCALL_WRAPPERS boolean {
 }
 config KRETPROBES boolean {
  default [y] if [KPROBES && HAVE_KRETPROBES]
  depends on [KPROBES && HAVE_KRETPROBES]
  inherited [KPROBES && HAVE_KRETPROBES]
 }
 config USER_RETURN_NOTIFIER boolean {
  depends on [HAVE_USER_RETURN_NOTIFIER]
  inherited [HAVE_USER_RETURN_NOTIFIER]
 }
 config HAVE_IOREMAP_PROT boolean {
 }
 config HAVE_KPROBES boolean {
 }
 config HAVE_KRETPROBES boolean {
 }
 config HAVE_ARCH_TRACEHOOK boolean {
 }
 config HAVE_DMA_ATTRS boolean {
 }
 config USE_GENERIC_SMP_HELPERS boolean {
 }
 config HAVE_CLK boolean {
 }
 config HAVE_DMA_API_DEBUG boolean {
 }
 config HAVE_DEFAULT_NO_SPIN_MUTEXES boolean {
 }
 config HAVE_HW_BREAKPOINT boolean {
  depends on [PERF_EVENTS]
  inherited [PERF_EVENTS]
 }
 config HAVE_USER_RETURN_NOTIFIER boolean {
 }
 menu "GCOV-based kernel profiling" {
  config GCOV_KERNEL boolean {
   prompt "Enable gcov-based kernel profiling" if [DEBUG_FS && CONSTRUCTORS]
   depends on [DEBUG_FS && CONSTRUCTORS]
   default [n] if [DEBUG_FS && CONSTRUCTORS]
   inherited [DEBUG_FS && CONSTRUCTORS]
   config GCOV_PROFILE_ALL boolean {
    prompt "Profile entire Kernel" if [GCOV_KERNEL && (S390 || X86 || PPC && EXPERIMENTAL || MICROBLAZE)]
    depends on [GCOV_KERNEL]
    depends on [S390 || X86 || PPC && EXPERIMENTAL || MICROBLAZE]
    default [n] if [GCOV_KERNEL && (S390 || X86 || PPC && EXPERIMENTAL || MICROBLAZE)]
    inherited [GCOV_KERNEL && (S390 || X86 || PPC && EXPERIMENTAL || MICROBLAZE)]
   }
  }
 }
 config SLOW_WORK boolean {
  default [n] if []
 }
 config SLOW_WORK_DEBUG boolean {
  prompt "Slow work debugging through debugfs" if [SLOW_WORK && DEBUG_FS]
  default [n] if [SLOW_WORK && DEBUG_FS]
  depends on [SLOW_WORK && DEBUG_FS]
  inherited [SLOW_WORK && DEBUG_FS]
 }
}
config HAVE_GENERIC_DMA_COHERENT boolean {
 default [n] if []
}
config SLABINFO boolean {
 depends on [PROC_FS]
 depends on [SLAB || SLUB_DEBUG]
 default [y] if [PROC_FS && (SLAB || SLUB_DEBUG)]
 inherited [PROC_FS && (SLAB || SLUB_DEBUG)]
}
config RT_MUTEXES boolean {
}
config BASE_SMALL integer {
 default [0] if [BASE_FULL]
 default [1] if [!BASE_FULL]
}
menuconfig MODULES boolean {
 prompt "Enable loadable module support" if []
 if [MODULES] {
  config MODULE_FORCE_LOAD boolean {
   prompt "Forced module loading" if [MODULES]
   default [n] if [MODULES]
   inherited [MODULES]
  }
  config MODULE_UNLOAD boolean {
   prompt "Module unloading" if [MODULES]
   inherited [MODULES]
   config MODULE_FORCE_UNLOAD boolean {
    prompt "Forced module unloading" if [MODULES && MODULE_UNLOAD && EXPERIMENTAL]
    depends on [MODULE_UNLOAD && EXPERIMENTAL]
    inherited [MODULES && MODULE_UNLOAD && EXPERIMENTAL]
   }
  }
  config MODVERSIONS boolean {
   prompt "Module versioning support" if [MODULES]
   inherited [MODULES]
  }
  config MODULE_SRCVERSION_ALL boolean {
   prompt "Source checksum for all modules" if [MODULES]
   inherited [MODULES]
  }
 }
}
config INIT_ALL_POSSIBLE boolean {
}
config STOP_MACHINE boolean {
 default [y] if [SMP && MODULE_UNLOAD || HOTPLUG_CPU]
 depends on [SMP && MODULE_UNLOAD || HOTPLUG_CPU]
 inherited [SMP && MODULE_UNLOAD || HOTPLUG_CPU]
}
menuconfig BLOCK boolean {
 prompt "Enable the block layer" if [EMBEDDED]
 default [y] if []
 if [BLOCK] {
  config LBDAF boolean {
   prompt "Support for large (2TB+) block devices and files" if [BLOCK && !64BIT]
   depends on [!64BIT]
   default [y] if [BLOCK && !64BIT]
   inherited [BLOCK && !64BIT]
  }
  config BLK_DEV_BSG boolean {
   prompt "Block layer SG support v4" if [BLOCK]
   default [y] if [BLOCK]
   inherited [BLOCK]
  }
  config BLK_DEV_INTEGRITY boolean {
   prompt "Block layer data integrity support" if [BLOCK]
   inherited [BLOCK]
  }
  config BLK_CGROUP boolean {
   depends on [CGROUPS]
   default [n] if [BLOCK && CGROUPS]
   inherited [BLOCK && CGROUPS]
  }
  config DEBUG_BLK_CGROUP boolean {
   depends on [BLK_CGROUP]
   default [n] if [BLOCK && BLK_CGROUP]
   inherited [BLOCK && BLK_CGROUP]
  }
 }
 config BLOCK_COMPAT boolean {
  depends on [BLOCK && COMPAT]
  default [y] if [BLOCK && COMPAT]
  inherited [BLOCK && COMPAT]
 }
 if [BLOCK] {
  menu "IO Schedulers" {
   depends on [BLOCK]
   config IOSCHED_NOOP boolean {
    default [y] if [BLOCK]
    inherited [BLOCK]
   }
   config IOSCHED_DEADLINE tristate {
    prompt "Deadline I/O scheduler" if [BLOCK]
    default [y] if [BLOCK]
    inherited [BLOCK]
   }
   config IOSCHED_CFQ tristate {
    prompt "CFQ I/O scheduler" if [BLOCK]
    default [y] if [BLOCK]
    inherited [BLOCK]
    config CFQ_GROUP_IOSCHED boolean {
     prompt "CFQ Group Scheduling support" if [BLOCK && IOSCHED_CFQ && CGROUPS]
     depends on [IOSCHED_CFQ && CGROUPS]
     select BLK_CGROUP if [BLOCK && IOSCHED_CFQ && CGROUPS]
     default [n] if [BLOCK && IOSCHED_CFQ && CGROUPS]
     inherited [BLOCK && IOSCHED_CFQ && CGROUPS]
     config DEBUG_CFQ_IOSCHED boolean {
      prompt "Debug CFQ Scheduling" if [BLOCK && CFQ_GROUP_IOSCHED]
      depends on [CFQ_GROUP_IOSCHED]
      select DEBUG_BLK_CGROUP if [BLOCK && CFQ_GROUP_IOSCHED]
      default [n] if [BLOCK && CFQ_GROUP_IOSCHED]
      inherited [BLOCK && CFQ_GROUP_IOSCHED]
     }
    }
   }
   choice boolean {
    prompt "Default I/O scheduler" if [BLOCK]
    default [DEFAULT_CFQ] if [BLOCK]
    config DEFAULT_DEADLINE boolean {
     prompt "Deadline" if [<choice> && IOSCHED_DEADLINE="y"]
     inherited [<choice>]
    }
    config DEFAULT_CFQ boolean {
     prompt "CFQ" if [<choice> && IOSCHED_CFQ="y"]
     inherited [<choice>]
    }
    config DEFAULT_NOOP boolean {
     prompt "No-op" if [<choice>]
     inherited [<choice>]
    }
   }
   config DEFAULT_IOSCHED string {
    default ["deadline"] if [BLOCK && DEFAULT_DEADLINE]
    default ["cfq"] if [BLOCK && DEFAULT_CFQ]
    default ["noop"] if [BLOCK && DEFAULT_NOOP]
    inherited [BLOCK]
   }
  }
 }
}
config PREEMPT_NOTIFIERS boolean {
}
config ARCH_INLINE_SPIN_TRYLOCK boolean {
}
config ARCH_INLINE_SPIN_TRYLOCK_BH boolean {
}
config ARCH_INLINE_SPIN_LOCK boolean {
}
config ARCH_INLINE_SPIN_LOCK_BH boolean {
}
config ARCH_INLINE_SPIN_LOCK_IRQ boolean {
}
config ARCH_INLINE_SPIN_LOCK_IRQSAVE boolean {
}
config ARCH_INLINE_SPIN_UNLOCK boolean {
}
config ARCH_INLINE_SPIN_UNLOCK_BH boolean {
}
config ARCH_INLINE_SPIN_UNLOCK_IRQ boolean {
}
config ARCH_INLINE_SPIN_UNLOCK_IRQRESTORE boolean {
}
config ARCH_INLINE_READ_TRYLOCK boolean {
}
config ARCH_INLINE_READ_LOCK boolean {
}
config ARCH_INLINE_READ_LOCK_BH boolean {
}
config ARCH_INLINE_READ_LOCK_IRQ boolean {
}
config ARCH_INLINE_READ_LOCK_IRQSAVE boolean {
}
config ARCH_INLINE_READ_UNLOCK boolean {
}
config ARCH_INLINE_READ_UNLOCK_BH boolean {
}
config ARCH_INLINE_READ_UNLOCK_IRQ boolean {
}
config ARCH_INLINE_READ_UNLOCK_IRQRESTORE boolean {
}
config ARCH_INLINE_WRITE_TRYLOCK boolean {
}
config ARCH_INLINE_WRITE_LOCK boolean {
}
config ARCH_INLINE_WRITE_LOCK_BH boolean {
}
config ARCH_INLINE_WRITE_LOCK_IRQ boolean {
}
config ARCH_INLINE_WRITE_LOCK_IRQSAVE boolean {
}
config ARCH_INLINE_WRITE_UNLOCK boolean {
}
config ARCH_INLINE_WRITE_UNLOCK_BH boolean {
}
config ARCH_INLINE_WRITE_UNLOCK_IRQ boolean {
}
config ARCH_INLINE_WRITE_UNLOCK_IRQRESTORE boolean {
}
config INLINE_SPIN_TRYLOCK boolean {
 default [!DEBUG_SPINLOCK && ARCH_INLINE_SPIN_TRYLOCK] if []
}
config INLINE_SPIN_TRYLOCK_BH boolean {
 default [!DEBUG_SPINLOCK && ARCH_INLINE_SPIN_TRYLOCK_BH] if []
}
config INLINE_SPIN_LOCK boolean {
 default [!DEBUG_SPINLOCK && !GENERIC_LOCKBREAK && ARCH_INLINE_SPIN_LOCK] if []
}
config INLINE_SPIN_LOCK_BH boolean {
 default [!DEBUG_SPINLOCK && !GENERIC_LOCKBREAK && ARCH_INLINE_SPIN_LOCK_BH] if []
}
config INLINE_SPIN_LOCK_IRQ boolean {
 default [!DEBUG_SPINLOCK && !GENERIC_LOCKBREAK && ARCH_INLINE_SPIN_LOCK_IRQ] if []
}
config INLINE_SPIN_LOCK_IRQSAVE boolean {
 default [!DEBUG_SPINLOCK && !GENERIC_LOCKBREAK && ARCH_INLINE_SPIN_LOCK_IRQSAVE] if []
}
config INLINE_SPIN_UNLOCK boolean {
 default [!DEBUG_SPINLOCK && (!PREEMPT || ARCH_INLINE_SPIN_UNLOCK)] if []
}
config INLINE_SPIN_UNLOCK_BH boolean {
 default [!DEBUG_SPINLOCK && ARCH_INLINE_SPIN_UNLOCK_BH] if []
}
config INLINE_SPIN_UNLOCK_IRQ boolean {
 default [!DEBUG_SPINLOCK && (!PREEMPT || ARCH_INLINE_SPIN_UNLOCK_BH)] if []
}
config INLINE_SPIN_UNLOCK_IRQRESTORE boolean {
 default [!DEBUG_SPINLOCK && ARCH_INLINE_SPIN_UNLOCK_IRQRESTORE] if []
}
config INLINE_READ_TRYLOCK boolean {
 default [!DEBUG_SPINLOCK && ARCH_INLINE_READ_TRYLOCK] if []
}
config INLINE_READ_LOCK boolean {
 default [!DEBUG_SPINLOCK && !GENERIC_LOCKBREAK && ARCH_INLINE_READ_LOCK] if []
}
config INLINE_READ_LOCK_BH boolean {
 default [!DEBUG_SPINLOCK && !GENERIC_LOCKBREAK && ARCH_INLINE_READ_LOCK_BH] if []
}
config INLINE_READ_LOCK_IRQ boolean {
 default [!DEBUG_SPINLOCK && !GENERIC_LOCKBREAK && ARCH_INLINE_READ_LOCK_IRQ] if []
}
config INLINE_READ_LOCK_IRQSAVE boolean {
 default [!DEBUG_SPINLOCK && !GENERIC_LOCKBREAK && ARCH_INLINE_READ_LOCK_IRQSAVE] if []
}
config INLINE_READ_UNLOCK boolean {
 default [!DEBUG_SPINLOCK && (!PREEMPT || ARCH_INLINE_READ_UNLOCK)] if []
}
config INLINE_READ_UNLOCK_BH boolean {
 default [!DEBUG_SPINLOCK && ARCH_INLINE_READ_UNLOCK_BH] if []
}
config INLINE_READ_UNLOCK_IRQ boolean {
 default [!DEBUG_SPINLOCK && (!PREEMPT || ARCH_INLINE_READ_UNLOCK_BH)] if []
}
config INLINE_READ_UNLOCK_IRQRESTORE boolean {
 default [!DEBUG_SPINLOCK && ARCH_INLINE_READ_UNLOCK_IRQRESTORE] if []
}
config INLINE_WRITE_TRYLOCK boolean {
 default [!DEBUG_SPINLOCK && ARCH_INLINE_WRITE_TRYLOCK] if []
}
config INLINE_WRITE_LOCK boolean {
 default [!DEBUG_SPINLOCK && !GENERIC_LOCKBREAK && ARCH_INLINE_WRITE_LOCK] if []
}
config INLINE_WRITE_LOCK_BH boolean {
 default [!DEBUG_SPINLOCK && !GENERIC_LOCKBREAK && ARCH_INLINE_WRITE_LOCK_BH] if []
}
config INLINE_WRITE_LOCK_IRQ boolean {
 default [!DEBUG_SPINLOCK && !GENERIC_LOCKBREAK && ARCH_INLINE_WRITE_LOCK_IRQ] if []
}
config INLINE_WRITE_LOCK_IRQSAVE boolean {
 default [!DEBUG_SPINLOCK && !GENERIC_LOCKBREAK && ARCH_INLINE_WRITE_LOCK_IRQSAVE] if []
}
config INLINE_WRITE_UNLOCK boolean {
 default [!DEBUG_SPINLOCK && (!PREEMPT || ARCH_INLINE_WRITE_UNLOCK)] if []
}
config INLINE_WRITE_UNLOCK_BH boolean {
 default [!DEBUG_SPINLOCK && ARCH_INLINE_WRITE_UNLOCK_BH] if []
}
config INLINE_WRITE_UNLOCK_IRQ boolean {
 default [!DEBUG_SPINLOCK && (!PREEMPT || ARCH_INLINE_WRITE_UNLOCK_BH)] if []
}
config INLINE_WRITE_UNLOCK_IRQRESTORE boolean {
 default [!DEBUG_SPINLOCK && ARCH_INLINE_WRITE_UNLOCK_IRQRESTORE] if []
}
config MUTEX_SPIN_ON_OWNER boolean {
 default [SMP && !DEBUG_MUTEXES && !HAVE_DEFAULT_NO_SPIN_MUTEXES] if []
}
config FREEZER boolean {
 default [PM_SLEEP || CGROUP_FREEZER] if []
}
menu "General setup" {
 config BINFMT_ELF boolean {
  prompt "Kernel support for ELF binaries" if [MMU && (BROKEN || !FRV)]
  depends on [MMU && (BROKEN || !FRV)]
  default [y] if [MMU && (BROKEN || !FRV)]
  inherited [MMU && (BROKEN || !FRV)]
  config COMPAT_BINFMT_ELF boolean {
   depends on [COMPAT && BINFMT_ELF]
   inherited [COMPAT && BINFMT_ELF]
  }
 }
 config BINFMT_ELF_FDPIC boolean {
  prompt "Kernel support for FDPIC ELF binaries" if [FRV || BLACKFIN || SUPERH32 && !MMU]
  default [y] if [FRV || BLACKFIN || SUPERH32 && !MMU]
  depends on [FRV || BLACKFIN || SUPERH32 && !MMU]
  inherited [FRV || BLACKFIN || SUPERH32 && !MMU]
 }
 config CORE_DUMP_DEFAULT_ELF_HEADERS boolean {
  prompt "Write ELF core dumps with partial segments" if [BINFMT_ELF && ELF_CORE]
  default [n] if [BINFMT_ELF && ELF_CORE]
  depends on [BINFMT_ELF && ELF_CORE]
  inherited [BINFMT_ELF && ELF_CORE]
 }
 config BINFMT_FLAT boolean {
  prompt "Kernel support for flat binaries" if [!MMU && (!FRV || BROKEN)]
  depends on [!MMU && (!FRV || BROKEN)]
  inherited [!MMU && (!FRV || BROKEN)]
  config BINFMT_ZFLAT boolean {
   prompt "Enable ZFLAT support" if [BINFMT_FLAT]
   depends on [BINFMT_FLAT]
   select ZLIB_INFLATE if [BINFMT_FLAT]
   inherited [BINFMT_FLAT]
  }
  config BINFMT_SHARED_FLAT boolean {
   prompt "Enable shared FLAT support" if [BINFMT_FLAT]
   depends on [BINFMT_FLAT]
   inherited [BINFMT_FLAT]
  }
 }
 config HAVE_AOUT boolean {
  default [n] if []
 }
 config BINFMT_AOUT tristate {
  prompt "Kernel support for a.out and ECOFF binaries" if [HAVE_AOUT]
  depends on [HAVE_AOUT]
  inherited [HAVE_AOUT]
  config OSF4_COMPAT boolean {
   prompt "OSF/1 v4 readv/writev compatibility" if [ALPHA && BINFMT_AOUT]
   depends on [ALPHA && BINFMT_AOUT]
   inherited [ALPHA && BINFMT_AOUT]
  }
 }
 config BINFMT_EM86 tristate {
  prompt "Kernel support for Linux/Intel ELF binaries" if [ALPHA]
  depends on [ALPHA]
  inherited [ALPHA]
 }
 config BINFMT_SOM tristate {
  prompt "Kernel support for SOM binaries" if [PARISC && HPUX]
  depends on [PARISC && HPUX]
  inherited [PARISC && HPUX]
 }
 config BINFMT_MISC tristate {
  prompt "Kernel support for MISC binaries" if []
 }
 config GENERIC_HARDIRQS boolean {
  default [y] if []
 }
 config ETRAX_CMDLINE string {
  prompt "Kernel command line" if []
  default ["root=/dev/mtdblock3"] if []
 }
 config ETRAX_WATCHDOG boolean {
  prompt "Enable ETRAX watchdog" if []
  config ETRAX_WATCHDOG_NICE_DOGGY boolean {
   prompt "Disable watchdog during Oops printouts" if [ETRAX_WATCHDOG]
   depends on [ETRAX_WATCHDOG]
   inherited [ETRAX_WATCHDOG]
  }
 }
 config ETRAX_FAST_TIMER boolean {
  prompt "Enable ETRAX fast timer API" if []
 }
 config ETRAX_KMALLOCED_MODULES boolean {
  prompt "Enable module allocation with kmalloc" if []
 }
 config OOM_REBOOT boolean {
  prompt "Enable reboot at out of memory" if []
 }
 choice boolean {
  prompt "Preemption Model" if []
  default [PREEMPT_NONE] if []
  config PREEMPT_NONE boolean {
   prompt "No Forced Preemption (Server)" if [<choice>]
   inherited [<choice>]
  }
  config PREEMPT_VOLUNTARY boolean {
   prompt "Voluntary Kernel Preemption (Desktop)" if [<choice>]
   inherited [<choice>]
  }
  config PREEMPT boolean {
   prompt "Preemptible Kernel (Low-Latency Desktop)" if [<choice>]
   inherited [<choice>]
  }
 }
 config SELECT_MEMORY_MODEL boolean {
  default [y] if [EXPERIMENTAL || ARCH_SELECT_MEMORY_MODEL]
  depends on [EXPERIMENTAL || ARCH_SELECT_MEMORY_MODEL]
  inherited [EXPERIMENTAL || ARCH_SELECT_MEMORY_MODEL]
 }
 choice boolean {
  prompt "Memory model" if [SELECT_MEMORY_MODEL]
  depends on [SELECT_MEMORY_MODEL]
  default [DISCONTIGMEM_MANUAL] if [SELECT_MEMORY_MODEL && ARCH_DISCONTIGMEM_DEFAULT]
  default [SPARSEMEM_MANUAL] if [SELECT_MEMORY_MODEL && ARCH_SPARSEMEM_DEFAULT]
  default [FLATMEM_MANUAL] if [SELECT_MEMORY_MODEL]
  config FLATMEM_MANUAL boolean {
   prompt "Flat Memory" if [<choice> && (!ARCH_DISCONTIGMEM_ENABLE && !ARCH_SPARSEMEM_ENABLE || ARCH_FLATMEM_ENABLE)]
   depends on [!(ARCH_DISCONTIGMEM_ENABLE || ARCH_SPARSEMEM_ENABLE) || ARCH_FLATMEM_ENABLE]
   inherited [<choice> && (!ARCH_DISCONTIGMEM_ENABLE && !ARCH_SPARSEMEM_ENABLE || ARCH_FLATMEM_ENABLE)]
  }
  config DISCONTIGMEM_MANUAL boolean {
   prompt "Discontiguous Memory" if [<choice> && ARCH_DISCONTIGMEM_ENABLE]
   depends on [ARCH_DISCONTIGMEM_ENABLE]
   inherited [<choice> && ARCH_DISCONTIGMEM_ENABLE]
  }
  config SPARSEMEM_MANUAL boolean {
   prompt "Sparse Memory" if [<choice> && ARCH_SPARSEMEM_ENABLE]
   depends on [ARCH_SPARSEMEM_ENABLE]
   inherited [<choice> && ARCH_SPARSEMEM_ENABLE]
  }
 }
 config DISCONTIGMEM boolean {
  default [y] if [!SELECT_MEMORY_MODEL && ARCH_DISCONTIGMEM_ENABLE || DISCONTIGMEM_MANUAL]
  depends on [!SELECT_MEMORY_MODEL && ARCH_DISCONTIGMEM_ENABLE || DISCONTIGMEM_MANUAL]
  inherited [!SELECT_MEMORY_MODEL && ARCH_DISCONTIGMEM_ENABLE || DISCONTIGMEM_MANUAL]
 }
 config SPARSEMEM boolean {
  default [y] if [!SELECT_MEMORY_MODEL && ARCH_SPARSEMEM_ENABLE || SPARSEMEM_MANUAL]
  depends on [!SELECT_MEMORY_MODEL && ARCH_SPARSEMEM_ENABLE || SPARSEMEM_MANUAL]
  inherited [!SELECT_MEMORY_MODEL && ARCH_SPARSEMEM_ENABLE || SPARSEMEM_MANUAL]
 }
 config FLATMEM boolean {
  default [y] if [!DISCONTIGMEM && !SPARSEMEM || FLATMEM_MANUAL]
  depends on [!DISCONTIGMEM && !SPARSEMEM || FLATMEM_MANUAL]
  inherited [!DISCONTIGMEM && !SPARSEMEM || FLATMEM_MANUAL]
 }
 config FLAT_NODE_MEM_MAP boolean {
  default [y] if [!SPARSEMEM]
  depends on [!SPARSEMEM]
  inherited [!SPARSEMEM]
 }
 config NEED_MULTIPLE_NODES boolean {
  default [y] if [DISCONTIGMEM || NUMA]
  depends on [DISCONTIGMEM || NUMA]
  inherited [DISCONTIGMEM || NUMA]
 }
 config HAVE_MEMORY_PRESENT boolean {
  default [y] if [ARCH_HAVE_MEMORY_PRESENT || SPARSEMEM]
  depends on [ARCH_HAVE_MEMORY_PRESENT || SPARSEMEM]
  inherited [ARCH_HAVE_MEMORY_PRESENT || SPARSEMEM]
 }
 config SPARSEMEM_STATIC boolean {
 }
 config SPARSEMEM_EXTREME boolean {
  default [y] if [SPARSEMEM && !SPARSEMEM_STATIC]
  depends on [SPARSEMEM && !SPARSEMEM_STATIC]
  inherited [SPARSEMEM && !SPARSEMEM_STATIC]
 }
 config SPARSEMEM_VMEMMAP_ENABLE boolean {
 }
 config SPARSEMEM_VMEMMAP boolean {
  prompt "Sparse Memory virtual memmap" if [SPARSEMEM && SPARSEMEM_VMEMMAP_ENABLE]
  depends on [SPARSEMEM && SPARSEMEM_VMEMMAP_ENABLE]
  default [y] if [SPARSEMEM && SPARSEMEM_VMEMMAP_ENABLE]
  inherited [SPARSEMEM && SPARSEMEM_VMEMMAP_ENABLE]
 }
 config MEMORY_HOTPLUG boolean {
  prompt "Allow for memory hot-add" if [(SPARSEMEM || X86_64_ACPI_NUMA) && HOTPLUG && ARCH_ENABLE_MEMORY_HOTPLUG && (IA64 || X86 || PPC_BOOK3S_64 || SUPERH || S390)]
  depends on [SPARSEMEM || X86_64_ACPI_NUMA]
  depends on [HOTPLUG && ARCH_ENABLE_MEMORY_HOTPLUG]
  depends on [IA64 || X86 || PPC_BOOK3S_64 || SUPERH || S390]
  inherited [(SPARSEMEM || X86_64_ACPI_NUMA) && HOTPLUG && ARCH_ENABLE_MEMORY_HOTPLUG && (IA64 || X86 || PPC_BOOK3S_64 || SUPERH || S390)]
  config MEMORY_HOTPLUG_SPARSE boolean {
   default [y] if [SPARSEMEM && MEMORY_HOTPLUG]
   depends on [SPARSEMEM && MEMORY_HOTPLUG]
   inherited [SPARSEMEM && MEMORY_HOTPLUG]
  }
  config MEMORY_HOTREMOVE boolean {
   prompt "Allow for memory hot remove" if [MEMORY_HOTPLUG && ARCH_ENABLE_MEMORY_HOTREMOVE && MIGRATION]
   depends on [MEMORY_HOTPLUG && ARCH_ENABLE_MEMORY_HOTREMOVE]
   depends on [MIGRATION]
   inherited [MEMORY_HOTPLUG && ARCH_ENABLE_MEMORY_HOTREMOVE && MIGRATION]
  }
 }
 config PAGEFLAGS_EXTENDED boolean {
  default [y] if [64BIT || SPARSEMEM_VMEMMAP || !SPARSEMEM]
  depends on [64BIT || SPARSEMEM_VMEMMAP || !SPARSEMEM]
  inherited [64BIT || SPARSEMEM_VMEMMAP || !SPARSEMEM]
 }
 config SPLIT_PTLOCK_CPUS integer {
  default [999999] if [ARM && !CPU_CACHE_VIPT]
  default [999999] if [PARISC && !PA20]
  default [999999] if [DEBUG_SPINLOCK || DEBUG_LOCK_ALLOC]
  default [4] if []
 }
 config MIGRATION boolean {
  prompt "Page migration" if [NUMA || ARCH_ENABLE_MEMORY_HOTREMOVE]
  default [y] if [NUMA || ARCH_ENABLE_MEMORY_HOTREMOVE]
  depends on [NUMA || ARCH_ENABLE_MEMORY_HOTREMOVE]
  inherited [NUMA || ARCH_ENABLE_MEMORY_HOTREMOVE]
 }
 config PHYS_ADDR_T_64BIT boolean {
  default [64BIT || ARCH_PHYS_ADDR_T_64BIT] if []
 }
 config ZONE_DMA_FLAG integer {
  default [0] if [!ZONE_DMA]
  default [1] if []
 }
 config BOUNCE boolean {
  default [y] if [BLOCK && MMU && (ZONE_DMA || HIGHMEM)]
  depends on [BLOCK && MMU && (ZONE_DMA || HIGHMEM)]
  inherited [BLOCK && MMU && (ZONE_DMA || HIGHMEM)]
 }
 config NR_QUICK integer {
  depends on [QUICKLIST]
  default [2] if [QUICKLIST && (SUPERH || AVR32)]
  default [1] if [QUICKLIST]
  inherited [QUICKLIST]
 }
 config VIRT_TO_BUS boolean {
  default [y] if [!ARCH_NO_VIRT_TO_BUS]
  depends on [!ARCH_NO_VIRT_TO_BUS]
  inherited [!ARCH_NO_VIRT_TO_BUS]
 }
 config MMU_NOTIFIER boolean {
 }
 config KSM boolean {
  prompt "Enable KSM for page merging" if [MMU]
  depends on [MMU]
  inherited [MMU]
 }
 config DEFAULT_MMAP_MIN_ADDR integer {
  prompt "Low address space to protect from user allocation" if [MMU]
  depends on [MMU]
  default [4096] if [MMU]
  inherited [MMU]
 }
 config ARCH_SUPPORTS_MEMORY_FAILURE boolean {
 }
 config MEMORY_FAILURE boolean {
  depends on [MMU]
  depends on [ARCH_SUPPORTS_MEMORY_FAILURE]
  prompt "Enable recovery from hardware memory errors" if [MMU && ARCH_SUPPORTS_MEMORY_FAILURE]
  inherited [MMU && ARCH_SUPPORTS_MEMORY_FAILURE]
  config HWPOISON_INJECT tristate {
   prompt "HWPoison pages injector" if [MEMORY_FAILURE && DEBUG_KERNEL && PROC_FS]
   depends on [MEMORY_FAILURE && DEBUG_KERNEL && PROC_FS]
   select PROC_PAGE_MONITOR if [MEMORY_FAILURE && DEBUG_KERNEL && PROC_FS]
   inherited [MEMORY_FAILURE && DEBUG_KERNEL && PROC_FS]
  }
 }
 config NOMMU_INITIAL_TRIM_EXCESS integer {
  prompt "Turn on mmap() excess space trimming before booting" if [!MMU]
  depends on [!MMU]
  default [1] if [!MMU]
  inherited [!MMU]
 }
}
menu "Hardware setup" {
 choice boolean {
  prompt "Processor type" if []
  default [ETRAX100LX] if []
  config ETRAX100LX boolean {
   prompt "ETRAX-100LX-v1" if [<choice>]
   inherited [<choice>]
  }
  config ETRAX100LX_V2 boolean {
   prompt "ETRAX-100LX-v2" if [<choice>]
   inherited [<choice>]
  }
  config SVINTO_SIM boolean {
   prompt "ETRAX-100LX-for-xsim-simulator" if [<choice>]
   inherited [<choice>]
  }
  config ETRAXFS boolean {
   prompt "ETRAX-FS-V32" if [<choice>]
   inherited [<choice>]
  }
  config CRIS_MACH_ARTPEC3 boolean {
   prompt "ARTPEC-3" if [<choice>]
   inherited [<choice>]
  }
 }
 config ETRAX_VCS_SIM boolean {
  prompt "VCS Simulator" if []
 }
 config ETRAX_ARCH_V10 boolean {
  default [y] if [ETRAX100LX || ETRAX100LX_V2]
  default [n] if [!ETRAX100LX && !ETRAX100LX_V2]
 }
 config ETRAX_ARCH_V32 boolean {
  default [y] if [ETRAXFS || CRIS_MACH_ARTPEC3]
  default [n] if [!ETRAXFS && !CRIS_MACH_ARTPEC3]
 }
 config ETRAX_DRAM_SIZE integer {
  prompt "DRAM size (dec, in MB)" if []
  default [8] if []
 }
 config ETRAX_VMEM_SIZE integer {
  prompt "Video memory size (dec, in MB)" if [ETRAX_ARCH_V32 && !ETRAXFS]
  depends on [ETRAX_ARCH_V32 && !ETRAXFS]
  default [8] if [ETRAX_ARCH_V32 && !ETRAXFS]
  inherited [ETRAX_ARCH_V32 && !ETRAXFS]
 }
 config ETRAX_FLASH_BUSWIDTH integer {
  prompt "Buswidth of NOR flash in bytes" if []
  default [2] if []
 }
 config ETRAX_NANDFLASH_BUSWIDTH integer {
  prompt "Buswidth of NAND flash in bytes" if []
  default [1] if []
 }
 config ETRAX_FLASH1_SIZE integer {
  prompt "FLASH1 size (dec, in MB. 0 = Unknown)" if []
  default [0] if []
 }
 choice boolean {
  prompt "Product debug-port" if []
  default [ETRAX_DEBUG_PORT0] if []
  config ETRAX_DEBUG_PORT0 boolean {
   prompt "Serial-0" if [<choice>]
   inherited [<choice>]
  }
  config ETRAX_DEBUG_PORT1 boolean {
   prompt "Serial-1" if [<choice>]
   inherited [<choice>]
  }
  config ETRAX_DEBUG_PORT2 boolean {
   prompt "Serial-2" if [<choice>]
   inherited [<choice>]
  }
  config ETRAX_DEBUG_PORT3 boolean {
   prompt "Serial-3" if [<choice>]
   inherited [<choice>]
  }
  config ETRAX_DEBUG_PORT_NULL boolean {
   prompt "disabled" if [<choice>]
   inherited [<choice>]
  }
 }
 choice boolean {
  prompt "Kernel GDB port" if [ETRAX_KGDB]
  depends on [ETRAX_KGDB]
  default [ETRAX_KGDB_PORT0] if [ETRAX_KGDB]
  config ETRAX_KGDB_PORT0 boolean {
   prompt "Serial-0" if [<choice>]
   inherited [<choice>]
  }
  config ETRAX_KGDB_PORT1 boolean {
   prompt "Serial-1" if [<choice>]
   inherited [<choice>]
  }
  config ETRAX_KGDB_PORT2 boolean {
   prompt "Serial-2" if [<choice>]
   inherited [<choice>]
  }
  config ETRAX_KGDB_PORT3 boolean {
   prompt "Serial-3" if [<choice>]
   inherited [<choice>]
  }
 }
 if [ETRAX_ARCH_V10] {
  menu "CRIS v10 options" {
   depends on [ETRAX_ARCH_V10]
   config CRIS_LOW_MAP boolean {
    depends on [ETRAX_ARCH_V10 && ETRAX100LX]
    default [y] if [ETRAX_ARCH_V10 && ETRAX100LX]
    inherited [ETRAX_ARCH_V10 && ETRAX100LX]
   }
   config ETRAX_DRAM_VIRTUAL_BASE hex {
    depends on [ETRAX_ARCH_V10]
    default [c0000000] if [ETRAX_ARCH_V10 && !ETRAX100LX]
    default [60000000] if [ETRAX_ARCH_V10 && ETRAX100LX]
    depends on [ETRAX_ARCH_V32]
    default [c0000000] if [ETRAXFS && ETRAX_ARCH_V32]
    default [c0000000] if [ETRAX_ARCH_V32 && CRIS_MACH_ARTPEC3]
    depends on [ETRAX_ARCH_V32]
    default [c0000000] if [ETRAX_ARCH_V32]
    inherited [ETRAX_ARCH_V10]
   }
   choice boolean {
    prompt "Product LED port" if [ETRAX_ARCH_V10]
    depends on [ETRAX_ARCH_V10]
    default [ETRAX_PA_LEDS] if [ETRAX_ARCH_V10]
    config ETRAX_PA_LEDS boolean {
     prompt "Port-PA-LEDs" if [<choice>]
     inherited [<choice>]
    }
    config ETRAX_PB_LEDS boolean {
     prompt "Port-PB-LEDs" if [<choice>]
     inherited [<choice>]
    }
    config ETRAX_CSP0_LEDS boolean {
     prompt "Port-CSP0-LEDs" if [<choice>]
     inherited [<choice>]
    }
    config ETRAX_NO_LEDS boolean {
     prompt "None" if [<choice>]
     inherited [<choice>]
    }
   }
   config ETRAX_LED1G integer {
    prompt "First green LED bit" if [ETRAX_ARCH_V10 && !ETRAX_NO_LEDS]
    depends on [ETRAX_ARCH_V10 && !ETRAX_NO_LEDS]
    default [2] if [ETRAX_ARCH_V10 && !ETRAX_NO_LEDS]
    inherited [ETRAX_ARCH_V10 && !ETRAX_NO_LEDS]
   }
   config ETRAX_LED1R integer {
    prompt "First red LED bit" if [ETRAX_ARCH_V10 && !ETRAX_NO_LEDS]
    depends on [ETRAX_ARCH_V10 && !ETRAX_NO_LEDS]
    default [3] if [ETRAX_ARCH_V10 && !ETRAX_NO_LEDS]
    inherited [ETRAX_ARCH_V10 && !ETRAX_NO_LEDS]
   }
   config ETRAX_LED2G integer {
    prompt "Second green LED bit" if [ETRAX_ARCH_V10 && !ETRAX_NO_LEDS]
    depends on [ETRAX_ARCH_V10 && !ETRAX_NO_LEDS]
    default [4] if [ETRAX_ARCH_V10 && !ETRAX_NO_LEDS]
    inherited [ETRAX_ARCH_V10 && !ETRAX_NO_LEDS]
   }
   config ETRAX_LED2R integer {
    prompt "Second red LED bit" if [ETRAX_ARCH_V10 && !ETRAX_NO_LEDS]
    depends on [ETRAX_ARCH_V10 && !ETRAX_NO_LEDS]
    default [5] if [ETRAX_ARCH_V10 && !ETRAX_NO_LEDS]
    inherited [ETRAX_ARCH_V10 && !ETRAX_NO_LEDS]
   }
   config ETRAX_LED3G integer {
    prompt "Third green LED bit" if [ETRAX_ARCH_V10 && !ETRAX_NO_LEDS]
    depends on [ETRAX_ARCH_V10 && !ETRAX_NO_LEDS]
    default [2] if [ETRAX_ARCH_V10 && !ETRAX_NO_LEDS]
    inherited [ETRAX_ARCH_V10 && !ETRAX_NO_LEDS]
   }
   config ETRAX_LED3R integer {
    prompt "Third red LED bit" if [ETRAX_ARCH_V10 && !ETRAX_NO_LEDS]
    depends on [ETRAX_ARCH_V10 && !ETRAX_NO_LEDS]
    default [2] if [ETRAX_ARCH_V10 && !ETRAX_NO_LEDS]
    inherited [ETRAX_ARCH_V10 && !ETRAX_NO_LEDS]
   }
   config ETRAX_LED4R integer {
    prompt "Fourth red LED bit" if [ETRAX_ARCH_V10 && ETRAX_CSP0_LEDS]
    depends on [ETRAX_CSP0_LEDS]
    default [2] if [ETRAX_ARCH_V10 && ETRAX_CSP0_LEDS]
    inherited [ETRAX_ARCH_V10 && ETRAX_CSP0_LEDS]
   }
   config ETRAX_LED4G integer {
    prompt "Fourth green LED bit" if [ETRAX_ARCH_V10 && ETRAX_CSP0_LEDS]
    depends on [ETRAX_CSP0_LEDS]
    default [2] if [ETRAX_ARCH_V10 && ETRAX_CSP0_LEDS]
    inherited [ETRAX_ARCH_V10 && ETRAX_CSP0_LEDS]
   }
   config ETRAX_LED5R integer {
    prompt "Fifth red LED bit" if [ETRAX_ARCH_V10 && ETRAX_CSP0_LEDS]
    depends on [ETRAX_CSP0_LEDS]
    default [2] if [ETRAX_ARCH_V10 && ETRAX_CSP0_LEDS]
    inherited [ETRAX_ARCH_V10 && ETRAX_CSP0_LEDS]
   }
   config ETRAX_LED5G integer {
    prompt "Fifth green LED bit" if [ETRAX_ARCH_V10 && ETRAX_CSP0_LEDS]
    depends on [ETRAX_CSP0_LEDS]
    default [2] if [ETRAX_ARCH_V10 && ETRAX_CSP0_LEDS]
    inherited [ETRAX_ARCH_V10 && ETRAX_CSP0_LEDS]
   }
   config ETRAX_LED6R integer {
    prompt "Sixth red LED bit" if [ETRAX_ARCH_V10 && ETRAX_CSP0_LEDS]
    depends on [ETRAX_CSP0_LEDS]
    default [2] if [ETRAX_ARCH_V10 && ETRAX_CSP0_LEDS]
    inherited [ETRAX_ARCH_V10 && ETRAX_CSP0_LEDS]
   }
   config ETRAX_LED6G integer {
    prompt "Sixth green LED bit" if [ETRAX_ARCH_V10 && ETRAX_CSP0_LEDS]
    depends on [ETRAX_CSP0_LEDS]
    default [2] if [ETRAX_ARCH_V10 && ETRAX_CSP0_LEDS]
    inherited [ETRAX_ARCH_V10 && ETRAX_CSP0_LEDS]
   }
   config ETRAX_LED7R integer {
    prompt "Seventh red LED bit" if [ETRAX_ARCH_V10 && ETRAX_CSP0_LEDS]
    depends on [ETRAX_CSP0_LEDS]
    default [2] if [ETRAX_ARCH_V10 && ETRAX_CSP0_LEDS]
    inherited [ETRAX_ARCH_V10 && ETRAX_CSP0_LEDS]
   }
   config ETRAX_LED7G integer {
    prompt "Seventh green LED bit" if [ETRAX_ARCH_V10 && ETRAX_CSP0_LEDS]
    depends on [ETRAX_CSP0_LEDS]
    default [2] if [ETRAX_ARCH_V10 && ETRAX_CSP0_LEDS]
    inherited [ETRAX_ARCH_V10 && ETRAX_CSP0_LEDS]
   }
   config ETRAX_LED8Y integer {
    prompt "Eighth yellow LED bit" if [ETRAX_ARCH_V10 && ETRAX_CSP0_LEDS]
    depends on [ETRAX_CSP0_LEDS]
    default [2] if [ETRAX_ARCH_V10 && ETRAX_CSP0_LEDS]
    inherited [ETRAX_ARCH_V10 && ETRAX_CSP0_LEDS]
   }
   config ETRAX_LED9Y integer {
    prompt "Ninth yellow LED bit" if [ETRAX_ARCH_V10 && ETRAX_CSP0_LEDS]
    depends on [ETRAX_CSP0_LEDS]
    default [2] if [ETRAX_ARCH_V10 && ETRAX_CSP0_LEDS]
    inherited [ETRAX_ARCH_V10 && ETRAX_CSP0_LEDS]
   }
   config ETRAX_LED10Y integer {
    prompt "Tenth yellow LED bit" if [ETRAX_ARCH_V10 && ETRAX_CSP0_LEDS]
    depends on [ETRAX_CSP0_LEDS]
    default [2] if [ETRAX_ARCH_V10 && ETRAX_CSP0_LEDS]
    inherited [ETRAX_ARCH_V10 && ETRAX_CSP0_LEDS]
   }
   config ETRAX_LED11Y integer {
    prompt "Eleventh yellow LED bit" if [ETRAX_ARCH_V10 && ETRAX_CSP0_LEDS]
    depends on [ETRAX_CSP0_LEDS]
    default [2] if [ETRAX_ARCH_V10 && ETRAX_CSP0_LEDS]
    inherited [ETRAX_ARCH_V10 && ETRAX_CSP0_LEDS]
   }
   config ETRAX_LED12R integer {
    prompt "Twelfth red LED bit" if [ETRAX_ARCH_V10 && ETRAX_CSP0_LEDS]
    depends on [ETRAX_CSP0_LEDS]
    default [2] if [ETRAX_ARCH_V10 && ETRAX_CSP0_LEDS]
    inherited [ETRAX_ARCH_V10 && ETRAX_CSP0_LEDS]
   }
   choice boolean {
    prompt "Product rescue-port" if [ETRAX_ARCH_V10]
    depends on [ETRAX_ARCH_V10]
    default [ETRAX_RESCUE_SER0] if [ETRAX_ARCH_V10]
    config ETRAX_RESCUE_SER0 boolean {
     prompt "Serial-0" if [<choice>]
     inherited [<choice>]
    }
    config ETRAX_RESCUE_SER1 boolean {
     prompt "Serial-1" if [<choice>]
     inherited [<choice>]
    }
    config ETRAX_RESCUE_SER2 boolean {
     prompt "Serial-2" if [<choice>]
     inherited [<choice>]
    }
    config ETRAX_RESCUE_SER3 boolean {
     prompt "Serial-3" if [<choice>]
     inherited [<choice>]
    }
   }
   config ETRAX_DEF_R_WAITSTATES hex {
    prompt "R_WAITSTATES" if [ETRAX_ARCH_V10]
    depends on [ETRAX_ARCH_V10]
    default [95a6] if [ETRAX_ARCH_V10]
    inherited [ETRAX_ARCH_V10]
   }
   config ETRAX_DEF_R_BUS_CONFIG hex {
    prompt "R_BUS_CONFIG" if [ETRAX_ARCH_V10]
    depends on [ETRAX_ARCH_V10]
    default [104] if [ETRAX_ARCH_V10]
    inherited [ETRAX_ARCH_V10]
   }
   config ETRAX_SDRAM boolean {
    prompt "SDRAM support" if [ETRAX_ARCH_V10]
    depends on [ETRAX_ARCH_V10]
    inherited [ETRAX_ARCH_V10]
    config ETRAX_DEF_R_DRAM_CONFIG hex {
     prompt "R_DRAM_CONFIG" if [ETRAX_ARCH_V10 && !ETRAX_SDRAM]
     depends on [ETRAX_ARCH_V10 && !ETRAX_SDRAM]
     default [1a200040] if [ETRAX_ARCH_V10 && !ETRAX_SDRAM]
     inherited [ETRAX_ARCH_V10 && !ETRAX_SDRAM]
    }
    config ETRAX_DEF_R_DRAM_TIMING hex {
     prompt "R_DRAM_TIMING" if [ETRAX_ARCH_V10 && !ETRAX_SDRAM]
     depends on [ETRAX_ARCH_V10 && !ETRAX_SDRAM]
     default [5611] if [ETRAX_ARCH_V10 && !ETRAX_SDRAM]
     inherited [ETRAX_ARCH_V10 && !ETRAX_SDRAM]
    }
    config ETRAX_DEF_R_SDRAM_CONFIG hex {
     prompt "R_SDRAM_CONFIG" if [ETRAX_ARCH_V10 && ETRAX_SDRAM]
     depends on [ETRAX_ARCH_V10 && ETRAX_SDRAM]
     default [d2fa7878] if [ETRAX_ARCH_V10 && ETRAX_SDRAM]
     inherited [ETRAX_ARCH_V10 && ETRAX_SDRAM]
    }
    config ETRAX_DEF_R_SDRAM_TIMING hex {
     prompt "R_SDRAM_TIMING" if [ETRAX_ARCH_V10 && ETRAX_SDRAM]
     depends on [ETRAX_ARCH_V10 && ETRAX_SDRAM]
     default [80004801] if [ETRAX_ARCH_V10 && ETRAX_SDRAM]
     inherited [ETRAX_ARCH_V10 && ETRAX_SDRAM]
    }
   }
   config ETRAX_DEF_R_PORT_PA_DIR hex {
    prompt "R_PORT_PA_DIR" if [ETRAX_ARCH_V10]
    depends on [ETRAX_ARCH_V10]
    default [1c] if [ETRAX_ARCH_V10]
    inherited [ETRAX_ARCH_V10]
   }
   config ETRAX_DEF_R_PORT_PA_DATA hex {
    prompt "R_PORT_PA_DATA" if [ETRAX_ARCH_V10]
    depends on [ETRAX_ARCH_V10]
    default [00] if [ETRAX_ARCH_V10]
    inherited [ETRAX_ARCH_V10]
   }
   config ETRAX_DEF_R_PORT_PB_CONFIG hex {
    prompt "R_PORT_PB_CONFIG" if [ETRAX_ARCH_V10]
    depends on [ETRAX_ARCH_V10]
    default [00] if [ETRAX_ARCH_V10]
    inherited [ETRAX_ARCH_V10]
   }
   config ETRAX_DEF_R_PORT_PB_DIR hex {
    prompt "R_PORT_PB_DIR" if [ETRAX_ARCH_V10]
    depends on [ETRAX_ARCH_V10]
    default [00] if [ETRAX_ARCH_V10]
    inherited [ETRAX_ARCH_V10]
   }
   config ETRAX_DEF_R_PORT_PB_DATA hex {
    prompt "R_PORT_PB_DATA" if [ETRAX_ARCH_V10]
    depends on [ETRAX_ARCH_V10]
    default [ff] if [ETRAX_ARCH_V10]
    inherited [ETRAX_ARCH_V10]
   }
   config ETRAX_SOFT_SHUTDOWN boolean {
    prompt "Software Shutdown Support" if [ETRAX_ARCH_V10]
    depends on [ETRAX_ARCH_V10]
    inherited [ETRAX_ARCH_V10]
    config ETRAX_SHUTDOWN_BIT integer {
     prompt "Shutdown bit on port CSP0" if [ETRAX_ARCH_V10 && ETRAX_SOFT_SHUTDOWN]
     depends on [ETRAX_SOFT_SHUTDOWN]
     default [12] if [ETRAX_ARCH_V10 && ETRAX_SOFT_SHUTDOWN]
     inherited [ETRAX_ARCH_V10 && ETRAX_SOFT_SHUTDOWN]
    }
    config ETRAX_POWERBUTTON_BIT integer {
     prompt "Power button bit on port G" if [ETRAX_ARCH_V10 && ETRAX_SOFT_SHUTDOWN]
     depends on [ETRAX_SOFT_SHUTDOWN]
     default [25] if [ETRAX_ARCH_V10 && ETRAX_SOFT_SHUTDOWN]
     inherited [ETRAX_ARCH_V10 && ETRAX_SOFT_SHUTDOWN]
    }
   }
  }
 }
 if [ETRAX_ARCH_V32] {
  if [ETRAX_ARCH_V32 && ETRAXFS] {
   menu "ETRAX FS options" {
    depends on [ETRAX_ARCH_V32 && ETRAXFS]
    config ETRAX_DRAM_VIRTUAL_BASE hex {
     depends on [ETRAX_ARCH_V10]
     default [c0000000] if [ETRAX_ARCH_V10 && !ETRAX100LX]
     default [60000000] if [ETRAX_ARCH_V10 && ETRAX100LX]
     depends on [ETRAX_ARCH_V32]
     default [c0000000] if [ETRAXFS && ETRAX_ARCH_V32]
     default [c0000000] if [ETRAX_ARCH_V32 && CRIS_MACH_ARTPEC3]
     depends on [ETRAX_ARCH_V32]
     default [c0000000] if [ETRAX_ARCH_V32]
     inherited [ETRAXFS && ETRAX_ARCH_V32]
    }
    config ETRAX_SERIAL_PORTS integer {
     default [4] if [ETRAX_ARCH_V32 && ETRAXFS]
     default [5] if [ETRAX_ARCH_V32 && CRIS_MACH_ARTPEC3]
     inherited [ETRAX_ARCH_V32 && ETRAXFS]
    }
    config ETRAX_MEM_GRP1_CONFIG hex {
     prompt "MEM_GRP1_CONFIG" if [ETRAXFS && ETRAX_ARCH_V32]
     depends on [ETRAX_ARCH_V32]
     default [4044a] if [ETRAXFS && ETRAX_ARCH_V32]
     prompt "MEM_GRP1_CONFIG" if [ETRAX_ARCH_V32]
     depends on [ETRAX_ARCH_V32]
     default [4044a] if [ETRAX_ARCH_V32]
     inherited [ETRAXFS && ETRAX_ARCH_V32]
    }
    config ETRAX_MEM_GRP2_CONFIG hex {
     prompt "MEM_GRP2_CONFIG" if [ETRAXFS && ETRAX_ARCH_V32]
     depends on [ETRAX_ARCH_V32]
     default [0] if [ETRAXFS && ETRAX_ARCH_V32]
     prompt "MEM_GRP2_CONFIG" if [ETRAX_ARCH_V32]
     depends on [ETRAX_ARCH_V32]
     default [0] if [ETRAX_ARCH_V32]
     inherited [ETRAXFS && ETRAX_ARCH_V32]
    }
    config ETRAX_MEM_GRP3_CONFIG hex {
     prompt "MEM_GRP3_CONFIG" if [ETRAXFS && ETRAX_ARCH_V32]
     depends on [ETRAX_ARCH_V32]
     default [0] if [ETRAXFS && ETRAX_ARCH_V32]
     prompt "MEM_GRP3_CONFIG" if [ETRAX_ARCH_V32]
     depends on [ETRAX_ARCH_V32]
     default [0] if [ETRAX_ARCH_V32]
     inherited [ETRAXFS && ETRAX_ARCH_V32]
    }
    config ETRAX_MEM_GRP4_CONFIG hex {
     prompt "MEM_GRP4_CONFIG" if [ETRAXFS && ETRAX_ARCH_V32]
     depends on [ETRAX_ARCH_V32]
     default [0] if [ETRAXFS && ETRAX_ARCH_V32]
     prompt "MEM_GRP4_CONFIG" if [ETRAX_ARCH_V32]
     depends on [ETRAX_ARCH_V32]
     default [0] if [ETRAX_ARCH_V32]
     inherited [ETRAXFS && ETRAX_ARCH_V32]
    }
    config ETRAX_SDRAM_GRP0_CONFIG hex {
     prompt "SDRAM_GRP0_CONFIG" if [ETRAXFS && ETRAX_ARCH_V32]
     depends on [ETRAX_ARCH_V32]
     default [336] if [ETRAXFS && ETRAX_ARCH_V32]
     prompt "SDRAM_GRP0_CONFIG" if [ETRAX_ARCH_V32]
     depends on [ETRAX_ARCH_V32]
     default [336] if [ETRAX_ARCH_V32]
     inherited [ETRAXFS && ETRAX_ARCH_V32]
    }
    config ETRAX_SDRAM_GRP1_CONFIG hex {
     prompt "SDRAM_GRP1_CONFIG" if [ETRAXFS && ETRAX_ARCH_V32]
     depends on [ETRAX_ARCH_V32]
     default [0] if [ETRAXFS && ETRAX_ARCH_V32]
     prompt "SDRAM_GRP1_CONFIG" if [ETRAX_ARCH_V32]
     depends on [ETRAX_ARCH_V32]
     default [0] if [ETRAX_ARCH_V32]
     inherited [ETRAXFS && ETRAX_ARCH_V32]
    }
    config ETRAX_SDRAM_TIMING hex {
     prompt "SDRAM_TIMING" if [ETRAXFS && ETRAX_ARCH_V32]
     depends on [ETRAX_ARCH_V32]
     default [104a] if [ETRAXFS && ETRAX_ARCH_V32]
     prompt "SDRAM_TIMING" if [ETRAX_ARCH_V32]
     depends on [ETRAX_ARCH_V32]
     default [104a] if [ETRAX_ARCH_V32]
     inherited [ETRAXFS && ETRAX_ARCH_V32]
    }
    config ETRAX_SDRAM_COMMAND hex {
     prompt "SDRAM_COMMAND" if [ETRAXFS && ETRAX_ARCH_V32]
     depends on [ETRAX_ARCH_V32]
     default [0] if [ETRAXFS && ETRAX_ARCH_V32]
     prompt "SDRAM_COMMAND" if [ETRAX_ARCH_V32]
     depends on [ETRAX_ARCH_V32]
     default [0] if [ETRAX_ARCH_V32]
     inherited [ETRAXFS && ETRAX_ARCH_V32]
    }
    config ETRAX_DEF_GIO_PA_OE hex {
     prompt "GIO_PA_OE" if [ETRAXFS && ETRAX_ARCH_V32]
     depends on [ETRAX_ARCH_V32]
     default [1c] if [ETRAXFS && ETRAX_ARCH_V32]
     prompt "GIO_PA_OE" if [ETRAX_ARCH_V32 && CRIS_MACH_ARTPEC3]
     default [00000000] if [ETRAX_ARCH_V32 && CRIS_MACH_ARTPEC3]
     prompt "GIO_PA_OE" if [ETRAX_ARCH_V32]
     depends on [ETRAX_ARCH_V32]
     default [1c] if [ETRAX_ARCH_V32]
     inherited [ETRAXFS && ETRAX_ARCH_V32]
    }
    config ETRAX_DEF_GIO_PA_OUT hex {
     prompt "GIO_PA_OUT" if [ETRAXFS && ETRAX_ARCH_V32]
     depends on [ETRAX_ARCH_V32]
     default [00] if [ETRAXFS && ETRAX_ARCH_V32]
     prompt "GIO_PA_OUT" if [ETRAX_ARCH_V32 && CRIS_MACH_ARTPEC3]
     default [00000000] if [ETRAX_ARCH_V32 && CRIS_MACH_ARTPEC3]
     prompt "GIO_PA_OUT" if [ETRAX_ARCH_V32]
     depends on [ETRAX_ARCH_V32]
     default [00] if [ETRAX_ARCH_V32]
     inherited [ETRAXFS && ETRAX_ARCH_V32]
    }
    config ETRAX_DEF_GIO_PB_OE hex {
     prompt "GIO_PB_OE" if [ETRAXFS && ETRAX_ARCH_V32]
     depends on [ETRAX_ARCH_V32]
     default [00000] if [ETRAXFS && ETRAX_ARCH_V32]
     prompt "GIO_PB_OE" if [ETRAX_ARCH_V32 && CRIS_MACH_ARTPEC3]
     default [000000000] if [ETRAX_ARCH_V32 && CRIS_MACH_ARTPEC3]
     prompt "GIO_PB_OE" if [ETRAX_ARCH_V32]
     depends on [ETRAX_ARCH_V32]
     default [00000] if [ETRAX_ARCH_V32]
     inherited [ETRAXFS && ETRAX_ARCH_V32]
    }
    config ETRAX_DEF_GIO_PB_OUT hex {
     prompt "GIO_PB_OUT" if [ETRAXFS && ETRAX_ARCH_V32]
     depends on [ETRAX_ARCH_V32]
     default [00000] if [ETRAXFS && ETRAX_ARCH_V32]
     prompt "GIO_PB_OUT" if [ETRAX_ARCH_V32 && CRIS_MACH_ARTPEC3]
     default [000000000] if [ETRAX_ARCH_V32 && CRIS_MACH_ARTPEC3]
     prompt "GIO_PB_OUT" if [ETRAX_ARCH_V32]
     depends on [ETRAX_ARCH_V32]
     default [00000] if [ETRAX_ARCH_V32]
     inherited [ETRAXFS && ETRAX_ARCH_V32]
    }
    config ETRAX_DEF_GIO_PC_OE hex {
     prompt "GIO_PC_OE" if [ETRAXFS && ETRAX_ARCH_V32]
     depends on [ETRAX_ARCH_V32]
     default [00000] if [ETRAXFS && ETRAX_ARCH_V32]
     prompt "GIO_PC_OE" if [ETRAX_ARCH_V32 && CRIS_MACH_ARTPEC3]
     default [00000] if [ETRAX_ARCH_V32 && CRIS_MACH_ARTPEC3]
     prompt "GIO_PC_OE" if [ETRAX_ARCH_V32]
     depends on [ETRAX_ARCH_V32]
     default [00000] if [ETRAX_ARCH_V32]
     inherited [ETRAXFS && ETRAX_ARCH_V32]
    }
    config ETRAX_DEF_GIO_PC_OUT hex {
     prompt "GIO_PC_OUT" if [ETRAXFS && ETRAX_ARCH_V32]
     depends on [ETRAX_ARCH_V32]
     default [00000] if [ETRAXFS && ETRAX_ARCH_V32]
     prompt "GIO_PC_OUT" if [ETRAX_ARCH_V32 && CRIS_MACH_ARTPEC3]
     default [00000] if [ETRAX_ARCH_V32 && CRIS_MACH_ARTPEC3]
     prompt "GIO_PC_OUT" if [ETRAX_ARCH_V32]
     depends on [ETRAX_ARCH_V32]
     default [00000] if [ETRAX_ARCH_V32]
     inherited [ETRAXFS && ETRAX_ARCH_V32]
    }
    config ETRAX_DEF_GIO_PD_OE hex {
     prompt "GIO_PD_OE" if [ETRAXFS && ETRAX_ARCH_V32]
     depends on [ETRAX_ARCH_V32]
     default [00000] if [ETRAXFS && ETRAX_ARCH_V32]
     prompt "GIO_PD_OE" if [ETRAX_ARCH_V32]
     depends on [ETRAX_ARCH_V32]
     default [00000] if [ETRAX_ARCH_V32]
     inherited [ETRAXFS && ETRAX_ARCH_V32]
    }
    config ETRAX_DEF_GIO_PD_OUT hex {
     prompt "GIO_PD_OUT" if [ETRAXFS && ETRAX_ARCH_V32]
     depends on [ETRAX_ARCH_V32]
     default [00000] if [ETRAXFS && ETRAX_ARCH_V32]
     prompt "GIO_PD_OUT" if [ETRAX_ARCH_V32]
     depends on [ETRAX_ARCH_V32]
     default [00000] if [ETRAX_ARCH_V32]
     inherited [ETRAXFS && ETRAX_ARCH_V32]
    }
    config ETRAX_DEF_GIO_PE_OE hex {
     prompt "GIO_PE_OE" if [ETRAXFS && ETRAX_ARCH_V32]
     depends on [ETRAX_ARCH_V32]
     default [00000] if [ETRAXFS && ETRAX_ARCH_V32]
     prompt "GIO_PE_OE" if [ETRAX_ARCH_V32]
     depends on [ETRAX_ARCH_V32]
     default [00000] if [ETRAX_ARCH_V32]
     inherited [ETRAXFS && ETRAX_ARCH_V32]
    }
    config ETRAX_DEF_GIO_PE_OUT hex {
     prompt "GIO_PE_OUT" if [ETRAXFS && ETRAX_ARCH_V32]
     depends on [ETRAX_ARCH_V32]
     default [00000] if [ETRAXFS && ETRAX_ARCH_V32]
     prompt "GIO_PE_OUT" if [ETRAX_ARCH_V32]
     depends on [ETRAX_ARCH_V32]
     default [00000] if [ETRAX_ARCH_V32]
     inherited [ETRAXFS && ETRAX_ARCH_V32]
    }
    config ETRAX_DEF_GIO_PV_OE hex {
     prompt "GIO_PV_OE" if [ETRAX_ARCH_V32 && ETRAXFS && ETRAX_VIRTUAL_GPIO]
     depends on [ETRAX_VIRTUAL_GPIO]
     default [0000] if [ETRAX_ARCH_V32 && ETRAXFS && ETRAX_VIRTUAL_GPIO]
     inherited [ETRAX_ARCH_V32 && ETRAXFS && ETRAX_VIRTUAL_GPIO]
    }
    config ETRAX_DEF_GIO_PV_OUT hex {
     prompt "GIO_PV_OUT" if [ETRAX_ARCH_V32 && ETRAXFS && ETRAX_VIRTUAL_GPIO]
     depends on [ETRAX_VIRTUAL_GPIO]
     default [0000] if [ETRAX_ARCH_V32 && ETRAXFS && ETRAX_VIRTUAL_GPIO]
     inherited [ETRAX_ARCH_V32 && ETRAXFS && ETRAX_VIRTUAL_GPIO]
    }
   }
  }
  if [ETRAX_ARCH_V32 && CRIS_MACH_ARTPEC3] {
   menu "Artpec-3 options" {
    depends on [ETRAX_ARCH_V32 && CRIS_MACH_ARTPEC3]
    config ETRAX_DRAM_VIRTUAL_BASE hex {
     depends on [ETRAX_ARCH_V10]
     default [c0000000] if [ETRAX_ARCH_V10 && !ETRAX100LX]
     default [60000000] if [ETRAX_ARCH_V10 && ETRAX100LX]
     depends on [ETRAX_ARCH_V32]
     default [c0000000] if [ETRAXFS && ETRAX_ARCH_V32]
     default [c0000000] if [ETRAX_ARCH_V32 && CRIS_MACH_ARTPEC3]
     depends on [ETRAX_ARCH_V32]
     default [c0000000] if [ETRAX_ARCH_V32]
     inherited [ETRAX_ARCH_V32 && CRIS_MACH_ARTPEC3]
    }
    config ETRAX_L2CACHE boolean {
     default [y] if [ETRAX_ARCH_V32 && CRIS_MACH_ARTPEC3]
     inherited [ETRAX_ARCH_V32 && CRIS_MACH_ARTPEC3]
    }
    config ETRAX_SERIAL_PORTS integer {
     default [4] if [ETRAX_ARCH_V32 && ETRAXFS]
     default [5] if [ETRAX_ARCH_V32 && CRIS_MACH_ARTPEC3]
     inherited [ETRAX_ARCH_V32 && CRIS_MACH_ARTPEC3]
    }
    config ETRAX_DDR boolean {
     default [y] if [ETRAX_ARCH_V32 && CRIS_MACH_ARTPEC3]
     inherited [ETRAX_ARCH_V32 && CRIS_MACH_ARTPEC3]
    }
    config ETRAX_DDR2_MRS hex {
     prompt "DDR2 MRS" if [ETRAX_ARCH_V32 && CRIS_MACH_ARTPEC3]
     default [0] if [ETRAX_ARCH_V32 && CRIS_MACH_ARTPEC3]
     inherited [ETRAX_ARCH_V32 && CRIS_MACH_ARTPEC3]
    }
    config ETRAX_DDR2_TIMING hex {
     prompt "DDR2 SDRAM timing" if [ETRAX_ARCH_V32 && CRIS_MACH_ARTPEC3]
     default [0] if [ETRAX_ARCH_V32 && CRIS_MACH_ARTPEC3]
     inherited [ETRAX_ARCH_V32 && CRIS_MACH_ARTPEC3]
    }
    config ETRAX_DDR2_CONFIG hex {
     prompt "DDR2 config" if [ETRAX_ARCH_V32 && CRIS_MACH_ARTPEC3]
     default [0] if [ETRAX_ARCH_V32 && CRIS_MACH_ARTPEC3]
     inherited [ETRAX_ARCH_V32 && CRIS_MACH_ARTPEC3]
    }
    config ETRAX_PIO_CE0_CFG hex {
     prompt "PIO CE0 configuration" if [ETRAX_ARCH_V32 && CRIS_MACH_ARTPEC3]
     default [0] if [ETRAX_ARCH_V32 && CRIS_MACH_ARTPEC3]
     inherited [ETRAX_ARCH_V32 && CRIS_MACH_ARTPEC3]
    }
    config ETRAX_PIO_CE1_CFG hex {
     prompt "PIO CE1 configuration" if [ETRAX_ARCH_V32 && CRIS_MACH_ARTPEC3]
     default [0] if [ETRAX_ARCH_V32 && CRIS_MACH_ARTPEC3]
     inherited [ETRAX_ARCH_V32 && CRIS_MACH_ARTPEC3]
    }
    config ETRAX_PIO_CE2_CFG hex {
     prompt "PIO CE2 configuration" if [ETRAX_ARCH_V32 && CRIS_MACH_ARTPEC3]
     default [0] if [ETRAX_ARCH_V32 && CRIS_MACH_ARTPEC3]
     inherited [ETRAX_ARCH_V32 && CRIS_MACH_ARTPEC3]
    }
    config ETRAX_DEF_GIO_PA_OE hex {
     prompt "GIO_PA_OE" if [ETRAXFS && ETRAX_ARCH_V32]
     depends on [ETRAX_ARCH_V32]
     default [1c] if [ETRAXFS && ETRAX_ARCH_V32]
     prompt "GIO_PA_OE" if [ETRAX_ARCH_V32 && CRIS_MACH_ARTPEC3]
     default [00000000] if [ETRAX_ARCH_V32 && CRIS_MACH_ARTPEC3]
     prompt "GIO_PA_OE" if [ETRAX_ARCH_V32]
     depends on [ETRAX_ARCH_V32]
     default [1c] if [ETRAX_ARCH_V32]
     inherited [ETRAX_ARCH_V32 && CRIS_MACH_ARTPEC3]
    }
    config ETRAX_DEF_GIO_PA_OUT hex {
     prompt "GIO_PA_OUT" if [ETRAXFS && ETRAX_ARCH_V32]
     depends on [ETRAX_ARCH_V32]
     default [00] if [ETRAXFS && ETRAX_ARCH_V32]
     prompt "GIO_PA_OUT" if [ETRAX_ARCH_V32 && CRIS_MACH_ARTPEC3]
     default [00000000] if [ETRAX_ARCH_V32 && CRIS_MACH_ARTPEC3]
     prompt "GIO_PA_OUT" if [ETRAX_ARCH_V32]
     depends on [ETRAX_ARCH_V32]
     default [00] if [ETRAX_ARCH_V32]
     inherited [ETRAX_ARCH_V32 && CRIS_MACH_ARTPEC3]
    }
    config ETRAX_DEF_GIO_PB_OE hex {
     prompt "GIO_PB_OE" if [ETRAXFS && ETRAX_ARCH_V32]
     depends on [ETRAX_ARCH_V32]
     default [00000] if [ETRAXFS && ETRAX_ARCH_V32]
     prompt "GIO_PB_OE" if [ETRAX_ARCH_V32 && CRIS_MACH_ARTPEC3]
     default [000000000] if [ETRAX_ARCH_V32 && CRIS_MACH_ARTPEC3]
     prompt "GIO_PB_OE" if [ETRAX_ARCH_V32]
     depends on [ETRAX_ARCH_V32]
     default [00000] if [ETRAX_ARCH_V32]
     inherited [ETRAX_ARCH_V32 && CRIS_MACH_ARTPEC3]
    }
    config ETRAX_DEF_GIO_PB_OUT hex {
     prompt "GIO_PB_OUT" if [ETRAXFS && ETRAX_ARCH_V32]
     depends on [ETRAX_ARCH_V32]
     default [00000] if [ETRAXFS && ETRAX_ARCH_V32]
     prompt "GIO_PB_OUT" if [ETRAX_ARCH_V32 && CRIS_MACH_ARTPEC3]
     default [000000000] if [ETRAX_ARCH_V32 && CRIS_MACH_ARTPEC3]
     prompt "GIO_PB_OUT" if [ETRAX_ARCH_V32]
     depends on [ETRAX_ARCH_V32]
     default [00000] if [ETRAX_ARCH_V32]
     inherited [ETRAX_ARCH_V32 && CRIS_MACH_ARTPEC3]
    }
    config ETRAX_DEF_GIO_PC_OE hex {
     prompt "GIO_PC_OE" if [ETRAXFS && ETRAX_ARCH_V32]
     depends on [ETRAX_ARCH_V32]
     default [00000] if [ETRAXFS && ETRAX_ARCH_V32]
     prompt "GIO_PC_OE" if [ETRAX_ARCH_V32 && CRIS_MACH_ARTPEC3]
     default [00000] if [ETRAX_ARCH_V32 && CRIS_MACH_ARTPEC3]
     prompt "GIO_PC_OE" if [ETRAX_ARCH_V32]
     depends on [ETRAX_ARCH_V32]
     default [00000] if [ETRAX_ARCH_V32]
     inherited [ETRAX_ARCH_V32 && CRIS_MACH_ARTPEC3]
    }
    config ETRAX_DEF_GIO_PC_OUT hex {
     prompt "GIO_PC_OUT" if [ETRAXFS && ETRAX_ARCH_V32]
     depends on [ETRAX_ARCH_V32]
     default [00000] if [ETRAXFS && ETRAX_ARCH_V32]
     prompt "GIO_PC_OUT" if [ETRAX_ARCH_V32 && CRIS_MACH_ARTPEC3]
     default [00000] if [ETRAX_ARCH_V32 && CRIS_MACH_ARTPEC3]
     prompt "GIO_PC_OUT" if [ETRAX_ARCH_V32]
     depends on [ETRAX_ARCH_V32]
     default [00000] if [ETRAX_ARCH_V32]
     inherited [ETRAX_ARCH_V32 && CRIS_MACH_ARTPEC3]
    }
   }
  }
  config CPU_FREQ boolean {
   prompt "CPU Frequency scaling" if [ETRAX_ARCH_V32]
   inherited [ETRAX_ARCH_V32]
   if [ETRAX_ARCH_V32 && CPU_FREQ] {
    config CPU_FREQ_TABLE tristate {
     inherited [ETRAX_ARCH_V32 && CPU_FREQ]
    }
    config CPU_FREQ_DEBUG boolean {
     prompt "Enable CPUfreq debugging" if [ETRAX_ARCH_V32 && CPU_FREQ]
     inherited [ETRAX_ARCH_V32 && CPU_FREQ]
    }
    config CPU_FREQ_STAT tristate {
     prompt "CPU frequency translation statistics" if [ETRAX_ARCH_V32 && CPU_FREQ]
     select CPU_FREQ_TABLE if [ETRAX_ARCH_V32 && CPU_FREQ]
     default [y] if [ETRAX_ARCH_V32 && CPU_FREQ]
     inherited [ETRAX_ARCH_V32 && CPU_FREQ]
     config CPU_FREQ_STAT_DETAILS boolean {
      prompt "CPU frequency translation statistics details" if [ETRAX_ARCH_V32 && CPU_FREQ && CPU_FREQ_STAT]
      depends on [CPU_FREQ_STAT]
      inherited [ETRAX_ARCH_V32 && CPU_FREQ && CPU_FREQ_STAT]
     }
    }
    choice boolean {
     prompt "Default CPUFreq governor" if [ETRAX_ARCH_V32 && CPU_FREQ]
     default [CPU_FREQ_DEFAULT_GOV_USERSPACE] if [ETRAX_ARCH_V32 && CPU_FREQ && (CPU_FREQ_SA1100 || CPU_FREQ_SA1110)]
     default [CPU_FREQ_DEFAULT_GOV_PERFORMANCE] if [ETRAX_ARCH_V32 && CPU_FREQ]
     config CPU_FREQ_DEFAULT_GOV_PERFORMANCE boolean {
      prompt "performance" if [<choice>]
      select CPU_FREQ_GOV_PERFORMANCE if [<choice>]
      inherited [<choice>]
     }
     config CPU_FREQ_DEFAULT_GOV_POWERSAVE boolean {
      prompt "powersave" if [<choice> && EMBEDDED]
      depends on [EMBEDDED]
      select CPU_FREQ_GOV_POWERSAVE if [<choice> && EMBEDDED]
      inherited [<choice> && EMBEDDED]
     }
     config CPU_FREQ_DEFAULT_GOV_USERSPACE boolean {
      prompt "userspace" if [<choice>]
      select CPU_FREQ_GOV_USERSPACE if [<choice>]
      inherited [<choice>]
     }
     config CPU_FREQ_DEFAULT_GOV_ONDEMAND boolean {
      prompt "ondemand" if [<choice>]
      select CPU_FREQ_GOV_ONDEMAND if [<choice>]
      select CPU_FREQ_GOV_PERFORMANCE if [<choice>]
      inherited [<choice>]
     }
     config CPU_FREQ_DEFAULT_GOV_CONSERVATIVE boolean {
      prompt "conservative" if [<choice>]
      select CPU_FREQ_GOV_CONSERVATIVE if [<choice>]
      select CPU_FREQ_GOV_PERFORMANCE if [<choice>]
      inherited [<choice>]
     }
    }
    config CPU_FREQ_GOV_PERFORMANCE tristate {
     prompt "'performance' governor" if [ETRAX_ARCH_V32 && CPU_FREQ]
     inherited [ETRAX_ARCH_V32 && CPU_FREQ]
    }
    config CPU_FREQ_GOV_POWERSAVE tristate {
     prompt "'powersave' governor" if [ETRAX_ARCH_V32 && CPU_FREQ]
     inherited [ETRAX_ARCH_V32 && CPU_FREQ]
    }
    config CPU_FREQ_GOV_USERSPACE tristate {
     prompt "'userspace' governor for userspace frequency scaling" if [ETRAX_ARCH_V32 && CPU_FREQ]
     inherited [ETRAX_ARCH_V32 && CPU_FREQ]
    }
    config CPU_FREQ_GOV_ONDEMAND tristate {
     prompt "'ondemand' cpufreq policy governor" if [ETRAX_ARCH_V32 && CPU_FREQ]
     select CPU_FREQ_TABLE if [ETRAX_ARCH_V32 && CPU_FREQ]
     inherited [ETRAX_ARCH_V32 && CPU_FREQ]
    }
    config CPU_FREQ_GOV_CONSERVATIVE tristate {
     prompt "'conservative' cpufreq governor" if [ETRAX_ARCH_V32 && CPU_FREQ]
     depends on [CPU_FREQ]
     inherited [ETRAX_ARCH_V32 && CPU_FREQ]
    }
   }
  }
  config ETRAX_DRAM_VIRTUAL_BASE hex {
   depends on [ETRAX_ARCH_V10]
   default [c0000000] if [ETRAX_ARCH_V10 && !ETRAX100LX]
   default [60000000] if [ETRAX_ARCH_V10 && ETRAX100LX]
   depends on [ETRAX_ARCH_V32]
   default [c0000000] if [ETRAXFS && ETRAX_ARCH_V32]
   default [c0000000] if [ETRAX_ARCH_V32 && CRIS_MACH_ARTPEC3]
   depends on [ETRAX_ARCH_V32]
   default [c0000000] if [ETRAX_ARCH_V32]
   inherited [ETRAX_ARCH_V32]
  }
  choice boolean {
   prompt "Nbr of Ethernet LED groups" if [ETRAX_ARCH_V32]
   depends on [ETRAX_ARCH_V32]
   default [ETRAX_NBR_LED_GRP_ONE] if [ETRAX_ARCH_V32]
   config ETRAX_NBR_LED_GRP_ZERO boolean {
    prompt "Use zero LED groups" if [<choice>]
    inherited [<choice>]
   }
   config ETRAX_NBR_LED_GRP_ONE boolean {
    prompt "Use one LED group" if [<choice>]
    inherited [<choice>]
   }
   config ETRAX_NBR_LED_GRP_TWO boolean {
    prompt "Use two LED groups" if [<choice>]
    inherited [<choice>]
   }
  }
  config ETRAX_LED_G_NET0 string {
   prompt "Ethernet LED group 0 green LED bit" if [ETRAX_ARCH_V32 && (ETRAX_NBR_LED_GRP_ONE || ETRAX_NBR_LED_GRP_TWO)]
   depends on [ETRAX_ARCH_V32 && (ETRAX_NBR_LED_GRP_ONE || ETRAX_NBR_LED_GRP_TWO)]
   default ["PA3"] if [ETRAX_ARCH_V32 && (ETRAX_NBR_LED_GRP_ONE || ETRAX_NBR_LED_GRP_TWO)]
   inherited [ETRAX_ARCH_V32 && (ETRAX_NBR_LED_GRP_ONE || ETRAX_NBR_LED_GRP_TWO)]
  }
  config ETRAX_LED_R_NET0 string {
   prompt "Ethernet LED group 0 red LED bit" if [ETRAX_ARCH_V32 && (ETRAX_NBR_LED_GRP_ONE || ETRAX_NBR_LED_GRP_TWO)]
   depends on [ETRAX_ARCH_V32 && (ETRAX_NBR_LED_GRP_ONE || ETRAX_NBR_LED_GRP_TWO)]
   default ["PA4"] if [ETRAX_ARCH_V32 && (ETRAX_NBR_LED_GRP_ONE || ETRAX_NBR_LED_GRP_TWO)]
   inherited [ETRAX_ARCH_V32 && (ETRAX_NBR_LED_GRP_ONE || ETRAX_NBR_LED_GRP_TWO)]
  }
  config ETRAX_LED_G_NET1 string {
   prompt "Ethernet group 1 green LED bit" if [ETRAX_ARCH_V32 && ETRAX_NBR_LED_GRP_TWO]
   depends on [ETRAX_ARCH_V32 && ETRAX_NBR_LED_GRP_TWO]
   default [""] if [ETRAX_ARCH_V32 && ETRAX_NBR_LED_GRP_TWO]
   inherited [ETRAX_ARCH_V32 && ETRAX_NBR_LED_GRP_TWO]
  }
  config ETRAX_LED_R_NET1 string {
   prompt "Ethernet group 1 red LED bit" if [ETRAX_ARCH_V32 && ETRAX_NBR_LED_GRP_TWO]
   depends on [ETRAX_ARCH_V32 && ETRAX_NBR_LED_GRP_TWO]
   default [""] if [ETRAX_ARCH_V32 && ETRAX_NBR_LED_GRP_TWO]
   inherited [ETRAX_ARCH_V32 && ETRAX_NBR_LED_GRP_TWO]
  }
  config ETRAX_V32_LED2G string {
   prompt "Second green LED bit" if [ETRAX_ARCH_V32]
   depends on [ETRAX_ARCH_V32]
   default ["PA5"] if [ETRAX_ARCH_V32]
   inherited [ETRAX_ARCH_V32]
  }
  config ETRAX_V32_LED2R string {
   prompt "Second red LED bit" if [ETRAX_ARCH_V32]
   depends on [ETRAX_ARCH_V32]
   default ["PA6"] if [ETRAX_ARCH_V32]
   inherited [ETRAX_ARCH_V32]
  }
  config ETRAX_V32_LED3G string {
   prompt "Third green LED bit" if [ETRAX_ARCH_V32]
   depends on [ETRAX_ARCH_V32]
   default ["PA7"] if [ETRAX_ARCH_V32]
   inherited [ETRAX_ARCH_V32]
  }
  config ETRAX_V32_LED3R string {
   prompt "Third red LED bit" if [ETRAX_ARCH_V32]
   depends on [ETRAX_ARCH_V32]
   default ["PA7"] if [ETRAX_ARCH_V32]
   inherited [ETRAX_ARCH_V32]
  }
  choice boolean {
   prompt "Kernel GDB port" if [ETRAX_ARCH_V32 && ETRAX_KGDB]
   depends on [ETRAX_KGDB]
   default [ETRAX_KGDB_PORT0] if [ETRAX_ARCH_V32 && ETRAX_KGDB]
   config ETRAX_KGDB_PORT4 boolean {
    prompt "Serial-4" if [<choice> && ETRAX_SERIAL_PORTS="5"]
    depends on [ETRAX_SERIAL_PORTS="5"]
    inherited [<choice> && ETRAX_SERIAL_PORTS="5"]
   }
  }
  config ETRAX_MEM_GRP1_CONFIG hex {
   prompt "MEM_GRP1_CONFIG" if [ETRAXFS && ETRAX_ARCH_V32]
   depends on [ETRAX_ARCH_V32]
   default [4044a] if [ETRAXFS && ETRAX_ARCH_V32]
   prompt "MEM_GRP1_CONFIG" if [ETRAX_ARCH_V32]
   depends on [ETRAX_ARCH_V32]
   default [4044a] if [ETRAX_ARCH_V32]
   inherited [ETRAX_ARCH_V32]
  }
  config ETRAX_MEM_GRP2_CONFIG hex {
   prompt "MEM_GRP2_CONFIG" if [ETRAXFS && ETRAX_ARCH_V32]
   depends on [ETRAX_ARCH_V32]
   default [0] if [ETRAXFS && ETRAX_ARCH_V32]
   prompt "MEM_GRP2_CONFIG" if [ETRAX_ARCH_V32]
   depends on [ETRAX_ARCH_V32]
   default [0] if [ETRAX_ARCH_V32]
   inherited [ETRAX_ARCH_V32]
  }
  config ETRAX_MEM_GRP3_CONFIG hex {
   prompt "MEM_GRP3_CONFIG" if [ETRAXFS && ETRAX_ARCH_V32]
   depends on [ETRAX_ARCH_V32]
   default [0] if [ETRAXFS && ETRAX_ARCH_V32]
   prompt "MEM_GRP3_CONFIG" if [ETRAX_ARCH_V32]
   depends on [ETRAX_ARCH_V32]
   default [0] if [ETRAX_ARCH_V32]
   inherited [ETRAX_ARCH_V32]
  }
  config ETRAX_MEM_GRP4_CONFIG hex {
   prompt "MEM_GRP4_CONFIG" if [ETRAXFS && ETRAX_ARCH_V32]
   depends on [ETRAX_ARCH_V32]
   default [0] if [ETRAXFS && ETRAX_ARCH_V32]
   prompt "MEM_GRP4_CONFIG" if [ETRAX_ARCH_V32]
   depends on [ETRAX_ARCH_V32]
   default [0] if [ETRAX_ARCH_V32]
   inherited [ETRAX_ARCH_V32]
  }
  config ETRAX_SDRAM_GRP0_CONFIG hex {
   prompt "SDRAM_GRP0_CONFIG" if [ETRAXFS && ETRAX_ARCH_V32]
   depends on [ETRAX_ARCH_V32]
   default [336] if [ETRAXFS && ETRAX_ARCH_V32]
   prompt "SDRAM_GRP0_CONFIG" if [ETRAX_ARCH_V32]
   depends on [ETRAX_ARCH_V32]
   default [336] if [ETRAX_ARCH_V32]
   inherited [ETRAX_ARCH_V32]
  }
  config ETRAX_SDRAM_GRP1_CONFIG hex {
   prompt "SDRAM_GRP1_CONFIG" if [ETRAXFS && ETRAX_ARCH_V32]
   depends on [ETRAX_ARCH_V32]
   default [0] if [ETRAXFS && ETRAX_ARCH_V32]
   prompt "SDRAM_GRP1_CONFIG" if [ETRAX_ARCH_V32]
   depends on [ETRAX_ARCH_V32]
   default [0] if [ETRAX_ARCH_V32]
   inherited [ETRAX_ARCH_V32]
  }
  config ETRAX_SDRAM_TIMING hex {
   prompt "SDRAM_TIMING" if [ETRAXFS && ETRAX_ARCH_V32]
   depends on [ETRAX_ARCH_V32]
   default [104a] if [ETRAXFS && ETRAX_ARCH_V32]
   prompt "SDRAM_TIMING" if [ETRAX_ARCH_V32]
   depends on [ETRAX_ARCH_V32]
   default [104a] if [ETRAX_ARCH_V32]
   inherited [ETRAX_ARCH_V32]
  }
  config ETRAX_SDRAM_COMMAND hex {
   prompt "SDRAM_COMMAND" if [ETRAXFS && ETRAX_ARCH_V32]
   depends on [ETRAX_ARCH_V32]
   default [0] if [ETRAXFS && ETRAX_ARCH_V32]
   prompt "SDRAM_COMMAND" if [ETRAX_ARCH_V32]
   depends on [ETRAX_ARCH_V32]
   default [0] if [ETRAX_ARCH_V32]
   inherited [ETRAX_ARCH_V32]
  }
  config ETRAX_DEF_GIO_PA_OE hex {
   prompt "GIO_PA_OE" if [ETRAXFS && ETRAX_ARCH_V32]
   depends on [ETRAX_ARCH_V32]
   default [1c] if [ETRAXFS && ETRAX_ARCH_V32]
   prompt "GIO_PA_OE" if [ETRAX_ARCH_V32 && CRIS_MACH_ARTPEC3]
   default [00000000] if [ETRAX_ARCH_V32 && CRIS_MACH_ARTPEC3]
   prompt "GIO_PA_OE" if [ETRAX_ARCH_V32]
   depends on [ETRAX_ARCH_V32]
   default [1c] if [ETRAX_ARCH_V32]
   inherited [ETRAX_ARCH_V32]
  }
  config ETRAX_DEF_GIO_PA_OUT hex {
   prompt "GIO_PA_OUT" if [ETRAXFS && ETRAX_ARCH_V32]
   depends on [ETRAX_ARCH_V32]
   default [00] if [ETRAXFS && ETRAX_ARCH_V32]
   prompt "GIO_PA_OUT" if [ETRAX_ARCH_V32 && CRIS_MACH_ARTPEC3]
   default [00000000] if [ETRAX_ARCH_V32 && CRIS_MACH_ARTPEC3]
   prompt "GIO_PA_OUT" if [ETRAX_ARCH_V32]
   depends on [ETRAX_ARCH_V32]
   default [00] if [ETRAX_ARCH_V32]
   inherited [ETRAX_ARCH_V32]
  }
  config ETRAX_DEF_GIO_PB_OE hex {
   prompt "GIO_PB_OE" if [ETRAXFS && ETRAX_ARCH_V32]
   depends on [ETRAX_ARCH_V32]
   default [00000] if [ETRAXFS && ETRAX_ARCH_V32]
   prompt "GIO_PB_OE" if [ETRAX_ARCH_V32 && CRIS_MACH_ARTPEC3]
   default [000000000] if [ETRAX_ARCH_V32 && CRIS_MACH_ARTPEC3]
   prompt "GIO_PB_OE" if [ETRAX_ARCH_V32]
   depends on [ETRAX_ARCH_V32]
   default [00000] if [ETRAX_ARCH_V32]
   inherited [ETRAX_ARCH_V32]
  }
  config ETRAX_DEF_GIO_PB_OUT hex {
   prompt "GIO_PB_OUT" if [ETRAXFS && ETRAX_ARCH_V32]
   depends on [ETRAX_ARCH_V32]
   default [00000] if [ETRAXFS && ETRAX_ARCH_V32]
   prompt "GIO_PB_OUT" if [ETRAX_ARCH_V32 && CRIS_MACH_ARTPEC3]
   default [000000000] if [ETRAX_ARCH_V32 && CRIS_MACH_ARTPEC3]
   prompt "GIO_PB_OUT" if [ETRAX_ARCH_V32]
   depends on [ETRAX_ARCH_V32]
   default [00000] if [ETRAX_ARCH_V32]
   inherited [ETRAX_ARCH_V32]
  }
  config ETRAX_DEF_GIO_PC_OE hex {
   prompt "GIO_PC_OE" if [ETRAXFS && ETRAX_ARCH_V32]
   depends on [ETRAX_ARCH_V32]
   default [00000] if [ETRAXFS && ETRAX_ARCH_V32]
   prompt "GIO_PC_OE" if [ETRAX_ARCH_V32 && CRIS_MACH_ARTPEC3]
   default [00000] if [ETRAX_ARCH_V32 && CRIS_MACH_ARTPEC3]
   prompt "GIO_PC_OE" if [ETRAX_ARCH_V32]
   depends on [ETRAX_ARCH_V32]
   default [00000] if [ETRAX_ARCH_V32]
   inherited [ETRAX_ARCH_V32]
  }
  config ETRAX_DEF_GIO_PC_OUT hex {
   prompt "GIO_PC_OUT" if [ETRAXFS && ETRAX_ARCH_V32]
   depends on [ETRAX_ARCH_V32]
   default [00000] if [ETRAXFS && ETRAX_ARCH_V32]
   prompt "GIO_PC_OUT" if [ETRAX_ARCH_V32 && CRIS_MACH_ARTPEC3]
   default [00000] if [ETRAX_ARCH_V32 && CRIS_MACH_ARTPEC3]
   prompt "GIO_PC_OUT" if [ETRAX_ARCH_V32]
   depends on [ETRAX_ARCH_V32]
   default [00000] if [ETRAX_ARCH_V32]
   inherited [ETRAX_ARCH_V32]
  }
  config ETRAX_DEF_GIO_PD_OE hex {
   prompt "GIO_PD_OE" if [ETRAXFS && ETRAX_ARCH_V32]
   depends on [ETRAX_ARCH_V32]
   default [00000] if [ETRAXFS && ETRAX_ARCH_V32]
   prompt "GIO_PD_OE" if [ETRAX_ARCH_V32]
   depends on [ETRAX_ARCH_V32]
   default [00000] if [ETRAX_ARCH_V32]
   inherited [ETRAX_ARCH_V32]
  }
  config ETRAX_DEF_GIO_PD_OUT hex {
   prompt "GIO_PD_OUT" if [ETRAXFS && ETRAX_ARCH_V32]
   depends on [ETRAX_ARCH_V32]
   default [00000] if [ETRAXFS && ETRAX_ARCH_V32]
   prompt "GIO_PD_OUT" if [ETRAX_ARCH_V32]
   depends on [ETRAX_ARCH_V32]
   default [00000] if [ETRAX_ARCH_V32]
   inherited [ETRAX_ARCH_V32]
  }
  config ETRAX_DEF_GIO_PE_OE hex {
   prompt "GIO_PE_OE" if [ETRAXFS && ETRAX_ARCH_V32]
   depends on [ETRAX_ARCH_V32]
   default [00000] if [ETRAXFS && ETRAX_ARCH_V32]
   prompt "GIO_PE_OE" if [ETRAX_ARCH_V32]
   depends on [ETRAX_ARCH_V32]
   default [00000] if [ETRAX_ARCH_V32]
   inherited [ETRAX_ARCH_V32]
  }
  config ETRAX_DEF_GIO_PE_OUT hex {
   prompt "GIO_PE_OUT" if [ETRAXFS && ETRAX_ARCH_V32]
   depends on [ETRAX_ARCH_V32]
   default [00000] if [ETRAXFS && ETRAX_ARCH_V32]
   prompt "GIO_PE_OUT" if [ETRAX_ARCH_V32]
   depends on [ETRAX_ARCH_V32]
   default [00000] if [ETRAX_ARCH_V32]
   inherited [ETRAX_ARCH_V32]
  }
 }
}
menuconfig NET boolean {
 prompt "Networking support" if []
 select NLATTR if []
 if [NET] {
  config WANT_COMPAT_NETLINK_MESSAGES boolean {
   inherited [NET]
  }
  config COMPAT_NETLINK_MESSAGES boolean {
   default [y] if [NET && COMPAT && (WIRELESS_EXT || WANT_COMPAT_NETLINK_MESSAGES)]
   depends on [COMPAT]
   depends on [WIRELESS_EXT || WANT_COMPAT_NETLINK_MESSAGES]
   inherited [NET && COMPAT && (WIRELESS_EXT || WANT_COMPAT_NETLINK_MESSAGES)]
  }
  menu "Networking options" {
   depends on [NET]
   config PACKET tristate {
    prompt "Packet socket" if [NET]
    inherited [NET]
    config PACKET_MMAP boolean {
     prompt "Packet socket: mmapped IO" if [NET && PACKET]
     depends on [PACKET]
     inherited [NET && PACKET]
    }
   }
   config UNIX tristate {
    prompt "Unix domain sockets" if [NET]
    inherited [NET]
   }
   config XFRM boolean {
    select CRYPTO if [NET]
    depends on [NET]
    inherited [NET]
   }
   config XFRM_USER tristate {
    prompt "Transformation user configuration interface" if [NET && INET && XFRM]
    depends on [INET && XFRM]
    inherited [NET && INET && XFRM]
   }
   config XFRM_SUB_POLICY boolean {
    prompt "Transformation sub policy support (EXPERIMENTAL)" if [NET && XFRM && EXPERIMENTAL]
    depends on [XFRM && EXPERIMENTAL]
    inherited [NET && XFRM && EXPERIMENTAL]
   }
   config XFRM_MIGRATE boolean {
    prompt "Transformation migrate database (EXPERIMENTAL)" if [NET && XFRM && EXPERIMENTAL]
    depends on [XFRM && EXPERIMENTAL]
    inherited [NET && XFRM && EXPERIMENTAL]
   }
   config XFRM_STATISTICS boolean {
    prompt "Transformation statistics (EXPERIMENTAL)" if [NET && INET && XFRM && PROC_FS && EXPERIMENTAL]
    depends on [INET && XFRM && PROC_FS && EXPERIMENTAL]
    inherited [NET && INET && XFRM && PROC_FS && EXPERIMENTAL]
   }
   config XFRM_IPCOMP tristate {
    select XFRM if [NET]
    select CRYPTO if [NET]
    select CRYPTO_DEFLATE if [NET]
    inherited [NET]
   }
   config NET_KEY tristate {
    prompt "PF_KEY sockets" if [NET]
    select XFRM if [NET]
    inherited [NET]
    config NET_KEY_MIGRATE boolean {
     prompt "PF_KEY MIGRATE (EXPERIMENTAL)" if [NET && NET_KEY && EXPERIMENTAL]
     depends on [NET_KEY && EXPERIMENTAL]
     select XFRM_MIGRATE if [NET && NET_KEY && EXPERIMENTAL]
     inherited [NET && NET_KEY && EXPERIMENTAL]
    }
   }
   config IUCV tristate {
    prompt "IUCV support (S390 - z/VM only)" if [NET && S390]
    depends on [S390]
    inherited [NET && S390]
    config AFIUCV tristate {
     prompt "AF_IUCV support (S390 - z/VM only)" if [NET && IUCV]
     depends on [IUCV]
     inherited [NET && IUCV]
    }
   }
   config INET boolean {
    prompt "TCP/IP networking" if [NET]
    inherited [NET]
    if [NET && INET] {
     config IP_MULTICAST boolean {
      prompt "IP: multicasting" if [NET && INET]
      inherited [NET && INET]
     }
     config IP_ADVANCED_ROUTER boolean {
      prompt "IP: advanced router" if [NET && INET]
      inherited [NET && INET]
      choice boolean {
       prompt "Choose IP: FIB lookup algorithm (choose FIB_HASH if unsure)" if [NET && INET && IP_ADVANCED_ROUTER]
       depends on [IP_ADVANCED_ROUTER]
       default [ASK_IP_FIB_HASH] if [NET && INET && IP_ADVANCED_ROUTER]
       config ASK_IP_FIB_HASH boolean {
        prompt "FIB_HASH" if [<choice>]
        inherited [<choice>]
       }
       config IP_FIB_TRIE boolean {
        prompt "FIB_TRIE" if [<choice>]
        inherited [<choice>]
       }
      }
     }
     config IP_FIB_HASH boolean {
      default [ASK_IP_FIB_HASH || !IP_ADVANCED_ROUTER] if [NET && INET]
      inherited [NET && INET]
     }
     config IP_FIB_TRIE_STATS boolean {
      prompt "FIB TRIE statistics" if [NET && INET && IP_FIB_TRIE]
      depends on [IP_FIB_TRIE]
      inherited [NET && INET && IP_FIB_TRIE]
     }
     config IP_MULTIPLE_TABLES boolean {
      prompt "IP: policy routing" if [NET && INET && IP_ADVANCED_ROUTER]
      depends on [IP_ADVANCED_ROUTER]
      select FIB_RULES if [NET && INET && IP_ADVANCED_ROUTER]
      inherited [NET && INET && IP_ADVANCED_ROUTER]
     }
     config IP_ROUTE_MULTIPATH boolean {
      prompt "IP: equal cost multipath" if [NET && INET && IP_ADVANCED_ROUTER]
      depends on [IP_ADVANCED_ROUTER]
      inherited [NET && INET && IP_ADVANCED_ROUTER]
     }
     config IP_ROUTE_VERBOSE boolean {
      prompt "IP: verbose route monitoring" if [NET && INET && IP_ADVANCED_ROUTER]
      depends on [IP_ADVANCED_ROUTER]
      inherited [NET && INET && IP_ADVANCED_ROUTER]
     }
     config IP_PNP boolean {
      prompt "IP: kernel level autoconfiguration" if [NET && INET]
      inherited [NET && INET]
      config IP_PNP_DHCP boolean {
       prompt "IP: DHCP support" if [NET && INET && IP_PNP]
       depends on [IP_PNP]
       inherited [NET && INET && IP_PNP]
      }
      config IP_PNP_BOOTP boolean {
       prompt "IP: BOOTP support" if [NET && INET && IP_PNP]
       depends on [IP_PNP]
       inherited [NET && INET && IP_PNP]
      }
      config IP_PNP_RARP boolean {
       prompt "IP: RARP support" if [NET && INET && IP_PNP]
       depends on [IP_PNP]
       inherited [NET && INET && IP_PNP]
      }
     }
     config NET_IPIP tristate {
      prompt "IP: tunneling" if [NET && INET]
      select INET_TUNNEL if [NET && INET]
      inherited [NET && INET]
     }
     config NET_IPGRE tristate {
      prompt "IP: GRE tunnels over IP" if [NET && INET]
      inherited [NET && INET]
      config NET_IPGRE_BROADCAST boolean {
       prompt "IP: broadcast GRE over IP" if [NET && INET && IP_MULTICAST && NET_IPGRE]
       depends on [IP_MULTICAST && NET_IPGRE]
       inherited [NET && INET && IP_MULTICAST && NET_IPGRE]
      }
     }
     config IP_MROUTE boolean {
      prompt "IP: multicast routing" if [NET && INET && IP_MULTICAST]
      depends on [IP_MULTICAST]
      inherited [NET && INET && IP_MULTICAST]
      config IP_PIMSM_V1 boolean {
       prompt "IP: PIM-SM version 1 support" if [NET && INET && IP_MROUTE]
       depends on [IP_MROUTE]
       inherited [NET && INET && IP_MROUTE]
      }
      config IP_PIMSM_V2 boolean {
       prompt "IP: PIM-SM version 2 support" if [NET && INET && IP_MROUTE]
       depends on [IP_MROUTE]
       inherited [NET && INET && IP_MROUTE]
      }
     }
     config ARPD boolean {
      prompt "IP: ARP daemon support" if [NET && INET]
      inherited [NET && INET]
     }
     config SYN_COOKIES boolean {
      prompt "IP: TCP syncookie support (disabled per default)" if [NET && INET]
      inherited [NET && INET]
     }
     config INET_AH tristate {
      prompt "IP: AH transformation" if [NET && INET]
      select XFRM if [NET && INET]
      select CRYPTO if [NET && INET]
      select CRYPTO_HMAC if [NET && INET]
      select CRYPTO_MD5 if [NET && INET]
      select CRYPTO_SHA1 if [NET && INET]
      inherited [NET && INET]
     }
     config INET_ESP tristate {
      prompt "IP: ESP transformation" if [NET && INET]
      select XFRM if [NET && INET]
      select CRYPTO if [NET && INET]
      select CRYPTO_AUTHENC if [NET && INET]
      select CRYPTO_HMAC if [NET && INET]
      select CRYPTO_MD5 if [NET && INET]
      select CRYPTO_CBC if [NET && INET]
      select CRYPTO_SHA1 if [NET && INET]
      select CRYPTO_DES if [NET && INET]
      inherited [NET && INET]
     }
     config INET_IPCOMP tristate {
      prompt "IP: IPComp transformation" if [NET && INET]
      select INET_XFRM_TUNNEL if [NET && INET]
      select XFRM_IPCOMP if [NET && INET]
      inherited [NET && INET]
     }
     config INET_XFRM_TUNNEL tristate {
      select INET_TUNNEL if [NET && INET]
      default [n] if [NET && INET]
      inherited [NET && INET]
     }
     config INET_TUNNEL tristate {
      default [n] if [NET && INET]
      inherited [NET && INET]
     }
     config INET_XFRM_MODE_TRANSPORT tristate {
      prompt "IP: IPsec transport mode" if [NET && INET]
      default [y] if [NET && INET]
      select XFRM if [NET && INET]
      inherited [NET && INET]
     }
     config INET_XFRM_MODE_TUNNEL tristate {
      prompt "IP: IPsec tunnel mode" if [NET && INET]
      default [y] if [NET && INET]
      select XFRM if [NET && INET]
      inherited [NET && INET]
     }
     config INET_XFRM_MODE_BEET tristate {
      prompt "IP: IPsec BEET mode" if [NET && INET]
      default [y] if [NET && INET]
      select XFRM if [NET && INET]
      inherited [NET && INET]
     }
     config INET_LRO boolean {
      prompt "Large Receive Offload (ipv4/tcp)" if [NET && INET]
      default [y] if [NET && INET]
      inherited [NET && INET]
     }
     config INET_DIAG tristate {
      prompt "INET: socket monitoring interface" if [NET && INET]
      default [y] if [NET && INET]
      inherited [NET && INET]
      config INET_TCP_DIAG tristate {
       depends on [INET_DIAG]
       default [INET_DIAG] if [NET && INET && INET_DIAG]
       inherited [NET && INET && INET_DIAG]
      }
     }
     menuconfig TCP_CONG_ADVANCED boolean {
      prompt "TCP: advanced congestion control" if [NET && INET]
      inherited [NET && INET]
      if [NET && INET && TCP_CONG_ADVANCED] {
       config TCP_CONG_BIC tristate {
        prompt "Binary Increase Congestion (BIC) control" if [NET && INET && TCP_CONG_ADVANCED]
        default [m] if [NET && INET && TCP_CONG_ADVANCED]
        inherited [NET && INET && TCP_CONG_ADVANCED]
       }
       config TCP_CONG_CUBIC tristate {
        prompt "CUBIC TCP" if [NET && INET && TCP_CONG_ADVANCED]
        default [y] if [NET && INET && TCP_CONG_ADVANCED]
        depends on [!TCP_CONG_ADVANCED]
        default [y] if [NET && INET && !TCP_CONG_ADVANCED]
        inherited [NET && INET && TCP_CONG_ADVANCED]
       }
       config TCP_CONG_WESTWOOD tristate {
        prompt "TCP Westwood+" if [NET && INET && TCP_CONG_ADVANCED]
        default [m] if [NET && INET && TCP_CONG_ADVANCED]
        inherited [NET && INET && TCP_CONG_ADVANCED]
       }
       config TCP_CONG_HTCP tristate {
        prompt "H-TCP" if [NET && INET && TCP_CONG_ADVANCED]
        default [m] if [NET && INET && TCP_CONG_ADVANCED]
        inherited [NET && INET && TCP_CONG_ADVANCED]
       }
       config TCP_CONG_HSTCP tristate {
        prompt "High Speed TCP" if [NET && INET && TCP_CONG_ADVANCED && EXPERIMENTAL]
        depends on [EXPERIMENTAL]
        default [n] if [NET && INET && TCP_CONG_ADVANCED && EXPERIMENTAL]
        inherited [NET && INET && TCP_CONG_ADVANCED && EXPERIMENTAL]
       }
       config TCP_CONG_HYBLA tristate {
        prompt "TCP-Hybla congestion control algorithm" if [NET && INET && TCP_CONG_ADVANCED && EXPERIMENTAL]
        depends on [EXPERIMENTAL]
        default [n] if [NET && INET && TCP_CONG_ADVANCED && EXPERIMENTAL]
        inherited [NET && INET && TCP_CONG_ADVANCED && EXPERIMENTAL]
       }
       config TCP_CONG_VEGAS tristate {
        prompt "TCP Vegas" if [NET && INET && TCP_CONG_ADVANCED && EXPERIMENTAL]
        depends on [EXPERIMENTAL]
        default [n] if [NET && INET && TCP_CONG_ADVANCED && EXPERIMENTAL]
        inherited [NET && INET && TCP_CONG_ADVANCED && EXPERIMENTAL]
       }
       config TCP_CONG_SCALABLE tristate {
        prompt "Scalable TCP" if [NET && INET && TCP_CONG_ADVANCED && EXPERIMENTAL]
        depends on [EXPERIMENTAL]
        default [n] if [NET && INET && TCP_CONG_ADVANCED && EXPERIMENTAL]
        inherited [NET && INET && TCP_CONG_ADVANCED && EXPERIMENTAL]
       }
       config TCP_CONG_LP tristate {
        prompt "TCP Low Priority" if [NET && INET && TCP_CONG_ADVANCED && EXPERIMENTAL]
        depends on [EXPERIMENTAL]
        default [n] if [NET && INET && TCP_CONG_ADVANCED && EXPERIMENTAL]
        inherited [NET && INET && TCP_CONG_ADVANCED && EXPERIMENTAL]
       }
       config TCP_CONG_VENO tristate {
        prompt "TCP Veno" if [NET && INET && TCP_CONG_ADVANCED && EXPERIMENTAL]
        depends on [EXPERIMENTAL]
        default [n] if [NET && INET && TCP_CONG_ADVANCED && EXPERIMENTAL]
        inherited [NET && INET && TCP_CONG_ADVANCED && EXPERIMENTAL]
       }
       config TCP_CONG_YEAH tristate {
        prompt "YeAH TCP" if [NET && INET && TCP_CONG_ADVANCED && EXPERIMENTAL]
        depends on [EXPERIMENTAL]
        select TCP_CONG_VEGAS if [NET && INET && TCP_CONG_ADVANCED && EXPERIMENTAL]
        default [n] if [NET && INET && TCP_CONG_ADVANCED && EXPERIMENTAL]
        inherited [NET && INET && TCP_CONG_ADVANCED && EXPERIMENTAL]
       }
       config TCP_CONG_ILLINOIS tristate {
        prompt "TCP Illinois" if [NET && INET && TCP_CONG_ADVANCED && EXPERIMENTAL]
        depends on [EXPERIMENTAL]
        default [n] if [NET && INET && TCP_CONG_ADVANCED && EXPERIMENTAL]
        inherited [NET && INET && TCP_CONG_ADVANCED && EXPERIMENTAL]
       }
       choice boolean {
        prompt "Default TCP congestion control" if [NET && INET && TCP_CONG_ADVANCED]
        default [DEFAULT_CUBIC] if [NET && INET && TCP_CONG_ADVANCED]
        config DEFAULT_BIC boolean {
         prompt "Bic" if [<choice> && TCP_CONG_BIC="y"]
         inherited [<choice>]
        }
        config DEFAULT_CUBIC boolean {
         prompt "Cubic" if [<choice> && TCP_CONG_CUBIC="y"]
         inherited [<choice>]
        }
        config DEFAULT_HTCP boolean {
         prompt "Htcp" if [<choice> && TCP_CONG_HTCP="y"]
         inherited [<choice>]
        }
        config DEFAULT_VEGAS boolean {
         prompt "Vegas" if [<choice> && TCP_CONG_VEGAS="y"]
         inherited [<choice>]
        }
        config DEFAULT_WESTWOOD boolean {
         prompt "Westwood" if [<choice> && TCP_CONG_WESTWOOD="y"]
         inherited [<choice>]
        }
        config DEFAULT_RENO boolean {
         prompt "Reno" if [<choice>]
         inherited [<choice>]
        }
       }
      }
      config TCP_CONG_CUBIC tristate {
       prompt "CUBIC TCP" if [NET && INET && TCP_CONG_ADVANCED]
       default [y] if [NET && INET && TCP_CONG_ADVANCED]
       depends on [!TCP_CONG_ADVANCED]
       default [y] if [NET && INET && !TCP_CONG_ADVANCED]
       inherited [NET && INET && !TCP_CONG_ADVANCED]
      }
     }
     config DEFAULT_TCP_CONG string {
      default ["bic"] if [NET && INET && DEFAULT_BIC]
      default ["cubic"] if [NET && INET && DEFAULT_CUBIC]
      default ["htcp"] if [NET && INET && DEFAULT_HTCP]
      default ["vegas"] if [NET && INET && DEFAULT_VEGAS]
      default ["westwood"] if [NET && INET && DEFAULT_WESTWOOD]
      default ["reno"] if [NET && INET && DEFAULT_RENO]
      default ["cubic"] if [NET && INET]
      inherited [NET && INET]
     }
     config TCP_MD5SIG boolean {
      prompt "TCP: MD5 Signature Option support (RFC2385) (EXPERIMENTAL)" if [NET && INET && EXPERIMENTAL]
      depends on [EXPERIMENTAL]
      select CRYPTO if [NET && INET && EXPERIMENTAL]
      select CRYPTO_MD5 if [NET && INET && EXPERIMENTAL]
      inherited [NET && INET && EXPERIMENTAL]
     }
     menuconfig IPV6 tristate {
      prompt "The IPv6 protocol" if [NET && INET]
      default [m] if [NET && INET]
      inherited [NET && INET]
      if [NET && INET && IPV6] {
       config IPV6_PRIVACY boolean {
        prompt "IPv6: Privacy Extensions (RFC 3041) support" if [NET && INET && IPV6]
        inherited [NET && INET && IPV6]
       }
       config IPV6_ROUTER_PREF boolean {
        prompt "IPv6: Router Preference (RFC 4191) support" if [NET && INET && IPV6]
        inherited [NET && INET && IPV6]
        config IPV6_ROUTE_INFO boolean {
         prompt "IPv6: Route Information (RFC 4191) support (EXPERIMENTAL)" if [NET && INET && IPV6 && IPV6_ROUTER_PREF && EXPERIMENTAL]
         depends on [IPV6_ROUTER_PREF && EXPERIMENTAL]
         inherited [NET && INET && IPV6 && IPV6_ROUTER_PREF && EXPERIMENTAL]
        }
       }
       config IPV6_OPTIMISTIC_DAD boolean {
        prompt "IPv6: Enable RFC 4429 Optimistic DAD (EXPERIMENTAL)" if [NET && INET && IPV6 && EXPERIMENTAL]
        depends on [EXPERIMENTAL]
        inherited [NET && INET && IPV6 && EXPERIMENTAL]
       }
       config INET6_AH tristate {
        prompt "IPv6: AH transformation" if [NET && INET && IPV6]
        select XFRM if [NET && INET && IPV6]
        select CRYPTO if [NET && INET && IPV6]
        select CRYPTO_HMAC if [NET && INET && IPV6]
        select CRYPTO_MD5 if [NET && INET && IPV6]
        select CRYPTO_SHA1 if [NET && INET && IPV6]
        inherited [NET && INET && IPV6]
       }
       config INET6_ESP tristate {
        prompt "IPv6: ESP transformation" if [NET && INET && IPV6]
        select XFRM if [NET && INET && IPV6]
        select CRYPTO if [NET && INET && IPV6]
        select CRYPTO_AUTHENC if [NET && INET && IPV6]
        select CRYPTO_HMAC if [NET && INET && IPV6]
        select CRYPTO_MD5 if [NET && INET && IPV6]
        select CRYPTO_CBC if [NET && INET && IPV6]
        select CRYPTO_SHA1 if [NET && INET && IPV6]
        select CRYPTO_DES if [NET && INET && IPV6]
        inherited [NET && INET && IPV6]
       }
       config INET6_IPCOMP tristate {
        prompt "IPv6: IPComp transformation" if [NET && INET && IPV6]
        select INET6_XFRM_TUNNEL if [NET && INET && IPV6]
        select XFRM_IPCOMP if [NET && INET && IPV6]
        inherited [NET && INET && IPV6]
       }
       config IPV6_MIP6 tristate {
        prompt "IPv6: Mobility (EXPERIMENTAL)" if [NET && INET && IPV6 && EXPERIMENTAL]
        depends on [EXPERIMENTAL]
        select XFRM if [NET && INET && IPV6 && EXPERIMENTAL]
        inherited [NET && INET && IPV6 && EXPERIMENTAL]
       }
       config INET6_XFRM_TUNNEL tristate {
        select INET6_TUNNEL if [NET && INET && IPV6]
        default [n] if [NET && INET && IPV6]
        inherited [NET && INET && IPV6]
       }
       config INET6_TUNNEL tristate {
        default [n] if [NET && INET && IPV6]
        inherited [NET && INET && IPV6]
       }
       config INET6_XFRM_MODE_TRANSPORT tristate {
        prompt "IPv6: IPsec transport mode" if [NET && INET && IPV6]
        default [IPV6] if [NET && INET && IPV6]
        select XFRM if [NET && INET && IPV6]
        inherited [NET && INET && IPV6]
       }
       config INET6_XFRM_MODE_TUNNEL tristate {
        prompt "IPv6: IPsec tunnel mode" if [NET && INET && IPV6]
        default [IPV6] if [NET && INET && IPV6]
        select XFRM if [NET && INET && IPV6]
        inherited [NET && INET && IPV6]
       }
       config INET6_XFRM_MODE_BEET tristate {
        prompt "IPv6: IPsec BEET mode" if [NET && INET && IPV6]
        default [IPV6] if [NET && INET && IPV6]
        select XFRM if [NET && INET && IPV6]
        inherited [NET && INET && IPV6]
       }
       config INET6_XFRM_MODE_ROUTEOPTIMIZATION tristate {
        prompt "IPv6: MIPv6 route optimization mode (EXPERIMENTAL)" if [NET && INET && IPV6 && EXPERIMENTAL]
        depends on [EXPERIMENTAL]
        select XFRM if [NET && INET && IPV6 && EXPERIMENTAL]
        inherited [NET && INET && IPV6 && EXPERIMENTAL]
       }
       config IPV6_SIT tristate {
        prompt "IPv6: IPv6-in-IPv4 tunnel (SIT driver)" if [NET && INET && IPV6]
        select INET_TUNNEL if [NET && INET && IPV6]
        select IPV6_NDISC_NODETYPE if [NET && INET && IPV6]
        default [y] if [NET && INET && IPV6]
        inherited [NET && INET && IPV6]
        config IPV6_SIT_6RD boolean {
         prompt "IPv6: IPv6 Rapid Deployment (6RD) (EXPERIMENTAL)" if [NET && INET && IPV6 && IPV6_SIT && EXPERIMENTAL]
         depends on [IPV6_SIT && EXPERIMENTAL]
         default [n] if [NET && INET && IPV6 && IPV6_SIT && EXPERIMENTAL]
         inherited [NET && INET && IPV6 && IPV6_SIT && EXPERIMENTAL]
        }
       }
       config IPV6_NDISC_NODETYPE boolean {
        inherited [NET && INET && IPV6]
       }
       config IPV6_TUNNEL tristate {
        prompt "IPv6: IP-in-IPv6 tunnel (RFC2473)" if [NET && INET && IPV6]
        select INET6_TUNNEL if [NET && INET && IPV6]
        inherited [NET && INET && IPV6]
       }
       config IPV6_MULTIPLE_TABLES boolean {
        prompt "IPv6: Multiple Routing Tables" if [NET && INET && IPV6 && EXPERIMENTAL]
        depends on [EXPERIMENTAL]
        select FIB_RULES if [NET && INET && IPV6 && EXPERIMENTAL]
        inherited [NET && INET && IPV6 && EXPERIMENTAL]
        config IPV6_SUBTREES boolean {
         prompt "IPv6: source address based routing" if [NET && INET && IPV6 && IPV6_MULTIPLE_TABLES]
         depends on [IPV6_MULTIPLE_TABLES]
         inherited [NET && INET && IPV6 && IPV6_MULTIPLE_TABLES]
        }
       }
       config IPV6_MROUTE boolean {
        prompt "IPv6: multicast routing (EXPERIMENTAL)" if [NET && INET && IPV6 && EXPERIMENTAL]
        depends on [IPV6 && EXPERIMENTAL]
        inherited [NET && INET && IPV6 && EXPERIMENTAL]
        config IPV6_PIMSM_V2 boolean {
         prompt "IPv6: PIM-SM version 2 support (EXPERIMENTAL)" if [NET && INET && IPV6 && IPV6_MROUTE]
         depends on [IPV6_MROUTE]
         inherited [NET && INET && IPV6 && IPV6_MROUTE]
        }
       }
      }
     }
     config NETLABEL boolean {
      prompt "NetLabel subsystem support" if [NET && INET && SECURITY]
      depends on [SECURITY]
      default [n] if [NET && INET && SECURITY]
      inherited [NET && INET && SECURITY]
     }
    }
   }
   config NETWORK_SECMARK boolean {
    prompt "Security Marking" if [NET]
    inherited [NET]
   }
   menuconfig NETFILTER boolean {
    prompt "Network packet filtering framework (Netfilter)" if [NET]
    inherited [NET]
    if [NET && NETFILTER] {
     config NETFILTER_DEBUG boolean {
      prompt "Network packet filtering debugging" if [NET && NETFILTER]
      depends on [NETFILTER]
      inherited [NET && NETFILTER]
     }
     config NETFILTER_ADVANCED boolean {
      prompt "Advanced netfilter configuration" if [NET && NETFILTER]
      depends on [NETFILTER]
      default [y] if [NET && NETFILTER]
      inherited [NET && NETFILTER]
      config BRIDGE_NETFILTER boolean {
       prompt "Bridged IP/ARP packets filtering" if [NET && BRIDGE && NETFILTER && INET && NETFILTER_ADVANCED]
       depends on [BRIDGE && NETFILTER && INET]
       depends on [NETFILTER_ADVANCED]
       default [y] if [NET && BRIDGE && NETFILTER && INET && NETFILTER_ADVANCED]
       inherited [NET && BRIDGE && NETFILTER && INET && NETFILTER_ADVANCED]
      }
     }
     menu "Core Netfilter Configuration" {
      depends on [NET && INET && NETFILTER]
      config NETFILTER_NETLINK tristate {
       inherited [NET && INET && NETFILTER]
      }
      config NETFILTER_NETLINK_QUEUE tristate {
       prompt "Netfilter NFQUEUE over NFNETLINK interface" if [NET && INET && NETFILTER && NETFILTER_ADVANCED]
       depends on [NETFILTER_ADVANCED]
       select NETFILTER_NETLINK if [NET && INET && NETFILTER && NETFILTER_ADVANCED]
       inherited [NET && INET && NETFILTER && NETFILTER_ADVANCED]
      }
      config NETFILTER_NETLINK_LOG tristate {
       prompt "Netfilter LOG over NFNETLINK interface" if [NET && INET && NETFILTER]
       default [m] if [NET && INET && NETFILTER && !NETFILTER_ADVANCED]
       select NETFILTER_NETLINK if [NET && INET && NETFILTER]
       inherited [NET && INET && NETFILTER]
      }
      config NF_CONNTRACK tristate {
       prompt "Netfilter connection tracking support" if [NET && INET && NETFILTER]
       default [m] if [NET && INET && NETFILTER && !NETFILTER_ADVANCED]
       inherited [NET && INET && NETFILTER]
       if [NET && INET && NETFILTER && NF_CONNTRACK] {
        config NF_CT_ACCT boolean {
         prompt "Connection tracking flow accounting" if [NET && INET && NETFILTER && NF_CONNTRACK && NETFILTER_ADVANCED]
         depends on [NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && NF_CONNTRACK && NETFILTER_ADVANCED]
        }
        config NF_CONNTRACK_MARK boolean {
         prompt "Connection mark tracking support" if [NET && INET && NETFILTER && NF_CONNTRACK && NETFILTER_ADVANCED]
         depends on [NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && NF_CONNTRACK && NETFILTER_ADVANCED]
        }
        config NF_CONNTRACK_SECMARK boolean {
         prompt "Connection tracking security mark support" if [NET && INET && NETFILTER && NF_CONNTRACK && NETWORK_SECMARK]
         depends on [NETWORK_SECMARK]
         default [m] if [NET && INET && NETFILTER && NF_CONNTRACK && NETWORK_SECMARK && !NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && NF_CONNTRACK && NETWORK_SECMARK]
        }
        config NF_CONNTRACK_EVENTS boolean {
         prompt "Connection tracking events" if [NET && INET && NETFILTER && NF_CONNTRACK && NETFILTER_ADVANCED]
         depends on [NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && NF_CONNTRACK && NETFILTER_ADVANCED]
        }
        config NF_CT_PROTO_DCCP tristate {
         prompt "DCCP protocol connection tracking support (EXPERIMENTAL)" if [NET && INET && NETFILTER && NF_CONNTRACK && EXPERIMENTAL && NETFILTER_ADVANCED]
         depends on [EXPERIMENTAL]
         depends on [NETFILTER_ADVANCED]
         default [IP_DCCP] if [NET && INET && NETFILTER && NF_CONNTRACK && EXPERIMENTAL && NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && NF_CONNTRACK && EXPERIMENTAL && NETFILTER_ADVANCED]
        }
        config NF_CT_PROTO_GRE tristate {
         inherited [NET && INET && NETFILTER && NF_CONNTRACK]
        }
        config NF_CT_PROTO_SCTP tristate {
         prompt "SCTP protocol connection tracking support (EXPERIMENTAL)" if [NET && INET && NETFILTER && NF_CONNTRACK && EXPERIMENTAL && NETFILTER_ADVANCED]
         depends on [EXPERIMENTAL]
         depends on [NETFILTER_ADVANCED]
         default [IP_SCTP] if [NET && INET && NETFILTER && NF_CONNTRACK && EXPERIMENTAL && NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && NF_CONNTRACK && EXPERIMENTAL && NETFILTER_ADVANCED]
        }
        config NF_CT_PROTO_UDPLITE tristate {
         prompt "UDP-Lite protocol connection tracking support" if [NET && INET && NETFILTER && NF_CONNTRACK && NETFILTER_ADVANCED]
         depends on [NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && NF_CONNTRACK && NETFILTER_ADVANCED]
        }
        config NF_CONNTRACK_AMANDA tristate {
         prompt "Amanda backup protocol support" if [NET && INET && NETFILTER && NF_CONNTRACK && NETFILTER_ADVANCED]
         depends on [NETFILTER_ADVANCED]
         select TEXTSEARCH if [NET && INET && NETFILTER && NF_CONNTRACK && NETFILTER_ADVANCED]
         select TEXTSEARCH_KMP if [NET && INET && NETFILTER && NF_CONNTRACK && NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && NF_CONNTRACK && NETFILTER_ADVANCED]
        }
        config NF_CONNTRACK_FTP tristate {
         prompt "FTP protocol support" if [NET && INET && NETFILTER && NF_CONNTRACK]
         default [m] if [NET && INET && NETFILTER && NF_CONNTRACK && !NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && NF_CONNTRACK]
        }
        config NF_CONNTRACK_H323 tristate {
         prompt "H.323 protocol support" if [NET && INET && NETFILTER && NF_CONNTRACK && (IPV6 || IPV6="n") && NETFILTER_ADVANCED]
         depends on [IPV6 || IPV6="n"]
         depends on [NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && NF_CONNTRACK && (IPV6 || IPV6="n") && NETFILTER_ADVANCED]
        }
        config NF_CONNTRACK_IRC tristate {
         prompt "IRC protocol support" if [NET && INET && NETFILTER && NF_CONNTRACK]
         default [m] if [NET && INET && NETFILTER && NF_CONNTRACK && !NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && NF_CONNTRACK]
        }
        config NF_CONNTRACK_NETBIOS_NS tristate {
         prompt "NetBIOS name service protocol support" if [NET && INET && NETFILTER && NF_CONNTRACK && NETFILTER_ADVANCED]
         depends on [NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && NF_CONNTRACK && NETFILTER_ADVANCED]
        }
        config NF_CONNTRACK_PPTP tristate {
         prompt "PPtP protocol support" if [NET && INET && NETFILTER && NF_CONNTRACK && NETFILTER_ADVANCED]
         depends on [NETFILTER_ADVANCED]
         select NF_CT_PROTO_GRE if [NET && INET && NETFILTER && NF_CONNTRACK && NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && NF_CONNTRACK && NETFILTER_ADVANCED]
        }
        config NF_CONNTRACK_SANE tristate {
         prompt "SANE protocol support (EXPERIMENTAL)" if [NET && INET && NETFILTER && NF_CONNTRACK && EXPERIMENTAL && NETFILTER_ADVANCED]
         depends on [EXPERIMENTAL]
         depends on [NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && NF_CONNTRACK && EXPERIMENTAL && NETFILTER_ADVANCED]
        }
        config NF_CONNTRACK_SIP tristate {
         prompt "SIP protocol support" if [NET && INET && NETFILTER && NF_CONNTRACK]
         default [m] if [NET && INET && NETFILTER && NF_CONNTRACK && !NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && NF_CONNTRACK]
        }
        config NF_CONNTRACK_TFTP tristate {
         prompt "TFTP protocol support" if [NET && INET && NETFILTER && NF_CONNTRACK && NETFILTER_ADVANCED]
         depends on [NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && NF_CONNTRACK && NETFILTER_ADVANCED]
        }
        config NF_CT_NETLINK tristate {
         prompt "Connection tracking netlink interface" if [NET && INET && NETFILTER && NF_CONNTRACK]
         select NETFILTER_NETLINK if [NET && INET && NETFILTER && NF_CONNTRACK]
         default [m] if [NET && INET && NETFILTER && NF_CONNTRACK && !NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && NF_CONNTRACK]
        }
       }
      }
      config NETFILTER_TPROXY tristate {
       prompt "Transparent proxying support (EXPERIMENTAL)" if [NET && INET && NETFILTER && EXPERIMENTAL && IP_NF_MANGLE && NETFILTER_ADVANCED]
       depends on [EXPERIMENTAL]
       depends on [IP_NF_MANGLE]
       depends on [NETFILTER_ADVANCED]
       inherited [NET && INET && NETFILTER && EXPERIMENTAL && IP_NF_MANGLE && NETFILTER_ADVANCED]
      }
      config NETFILTER_XTABLES tristate {
       prompt "Netfilter Xtables support (required for ip_tables)" if [NET && INET && NETFILTER]
       default [m] if [NET && INET && NETFILTER && !NETFILTER_ADVANCED]
       inherited [NET && INET && NETFILTER]
       if [NET && INET && NETFILTER && NETFILTER_XTABLES] {
        config NETFILTER_XT_TARGET_CLASSIFY tristate {
         prompt "\"CLASSIFY\" target support" if [NET && INET && NETFILTER && NETFILTER_XTABLES && NETFILTER_ADVANCED]
         depends on [NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES && NETFILTER_ADVANCED]
        }
        config NETFILTER_XT_TARGET_CONNMARK tristate {
         prompt "\"CONNMARK\" target support" if [NET && INET && NETFILTER && NETFILTER_XTABLES && NF_CONNTRACK && NETFILTER_ADVANCED]
         depends on [NF_CONNTRACK]
         depends on [NETFILTER_ADVANCED]
         select NF_CONNTRACK_MARK if [NET && INET && NETFILTER && NETFILTER_XTABLES && NF_CONNTRACK && NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES && NF_CONNTRACK && NETFILTER_ADVANCED]
        }
        config NETFILTER_XT_TARGET_CONNSECMARK tristate {
         prompt "\"CONNSECMARK\" target support" if [NET && INET && NETFILTER && NETFILTER_XTABLES && NF_CONNTRACK && NF_CONNTRACK_SECMARK]
         depends on [NF_CONNTRACK && NF_CONNTRACK_SECMARK]
         default [m] if [NET && INET && NETFILTER && NETFILTER_XTABLES && NF_CONNTRACK && NF_CONNTRACK_SECMARK && !NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES && NF_CONNTRACK && NF_CONNTRACK_SECMARK]
        }
        config NETFILTER_XT_TARGET_DSCP tristate {
         prompt "\"DSCP\" and \"TOS\" target support" if [NET && INET && NETFILTER && NETFILTER_XTABLES && (IP_NF_MANGLE || IP6_NF_MANGLE) && NETFILTER_ADVANCED]
         depends on [IP_NF_MANGLE || IP6_NF_MANGLE]
         depends on [NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES && (IP_NF_MANGLE || IP6_NF_MANGLE) && NETFILTER_ADVANCED]
        }
        config NETFILTER_XT_TARGET_HL tristate {
         prompt "\"HL\" hoplimit target support" if [NET && INET && NETFILTER && NETFILTER_XTABLES && (IP_NF_MANGLE || IP6_NF_MANGLE) && NETFILTER_ADVANCED]
         depends on [IP_NF_MANGLE || IP6_NF_MANGLE]
         depends on [NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES && (IP_NF_MANGLE || IP6_NF_MANGLE) && NETFILTER_ADVANCED]
        }
        config NETFILTER_XT_TARGET_LED tristate {
         prompt "\"LED\" target support" if [NET && INET && NETFILTER && NETFILTER_XTABLES && LEDS_CLASS && LEDS_TRIGGERS && NETFILTER_ADVANCED]
         depends on [LEDS_CLASS && LEDS_TRIGGERS]
         depends on [NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES && LEDS_CLASS && LEDS_TRIGGERS && NETFILTER_ADVANCED]
        }
        config NETFILTER_XT_TARGET_MARK tristate {
         prompt "\"MARK\" target support" if [NET && INET && NETFILTER && NETFILTER_XTABLES]
         default [m] if [NET && INET && NETFILTER && NETFILTER_XTABLES && !NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES]
        }
        config NETFILTER_XT_TARGET_NFLOG tristate {
         prompt "\"NFLOG\" target support" if [NET && INET && NETFILTER && NETFILTER_XTABLES]
         default [m] if [NET && INET && NETFILTER && NETFILTER_XTABLES && !NETFILTER_ADVANCED]
         select NETFILTER_NETLINK_LOG if [NET && INET && NETFILTER && NETFILTER_XTABLES]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES]
        }
        config NETFILTER_XT_TARGET_NFQUEUE tristate {
         prompt "\"NFQUEUE\" target Support" if [NET && INET && NETFILTER && NETFILTER_XTABLES && NETFILTER_ADVANCED]
         depends on [NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES && NETFILTER_ADVANCED]
        }
        config NETFILTER_XT_TARGET_NOTRACK tristate {
         prompt "\"NOTRACK\" target support" if [NET && INET && NETFILTER && NETFILTER_XTABLES && (IP_NF_RAW || IP6_NF_RAW) && NF_CONNTRACK && NETFILTER_ADVANCED]
         depends on [IP_NF_RAW || IP6_NF_RAW]
         depends on [NF_CONNTRACK]
         depends on [NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES && (IP_NF_RAW || IP6_NF_RAW) && NF_CONNTRACK && NETFILTER_ADVANCED]
        }
        config NETFILTER_XT_TARGET_RATEEST tristate {
         prompt "\"RATEEST\" target support" if [NET && INET && NETFILTER && NETFILTER_XTABLES && NETFILTER_ADVANCED]
         depends on [NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES && NETFILTER_ADVANCED]
        }
        config NETFILTER_XT_TARGET_TPROXY tristate {
         prompt "\"TPROXY\" target support (EXPERIMENTAL)" if [NET && INET && NETFILTER && EXPERIMENTAL && NETFILTER_TPROXY && NETFILTER_XTABLES && NETFILTER_ADVANCED]
         depends on [EXPERIMENTAL]
         depends on [NETFILTER_TPROXY]
         depends on [NETFILTER_XTABLES]
         depends on [NETFILTER_ADVANCED]
         select NF_DEFRAG_IPV4 if [NET && INET && NETFILTER && EXPERIMENTAL && NETFILTER_TPROXY && NETFILTER_XTABLES && NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && EXPERIMENTAL && NETFILTER_TPROXY && NETFILTER_XTABLES && NETFILTER_ADVANCED]
        }
        config NETFILTER_XT_TARGET_TRACE tristate {
         prompt "\"TRACE\" target support" if [NET && INET && NETFILTER && NETFILTER_XTABLES && (IP_NF_RAW || IP6_NF_RAW) && NETFILTER_ADVANCED]
         depends on [IP_NF_RAW || IP6_NF_RAW]
         depends on [NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES && (IP_NF_RAW || IP6_NF_RAW) && NETFILTER_ADVANCED]
        }
        config NETFILTER_XT_TARGET_SECMARK tristate {
         prompt "\"SECMARK\" target support" if [NET && INET && NETFILTER && NETFILTER_XTABLES && NETWORK_SECMARK]
         depends on [NETWORK_SECMARK]
         default [m] if [NET && INET && NETFILTER && NETFILTER_XTABLES && NETWORK_SECMARK && !NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES && NETWORK_SECMARK]
        }
        config NETFILTER_XT_TARGET_TCPMSS tristate {
         prompt "\"TCPMSS\" target support" if [NET && INET && NETFILTER && NETFILTER_XTABLES && (IPV6 || IPV6="n")]
         depends on [IPV6 || IPV6="n"]
         default [m] if [NET && INET && NETFILTER && NETFILTER_XTABLES && (IPV6 || IPV6="n") && !NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES && (IPV6 || IPV6="n")]
        }
        config NETFILTER_XT_TARGET_TCPOPTSTRIP tristate {
         prompt "\"TCPOPTSTRIP\" target support (EXPERIMENTAL)" if [NET && INET && NETFILTER && NETFILTER_XTABLES && EXPERIMENTAL && (IP_NF_MANGLE || IP6_NF_MANGLE) && NETFILTER_ADVANCED]
         depends on [EXPERIMENTAL]
         depends on [IP_NF_MANGLE || IP6_NF_MANGLE]
         depends on [NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES && EXPERIMENTAL && (IP_NF_MANGLE || IP6_NF_MANGLE) && NETFILTER_ADVANCED]
        }
        config NETFILTER_XT_MATCH_CLUSTER tristate {
         prompt "\"cluster\" match support" if [NET && INET && NETFILTER && NETFILTER_XTABLES && NF_CONNTRACK && NETFILTER_ADVANCED]
         depends on [NF_CONNTRACK]
         depends on [NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES && NF_CONNTRACK && NETFILTER_ADVANCED]
        }
        config NETFILTER_XT_MATCH_COMMENT tristate {
         prompt "\"comment\" match support" if [NET && INET && NETFILTER && NETFILTER_XTABLES && NETFILTER_ADVANCED]
         depends on [NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES && NETFILTER_ADVANCED]
        }
        config NETFILTER_XT_MATCH_CONNBYTES tristate {
         prompt "\"connbytes\" per-connection counter match support" if [NET && INET && NETFILTER && NETFILTER_XTABLES && NF_CONNTRACK && NETFILTER_ADVANCED]
         depends on [NF_CONNTRACK]
         depends on [NETFILTER_ADVANCED]
         select NF_CT_ACCT if [NET && INET && NETFILTER && NETFILTER_XTABLES && NF_CONNTRACK && NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES && NF_CONNTRACK && NETFILTER_ADVANCED]
        }
        config NETFILTER_XT_MATCH_CONNLIMIT tristate {
         prompt "\"connlimit\" match support\"" if [NET && INET && NETFILTER && NETFILTER_XTABLES && NF_CONNTRACK && NETFILTER_ADVANCED]
         depends on [NF_CONNTRACK]
         depends on [NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES && NF_CONNTRACK && NETFILTER_ADVANCED]
        }
        config NETFILTER_XT_MATCH_CONNMARK tristate {
         prompt "\"connmark\" connection mark match support" if [NET && INET && NETFILTER && NETFILTER_XTABLES && NF_CONNTRACK && NETFILTER_ADVANCED]
         depends on [NF_CONNTRACK]
         depends on [NETFILTER_ADVANCED]
         select NF_CONNTRACK_MARK if [NET && INET && NETFILTER && NETFILTER_XTABLES && NF_CONNTRACK && NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES && NF_CONNTRACK && NETFILTER_ADVANCED]
        }
        config NETFILTER_XT_MATCH_CONNTRACK tristate {
         prompt "\"conntrack\" connection tracking match support" if [NET && INET && NETFILTER && NETFILTER_XTABLES && NF_CONNTRACK]
         depends on [NF_CONNTRACK]
         default [m] if [NET && INET && NETFILTER && NETFILTER_XTABLES && NF_CONNTRACK && !NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES && NF_CONNTRACK]
        }
        config NETFILTER_XT_MATCH_DCCP tristate {
         prompt "\"dccp\" protocol match support" if [NET && INET && NETFILTER && NETFILTER_XTABLES && NETFILTER_ADVANCED]
         depends on [NETFILTER_ADVANCED]
         default [IP_DCCP] if [NET && INET && NETFILTER && NETFILTER_XTABLES && NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES && NETFILTER_ADVANCED]
        }
        config NETFILTER_XT_MATCH_DSCP tristate {
         prompt "\"dscp\" and \"tos\" match support" if [NET && INET && NETFILTER && NETFILTER_XTABLES && NETFILTER_ADVANCED]
         depends on [NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES && NETFILTER_ADVANCED]
        }
        config NETFILTER_XT_MATCH_ESP tristate {
         prompt "\"esp\" match support" if [NET && INET && NETFILTER && NETFILTER_XTABLES && NETFILTER_ADVANCED]
         depends on [NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES && NETFILTER_ADVANCED]
        }
        config NETFILTER_XT_MATCH_HASHLIMIT tristate {
         prompt "\"hashlimit\" match support" if [NET && INET && NETFILTER && NETFILTER_XTABLES && (IP6_NF_IPTABLES || IP6_NF_IPTABLES="n") && NETFILTER_ADVANCED]
         depends on [IP6_NF_IPTABLES || IP6_NF_IPTABLES="n"]
         depends on [NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES && (IP6_NF_IPTABLES || IP6_NF_IPTABLES="n") && NETFILTER_ADVANCED]
        }
        config NETFILTER_XT_MATCH_HELPER tristate {
         prompt "\"helper\" match support" if [NET && INET && NETFILTER && NETFILTER_XTABLES && NF_CONNTRACK && NETFILTER_ADVANCED]
         depends on [NF_CONNTRACK]
         depends on [NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES && NF_CONNTRACK && NETFILTER_ADVANCED]
        }
        config NETFILTER_XT_MATCH_HL tristate {
         prompt "\"hl\" hoplimit/TTL match support" if [NET && INET && NETFILTER && NETFILTER_XTABLES && NETFILTER_ADVANCED]
         depends on [NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES && NETFILTER_ADVANCED]
        }
        config NETFILTER_XT_MATCH_IPRANGE tristate {
         prompt "\"iprange\" address range match support" if [NET && INET && NETFILTER && NETFILTER_XTABLES && NETFILTER_ADVANCED]
         depends on [NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES && NETFILTER_ADVANCED]
        }
        config NETFILTER_XT_MATCH_LENGTH tristate {
         prompt "\"length\" match support" if [NET && INET && NETFILTER && NETFILTER_XTABLES && NETFILTER_ADVANCED]
         depends on [NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES && NETFILTER_ADVANCED]
        }
        config NETFILTER_XT_MATCH_LIMIT tristate {
         prompt "\"limit\" match support" if [NET && INET && NETFILTER && NETFILTER_XTABLES && NETFILTER_ADVANCED]
         depends on [NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES && NETFILTER_ADVANCED]
        }
        config NETFILTER_XT_MATCH_MAC tristate {
         prompt "\"mac\" address match support" if [NET && INET && NETFILTER && NETFILTER_XTABLES && NETFILTER_ADVANCED]
         depends on [NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES && NETFILTER_ADVANCED]
        }
        config NETFILTER_XT_MATCH_MARK tristate {
         prompt "\"mark\" match support" if [NET && INET && NETFILTER && NETFILTER_XTABLES]
         default [m] if [NET && INET && NETFILTER && NETFILTER_XTABLES && !NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES]
        }
        config NETFILTER_XT_MATCH_MULTIPORT tristate {
         prompt "\"multiport\" Multiple port match support" if [NET && INET && NETFILTER && NETFILTER_XTABLES && NETFILTER_ADVANCED]
         depends on [NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES && NETFILTER_ADVANCED]
        }
        config NETFILTER_XT_MATCH_OWNER tristate {
         prompt "\"owner\" match support" if [NET && INET && NETFILTER && NETFILTER_XTABLES && NETFILTER_ADVANCED]
         depends on [NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES && NETFILTER_ADVANCED]
        }
        config NETFILTER_XT_MATCH_POLICY tristate {
         prompt "IPsec \"policy\" match support" if [NET && INET && NETFILTER && NETFILTER_XTABLES && XFRM]
         depends on [XFRM]
         default [m] if [NET && INET && NETFILTER && NETFILTER_XTABLES && XFRM && !NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES && XFRM]
        }
        config NETFILTER_XT_MATCH_PHYSDEV tristate {
         prompt "\"physdev\" match support" if [NET && INET && NETFILTER && NETFILTER_XTABLES && BRIDGE && BRIDGE_NETFILTER && NETFILTER_ADVANCED]
         depends on [BRIDGE && BRIDGE_NETFILTER]
         depends on [NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES && BRIDGE && BRIDGE_NETFILTER && NETFILTER_ADVANCED]
        }
        config NETFILTER_XT_MATCH_PKTTYPE tristate {
         prompt "\"pkttype\" packet type match support" if [NET && INET && NETFILTER && NETFILTER_XTABLES && NETFILTER_ADVANCED]
         depends on [NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES && NETFILTER_ADVANCED]
        }
        config NETFILTER_XT_MATCH_QUOTA tristate {
         prompt "\"quota\" match support" if [NET && INET && NETFILTER && NETFILTER_XTABLES && NETFILTER_ADVANCED]
         depends on [NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES && NETFILTER_ADVANCED]
        }
        config NETFILTER_XT_MATCH_RATEEST tristate {
         prompt "\"rateest\" match support" if [NET && INET && NETFILTER && NETFILTER_XTABLES && NETFILTER_ADVANCED]
         depends on [NETFILTER_ADVANCED]
         select NETFILTER_XT_TARGET_RATEEST if [NET && INET && NETFILTER && NETFILTER_XTABLES && NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES && NETFILTER_ADVANCED]
        }
        config NETFILTER_XT_MATCH_REALM tristate {
         prompt "\"realm\" match support" if [NET && INET && NETFILTER && NETFILTER_XTABLES && NETFILTER_ADVANCED]
         depends on [NETFILTER_ADVANCED]
         select NET_CLS_ROUTE if [NET && INET && NETFILTER && NETFILTER_XTABLES && NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES && NETFILTER_ADVANCED]
        }
        config NETFILTER_XT_MATCH_RECENT tristate {
         prompt "\"recent\" match support" if [NET && INET && NETFILTER && NETFILTER_XTABLES && NETFILTER_ADVANCED]
         depends on [NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES && NETFILTER_ADVANCED]
         config NETFILTER_XT_MATCH_RECENT_PROC_COMPAT boolean {
          prompt "Enable obsolete /proc/net/ipt_recent" if [NET && INET && NETFILTER && NETFILTER_XTABLES && NETFILTER_XT_MATCH_RECENT && PROC_FS]
          depends on [NETFILTER_XT_MATCH_RECENT && PROC_FS]
          inherited [NET && INET && NETFILTER && NETFILTER_XTABLES && NETFILTER_XT_MATCH_RECENT && PROC_FS]
         }
        }
        config NETFILTER_XT_MATCH_SCTP tristate {
         prompt "\"sctp\" protocol match support (EXPERIMENTAL)" if [NET && INET && NETFILTER && NETFILTER_XTABLES && EXPERIMENTAL && NETFILTER_ADVANCED]
         depends on [EXPERIMENTAL]
         depends on [NETFILTER_ADVANCED]
         default [IP_SCTP] if [NET && INET && NETFILTER && NETFILTER_XTABLES && EXPERIMENTAL && NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES && EXPERIMENTAL && NETFILTER_ADVANCED]
        }
        config NETFILTER_XT_MATCH_SOCKET tristate {
         prompt "\"socket\" match support (EXPERIMENTAL)" if [NET && INET && NETFILTER && EXPERIMENTAL && NETFILTER_TPROXY && NETFILTER_XTABLES && NETFILTER_ADVANCED && (!NF_CONNTRACK || NF_CONNTRACK)]
         depends on [EXPERIMENTAL]
         depends on [NETFILTER_TPROXY]
         depends on [NETFILTER_XTABLES]
         depends on [NETFILTER_ADVANCED]
         depends on [!NF_CONNTRACK || NF_CONNTRACK]
         select NF_DEFRAG_IPV4 if [NET && INET && NETFILTER && EXPERIMENTAL && NETFILTER_TPROXY && NETFILTER_XTABLES && NETFILTER_ADVANCED && (!NF_CONNTRACK || NF_CONNTRACK)]
         inherited [NET && INET && NETFILTER && EXPERIMENTAL && NETFILTER_TPROXY && NETFILTER_XTABLES && NETFILTER_ADVANCED && (!NF_CONNTRACK || NF_CONNTRACK)]
        }
        config NETFILTER_XT_MATCH_STATE tristate {
         prompt "\"state\" match support" if [NET && INET && NETFILTER && NETFILTER_XTABLES && NF_CONNTRACK]
         depends on [NF_CONNTRACK]
         default [m] if [NET && INET && NETFILTER && NETFILTER_XTABLES && NF_CONNTRACK && !NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES && NF_CONNTRACK]
        }
        config NETFILTER_XT_MATCH_STATISTIC tristate {
         prompt "\"statistic\" match support" if [NET && INET && NETFILTER && NETFILTER_XTABLES && NETFILTER_ADVANCED]
         depends on [NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES && NETFILTER_ADVANCED]
        }
        config NETFILTER_XT_MATCH_STRING tristate {
         prompt "\"string\" match support" if [NET && INET && NETFILTER && NETFILTER_XTABLES && NETFILTER_ADVANCED]
         depends on [NETFILTER_ADVANCED]
         select TEXTSEARCH if [NET && INET && NETFILTER && NETFILTER_XTABLES && NETFILTER_ADVANCED]
         select TEXTSEARCH_KMP if [NET && INET && NETFILTER && NETFILTER_XTABLES && NETFILTER_ADVANCED]
         select TEXTSEARCH_BM if [NET && INET && NETFILTER && NETFILTER_XTABLES && NETFILTER_ADVANCED]
         select TEXTSEARCH_FSM if [NET && INET && NETFILTER && NETFILTER_XTABLES && NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES && NETFILTER_ADVANCED]
        }
        config NETFILTER_XT_MATCH_TCPMSS tristate {
         prompt "\"tcpmss\" match support" if [NET && INET && NETFILTER && NETFILTER_XTABLES && NETFILTER_ADVANCED]
         depends on [NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES && NETFILTER_ADVANCED]
        }
        config NETFILTER_XT_MATCH_TIME tristate {
         prompt "\"time\" match support" if [NET && INET && NETFILTER && NETFILTER_XTABLES && NETFILTER_ADVANCED]
         depends on [NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES && NETFILTER_ADVANCED]
        }
        config NETFILTER_XT_MATCH_U32 tristate {
         prompt "\"u32\" match support" if [NET && INET && NETFILTER && NETFILTER_XTABLES && NETFILTER_ADVANCED]
         depends on [NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES && NETFILTER_ADVANCED]
        }
        config NETFILTER_XT_MATCH_OSF tristate {
         prompt "\"osf\" Passive OS fingerprint match" if [NET && INET && NETFILTER && NETFILTER_XTABLES && NETFILTER_ADVANCED && NETFILTER_NETLINK]
         depends on [NETFILTER_ADVANCED && NETFILTER_NETLINK]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES && NETFILTER_ADVANCED && NETFILTER_NETLINK]
        }
       }
      }
     }
     menuconfig IP_VS tristate {
      prompt "IP virtual server support" if [NET && INET && NETFILTER]
      depends on [NET && INET && NETFILTER]
      inherited [NET && INET && NETFILTER]
      if [NET && NETFILTER && IP_VS] {
       config IP_VS_IPV6 boolean {
        prompt "IPv6 support for IPVS" if [NET && NETFILTER && IP_VS && EXPERIMENTAL && (IPV6="y" || IP_VS="IPV6")]
        depends on [EXPERIMENTAL && (IPV6="y" || IP_VS="IPV6")]
        inherited [NET && NETFILTER && IP_VS && EXPERIMENTAL && (IPV6="y" || IP_VS="IPV6")]
       }
       config IP_VS_DEBUG boolean {
        prompt "IP virtual server debugging" if [NET && NETFILTER && IP_VS]
        inherited [NET && NETFILTER && IP_VS]
       }
       config IP_VS_TAB_BITS integer {
        prompt "IPVS connection table size (the Nth power of 2)" if [NET && NETFILTER && IP_VS]
        range [8 20] if [NET && NETFILTER && IP_VS]
        default [12] if [NET && NETFILTER && IP_VS]
        inherited [NET && NETFILTER && IP_VS]
       }
       config IP_VS_PROTO_TCP boolean {
        prompt "TCP load balancing support" if [NET && NETFILTER && IP_VS]
        inherited [NET && NETFILTER && IP_VS]
       }
       config IP_VS_PROTO_UDP boolean {
        prompt "UDP load balancing support" if [NET && NETFILTER && IP_VS]
        inherited [NET && NETFILTER && IP_VS]
       }
       config IP_VS_PROTO_AH_ESP boolean {
        depends on [UNDEFINED]
        inherited [NET && NETFILTER && IP_VS && UNDEFINED]
       }
       config IP_VS_PROTO_ESP boolean {
        prompt "ESP load balancing support" if [NET && NETFILTER && IP_VS]
        select IP_VS_PROTO_AH_ESP if [NET && NETFILTER && IP_VS]
        inherited [NET && NETFILTER && IP_VS]
       }
       config IP_VS_PROTO_AH boolean {
        prompt "AH load balancing support" if [NET && NETFILTER && IP_VS]
        select IP_VS_PROTO_AH_ESP if [NET && NETFILTER && IP_VS]
        inherited [NET && NETFILTER && IP_VS]
       }
       config IP_VS_RR tristate {
        prompt "round-robin scheduling" if [NET && NETFILTER && IP_VS]
        inherited [NET && NETFILTER && IP_VS]
       }
       config IP_VS_WRR tristate {
        prompt "weighted round-robin scheduling" if [NET && NETFILTER && IP_VS]
        select GCD if [NET && NETFILTER && IP_VS]
        inherited [NET && NETFILTER && IP_VS]
       }
       config IP_VS_LC tristate {
        prompt "least-connection scheduling" if [NET && NETFILTER && IP_VS]
        inherited [NET && NETFILTER && IP_VS]
       }
       config IP_VS_WLC tristate {
        prompt "weighted least-connection scheduling" if [NET && NETFILTER && IP_VS]
        inherited [NET && NETFILTER && IP_VS]
       }
       config IP_VS_LBLC tristate {
        prompt "locality-based least-connection scheduling" if [NET && NETFILTER && IP_VS]
        inherited [NET && NETFILTER && IP_VS]
       }
       config IP_VS_LBLCR tristate {
        prompt "locality-based least-connection with replication scheduling" if [NET && NETFILTER && IP_VS]
        inherited [NET && NETFILTER && IP_VS]
       }
       config IP_VS_DH tristate {
        prompt "destination hashing scheduling" if [NET && NETFILTER && IP_VS]
        inherited [NET && NETFILTER && IP_VS]
       }
       config IP_VS_SH tristate {
        prompt "source hashing scheduling" if [NET && NETFILTER && IP_VS]
        inherited [NET && NETFILTER && IP_VS]
       }
       config IP_VS_SED tristate {
        prompt "shortest expected delay scheduling" if [NET && NETFILTER && IP_VS]
        inherited [NET && NETFILTER && IP_VS]
       }
       config IP_VS_NQ tristate {
        prompt "never queue scheduling" if [NET && NETFILTER && IP_VS]
        inherited [NET && NETFILTER && IP_VS]
       }
       config IP_VS_FTP tristate {
        prompt "FTP protocol helper" if [NET && NETFILTER && IP_VS && IP_VS_PROTO_TCP]
        depends on [IP_VS_PROTO_TCP]
        inherited [NET && NETFILTER && IP_VS && IP_VS_PROTO_TCP]
       }
      }
     }
     menu "IP: Netfilter Configuration" {
      depends on [NET && INET && NETFILTER]
      config NF_DEFRAG_IPV4 tristate {
       default [n] if [NET && INET && NETFILTER]
       inherited [NET && INET && NETFILTER]
      }
      config NF_CONNTRACK_IPV4 tristate {
       prompt "IPv4 connection tracking support (required for NAT)" if [NET && INET && NETFILTER && NF_CONNTRACK]
       depends on [NF_CONNTRACK]
       default [m] if [NET && INET && NETFILTER && NF_CONNTRACK && !NETFILTER_ADVANCED]
       select NF_DEFRAG_IPV4 if [NET && INET && NETFILTER && NF_CONNTRACK]
       inherited [NET && INET && NETFILTER && NF_CONNTRACK]
       config NF_CONNTRACK_PROC_COMPAT boolean {
        prompt "proc/sysctl compatibility with old connection tracking" if [NET && INET && NETFILTER && NF_CONNTRACK_IPV4]
        depends on [NF_CONNTRACK_IPV4]
        default [y] if [NET && INET && NETFILTER && NF_CONNTRACK_IPV4]
        inherited [NET && INET && NETFILTER && NF_CONNTRACK_IPV4]
       }
      }
      config IP_NF_QUEUE tristate {
       prompt "IP Userspace queueing via NETLINK (OBSOLETE)" if [NET && INET && NETFILTER && NETFILTER_ADVANCED]
       depends on [NETFILTER_ADVANCED]
       inherited [NET && INET && NETFILTER && NETFILTER_ADVANCED]
      }
      config IP_NF_IPTABLES tristate {
       prompt "IP tables support (required for filtering/masq/NAT)" if [NET && INET && NETFILTER]
       default [m] if [NET && INET && NETFILTER && !NETFILTER_ADVANCED]
       select NETFILTER_XTABLES if [NET && INET && NETFILTER]
       inherited [NET && INET && NETFILTER]
       if [NET && INET && NETFILTER && IP_NF_IPTABLES] {
        config IP_NF_MATCH_ADDRTYPE tristate {
         prompt "\"addrtype\" address type match support" if [NET && INET && NETFILTER && IP_NF_IPTABLES && NETFILTER_ADVANCED]
         depends on [NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && IP_NF_IPTABLES && NETFILTER_ADVANCED]
        }
        config IP_NF_MATCH_AH tristate {
         prompt "\"ah\" match support" if [NET && INET && NETFILTER && IP_NF_IPTABLES && NETFILTER_ADVANCED]
         depends on [NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && IP_NF_IPTABLES && NETFILTER_ADVANCED]
        }
        config IP_NF_MATCH_ECN tristate {
         prompt "\"ecn\" match support" if [NET && INET && NETFILTER && IP_NF_IPTABLES && NETFILTER_ADVANCED]
         depends on [NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && IP_NF_IPTABLES && NETFILTER_ADVANCED]
        }
        config IP_NF_MATCH_TTL tristate {
         prompt "\"ttl\" match support" if [NET && INET && NETFILTER && IP_NF_IPTABLES && NETFILTER_ADVANCED]
         depends on [NETFILTER_ADVANCED]
         select NETFILTER_XT_MATCH_HL if [NET && INET && NETFILTER && IP_NF_IPTABLES && NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && IP_NF_IPTABLES && NETFILTER_ADVANCED]
        }
        config IP_NF_FILTER tristate {
         prompt "Packet filtering" if [NET && INET && NETFILTER && IP_NF_IPTABLES]
         default [m] if [NET && INET && NETFILTER && IP_NF_IPTABLES && !NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && IP_NF_IPTABLES]
         config IP_NF_TARGET_REJECT tristate {
          prompt "REJECT target support" if [NET && INET && NETFILTER && IP_NF_IPTABLES && IP_NF_FILTER]
          depends on [IP_NF_FILTER]
          default [m] if [NET && INET && NETFILTER && IP_NF_IPTABLES && IP_NF_FILTER && !NETFILTER_ADVANCED]
          inherited [NET && INET && NETFILTER && IP_NF_IPTABLES && IP_NF_FILTER]
         }
        }
        config IP_NF_TARGET_LOG tristate {
         prompt "LOG target support" if [NET && INET && NETFILTER && IP_NF_IPTABLES]
         default [m] if [NET && INET && NETFILTER && IP_NF_IPTABLES && !NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && IP_NF_IPTABLES]
        }
        config IP_NF_TARGET_ULOG tristate {
         prompt "ULOG target support" if [NET && INET && NETFILTER && IP_NF_IPTABLES]
         default [m] if [NET && INET && NETFILTER && IP_NF_IPTABLES && !NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && IP_NF_IPTABLES]
        }
        config NF_NAT tristate {
         prompt "Full NAT" if [NET && INET && NETFILTER && IP_NF_IPTABLES && NF_CONNTRACK_IPV4]
         depends on [NF_CONNTRACK_IPV4]
         default [m] if [NET && INET && NETFILTER && IP_NF_IPTABLES && NF_CONNTRACK_IPV4 && !NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && IP_NF_IPTABLES && NF_CONNTRACK_IPV4]
         config NF_NAT_NEEDED boolean {
          depends on [NF_NAT]
          default [y] if [NET && INET && NETFILTER && IP_NF_IPTABLES && NF_NAT]
          inherited [NET && INET && NETFILTER && IP_NF_IPTABLES && NF_NAT]
         }
         config IP_NF_TARGET_MASQUERADE tristate {
          prompt "MASQUERADE target support" if [NET && INET && NETFILTER && IP_NF_IPTABLES && NF_NAT]
          depends on [NF_NAT]
          default [m] if [NET && INET && NETFILTER && IP_NF_IPTABLES && NF_NAT && !NETFILTER_ADVANCED]
          inherited [NET && INET && NETFILTER && IP_NF_IPTABLES && NF_NAT]
         }
         config IP_NF_TARGET_NETMAP tristate {
          prompt "NETMAP target support" if [NET && INET && NETFILTER && IP_NF_IPTABLES && NF_NAT && NETFILTER_ADVANCED]
          depends on [NF_NAT]
          depends on [NETFILTER_ADVANCED]
          inherited [NET && INET && NETFILTER && IP_NF_IPTABLES && NF_NAT && NETFILTER_ADVANCED]
         }
         config IP_NF_TARGET_REDIRECT tristate {
          prompt "REDIRECT target support" if [NET && INET && NETFILTER && IP_NF_IPTABLES && NF_NAT && NETFILTER_ADVANCED]
          depends on [NF_NAT]
          depends on [NETFILTER_ADVANCED]
          inherited [NET && INET && NETFILTER && IP_NF_IPTABLES && NF_NAT && NETFILTER_ADVANCED]
         }
         config NF_NAT_SNMP_BASIC tristate {
          prompt "Basic SNMP-ALG support" if [NET && INET && NETFILTER && IP_NF_IPTABLES && NF_NAT && NETFILTER_ADVANCED]
          depends on [NF_NAT]
          depends on [NETFILTER_ADVANCED]
          inherited [NET && INET && NETFILTER && IP_NF_IPTABLES && NF_NAT && NETFILTER_ADVANCED]
         }
         config NF_NAT_PROTO_DCCP tristate {
          depends on [NF_NAT && NF_CT_PROTO_DCCP]
          default [NF_NAT && NF_CT_PROTO_DCCP] if [NET && INET && NETFILTER && IP_NF_IPTABLES && NF_NAT && NF_CT_PROTO_DCCP]
          inherited [NET && INET && NETFILTER && IP_NF_IPTABLES && NF_NAT && NF_CT_PROTO_DCCP]
         }
         config NF_NAT_PROTO_GRE tristate {
          depends on [NF_NAT && NF_CT_PROTO_GRE]
          inherited [NET && INET && NETFILTER && IP_NF_IPTABLES && NF_NAT && NF_CT_PROTO_GRE]
         }
         config NF_NAT_PROTO_UDPLITE tristate {
          depends on [NF_NAT && NF_CT_PROTO_UDPLITE]
          default [NF_NAT && NF_CT_PROTO_UDPLITE] if [NET && INET && NETFILTER && IP_NF_IPTABLES && NF_NAT && NF_CT_PROTO_UDPLITE]
          inherited [NET && INET && NETFILTER && IP_NF_IPTABLES && NF_NAT && NF_CT_PROTO_UDPLITE]
         }
         config NF_NAT_PROTO_SCTP tristate {
          default [NF_NAT && NF_CT_PROTO_SCTP] if [NET && INET && NETFILTER && IP_NF_IPTABLES && NF_NAT && NF_CT_PROTO_SCTP]
          depends on [NF_NAT && NF_CT_PROTO_SCTP]
          select LIBCRC32C if [NET && INET && NETFILTER && IP_NF_IPTABLES && NF_NAT && NF_CT_PROTO_SCTP]
          inherited [NET && INET && NETFILTER && IP_NF_IPTABLES && NF_NAT && NF_CT_PROTO_SCTP]
         }
         config NF_NAT_FTP tristate {
          depends on [NF_CONNTRACK && NF_NAT]
          default [NF_NAT && NF_CONNTRACK_FTP] if [NET && INET && NETFILTER && IP_NF_IPTABLES && NF_CONNTRACK && NF_NAT]
          inherited [NET && INET && NETFILTER && IP_NF_IPTABLES && NF_CONNTRACK && NF_NAT]
         }
         config NF_NAT_IRC tristate {
          depends on [NF_CONNTRACK && NF_NAT]
          default [NF_NAT && NF_CONNTRACK_IRC] if [NET && INET && NETFILTER && IP_NF_IPTABLES && NF_CONNTRACK && NF_NAT]
          inherited [NET && INET && NETFILTER && IP_NF_IPTABLES && NF_CONNTRACK && NF_NAT]
         }
         config NF_NAT_TFTP tristate {
          depends on [NF_CONNTRACK && NF_NAT]
          default [NF_NAT && NF_CONNTRACK_TFTP] if [NET && INET && NETFILTER && IP_NF_IPTABLES && NF_CONNTRACK && NF_NAT]
          inherited [NET && INET && NETFILTER && IP_NF_IPTABLES && NF_CONNTRACK && NF_NAT]
         }
         config NF_NAT_AMANDA tristate {
          depends on [NF_CONNTRACK && NF_NAT]
          default [NF_NAT && NF_CONNTRACK_AMANDA] if [NET && INET && NETFILTER && IP_NF_IPTABLES && NF_CONNTRACK && NF_NAT]
          inherited [NET && INET && NETFILTER && IP_NF_IPTABLES && NF_CONNTRACK && NF_NAT]
         }
         config NF_NAT_PPTP tristate {
          depends on [NF_CONNTRACK && NF_NAT]
          default [NF_NAT && NF_CONNTRACK_PPTP] if [NET && INET && NETFILTER && IP_NF_IPTABLES && NF_CONNTRACK && NF_NAT]
          select NF_NAT_PROTO_GRE if [NET && INET && NETFILTER && IP_NF_IPTABLES && NF_CONNTRACK && NF_NAT]
          inherited [NET && INET && NETFILTER && IP_NF_IPTABLES && NF_CONNTRACK && NF_NAT]
         }
         config NF_NAT_H323 tristate {
          depends on [NF_CONNTRACK && NF_NAT]
          default [NF_NAT && NF_CONNTRACK_H323] if [NET && INET && NETFILTER && IP_NF_IPTABLES && NF_CONNTRACK && NF_NAT]
          inherited [NET && INET && NETFILTER && IP_NF_IPTABLES && NF_CONNTRACK && NF_NAT]
         }
         config NF_NAT_SIP tristate {
          depends on [NF_CONNTRACK && NF_NAT]
          default [NF_NAT && NF_CONNTRACK_SIP] if [NET && INET && NETFILTER && IP_NF_IPTABLES && NF_CONNTRACK && NF_NAT]
          inherited [NET && INET && NETFILTER && IP_NF_IPTABLES && NF_CONNTRACK && NF_NAT]
         }
        }
        config IP_NF_MANGLE tristate {
         prompt "Packet mangling" if [NET && INET && NETFILTER && IP_NF_IPTABLES]
         default [m] if [NET && INET && NETFILTER && IP_NF_IPTABLES && !NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && IP_NF_IPTABLES]
         config IP_NF_TARGET_CLUSTERIP tristate {
          prompt "CLUSTERIP target support (EXPERIMENTAL)" if [NET && INET && NETFILTER && IP_NF_IPTABLES && IP_NF_MANGLE && EXPERIMENTAL && NF_CONNTRACK_IPV4 && NETFILTER_ADVANCED]
          depends on [IP_NF_MANGLE && EXPERIMENTAL]
          depends on [NF_CONNTRACK_IPV4]
          depends on [NETFILTER_ADVANCED]
          select NF_CONNTRACK_MARK if [NET && INET && NETFILTER && IP_NF_IPTABLES && IP_NF_MANGLE && EXPERIMENTAL && NF_CONNTRACK_IPV4 && NETFILTER_ADVANCED]
          inherited [NET && INET && NETFILTER && IP_NF_IPTABLES && IP_NF_MANGLE && EXPERIMENTAL && NF_CONNTRACK_IPV4 && NETFILTER_ADVANCED]
         }
         config IP_NF_TARGET_ECN tristate {
          prompt "ECN target support" if [NET && INET && NETFILTER && IP_NF_IPTABLES && IP_NF_MANGLE && NETFILTER_ADVANCED]
          depends on [IP_NF_MANGLE]
          depends on [NETFILTER_ADVANCED]
          inherited [NET && INET && NETFILTER && IP_NF_IPTABLES && IP_NF_MANGLE && NETFILTER_ADVANCED]
         }
        }
        config IP_NF_TARGET_TTL tristate {
         prompt "\"TTL\" target support" if [NET && INET && NETFILTER && IP_NF_IPTABLES && NETFILTER_ADVANCED]
         depends on [NETFILTER_ADVANCED]
         select NETFILTER_XT_TARGET_HL if [NET && INET && NETFILTER && IP_NF_IPTABLES && NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && IP_NF_IPTABLES && NETFILTER_ADVANCED]
        }
        config IP_NF_RAW tristate {
         prompt "raw table support (required for NOTRACK/TRACE)" if [NET && INET && NETFILTER && IP_NF_IPTABLES && NETFILTER_ADVANCED]
         depends on [NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && IP_NF_IPTABLES && NETFILTER_ADVANCED]
        }
        config IP_NF_SECURITY tristate {
         prompt "Security table" if [NET && INET && NETFILTER && IP_NF_IPTABLES && SECURITY && NETFILTER_ADVANCED]
         depends on [SECURITY]
         depends on [NETFILTER_ADVANCED]
         inherited [NET && INET && NETFILTER && IP_NF_IPTABLES && SECURITY && NETFILTER_ADVANCED]
        }
       }
      }
      config IP_NF_ARPTABLES tristate {
       prompt "ARP tables support" if [NET && INET && NETFILTER && NETFILTER_ADVANCED]
       select NETFILTER_XTABLES if [NET && INET && NETFILTER && NETFILTER_ADVANCED]
       depends on [NETFILTER_ADVANCED]
       inherited [NET && INET && NETFILTER && NETFILTER_ADVANCED]
       if [NET && INET && NETFILTER && IP_NF_ARPTABLES] {
        config IP_NF_ARPFILTER tristate {
         prompt "ARP packet filtering" if [NET && INET && NETFILTER && IP_NF_ARPTABLES]
         inherited [NET && INET && NETFILTER && IP_NF_ARPTABLES]
        }
        config IP_NF_ARP_MANGLE tristate {
         prompt "ARP payload mangling" if [NET && INET && NETFILTER && IP_NF_ARPTABLES]
         inherited [NET && INET && NETFILTER && IP_NF_ARPTABLES]
        }
       }
      }
     }
     menu "IPv6: Netfilter Configuration" {
      depends on [NET && INET && IPV6 && NETFILTER]
      config NF_CONNTRACK_IPV6 tristate {
       prompt "IPv6 connection tracking support" if [NET && NETFILTER && INET && IPV6 && NF_CONNTRACK]
       depends on [INET && IPV6 && NF_CONNTRACK]
       default [m] if [NET && NETFILTER && INET && IPV6 && NF_CONNTRACK && !NETFILTER_ADVANCED]
       inherited [NET && NETFILTER && INET && IPV6 && NF_CONNTRACK]
      }
      config IP6_NF_QUEUE tristate {
       prompt "IP6 Userspace queueing via NETLINK (OBSOLETE)" if [NET && INET && IPV6 && NETFILTER && NETFILTER_ADVANCED]
       depends on [INET && IPV6 && NETFILTER]
       depends on [NETFILTER_ADVANCED]
       inherited [NET && INET && IPV6 && NETFILTER && NETFILTER_ADVANCED]
      }
      config IP6_NF_IPTABLES tristate {
       prompt "IP6 tables support (required for filtering)" if [NET && NETFILTER && INET && IPV6]
       depends on [INET && IPV6]
       select NETFILTER_XTABLES if [NET && NETFILTER && INET && IPV6]
       default [m] if [NET && NETFILTER && INET && IPV6 && !NETFILTER_ADVANCED]
       inherited [NET && NETFILTER && INET && IPV6]
       if [NET && INET && IPV6 && NETFILTER && IP6_NF_IPTABLES] {
        config IP6_NF_MATCH_AH tristate {
         prompt "\"ah\" match support" if [NET && INET && IPV6 && NETFILTER && IP6_NF_IPTABLES && NETFILTER_ADVANCED]
         depends on [NETFILTER_ADVANCED]
         inherited [NET && INET && IPV6 && NETFILTER && IP6_NF_IPTABLES && NETFILTER_ADVANCED]
        }
        config IP6_NF_MATCH_EUI64 tristate {
         prompt "\"eui64\" address check" if [NET && INET && IPV6 && NETFILTER && IP6_NF_IPTABLES && NETFILTER_ADVANCED]
         depends on [NETFILTER_ADVANCED]
         inherited [NET && INET && IPV6 && NETFILTER && IP6_NF_IPTABLES && NETFILTER_ADVANCED]
        }
        config IP6_NF_MATCH_FRAG tristate {
         prompt "\"frag\" Fragmentation header match support" if [NET && INET && IPV6 && NETFILTER && IP6_NF_IPTABLES && NETFILTER_ADVANCED]
         depends on [NETFILTER_ADVANCED]
         inherited [NET && INET && IPV6 && NETFILTER && IP6_NF_IPTABLES && NETFILTER_ADVANCED]
        }
        config IP6_NF_MATCH_OPTS tristate {
         prompt "\"hbh\" hop-by-hop and \"dst\" opts header match support" if [NET && INET && IPV6 && NETFILTER && IP6_NF_IPTABLES && NETFILTER_ADVANCED]
         depends on [NETFILTER_ADVANCED]
         inherited [NET && INET && IPV6 && NETFILTER && IP6_NF_IPTABLES && NETFILTER_ADVANCED]
        }
        config IP6_NF_MATCH_HL tristate {
         prompt "\"hl\" hoplimit match support" if [NET && INET && IPV6 && NETFILTER && IP6_NF_IPTABLES && NETFILTER_ADVANCED]
         depends on [NETFILTER_ADVANCED]
         select NETFILTER_XT_MATCH_HL if [NET && INET && IPV6 && NETFILTER && IP6_NF_IPTABLES && NETFILTER_ADVANCED]
         inherited [NET && INET && IPV6 && NETFILTER && IP6_NF_IPTABLES && NETFILTER_ADVANCED]
        }
        config IP6_NF_MATCH_IPV6HEADER tristate {
         prompt "\"ipv6header\" IPv6 Extension Headers Match" if [NET && INET && IPV6 && NETFILTER && IP6_NF_IPTABLES]
         default [m] if [NET && INET && IPV6 && NETFILTER && IP6_NF_IPTABLES && !NETFILTER_ADVANCED]
         inherited [NET && INET && IPV6 && NETFILTER && IP6_NF_IPTABLES]
        }
        config IP6_NF_MATCH_MH tristate {
         prompt "\"mh\" match support" if [NET && INET && IPV6 && NETFILTER && IP6_NF_IPTABLES && NETFILTER_ADVANCED]
         depends on [NETFILTER_ADVANCED]
         inherited [NET && INET && IPV6 && NETFILTER && IP6_NF_IPTABLES && NETFILTER_ADVANCED]
        }
        config IP6_NF_MATCH_RT tristate {
         prompt "\"rt\" Routing header match support" if [NET && INET && IPV6 && NETFILTER && IP6_NF_IPTABLES && NETFILTER_ADVANCED]
         depends on [NETFILTER_ADVANCED]
         inherited [NET && INET && IPV6 && NETFILTER && IP6_NF_IPTABLES && NETFILTER_ADVANCED]
        }
        config IP6_NF_TARGET_HL tristate {
         prompt "\"HL\" hoplimit target support" if [NET && INET && IPV6 && NETFILTER && IP6_NF_IPTABLES && NETFILTER_ADVANCED]
         depends on [NETFILTER_ADVANCED]
         select NETFILTER_XT_TARGET_HL if [NET && INET && IPV6 && NETFILTER && IP6_NF_IPTABLES && NETFILTER_ADVANCED]
         inherited [NET && INET && IPV6 && NETFILTER && IP6_NF_IPTABLES && NETFILTER_ADVANCED]
        }
        config IP6_NF_TARGET_LOG tristate {
         prompt "LOG target support" if [NET && INET && IPV6 && NETFILTER && IP6_NF_IPTABLES]
         default [m] if [NET && INET && IPV6 && NETFILTER && IP6_NF_IPTABLES && !NETFILTER_ADVANCED]
         inherited [NET && INET && IPV6 && NETFILTER && IP6_NF_IPTABLES]
        }
        config IP6_NF_FILTER tristate {
         prompt "Packet filtering" if [NET && INET && IPV6 && NETFILTER && IP6_NF_IPTABLES]
         default [m] if [NET && INET && IPV6 && NETFILTER && IP6_NF_IPTABLES && !NETFILTER_ADVANCED]
         inherited [NET && INET && IPV6 && NETFILTER && IP6_NF_IPTABLES]
         config IP6_NF_TARGET_REJECT tristate {
          prompt "REJECT target support" if [NET && INET && IPV6 && NETFILTER && IP6_NF_IPTABLES && IP6_NF_FILTER]
          depends on [IP6_NF_FILTER]
          default [m] if [NET && INET && IPV6 && NETFILTER && IP6_NF_IPTABLES && IP6_NF_FILTER && !NETFILTER_ADVANCED]
          inherited [NET && INET && IPV6 && NETFILTER && IP6_NF_IPTABLES && IP6_NF_FILTER]
         }
        }
        config IP6_NF_MANGLE tristate {
         prompt "Packet mangling" if [NET && INET && IPV6 && NETFILTER && IP6_NF_IPTABLES]
         default [m] if [NET && INET && IPV6 && NETFILTER && IP6_NF_IPTABLES && !NETFILTER_ADVANCED]
         inherited [NET && INET && IPV6 && NETFILTER && IP6_NF_IPTABLES]
        }
        config IP6_NF_RAW tristate {
         prompt "raw table support (required for TRACE)" if [NET && INET && IPV6 && NETFILTER && IP6_NF_IPTABLES && NETFILTER_ADVANCED]
         depends on [NETFILTER_ADVANCED]
         inherited [NET && INET && IPV6 && NETFILTER && IP6_NF_IPTABLES && NETFILTER_ADVANCED]
        }
        config IP6_NF_SECURITY tristate {
         prompt "Security table" if [NET && INET && IPV6 && NETFILTER && IP6_NF_IPTABLES && SECURITY && NETFILTER_ADVANCED]
         depends on [SECURITY]
         depends on [NETFILTER_ADVANCED]
         inherited [NET && INET && IPV6 && NETFILTER && IP6_NF_IPTABLES && SECURITY && NETFILTER_ADVANCED]
        }
       }
      }
     }
     menu "DECnet: Netfilter Configuration" {
      depends on [NET && DECNET && NETFILTER && EXPERIMENTAL && NETFILTER_ADVANCED]
      config DECNET_NF_GRABULATOR tristate {
       prompt "Routing message grabulator (for userland routing daemon)" if [NET && DECNET && NETFILTER && EXPERIMENTAL && NETFILTER_ADVANCED]
       inherited [NET && DECNET && NETFILTER && EXPERIMENTAL && NETFILTER_ADVANCED]
      }
     }
     menuconfig BRIDGE_NF_EBTABLES tristate {
      prompt "Ethernet Bridge tables (ebtables) support" if [NET && NETFILTER && BRIDGE && BRIDGE_NETFILTER]
      depends on [BRIDGE && BRIDGE_NETFILTER]
      select NETFILTER_XTABLES if [NET && NETFILTER && BRIDGE && BRIDGE_NETFILTER]
      inherited [NET && NETFILTER && BRIDGE && BRIDGE_NETFILTER]
      if [NET && NETFILTER && BRIDGE_NF_EBTABLES] {
       config BRIDGE_EBT_BROUTE tristate {
        prompt "ebt: broute table support" if [NET && NETFILTER && BRIDGE_NF_EBTABLES]
        inherited [NET && NETFILTER && BRIDGE_NF_EBTABLES]
       }
       config BRIDGE_EBT_T_FILTER tristate {
        prompt "ebt: filter table support" if [NET && NETFILTER && BRIDGE_NF_EBTABLES]
        inherited [NET && NETFILTER && BRIDGE_NF_EBTABLES]
       }
       config BRIDGE_EBT_T_NAT tristate {
        prompt "ebt: nat table support" if [NET && NETFILTER && BRIDGE_NF_EBTABLES]
        inherited [NET && NETFILTER && BRIDGE_NF_EBTABLES]
       }
       config BRIDGE_EBT_802_3 tristate {
        prompt "ebt: 802.3 filter support" if [NET && NETFILTER && BRIDGE_NF_EBTABLES]
        inherited [NET && NETFILTER && BRIDGE_NF_EBTABLES]
       }
       config BRIDGE_EBT_AMONG tristate {
        prompt "ebt: among filter support" if [NET && NETFILTER && BRIDGE_NF_EBTABLES]
        inherited [NET && NETFILTER && BRIDGE_NF_EBTABLES]
       }
       config BRIDGE_EBT_ARP tristate {
        prompt "ebt: ARP filter support" if [NET && NETFILTER && BRIDGE_NF_EBTABLES]
        inherited [NET && NETFILTER && BRIDGE_NF_EBTABLES]
       }
       config BRIDGE_EBT_IP tristate {
        prompt "ebt: IP filter support" if [NET && NETFILTER && BRIDGE_NF_EBTABLES]
        inherited [NET && NETFILTER && BRIDGE_NF_EBTABLES]
       }
       config BRIDGE_EBT_IP6 tristate {
        prompt "ebt: IP6 filter support" if [NET && NETFILTER && BRIDGE_NF_EBTABLES && IPV6]
        depends on [BRIDGE_NF_EBTABLES && IPV6]
        inherited [NET && NETFILTER && BRIDGE_NF_EBTABLES && IPV6]
       }
       config BRIDGE_EBT_LIMIT tristate {
        prompt "ebt: limit match support" if [NET && NETFILTER && BRIDGE_NF_EBTABLES]
        inherited [NET && NETFILTER && BRIDGE_NF_EBTABLES]
       }
       config BRIDGE_EBT_MARK tristate {
        prompt "ebt: mark filter support" if [NET && NETFILTER && BRIDGE_NF_EBTABLES]
        inherited [NET && NETFILTER && BRIDGE_NF_EBTABLES]
       }
       config BRIDGE_EBT_PKTTYPE tristate {
        prompt "ebt: packet type filter support" if [NET && NETFILTER && BRIDGE_NF_EBTABLES]
        inherited [NET && NETFILTER && BRIDGE_NF_EBTABLES]
       }
       config BRIDGE_EBT_STP tristate {
        prompt "ebt: STP filter support" if [NET && NETFILTER && BRIDGE_NF_EBTABLES]
        inherited [NET && NETFILTER && BRIDGE_NF_EBTABLES]
       }
       config BRIDGE_EBT_VLAN tristate {
        prompt "ebt: 802.1Q VLAN filter support" if [NET && NETFILTER && BRIDGE_NF_EBTABLES]
        inherited [NET && NETFILTER && BRIDGE_NF_EBTABLES]
       }
       config BRIDGE_EBT_ARPREPLY tristate {
        prompt "ebt: arp reply target support" if [NET && NETFILTER && BRIDGE_NF_EBTABLES && INET]
        depends on [BRIDGE_NF_EBTABLES && INET]
        inherited [NET && NETFILTER && BRIDGE_NF_EBTABLES && INET]
       }
       config BRIDGE_EBT_DNAT tristate {
        prompt "ebt: dnat target support" if [NET && NETFILTER && BRIDGE_NF_EBTABLES]
        inherited [NET && NETFILTER && BRIDGE_NF_EBTABLES]
       }
       config BRIDGE_EBT_MARK_T tristate {
        prompt "ebt: mark target support" if [NET && NETFILTER && BRIDGE_NF_EBTABLES]
        inherited [NET && NETFILTER && BRIDGE_NF_EBTABLES]
       }
       config BRIDGE_EBT_REDIRECT tristate {
        prompt "ebt: redirect target support" if [NET && NETFILTER && BRIDGE_NF_EBTABLES]
        inherited [NET && NETFILTER && BRIDGE_NF_EBTABLES]
       }
       config BRIDGE_EBT_SNAT tristate {
        prompt "ebt: snat target support" if [NET && NETFILTER && BRIDGE_NF_EBTABLES]
        inherited [NET && NETFILTER && BRIDGE_NF_EBTABLES]
       }
       config BRIDGE_EBT_LOG tristate {
        prompt "ebt: log support" if [NET && NETFILTER && BRIDGE_NF_EBTABLES]
        inherited [NET && NETFILTER && BRIDGE_NF_EBTABLES]
       }
       config BRIDGE_EBT_ULOG tristate {
        prompt "ebt: ulog support (OBSOLETE)" if [NET && NETFILTER && BRIDGE_NF_EBTABLES]
        inherited [NET && NETFILTER && BRIDGE_NF_EBTABLES]
       }
       config BRIDGE_EBT_NFLOG tristate {
        prompt "ebt: nflog support" if [NET && NETFILTER && BRIDGE_NF_EBTABLES]
        inherited [NET && NETFILTER && BRIDGE_NF_EBTABLES]
       }
      }
     }
    }
   }
   menuconfig IP_DCCP tristate {
    prompt "The DCCP Protocol (EXPERIMENTAL)" if [NET && INET && EXPERIMENTAL]
    depends on [INET && EXPERIMENTAL]
    inherited [NET && INET && EXPERIMENTAL]
    if [NET && IP_DCCP] {
     config INET_DCCP_DIAG tristate {
      depends on [INET_DIAG]
      default [y] if [NET && IP_DCCP="y" && INET_DIAG="y"]
      default [m] if [NET && IP_DCCP && INET_DIAG]
      inherited [NET && IP_DCCP && INET_DIAG]
     }
     menu "DCCP CCIDs Configuration (EXPERIMENTAL)" {
      depends on [NET && IP_DCCP && EXPERIMENTAL]
      config IP_DCCP_CCID2_DEBUG boolean {
       prompt "CCID-2 debugging messages" if [NET && IP_DCCP && EXPERIMENTAL]
       inherited [NET && IP_DCCP && EXPERIMENTAL]
      }
      config IP_DCCP_CCID3 boolean {
       prompt "CCID-3 (TCP-Friendly) (EXPERIMENTAL)" if [NET && IP_DCCP && EXPERIMENTAL]
       default [y] if [NET && EXPERIMENTAL && IP_DCCP]
       inherited [NET && IP_DCCP && EXPERIMENTAL]
       config IP_DCCP_CCID3_DEBUG boolean {
        prompt "CCID-3 debugging messages" if [NET && IP_DCCP && EXPERIMENTAL && IP_DCCP_CCID3]
        depends on [IP_DCCP_CCID3]
        inherited [NET && IP_DCCP && EXPERIMENTAL && IP_DCCP_CCID3]
       }
       config IP_DCCP_CCID3_RTO integer {
        prompt "Use higher bound for nofeedback timer" if [NET && IP_DCCP && IP_DCCP_CCID3 && EXPERIMENTAL]
        default [100] if [NET && IP_DCCP && IP_DCCP_CCID3 && EXPERIMENTAL]
        depends on [IP_DCCP_CCID3 && EXPERIMENTAL]
        inherited [NET && IP_DCCP && IP_DCCP_CCID3 && EXPERIMENTAL]
       }
      }
      config IP_DCCP_TFRC_LIB boolean {
       default [y] if [NET && IP_DCCP && EXPERIMENTAL && IP_DCCP_CCID3]
       inherited [NET && IP_DCCP && EXPERIMENTAL]
      }
      config IP_DCCP_TFRC_DEBUG boolean {
       default [y] if [NET && IP_DCCP && EXPERIMENTAL && IP_DCCP_CCID3_DEBUG]
       inherited [NET && IP_DCCP && EXPERIMENTAL]
      }
     }
     menu "DCCP Kernel Hacking" {
      depends on [NET && IP_DCCP && DEBUG_KERNEL]
      config IP_DCCP_DEBUG boolean {
       prompt "DCCP debug messages" if [NET && IP_DCCP && DEBUG_KERNEL]
       inherited [NET && IP_DCCP && DEBUG_KERNEL]
      }
      config NET_DCCPPROBE tristate {
       prompt "DCCP connection probing" if [NET && IP_DCCP && DEBUG_KERNEL && PROC_FS && KPROBES]
       depends on [PROC_FS && KPROBES]
       inherited [NET && IP_DCCP && DEBUG_KERNEL && PROC_FS && KPROBES]
      }
     }
    }
   }
   menuconfig IP_SCTP tristate {
    prompt "The SCTP Protocol (EXPERIMENTAL)" if [NET && INET && EXPERIMENTAL && (IPV6 || IPV6="n")]
    depends on [INET && EXPERIMENTAL]
    depends on [IPV6 || IPV6="n"]
    select CRYPTO if [NET && INET && EXPERIMENTAL && (IPV6 || IPV6="n")]
    select CRYPTO_HMAC if [NET && INET && EXPERIMENTAL && (IPV6 || IPV6="n")]
    select CRYPTO_SHA1 if [NET && INET && EXPERIMENTAL && (IPV6 || IPV6="n")]
    select CRYPTO_MD5 if [NET && INET && EXPERIMENTAL && (IPV6 || IPV6="n") && SCTP_HMAC_MD5]
    select LIBCRC32C if [NET && INET && EXPERIMENTAL && (IPV6 || IPV6="n")]
    inherited [NET && INET && EXPERIMENTAL && (IPV6 || IPV6="n")]
    if [NET && IP_SCTP] {
     config SCTP_DBG_MSG boolean {
      prompt "SCTP: Debug messages" if [NET && IP_SCTP]
      inherited [NET && IP_SCTP]
     }
     config SCTP_DBG_OBJCNT boolean {
      prompt "SCTP: Debug object counts" if [NET && IP_SCTP && PROC_FS]
      depends on [PROC_FS]
      inherited [NET && IP_SCTP && PROC_FS]
     }
     choice boolean {
      prompt "SCTP: Cookie HMAC Algorithm" if [NET && IP_SCTP]
      default [SCTP_HMAC_MD5] if [NET && IP_SCTP]
      config SCTP_HMAC_NONE boolean {
       prompt "None" if [<choice>]
       inherited [<choice>]
      }
      config SCTP_HMAC_SHA1 boolean {
       prompt "HMAC-SHA1" if [<choice>]
       inherited [<choice>]
      }
      config SCTP_HMAC_MD5 boolean {
       prompt "HMAC-MD5" if [<choice>]
       inherited [<choice>]
      }
     }
    }
   }
   config RDS tristate {
    prompt "The RDS Protocol (EXPERIMENTAL)" if [NET && INET && EXPERIMENTAL]
    depends on [INET && EXPERIMENTAL]
    inherited [NET && INET && EXPERIMENTAL]
    config RDS_RDMA tristate {
     prompt "RDS over Infiniband and iWARP" if [NET && RDS && INFINIBAND && INFINIBAND_ADDR_TRANS]
     depends on [RDS && INFINIBAND && INFINIBAND_ADDR_TRANS]
     inherited [NET && RDS && INFINIBAND && INFINIBAND_ADDR_TRANS]
    }
    config RDS_TCP tristate {
     prompt "RDS over TCP" if [NET && RDS]
     depends on [RDS]
     inherited [NET && RDS]
    }
    config RDS_DEBUG boolean {
     prompt "RDS debugging messages" if [NET && RDS]
     depends on [RDS]
     default [n] if [NET && RDS]
     inherited [NET && RDS]
    }
   }
   menuconfig TIPC tristate {
    prompt "The TIPC Protocol (EXPERIMENTAL)" if [NET && INET && EXPERIMENTAL]
    depends on [INET && EXPERIMENTAL]
    inherited [NET && INET && EXPERIMENTAL]
    if [NET && TIPC] {
     config TIPC_ADVANCED boolean {
      prompt "TIPC: Advanced configuration" if [NET && TIPC]
      default [n] if [NET && TIPC]
      inherited [NET && TIPC]
      config TIPC_ZONES integer {
       prompt "Maximum number of zones in network" if [NET && TIPC && TIPC_ADVANCED]
       depends on [TIPC_ADVANCED]
       default [3] if [NET && TIPC && TIPC_ADVANCED]
       inherited [NET && TIPC && TIPC_ADVANCED]
      }
      config TIPC_CLUSTERS integer {
       prompt "Maximum number of clusters in a zone" if [NET && TIPC && TIPC_ADVANCED]
       depends on [TIPC_ADVANCED]
       default [1] if [NET && TIPC && TIPC_ADVANCED]
       inherited [NET && TIPC && TIPC_ADVANCED]
      }
      config TIPC_NODES integer {
       prompt "Maximum number of nodes in cluster" if [NET && TIPC && TIPC_ADVANCED]
       depends on [TIPC_ADVANCED]
       default [255] if [NET && TIPC && TIPC_ADVANCED]
       inherited [NET && TIPC && TIPC_ADVANCED]
      }
      config TIPC_SLAVE_NODES integer {
       prompt "Maximum number of slave nodes in cluster" if [NET && TIPC && TIPC_ADVANCED]
       depends on [TIPC_ADVANCED]
       default [0] if [NET && TIPC && TIPC_ADVANCED]
       inherited [NET && TIPC && TIPC_ADVANCED]
      }
      config TIPC_PORTS integer {
       prompt "Maximum number of ports in a node" if [NET && TIPC && TIPC_ADVANCED]
       depends on [TIPC_ADVANCED]
       default [8191] if [NET && TIPC && TIPC_ADVANCED]
       inherited [NET && TIPC && TIPC_ADVANCED]
      }
      config TIPC_LOG integer {
       prompt "Size of log buffer" if [NET && TIPC && TIPC_ADVANCED]
       depends on [TIPC_ADVANCED]
       default [0] if [NET && TIPC && TIPC_ADVANCED]
       inherited [NET && TIPC && TIPC_ADVANCED]
      }
     }
     config TIPC_DEBUG boolean {
      prompt "Enable debugging support" if [NET && TIPC]
      default [n] if [NET && TIPC]
      inherited [NET && TIPC]
     }
    }
   }
   config ATM tristate {
    prompt "Asynchronous Transfer Mode (ATM)" if [NET]
    inherited [NET]
    config ATM_CLIP tristate {
     prompt "Classical IP over ATM" if [NET && ATM && INET]
     depends on [ATM && INET]
     inherited [NET && ATM && INET]
     config ATM_CLIP_NO_ICMP boolean {
      prompt "Do NOT send ICMP if no neighbour" if [NET && ATM_CLIP]
      depends on [ATM_CLIP]
      inherited [NET && ATM_CLIP]
     }
    }
    config ATM_LANE tristate {
     prompt "LAN Emulation (LANE) support" if [NET && ATM]
     depends on [ATM]
     inherited [NET && ATM]
     config ATM_MPOA tristate {
      prompt "Multi-Protocol Over ATM (MPOA) support" if [NET && ATM && INET && ATM_LANE!="n"]
      depends on [ATM && INET && ATM_LANE!="n"]
      inherited [NET && ATM && INET && ATM_LANE!="n"]
     }
    }
    config ATM_BR2684 tristate {
     prompt "RFC1483/2684 Bridged protocols" if [NET && ATM && INET]
     depends on [ATM && INET]
     inherited [NET && ATM && INET]
     config ATM_BR2684_IPFILTER boolean {
      prompt "Per-VC IP filter kludge" if [NET && ATM_BR2684]
      depends on [ATM_BR2684]
      inherited [NET && ATM_BR2684]
     }
    }
   }
   config STP tristate {
    select LLC if [NET]
    inherited [NET]
   }
   config GARP tristate {
    select STP if [NET]
    inherited [NET]
   }
   config BRIDGE tristate {
    prompt "802.1d Ethernet Bridging" if [NET]
    select LLC if [NET]
    select STP if [NET]
    inherited [NET]
   }
   menuconfig NET_DSA boolean {
    prompt "Distributed Switch Architecture support" if [NET && EXPERIMENTAL && !S390]
    default [n] if [NET && EXPERIMENTAL && !S390]
    depends on [EXPERIMENTAL && !S390]
    select PHYLIB if [NET && EXPERIMENTAL && !S390]
    inherited [NET && EXPERIMENTAL && !S390]
    if [NET && NET_DSA] {
     config NET_DSA_TAG_DSA boolean {
      default [n] if [NET && NET_DSA]
      inherited [NET && NET_DSA]
     }
     config NET_DSA_TAG_EDSA boolean {
      default [n] if [NET && NET_DSA]
      inherited [NET && NET_DSA]
     }
     config NET_DSA_TAG_TRAILER boolean {
      default [n] if [NET && NET_DSA]
      inherited [NET && NET_DSA]
     }
     config NET_DSA_MV88E6XXX boolean {
      default [n] if [NET && NET_DSA]
      inherited [NET && NET_DSA]
     }
     config NET_DSA_MV88E6060 boolean {
      prompt "Marvell 88E6060 ethernet switch chip support" if [NET && NET_DSA]
      select NET_DSA_TAG_TRAILER if [NET && NET_DSA]
      inherited [NET && NET_DSA]
     }
     config NET_DSA_MV88E6XXX_NEED_PPU boolean {
      default [n] if [NET && NET_DSA]
      inherited [NET && NET_DSA]
     }
     config NET_DSA_MV88E6131 boolean {
      prompt "Marvell 88E6095/6095F/6131 ethernet switch chip support" if [NET && NET_DSA]
      select NET_DSA_MV88E6XXX if [NET && NET_DSA]
      select NET_DSA_MV88E6XXX_NEED_PPU if [NET && NET_DSA]
      select NET_DSA_TAG_DSA if [NET && NET_DSA]
      inherited [NET && NET_DSA]
     }
     config NET_DSA_MV88E6123_61_65 boolean {
      prompt "Marvell 88E6123/6161/6165 ethernet switch chip support" if [NET && NET_DSA]
      select NET_DSA_MV88E6XXX if [NET && NET_DSA]
      select NET_DSA_TAG_EDSA if [NET && NET_DSA]
      inherited [NET && NET_DSA]
     }
    }
   }
   config VLAN_8021Q tristate {
    prompt "802.1Q VLAN Support" if [NET]
    inherited [NET]
    config VLAN_8021Q_GVRP boolean {
     prompt "GVRP (GARP VLAN Registration Protocol) support" if [NET && VLAN_8021Q]
     depends on [VLAN_8021Q]
     select GARP if [NET && VLAN_8021Q]
     inherited [NET && VLAN_8021Q]
    }
   }
   config DECNET tristate {
    prompt "DECnet Support" if [NET]
    inherited [NET]
    config DECNET_ROUTER boolean {
     prompt "DECnet: router support (EXPERIMENTAL)" if [NET && DECNET && EXPERIMENTAL]
     depends on [DECNET && EXPERIMENTAL]
     select FIB_RULES if [NET && DECNET && EXPERIMENTAL]
     inherited [NET && DECNET && EXPERIMENTAL]
    }
   }
   config LLC tristate {
    depends on [NET]
    inherited [NET]
   }
   config LLC2 tristate {
    prompt "ANSI/IEEE 802.2 LLC type 2 Support" if [NET]
    select LLC if [NET]
    inherited [NET]
   }
   config IPX tristate {
    prompt "The IPX protocol" if [NET]
    select LLC if [NET]
    inherited [NET]
    config IPX_INTERN boolean {
     prompt "IPX: Full internal IPX network" if [NET && IPX]
     depends on [IPX]
     inherited [NET && IPX]
    }
   }
   config ATALK tristate {
    prompt "Appletalk protocol support" if [NET]
    select LLC if [NET]
    inherited [NET]
    config DEV_APPLETALK tristate {
     prompt "Appletalk interfaces support" if [NET && ATALK]
     depends on [ATALK]
     inherited [NET && ATALK]
     config LTPC tristate {
      prompt "Apple/Farallon LocalTalk PC support" if [NET && DEV_APPLETALK && (ISA || EISA) && ISA_DMA_API]
      depends on [DEV_APPLETALK && (ISA || EISA) && ISA_DMA_API]
      inherited [NET && DEV_APPLETALK && (ISA || EISA) && ISA_DMA_API]
     }
     config COPS tristate {
      prompt "COPS LocalTalk PC support" if [NET && DEV_APPLETALK && (ISA || EISA)]
      depends on [DEV_APPLETALK && (ISA || EISA)]
      inherited [NET && DEV_APPLETALK && (ISA || EISA)]
      config COPS_DAYNA boolean {
       prompt "Dayna firmware support" if [NET && COPS]
       depends on [COPS]
       inherited [NET && COPS]
      }
      config COPS_TANGENT boolean {
       prompt "Tangent firmware support" if [NET && COPS]
       depends on [COPS]
       inherited [NET && COPS]
      }
     }
     config IPDDP tristate {
      prompt "Appletalk-IP driver support" if [NET && DEV_APPLETALK && ATALK]
      depends on [DEV_APPLETALK && ATALK]
      inherited [NET && DEV_APPLETALK && ATALK]
      config IPDDP_ENCAP boolean {
       prompt "IP to Appletalk-IP Encapsulation support" if [NET && IPDDP]
       depends on [IPDDP]
       inherited [NET && IPDDP]
      }
      config IPDDP_DECAP boolean {
       prompt "Appletalk-IP to IP Decapsulation support" if [NET && IPDDP]
       depends on [IPDDP]
       inherited [NET && IPDDP]
      }
     }
    }
   }
   config X25 tristate {
    prompt "CCITT X.25 Packet Layer (EXPERIMENTAL)" if [NET && EXPERIMENTAL]
    depends on [EXPERIMENTAL]
    inherited [NET && EXPERIMENTAL]
   }
   config LAPB tristate {
    prompt "LAPB Data Link Driver (EXPERIMENTAL)" if [NET && EXPERIMENTAL]
    depends on [EXPERIMENTAL]
    inherited [NET && EXPERIMENTAL]
   }
   config ECONET tristate {
    prompt "Acorn Econet/AUN protocols (EXPERIMENTAL)" if [NET && EXPERIMENTAL && INET]
    depends on [EXPERIMENTAL && INET]
    inherited [NET && EXPERIMENTAL && INET]
    config ECONET_AUNUDP boolean {
     prompt "AUN over UDP" if [NET && ECONET]
     depends on [ECONET]
     inherited [NET && ECONET]
    }
    config ECONET_NATIVE boolean {
     prompt "Native Econet" if [NET && ECONET]
     depends on [ECONET]
     inherited [NET && ECONET]
    }
   }
   config WAN_ROUTER tristate {
    prompt "WAN router" if [NET && EXPERIMENTAL]
    depends on [EXPERIMENTAL]
    inherited [NET && EXPERIMENTAL]
   }
   config PHONET tristate {
    prompt "Phonet protocols family" if [NET]
    inherited [NET]
   }
   config IEEE802154 tristate {
    prompt "IEEE Std 802.15.4 Low-Rate Wireless Personal Area Networks support (EXPERIMENTAL)" if [NET && EXPERIMENTAL]
    depends on [EXPERIMENTAL]
    inherited [NET && EXPERIMENTAL]
   }
   menuconfig NET_SCHED boolean {
    prompt "QoS and/or fair queueing" if [NET]
    select NET_SCH_FIFO if [NET]
    inherited [NET]
    if [NET && NET_SCHED] {
     config NET_SCH_CBQ tristate {
      prompt "Class Based Queueing (CBQ)" if [NET && NET_SCHED]
      inherited [NET && NET_SCHED]
     }
     config NET_SCH_HTB tristate {
      prompt "Hierarchical Token Bucket (HTB)" if [NET && NET_SCHED]
      inherited [NET && NET_SCHED]
     }
     config NET_SCH_HFSC tristate {
      prompt "Hierarchical Fair Service Curve (HFSC)" if [NET && NET_SCHED]
      inherited [NET && NET_SCHED]
     }
     config NET_SCH_ATM tristate {
      prompt "ATM Virtual Circuits (ATM)" if [NET && NET_SCHED && ATM]
      depends on [ATM]
      inherited [NET && NET_SCHED && ATM]
     }
     config NET_SCH_PRIO tristate {
      prompt "Multi Band Priority Queueing (PRIO)" if [NET && NET_SCHED]
      inherited [NET && NET_SCHED]
     }
     config NET_SCH_MULTIQ tristate {
      prompt "Hardware Multiqueue-aware Multi Band Queuing (MULTIQ)" if [NET && NET_SCHED]
      inherited [NET && NET_SCHED]
     }
     config NET_SCH_RED tristate {
      prompt "Random Early Detection (RED)" if [NET && NET_SCHED]
      inherited [NET && NET_SCHED]
     }
     config NET_SCH_SFQ tristate {
      prompt "Stochastic Fairness Queueing (SFQ)" if [NET && NET_SCHED]
      inherited [NET && NET_SCHED]
     }
     config NET_SCH_TEQL tristate {
      prompt "True Link Equalizer (TEQL)" if [NET && NET_SCHED]
      inherited [NET && NET_SCHED]
     }
     config NET_SCH_TBF tristate {
      prompt "Token Bucket Filter (TBF)" if [NET && NET_SCHED]
      inherited [NET && NET_SCHED]
     }
     config NET_SCH_GRED tristate {
      prompt "Generic Random Early Detection (GRED)" if [NET && NET_SCHED]
      inherited [NET && NET_SCHED]
     }
     config NET_SCH_DSMARK tristate {
      prompt "Differentiated Services marker (DSMARK)" if [NET && NET_SCHED]
      inherited [NET && NET_SCHED]
     }
     config NET_SCH_NETEM tristate {
      prompt "Network emulator (NETEM)" if [NET && NET_SCHED]
      inherited [NET && NET_SCHED]
     }
     config NET_SCH_DRR tristate {
      prompt "Deficit Round Robin scheduler (DRR)" if [NET && NET_SCHED]
      inherited [NET && NET_SCHED]
     }
     config NET_SCH_INGRESS tristate {
      prompt "Ingress Qdisc" if [NET && NET_SCHED && NET_CLS_ACT]
      depends on [NET_CLS_ACT]
      inherited [NET && NET_SCHED && NET_CLS_ACT]
     }
     config NET_CLS boolean {
      inherited [NET && NET_SCHED]
     }
     config NET_CLS_BASIC tristate {
      prompt "Elementary classification (BASIC)" if [NET && NET_SCHED]
      select NET_CLS if [NET && NET_SCHED]
      inherited [NET && NET_SCHED]
     }
     config NET_CLS_TCINDEX tristate {
      prompt "Traffic-Control Index (TCINDEX)" if [NET && NET_SCHED]
      select NET_CLS if [NET && NET_SCHED]
      inherited [NET && NET_SCHED]
     }
     config NET_CLS_ROUTE4 tristate {
      prompt "Routing decision (ROUTE)" if [NET && NET_SCHED]
      select NET_CLS_ROUTE if [NET && NET_SCHED]
      select NET_CLS if [NET && NET_SCHED]
      inherited [NET && NET_SCHED]
     }
     config NET_CLS_ROUTE boolean {
      inherited [NET && NET_SCHED]
     }
     config NET_CLS_FW tristate {
      prompt "Netfilter mark (FW)" if [NET && NET_SCHED]
      select NET_CLS if [NET && NET_SCHED]
      inherited [NET && NET_SCHED]
     }
     config NET_CLS_U32 tristate {
      prompt "Universal 32bit comparisons w/ hashing (U32)" if [NET && NET_SCHED]
      select NET_CLS if [NET && NET_SCHED]
      inherited [NET && NET_SCHED]
      config CLS_U32_PERF boolean {
       prompt "Performance counters support" if [NET && NET_SCHED && NET_CLS_U32]
       depends on [NET_CLS_U32]
       inherited [NET && NET_SCHED && NET_CLS_U32]
      }
      config CLS_U32_MARK boolean {
       prompt "Netfilter marks support" if [NET && NET_SCHED && NET_CLS_U32]
       depends on [NET_CLS_U32]
       inherited [NET && NET_SCHED && NET_CLS_U32]
      }
     }
     config NET_CLS_RSVP tristate {
      prompt "IPv4 Resource Reservation Protocol (RSVP)" if [NET && NET_SCHED]
      select NET_CLS if [NET && NET_SCHED]
      inherited [NET && NET_SCHED]
     }
     config NET_CLS_RSVP6 tristate {
      prompt "IPv6 Resource Reservation Protocol (RSVP6)" if [NET && NET_SCHED]
      select NET_CLS if [NET && NET_SCHED]
      inherited [NET && NET_SCHED]
     }
     config NET_CLS_FLOW tristate {
      prompt "Flow classifier" if [NET && NET_SCHED]
      select NET_CLS if [NET && NET_SCHED]
      inherited [NET && NET_SCHED]
     }
     config NET_CLS_CGROUP boolean {
      prompt "Control Group Classifier" if [NET && NET_SCHED && CGROUPS]
      select NET_CLS if [NET && NET_SCHED && CGROUPS]
      depends on [CGROUPS]
      inherited [NET && NET_SCHED && CGROUPS]
     }
     config NET_EMATCH boolean {
      prompt "Extended Matches" if [NET && NET_SCHED]
      select NET_CLS if [NET && NET_SCHED]
      inherited [NET && NET_SCHED]
      config NET_EMATCH_STACK integer {
       prompt "Stack size" if [NET && NET_SCHED && NET_EMATCH]
       depends on [NET_EMATCH]
       default [32] if [NET && NET_SCHED && NET_EMATCH]
       inherited [NET && NET_SCHED && NET_EMATCH]
      }
      config NET_EMATCH_CMP tristate {
       prompt "Simple packet data comparison" if [NET && NET_SCHED && NET_EMATCH]
       depends on [NET_EMATCH]
       inherited [NET && NET_SCHED && NET_EMATCH]
      }
      config NET_EMATCH_NBYTE tristate {
       prompt "Multi byte comparison" if [NET && NET_SCHED && NET_EMATCH]
       depends on [NET_EMATCH]
       inherited [NET && NET_SCHED && NET_EMATCH]
      }
      config NET_EMATCH_U32 tristate {
       prompt "U32 key" if [NET && NET_SCHED && NET_EMATCH]
       depends on [NET_EMATCH]
       inherited [NET && NET_SCHED && NET_EMATCH]
      }
      config NET_EMATCH_META tristate {
       prompt "Metadata" if [NET && NET_SCHED && NET_EMATCH]
       depends on [NET_EMATCH]
       inherited [NET && NET_SCHED && NET_EMATCH]
      }
      config NET_EMATCH_TEXT tristate {
       prompt "Textsearch" if [NET && NET_SCHED && NET_EMATCH]
       depends on [NET_EMATCH]
       select TEXTSEARCH if [NET && NET_SCHED && NET_EMATCH]
       select TEXTSEARCH_KMP if [NET && NET_SCHED && NET_EMATCH]
       select TEXTSEARCH_BM if [NET && NET_SCHED && NET_EMATCH]
       select TEXTSEARCH_FSM if [NET && NET_SCHED && NET_EMATCH]
       inherited [NET && NET_SCHED && NET_EMATCH]
      }
     }
     config NET_CLS_ACT boolean {
      prompt "Actions" if [NET && NET_SCHED]
      inherited [NET && NET_SCHED]
      config NET_ACT_POLICE tristate {
       prompt "Traffic Policing" if [NET && NET_SCHED && NET_CLS_ACT]
       depends on [NET_CLS_ACT]
       inherited [NET && NET_SCHED && NET_CLS_ACT]
      }
      config NET_ACT_GACT tristate {
       prompt "Generic actions" if [NET && NET_SCHED && NET_CLS_ACT]
       depends on [NET_CLS_ACT]
       inherited [NET && NET_SCHED && NET_CLS_ACT]
       config GACT_PROB boolean {
        prompt "Probability support" if [NET && NET_SCHED && NET_ACT_GACT]
        depends on [NET_ACT_GACT]
        inherited [NET && NET_SCHED && NET_ACT_GACT]
       }
      }
      config NET_ACT_MIRRED tristate {
       prompt "Redirecting and Mirroring" if [NET && NET_SCHED && NET_CLS_ACT]
       depends on [NET_CLS_ACT]
       inherited [NET && NET_SCHED && NET_CLS_ACT]
      }
      config NET_ACT_IPT tristate {
       prompt "IPtables targets" if [NET && NET_SCHED && NET_CLS_ACT && NETFILTER && IP_NF_IPTABLES]
       depends on [NET_CLS_ACT && NETFILTER && IP_NF_IPTABLES]
       inherited [NET && NET_SCHED && NET_CLS_ACT && NETFILTER && IP_NF_IPTABLES]
      }
      config NET_ACT_NAT tristate {
       prompt "Stateless NAT" if [NET && NET_SCHED && NET_CLS_ACT]
       depends on [NET_CLS_ACT]
       inherited [NET && NET_SCHED && NET_CLS_ACT]
      }
      config NET_ACT_PEDIT tristate {
       prompt "Packet Editing" if [NET && NET_SCHED && NET_CLS_ACT]
       depends on [NET_CLS_ACT]
       inherited [NET && NET_SCHED && NET_CLS_ACT]
      }
      config NET_ACT_SIMP tristate {
       prompt "Simple Example (Debug)" if [NET && NET_SCHED && NET_CLS_ACT]
       depends on [NET_CLS_ACT]
       inherited [NET && NET_SCHED && NET_CLS_ACT]
      }
      config NET_ACT_SKBEDIT tristate {
       prompt "SKB Editing" if [NET && NET_SCHED && NET_CLS_ACT]
       depends on [NET_CLS_ACT]
       inherited [NET && NET_SCHED && NET_CLS_ACT]
      }
     }
     config NET_CLS_IND boolean {
      prompt "Incoming device classification" if [NET && NET_SCHED && (NET_CLS_U32 || NET_CLS_FW)]
      depends on [NET_CLS_U32 || NET_CLS_FW]
      inherited [NET && NET_SCHED && (NET_CLS_U32 || NET_CLS_FW)]
     }
    }
   }
   config NET_SCH_FIFO boolean {
    inherited [NET]
   }
   config DCB boolean {
    prompt "Data Center Bridging support" if [NET]
    default [n] if [NET]
    inherited [NET]
   }
   menu "Network testing" {
    depends on [NET]
    config NET_PKTGEN tristate {
     prompt "Packet Generator (USE WITH CAUTION)" if [NET && PROC_FS]
     depends on [PROC_FS]
     inherited [NET && PROC_FS]
    }
    config NET_TCPPROBE tristate {
     prompt "TCP connection probing" if [NET && INET && EXPERIMENTAL && PROC_FS && KPROBES]
     depends on [INET && EXPERIMENTAL && PROC_FS && KPROBES]
     inherited [NET && INET && EXPERIMENTAL && PROC_FS && KPROBES]
    }
    config NET_DROP_MONITOR boolean {
     prompt "Network packet drop alerting service" if [NET && INET && EXPERIMENTAL && TRACEPOINTS]
     depends on [INET && EXPERIMENTAL && TRACEPOINTS]
     inherited [NET && INET && EXPERIMENTAL && TRACEPOINTS]
    }
   }
  }
  menuconfig HAMRADIO boolean {
   depends on [NET && !S390]
   prompt "Amateur Radio support" if [NET && !S390]
   inherited [NET && !S390]
   config AX25 tristate {
    prompt "Amateur Radio AX.25 Level 2 protocol" if [NET && HAMRADIO]
    depends on [HAMRADIO]
    inherited [NET && HAMRADIO]
    config AX25_DAMA_SLAVE boolean {
     prompt "AX.25 DAMA Slave support" if [NET && AX25]
     default [y] if [NET && AX25]
     depends on [AX25]
     inherited [NET && AX25]
     config AX25_DAMA_MASTER boolean {
      prompt "AX.25 DAMA Master support" if [NET && AX25_DAMA_SLAVE && BROKEN]
      depends on [AX25_DAMA_SLAVE && BROKEN]
      inherited [NET && AX25_DAMA_SLAVE && BROKEN]
     }
    }
    config NETROM tristate {
     prompt "Amateur Radio NET/ROM protocol" if [NET && AX25]
     depends on [AX25]
     inherited [NET && AX25]
    }
    config ROSE tristate {
     prompt "Amateur Radio X.25 PLP (Rose)" if [NET && AX25]
     depends on [AX25]
     inherited [NET && AX25]
    }
    menu "AX.25 network device drivers" {
     depends on [NET && HAMRADIO && AX25]
     config MKISS tristate {
      prompt "Serial port KISS driver" if [NET && HAMRADIO && AX25]
      depends on [AX25]
      select CRC16 if [NET && HAMRADIO && AX25]
      inherited [NET && HAMRADIO && AX25]
     }
     config 6PACK tristate {
      prompt "Serial port 6PACK driver" if [NET && HAMRADIO && AX25]
      depends on [AX25]
      inherited [NET && HAMRADIO && AX25]
     }
     config BPQETHER tristate {
      prompt "BPQ Ethernet driver" if [NET && HAMRADIO && AX25]
      depends on [AX25]
      inherited [NET && HAMRADIO && AX25]
     }
     config DMASCC tristate {
      prompt "High-speed (DMA) SCC driver for AX.25" if [NET && HAMRADIO && ISA && AX25 && BROKEN_ON_SMP && ISA_DMA_API]
      depends on [ISA && AX25 && BROKEN_ON_SMP && ISA_DMA_API]
      inherited [NET && HAMRADIO && ISA && AX25 && BROKEN_ON_SMP && ISA_DMA_API]
     }
     config SCC tristate {
      prompt "Z8530 SCC driver" if [NET && HAMRADIO && ISA && AX25 && ISA_DMA_API]
      depends on [ISA && AX25 && ISA_DMA_API]
      inherited [NET && HAMRADIO && ISA && AX25 && ISA_DMA_API]
      config SCC_DELAY boolean {
       prompt "additional delay for PA0HZP OptoSCC compatible boards" if [NET && HAMRADIO && AX25 && SCC]
       depends on [SCC]
       inherited [NET && HAMRADIO && AX25 && SCC]
      }
      config SCC_TRXECHO boolean {
       prompt "support for TRX that feedback the tx signal to rx" if [NET && HAMRADIO && AX25 && SCC]
       depends on [SCC]
       inherited [NET && HAMRADIO && AX25 && SCC]
      }
     }
     config BAYCOM_SER_FDX tristate {
      prompt "BAYCOM ser12 fullduplex driver for AX.25" if [NET && HAMRADIO && AX25 && !S390]
      depends on [AX25 && !S390]
      select CRC_CCITT if [NET && HAMRADIO && AX25 && !S390]
      inherited [NET && HAMRADIO && AX25 && !S390]
     }
     config BAYCOM_SER_HDX tristate {
      prompt "BAYCOM ser12 halfduplex driver for AX.25" if [NET && HAMRADIO && AX25 && !S390]
      depends on [AX25 && !S390]
      select CRC_CCITT if [NET && HAMRADIO && AX25 && !S390]
      inherited [NET && HAMRADIO && AX25 && !S390]
     }
     config BAYCOM_PAR tristate {
      prompt "BAYCOM picpar and par96 driver for AX.25" if [NET && HAMRADIO && PARPORT && AX25]
      depends on [PARPORT && AX25]
      select CRC_CCITT if [NET && HAMRADIO && PARPORT && AX25]
      inherited [NET && HAMRADIO && PARPORT && AX25]
     }
     config BAYCOM_EPP tristate {
      prompt "BAYCOM epp driver for AX.25" if [NET && HAMRADIO && PARPORT && AX25 && !64BIT]
      depends on [PARPORT && AX25 && !64BIT]
      select CRC_CCITT if [NET && HAMRADIO && PARPORT && AX25 && !64BIT]
      inherited [NET && HAMRADIO && PARPORT && AX25 && !64BIT]
     }
     config YAM tristate {
      prompt "YAM driver for AX.25" if [NET && HAMRADIO && AX25 && !S390]
      depends on [AX25 && !S390]
      inherited [NET && HAMRADIO && AX25 && !S390]
     }
    }
   }
  }
  menuconfig CAN tristate {
   depends on [NET]
   prompt "CAN bus subsystem support" if [NET]
   inherited [NET]
   config CAN_RAW tristate {
    prompt "Raw CAN Protocol (raw access with CAN-ID filtering)" if [NET && CAN]
    depends on [CAN]
    default [N] if [NET && CAN]
    inherited [NET && CAN]
   }
   config CAN_BCM tristate {
    prompt "Broadcast Manager CAN Protocol (with content filtering)" if [NET && CAN]
    depends on [CAN]
    default [N] if [NET && CAN]
    inherited [NET && CAN]
   }
   menu "CAN Device Drivers" {
    depends on [NET && CAN]
    config CAN_VCAN tristate {
     prompt "Virtual Local CAN Interface (vcan)" if [NET && CAN]
     depends on [CAN]
     default [N] if [NET && CAN]
     inherited [NET && CAN]
    }
    config CAN_DEV tristate {
     prompt "Platform CAN drivers with Netlink support" if [NET && CAN]
     depends on [CAN]
     default [Y] if [NET && CAN]
     inherited [NET && CAN]
     config CAN_CALC_BITTIMING boolean {
      prompt "CAN bit-timing calculation" if [NET && CAN && CAN_DEV]
      depends on [CAN_DEV]
      default [Y] if [NET && CAN && CAN_DEV]
      inherited [NET && CAN && CAN_DEV]
     }
     config CAN_AT91 tristate {
      prompt "Atmel AT91 onchip CAN controller" if [NET && CAN && CAN_DEV && ARCH_AT91SAM9263]
      depends on [CAN_DEV && ARCH_AT91SAM9263]
      inherited [NET && CAN && CAN_DEV && ARCH_AT91SAM9263]
     }
     config CAN_TI_HECC tristate {
      depends on [CAN_DEV && ARCH_OMAP3]
      prompt "TI High End CAN Controller" if [NET && CAN && CAN_DEV && ARCH_OMAP3]
      inherited [NET && CAN && CAN_DEV && ARCH_OMAP3]
     }
     config CAN_MCP251X tristate {
      prompt "Microchip MCP251x SPI CAN controllers" if [NET && CAN && CAN_DEV && SPI && HAS_DMA]
      depends on [CAN_DEV && SPI && HAS_DMA]
      inherited [NET && CAN && CAN_DEV && SPI && HAS_DMA]
     }
     config CAN_BFIN tristate {
      depends on [CAN_DEV && (BF534 || BF536 || BF537 || BF538 || BF539 || BF54x)]
      prompt "Analog Devices Blackfin on-chip CAN" if [NET && CAN && CAN_DEV && (BF534 || BF536 || BF537 || BF538 || BF539 || BF54x)]
      inherited [NET && CAN && CAN_DEV && (BF534 || BF536 || BF537 || BF538 || BF539 || BF54x)]
     }
     config CAN_MSCAN tristate {
      depends on [CAN_DEV && (PPC || M68K || M68KNOMMU)]
      prompt "Support for Freescale MSCAN based chips" if [NET && CAN && CAN_DEV && (PPC || M68K || M68KNOMMU)]
      inherited [NET && CAN && CAN_DEV && (PPC || M68K || M68KNOMMU)]
      if [NET && CAN && CAN_MSCAN] {
       config CAN_MPC5XXX tristate {
        prompt "Freescale MPC5xxx onboard CAN controller" if [NET && CAN && CAN_MSCAN && PPC_MPC52xx]
        depends on [PPC_MPC52xx]
        inherited [NET && CAN && CAN_MSCAN && PPC_MPC52xx]
       }
      }
     }
     menuconfig CAN_SJA1000 tristate {
      prompt "Philips/NXP SJA1000 devices" if [NET && CAN && CAN_DEV && HAS_IOMEM]
      depends on [CAN_DEV && HAS_IOMEM]
      inherited [NET && CAN && CAN_DEV && HAS_IOMEM]
      if [NET && CAN && CAN_SJA1000] {
       config CAN_SJA1000_ISA tristate {
        prompt "ISA Bus based legacy SJA1000 driver" if [NET && CAN && CAN_SJA1000 && ISA]
        depends on [ISA]
        inherited [NET && CAN && CAN_SJA1000 && ISA]
       }
       config CAN_SJA1000_PLATFORM tristate {
        prompt "Generic Platform Bus based SJA1000 driver" if [NET && CAN && CAN_SJA1000]
        inherited [NET && CAN && CAN_SJA1000]
       }
       config CAN_SJA1000_OF_PLATFORM tristate {
        prompt "Generic OF Platform Bus based SJA1000 driver" if [NET && CAN && CAN_SJA1000 && PPC_OF]
        depends on [PPC_OF]
        inherited [NET && CAN && CAN_SJA1000 && PPC_OF]
       }
       config CAN_EMS_PCI tristate {
        prompt "EMS CPC-PCI, CPC-PCIe and CPC-104P Card" if [NET && CAN && CAN_SJA1000 && PCI]
        depends on [PCI]
        inherited [NET && CAN && CAN_SJA1000 && PCI]
       }
       config CAN_KVASER_PCI tristate {
        prompt "Kvaser PCIcanx and Kvaser PCIcan PCI Cards" if [NET && CAN && CAN_SJA1000 && PCI]
        depends on [PCI]
        inherited [NET && CAN && CAN_SJA1000 && PCI]
       }
      }
     }
     menu "CAN USB interfaces" {
      depends on [NET && CAN && USB && CAN_DEV]
      config CAN_EMS_USB tristate {
       prompt "EMS CPC-USB/ARM7 CAN/USB interface" if [NET && CAN && USB && CAN_DEV]
       inherited [NET && CAN && USB && CAN_DEV]
      }
     }
    }
    config CAN_DEBUG_DEVICES boolean {
     prompt "CAN devices debugging messages" if [NET && CAN]
     depends on [CAN]
     default [N] if [NET && CAN]
     inherited [NET && CAN]
    }
   }
  }
  menuconfig IRDA tristate {
   depends on [NET && !S390]
   prompt "IrDA (infrared) subsystem support" if [NET && !S390]
   select CRC_CCITT if [NET && !S390]
   inherited [NET && !S390]
   config IRLAN tristate {
    prompt "IrLAN protocol" if [NET && IRDA]
    depends on [IRDA]
    inherited [NET && IRDA]
   }
   config IRNET tristate {
    prompt "IrNET protocol" if [NET && IRDA && PPP]
    depends on [IRDA && PPP]
    inherited [NET && IRDA && PPP]
   }
   config IRCOMM tristate {
    prompt "IrCOMM protocol" if [NET && IRDA]
    depends on [IRDA]
    inherited [NET && IRDA]
   }
   config IRDA_ULTRA boolean {
    prompt "Ultra (connectionless) protocol" if [NET && IRDA]
    depends on [IRDA]
    inherited [NET && IRDA]
   }
   config IRDA_CACHE_LAST_LSAP boolean {
    prompt "Cache last LSAP" if [NET && IRDA]
    depends on [IRDA]
    inherited [NET && IRDA]
   }
   config IRDA_FAST_RR boolean {
    prompt "Fast RRs (low latency)" if [NET && IRDA]
    depends on [IRDA]
    inherited [NET && IRDA]
   }
   config IRDA_DEBUG boolean {
    prompt "Debug information" if [NET && IRDA]
    depends on [IRDA]
    inherited [NET && IRDA]
   }
   menu "Infrared-port device drivers" {
    depends on [NET && IRDA!="n"]
    config IRTTY_SIR tristate {
     prompt "IrTTY (uses Linux serial driver)" if [NET && IRDA]
     depends on [IRDA]
     inherited [NET && IRDA]
    }
    config BFIN_SIR tristate {
     prompt "Blackfin SIR on UART" if [NET && BLACKFIN && IRDA]
     depends on [BLACKFIN && IRDA]
     default [n] if [NET && BLACKFIN && IRDA]
     inherited [NET && BLACKFIN && IRDA]
     config BFIN_SIR0 boolean {
      prompt "Blackfin SIR on UART0" if [NET && IRDA && BFIN_SIR && !SERIAL_BFIN_UART0]
      depends on [BFIN_SIR && !SERIAL_BFIN_UART0]
      inherited [NET && IRDA && BFIN_SIR && !SERIAL_BFIN_UART0]
     }
     config BFIN_SIR1 boolean {
      prompt "Blackfin SIR on UART1" if [NET && IRDA && BFIN_SIR && !SERIAL_BFIN_UART1 && !BF531 && !BF532 && !BF533 && !BF561]
      depends on [BFIN_SIR && !SERIAL_BFIN_UART1 && !BF531 && !BF532 && !BF533 && !BF561]
      inherited [NET && IRDA && BFIN_SIR && !SERIAL_BFIN_UART1 && !BF531 && !BF532 && !BF533 && !BF561]
     }
     config BFIN_SIR2 boolean {
      prompt "Blackfin SIR on UART2" if [NET && IRDA && BFIN_SIR && !SERIAL_BFIN_UART2 && (BF54x || BF538 || BF539)]
      depends on [BFIN_SIR && !SERIAL_BFIN_UART2 && (BF54x || BF538 || BF539)]
      inherited [NET && IRDA && BFIN_SIR && !SERIAL_BFIN_UART2 && (BF54x || BF538 || BF539)]
     }
     config BFIN_SIR3 boolean {
      prompt "Blackfin SIR on UART3" if [NET && IRDA && BFIN_SIR && !SERIAL_BFIN_UART3 && BF54x]
      depends on [BFIN_SIR && !SERIAL_BFIN_UART3 && BF54x]
      inherited [NET && IRDA && BFIN_SIR && !SERIAL_BFIN_UART3 && BF54x]
     }
     choice boolean {
      prompt "SIR Mode" if [NET && IRDA && BFIN_SIR]
      depends on [BFIN_SIR]
      default [SIR_BFIN_DMA] if [NET && IRDA && BFIN_SIR]
      config SIR_BFIN_DMA boolean {
       prompt "DMA mode" if [<choice> && !DMA_UNCACHED_NONE]
       depends on [!DMA_UNCACHED_NONE]
       inherited [<choice> && !DMA_UNCACHED_NONE]
      }
      config SIR_BFIN_PIO boolean {
       prompt "PIO mode" if [<choice>]
       inherited [<choice>]
      }
     }
    }
    config DONGLE boolean {
     prompt "Serial dongle support" if [NET && IRDA && IRTTY_SIR]
     depends on [IRTTY_SIR]
     inherited [NET && IRDA && IRTTY_SIR]
     config ESI_DONGLE tristate {
      prompt "ESI JetEye PC dongle" if [NET && IRTTY_SIR && DONGLE && IRDA]
      depends on [IRTTY_SIR && DONGLE && IRDA]
      inherited [NET && IRTTY_SIR && DONGLE && IRDA]
     }
     config ACTISYS_DONGLE tristate {
      prompt "ACTiSYS IR-220L and IR220L+ dongle" if [NET && IRTTY_SIR && DONGLE && IRDA]
      depends on [IRTTY_SIR && DONGLE && IRDA]
      inherited [NET && IRTTY_SIR && DONGLE && IRDA]
     }
     config TEKRAM_DONGLE tristate {
      prompt "Tekram IrMate 210B dongle" if [NET && IRTTY_SIR && DONGLE && IRDA]
      depends on [IRTTY_SIR && DONGLE && IRDA]
      inherited [NET && IRTTY_SIR && DONGLE && IRDA]
     }
     config TOIM3232_DONGLE tristate {
      prompt "TOIM3232 IrDa dongle" if [NET && IRTTY_SIR && DONGLE && IRDA]
      depends on [IRTTY_SIR && DONGLE && IRDA]
      inherited [NET && IRTTY_SIR && DONGLE && IRDA]
     }
     config LITELINK_DONGLE tristate {
      prompt "Parallax LiteLink dongle" if [NET && IRTTY_SIR && DONGLE && IRDA]
      depends on [IRTTY_SIR && DONGLE && IRDA]
      inherited [NET && IRTTY_SIR && DONGLE && IRDA]
     }
     config MA600_DONGLE tristate {
      prompt "Mobile Action MA600 dongle" if [NET && IRTTY_SIR && DONGLE && IRDA && EXPERIMENTAL]
      depends on [IRTTY_SIR && DONGLE && IRDA && EXPERIMENTAL]
      inherited [NET && IRTTY_SIR && DONGLE && IRDA && EXPERIMENTAL]
     }
     config GIRBIL_DONGLE tristate {
      prompt "Greenwich GIrBIL dongle" if [NET && IRTTY_SIR && DONGLE && IRDA && EXPERIMENTAL]
      depends on [IRTTY_SIR && DONGLE && IRDA && EXPERIMENTAL]
      inherited [NET && IRTTY_SIR && DONGLE && IRDA && EXPERIMENTAL]
     }
     config MCP2120_DONGLE tristate {
      prompt "Microchip MCP2120" if [NET && IRTTY_SIR && DONGLE && IRDA && EXPERIMENTAL]
      depends on [IRTTY_SIR && DONGLE && IRDA && EXPERIMENTAL]
      inherited [NET && IRTTY_SIR && DONGLE && IRDA && EXPERIMENTAL]
     }
     config OLD_BELKIN_DONGLE tristate {
      prompt "Old Belkin dongle" if [NET && IRTTY_SIR && DONGLE && IRDA && EXPERIMENTAL]
      depends on [IRTTY_SIR && DONGLE && IRDA && EXPERIMENTAL]
      inherited [NET && IRTTY_SIR && DONGLE && IRDA && EXPERIMENTAL]
     }
     config ACT200L_DONGLE tristate {
      prompt "ACTiSYS IR-200L dongle" if [NET && IRTTY_SIR && DONGLE && IRDA && EXPERIMENTAL]
      depends on [IRTTY_SIR && DONGLE && IRDA && EXPERIMENTAL]
      inherited [NET && IRTTY_SIR && DONGLE && IRDA && EXPERIMENTAL]
     }
    }
    config KINGSUN_DONGLE tristate {
     prompt "KingSun/DonShine DS-620 IrDA-USB dongle" if [NET && IRDA && USB && EXPERIMENTAL]
     depends on [IRDA && USB && EXPERIMENTAL]
     inherited [NET && IRDA && USB && EXPERIMENTAL]
    }
    config EP7211_DONGLE tristate {
     prompt "EP7211 I/R support" if [NET && IRTTY_SIR && ARCH_EP7211 && IRDA && EXPERIMENTAL]
     depends on [IRTTY_SIR && ARCH_EP7211 && IRDA && EXPERIMENTAL]
     inherited [NET && IRTTY_SIR && ARCH_EP7211 && IRDA && EXPERIMENTAL]
    }
    config KSDAZZLE_DONGLE tristate {
     prompt "KingSun Dazzle IrDA-USB dongle (EXPERIMENTAL)" if [NET && IRDA && USB && EXPERIMENTAL]
     depends on [IRDA && USB && EXPERIMENTAL]
     inherited [NET && IRDA && USB && EXPERIMENTAL]
    }
    config KS959_DONGLE tristate {
     prompt "KingSun KS-959 IrDA-USB dongle (EXPERIMENTAL)" if [NET && IRDA && USB && EXPERIMENTAL]
     depends on [IRDA && USB && EXPERIMENTAL]
     inherited [NET && IRDA && USB && EXPERIMENTAL]
    }
    config USB_IRDA tristate {
     prompt "IrDA USB dongles" if [NET && IRDA && USB]
     depends on [IRDA && USB]
     select FW_LOADER if [NET && IRDA && USB]
     inherited [NET && IRDA && USB]
    }
    config SIGMATEL_FIR tristate {
     prompt "SigmaTel STIr4200 bridge (EXPERIMENTAL)" if [NET && IRDA && USB && EXPERIMENTAL]
     depends on [IRDA && USB && EXPERIMENTAL]
     select CRC32 if [NET && IRDA && USB && EXPERIMENTAL]
     inherited [NET && IRDA && USB && EXPERIMENTAL]
    }
    config NSC_FIR tristate {
     prompt "NSC PC87108/PC87338" if [NET && IRDA && ISA_DMA_API]
     depends on [IRDA && ISA_DMA_API]
     inherited [NET && IRDA && ISA_DMA_API]
    }
    config WINBOND_FIR tristate {
     prompt "Winbond W83977AF (IR)" if [NET && IRDA && ISA_DMA_API]
     depends on [IRDA && ISA_DMA_API]
     inherited [NET && IRDA && ISA_DMA_API]
    }
    config TOSHIBA_FIR tristate {
     prompt "Toshiba Type-O IR Port" if [NET && IRDA && PCI && !64BIT && VIRT_TO_BUS]
     depends on [IRDA && PCI && !64BIT && VIRT_TO_BUS]
     inherited [NET && IRDA && PCI && !64BIT && VIRT_TO_BUS]
    }
    config AU1000_FIR tristate {
     prompt "Alchemy Au1000 SIR/FIR" if [NET && SOC_AU1000 && IRDA]
     depends on [SOC_AU1000 && IRDA]
     inherited [NET && SOC_AU1000 && IRDA]
    }
    config SMC_IRCC_FIR tristate {
     prompt "SMSC IrCC (EXPERIMENTAL)" if [NET && EXPERIMENTAL && IRDA && ISA_DMA_API]
     depends on [EXPERIMENTAL && IRDA && ISA_DMA_API]
     inherited [NET && EXPERIMENTAL && IRDA && ISA_DMA_API]
    }
    config ALI_FIR tristate {
     prompt "ALi M5123 FIR (EXPERIMENTAL)" if [NET && EXPERIMENTAL && IRDA && ISA_DMA_API]
     depends on [EXPERIMENTAL && IRDA && ISA_DMA_API]
     inherited [NET && EXPERIMENTAL && IRDA && ISA_DMA_API]
    }
    config VLSI_FIR tristate {
     prompt "VLSI 82C147 SIR/MIR/FIR (EXPERIMENTAL)" if [NET && EXPERIMENTAL && IRDA && PCI]
     depends on [EXPERIMENTAL && IRDA && PCI]
     inherited [NET && EXPERIMENTAL && IRDA && PCI]
    }
    config SA1100_FIR tristate {
     prompt "SA1100 Internal IR" if [NET && ARCH_SA1100 && IRDA]
     depends on [ARCH_SA1100 && IRDA]
     inherited [NET && ARCH_SA1100 && IRDA]
    }
    config VIA_FIR tristate {
     prompt "VIA VT8231/VT1211 SIR/MIR/FIR" if [NET && IRDA && ISA_DMA_API]
     depends on [IRDA && ISA_DMA_API]
     inherited [NET && IRDA && ISA_DMA_API]
    }
    config PXA_FICP tristate {
     prompt "Intel PXA2xx Internal FICP" if [NET && ARCH_PXA && IRDA]
     depends on [ARCH_PXA && IRDA]
     inherited [NET && ARCH_PXA && IRDA]
    }
    config MCS_FIR tristate {
     prompt "MosChip MCS7780 IrDA-USB dongle" if [NET && IRDA && USB && EXPERIMENTAL]
     depends on [IRDA && USB && EXPERIMENTAL]
     select CRC32 if [NET && IRDA && USB && EXPERIMENTAL]
     inherited [NET && IRDA && USB && EXPERIMENTAL]
    }
   }
  }
  menuconfig BT tristate {
   prompt "Bluetooth subsystem support" if [NET && !S390 && (RFKILL || !RFKILL)]
   depends on [NET && !S390]
   depends on [RFKILL || !RFKILL]
   inherited [NET && !S390 && (RFKILL || !RFKILL)]
   config BT_L2CAP tristate {
    prompt "L2CAP protocol support" if [NET && BT]
    depends on [BT]
    select CRC16 if [NET && BT]
    inherited [NET && BT]
   }
   config BT_SCO tristate {
    prompt "SCO links support" if [NET && BT]
    depends on [BT]
    inherited [NET && BT]
   }
   config BT_RFCOMM tristate {
    prompt "RFCOMM protocol support" if [NET && BT && BT_L2CAP]
    depends on [BT && BT_L2CAP]
    inherited [NET && BT && BT_L2CAP]
    config BT_RFCOMM_TTY boolean {
     prompt "RFCOMM TTY support" if [NET && BT_RFCOMM]
     depends on [BT_RFCOMM]
     inherited [NET && BT_RFCOMM]
    }
   }
   config BT_BNEP tristate {
    prompt "BNEP protocol support" if [NET && BT && BT_L2CAP]
    depends on [BT && BT_L2CAP]
    select CRC32 if [NET && BT && BT_L2CAP]
    inherited [NET && BT && BT_L2CAP]
    config BT_BNEP_MC_FILTER boolean {
     prompt "Multicast filter support" if [NET && BT_BNEP]
     depends on [BT_BNEP]
     inherited [NET && BT_BNEP]
    }
    config BT_BNEP_PROTO_FILTER boolean {
     prompt "Protocol filter support" if [NET && BT_BNEP]
     depends on [BT_BNEP]
     inherited [NET && BT_BNEP]
    }
   }
   config BT_CMTP tristate {
    prompt "CMTP protocol support" if [NET && BT && BT_L2CAP && ISDN_CAPI]
    depends on [BT && BT_L2CAP && ISDN_CAPI]
    inherited [NET && BT && BT_L2CAP && ISDN_CAPI]
   }
   config BT_HIDP tristate {
    prompt "HIDP protocol support" if [NET && BT && BT_L2CAP && INPUT]
    depends on [BT && BT_L2CAP && INPUT]
    select HID if [NET && BT && BT_L2CAP && INPUT]
    inherited [NET && BT && BT_L2CAP && INPUT]
   }
   menu "Bluetooth device drivers" {
    depends on [NET && BT]
    config BT_HCIBTUSB tristate {
     prompt "HCI USB driver" if [NET && BT && USB]
     depends on [USB]
     inherited [NET && BT && USB]
    }
    config BT_HCIBTSDIO tristate {
     prompt "HCI SDIO driver" if [NET && BT && MMC]
     depends on [MMC]
     inherited [NET && BT && MMC]
    }
    config BT_HCIUART tristate {
     prompt "HCI UART driver" if [NET && BT]
     inherited [NET && BT]
     config BT_HCIUART_H4 boolean {
      prompt "UART (H4) protocol support" if [NET && BT && BT_HCIUART]
      depends on [BT_HCIUART]
      inherited [NET && BT && BT_HCIUART]
     }
     config BT_HCIUART_BCSP boolean {
      prompt "BCSP protocol support" if [NET && BT && BT_HCIUART]
      depends on [BT_HCIUART]
      select BITREVERSE if [NET && BT && BT_HCIUART]
      inherited [NET && BT && BT_HCIUART]
     }
     config BT_HCIUART_LL boolean {
      prompt "HCILL protocol support" if [NET && BT && BT_HCIUART]
      depends on [BT_HCIUART]
      inherited [NET && BT && BT_HCIUART]
     }
    }
    config BT_HCIBCM203X tristate {
     prompt "HCI BCM203x USB driver" if [NET && BT && USB]
     depends on [USB]
     select FW_LOADER if [NET && BT && USB]
     inherited [NET && BT && USB]
    }
    config BT_HCIBPA10X tristate {
     prompt "HCI BPA10x USB driver" if [NET && BT && USB]
     depends on [USB]
     inherited [NET && BT && USB]
    }
    config BT_HCIBFUSB tristate {
     prompt "HCI BlueFRITZ! USB driver" if [NET && BT && USB]
     depends on [USB]
     select FW_LOADER if [NET && BT && USB]
     inherited [NET && BT && USB]
    }
    config BT_HCIDTL1 tristate {
     prompt "HCI DTL1 (PC Card) driver" if [NET && BT && PCMCIA]
     depends on [PCMCIA]
     inherited [NET && BT && PCMCIA]
    }
    config BT_HCIBT3C tristate {
     prompt "HCI BT3C (PC Card) driver" if [NET && BT && PCMCIA]
     depends on [PCMCIA]
     select FW_LOADER if [NET && BT && PCMCIA]
     inherited [NET && BT && PCMCIA]
    }
    config BT_HCIBLUECARD tristate {
     prompt "HCI BlueCard (PC Card) driver" if [NET && BT && PCMCIA]
     depends on [PCMCIA]
     inherited [NET && BT && PCMCIA]
    }
    config BT_HCIBTUART tristate {
     prompt "HCI UART (PC Card) device driver" if [NET && BT && PCMCIA]
     depends on [PCMCIA]
     inherited [NET && BT && PCMCIA]
    }
    config BT_HCIVHCI tristate {
     prompt "HCI VHCI (Virtual HCI device) driver" if [NET && BT]
     inherited [NET && BT]
    }
    config BT_MRVL tristate {
     prompt "Marvell Bluetooth driver support" if [NET && BT]
     inherited [NET && BT]
     config BT_MRVL_SDIO tristate {
      prompt "Marvell BT-over-SDIO driver" if [NET && BT && BT_MRVL && MMC]
      depends on [BT_MRVL && MMC]
      select FW_LOADER if [NET && BT && BT_MRVL && MMC]
      inherited [NET && BT && BT_MRVL && MMC]
     }
    }
    config BT_ATH3K tristate {
     prompt "Atheros firmware download driver" if [NET && BT && BT_HCIBTUSB]
     depends on [BT_HCIBTUSB]
     select FW_LOADER if [NET && BT && BT_HCIBTUSB]
     inherited [NET && BT && BT_HCIBTUSB]
    }
   }
  }
  config AF_RXRPC tristate {
   prompt "RxRPC session sockets" if [NET && INET && EXPERIMENTAL]
   depends on [INET && EXPERIMENTAL]
   select CRYPTO if [NET && INET && EXPERIMENTAL]
   select KEYS if [NET && INET && EXPERIMENTAL]
   inherited [NET && INET && EXPERIMENTAL]
   config AF_RXRPC_DEBUG boolean {
    prompt "RxRPC dynamic debugging" if [NET && AF_RXRPC]
    depends on [AF_RXRPC]
    inherited [NET && AF_RXRPC]
   }
   config RXKAD tristate {
    prompt "RxRPC Kerberos security" if [NET && AF_RXRPC]
    depends on [AF_RXRPC]
    select CRYPTO if [NET && AF_RXRPC]
    select CRYPTO_MANAGER if [NET && AF_RXRPC]
    select CRYPTO_BLKCIPHER if [NET && AF_RXRPC]
    select CRYPTO_PCBC if [NET && AF_RXRPC]
    select CRYPTO_FCRYPT if [NET && AF_RXRPC]
    inherited [NET && AF_RXRPC]
   }
  }
  config FIB_RULES boolean {
   inherited [NET]
  }
  menuconfig WIRELESS boolean {
   prompt "Wireless" if [NET && !S390]
   depends on [!S390]
   default [y] if [NET && !S390]
   inherited [NET && !S390]
   if [NET && WIRELESS] {
    config WIRELESS_EXT boolean {
     inherited [NET && WIRELESS]
    }
    config WEXT_CORE boolean {
     default [y] if [NET && WIRELESS && (CFG80211_WEXT || WIRELESS_EXT)]
     depends on [CFG80211_WEXT || WIRELESS_EXT]
     inherited [NET && WIRELESS && (CFG80211_WEXT || WIRELESS_EXT)]
    }
    config WEXT_PROC boolean {
     default [y] if [NET && WIRELESS && PROC_FS && WEXT_CORE]
     depends on [PROC_FS]
     depends on [WEXT_CORE]
     inherited [NET && WIRELESS && PROC_FS && WEXT_CORE]
    }
    config WEXT_SPY boolean {
     inherited [NET && WIRELESS]
    }
    config WEXT_PRIV boolean {
     inherited [NET && WIRELESS]
    }
    config CFG80211 tristate {
     prompt "cfg80211 - wireless configuration API" if [NET && WIRELESS && (RFKILL || !RFKILL)]
     depends on [RFKILL || !RFKILL]
     inherited [NET && WIRELESS && (RFKILL || !RFKILL)]
     config NL80211_TESTMODE boolean {
      prompt "nl80211 testmode command" if [NET && WIRELESS && CFG80211]
      depends on [CFG80211]
      inherited [NET && WIRELESS && CFG80211]
     }
     config CFG80211_DEVELOPER_WARNINGS boolean {
      prompt "enable developer warnings" if [NET && WIRELESS && CFG80211]
      depends on [CFG80211]
      default [n] if [NET && WIRELESS && CFG80211]
      inherited [NET && WIRELESS && CFG80211]
     }
     config CFG80211_REG_DEBUG boolean {
      prompt "cfg80211 regulatory debugging" if [NET && WIRELESS && CFG80211]
      depends on [CFG80211]
      default [n] if [NET && WIRELESS && CFG80211]
      inherited [NET && WIRELESS && CFG80211]
     }
     config CFG80211_DEFAULT_PS boolean {
      prompt "enable powersave by default" if [NET && WIRELESS && CFG80211]
      depends on [CFG80211]
      default [y] if [NET && WIRELESS && CFG80211]
      inherited [NET && WIRELESS && CFG80211]
     }
     config CFG80211_DEBUGFS boolean {
      prompt "cfg80211 DebugFS entries" if [NET && WIRELESS && CFG80211 && DEBUG_FS]
      depends on [CFG80211]
      depends on [DEBUG_FS]
      inherited [NET && WIRELESS && CFG80211 && DEBUG_FS]
     }
     config WIRELESS_OLD_REGULATORY boolean {
      prompt "Old wireless static regulatory definitions" if [NET && WIRELESS && CFG80211]
      default [n] if [NET && WIRELESS && CFG80211]
      depends on [CFG80211]
      inherited [NET && WIRELESS && CFG80211]
     }
     config CFG80211_WEXT boolean {
      prompt "cfg80211 wireless extensions compatibility" if [NET && WIRELESS && CFG80211]
      depends on [CFG80211]
      select WEXT_CORE if [NET && WIRELESS && CFG80211]
      default [y] if [NET && WIRELESS && CFG80211]
      inherited [NET && WIRELESS && CFG80211]
     }
    }
    config WIRELESS_EXT_SYSFS boolean {
     prompt "Wireless extensions sysfs files" if [NET && WIRELESS && WEXT_CORE && SYSFS]
     default [y] if [NET && WIRELESS && WEXT_CORE && SYSFS]
     depends on [WEXT_CORE && SYSFS]
     inherited [NET && WIRELESS && WEXT_CORE && SYSFS]
    }
    config LIB80211 tristate {
     prompt "Common routines for IEEE802.11 drivers" if [NET && WIRELESS]
     default [n] if [NET && WIRELESS]
     inherited [NET && WIRELESS]
    }
    config LIB80211_CRYPT_WEP tristate {
     inherited [NET && WIRELESS]
    }
    config LIB80211_CRYPT_CCMP tristate {
     inherited [NET && WIRELESS]
    }
    config LIB80211_CRYPT_TKIP tristate {
     inherited [NET && WIRELESS]
    }
    config LIB80211_DEBUG boolean {
     prompt "lib80211 debugging messages" if [NET && WIRELESS && LIB80211]
     depends on [LIB80211]
     default [n] if [NET && WIRELESS && LIB80211]
     inherited [NET && WIRELESS && LIB80211]
    }
    config MAC80211 tristate {
     prompt "Generic IEEE 802.11 Networking Stack (mac80211)" if [NET && WIRELESS && CFG80211]
     depends on [CFG80211]
     select CRYPTO if [NET && WIRELESS && CFG80211]
     select CRYPTO_ECB if [NET && WIRELESS && CFG80211]
     select CRYPTO_ARC4 if [NET && WIRELESS && CFG80211]
     select CRYPTO_AES if [NET && WIRELESS && CFG80211]
     select CRC32 if [NET && WIRELESS && CFG80211]
     inherited [NET && WIRELESS && CFG80211]
    }
    if [NET && WIRELESS && MAC80211!="n"] {
     config MAC80211_RC_PID boolean {
      prompt "PID controller based rate control algorithm" if [NET && WIRELESS && MAC80211 && EMBEDDED]
      inherited [NET && WIRELESS && MAC80211]
     }
     config MAC80211_RC_MINSTREL boolean {
      prompt "Minstrel" if [NET && WIRELESS && MAC80211 && EMBEDDED]
      default [y] if [NET && WIRELESS && MAC80211]
      inherited [NET && WIRELESS && MAC80211]
     }
     choice boolean {
      prompt "Default rate control algorithm" if [NET && WIRELESS && MAC80211]
      default [MAC80211_RC_DEFAULT_MINSTREL] if [NET && WIRELESS && MAC80211]
      config MAC80211_RC_DEFAULT_PID boolean {
       prompt "PID controller based rate control algorithm" if [<choice> && MAC80211_RC_PID]
       depends on [MAC80211_RC_PID]
       inherited [<choice> && MAC80211_RC_PID]
      }
      config MAC80211_RC_DEFAULT_MINSTREL boolean {
       prompt "Minstrel" if [<choice> && MAC80211_RC_MINSTREL]
       depends on [MAC80211_RC_MINSTREL]
       inherited [<choice> && MAC80211_RC_MINSTREL]
      }
     }
     config MAC80211_RC_DEFAULT string {
      default ["minstrel"] if [NET && WIRELESS && MAC80211 && MAC80211_RC_DEFAULT_MINSTREL]
      default ["pid"] if [NET && WIRELESS && MAC80211 && MAC80211_RC_DEFAULT_PID]
      default [""] if [NET && WIRELESS && MAC80211]
      inherited [NET && WIRELESS && MAC80211]
     }
    }
    config MAC80211_MESH boolean {
     prompt "Enable mac80211 mesh networking (pre-802.11s) support" if [NET && WIRELESS && MAC80211 && EXPERIMENTAL]
     depends on [MAC80211 && EXPERIMENTAL]
     inherited [NET && WIRELESS && MAC80211 && EXPERIMENTAL]
    }
    config MAC80211_LEDS boolean {
     prompt "Enable LED triggers" if [NET && WIRELESS && MAC80211]
     depends on [MAC80211]
     select NEW_LEDS if [NET && WIRELESS && MAC80211]
     select LEDS_TRIGGERS if [NET && WIRELESS && MAC80211]
     inherited [NET && WIRELESS && MAC80211]
    }
    config MAC80211_DEBUGFS boolean {
     prompt "Export mac80211 internals in DebugFS" if [NET && WIRELESS && MAC80211 && DEBUG_FS]
     depends on [MAC80211 && DEBUG_FS]
     inherited [NET && WIRELESS && MAC80211 && DEBUG_FS]
    }
    menuconfig MAC80211_DEBUG_MENU boolean {
     prompt "Select mac80211 debugging features" if [NET && WIRELESS && MAC80211]
     depends on [MAC80211]
     inherited [NET && WIRELESS && MAC80211]
     config MAC80211_DEBUG_PACKET_ALIGNMENT boolean {
      prompt "Enable packet alignment debugging" if [NET && WIRELESS && MAC80211_DEBUG_MENU]
      depends on [MAC80211_DEBUG_MENU]
      inherited [NET && WIRELESS && MAC80211_DEBUG_MENU]
     }
     config MAC80211_NOINLINE boolean {
      prompt "Do not inline TX/RX handlers" if [NET && WIRELESS && MAC80211_DEBUG_MENU]
      depends on [MAC80211_DEBUG_MENU]
      inherited [NET && WIRELESS && MAC80211_DEBUG_MENU]
     }
     config MAC80211_VERBOSE_DEBUG boolean {
      prompt "Verbose debugging output" if [NET && WIRELESS && MAC80211_DEBUG_MENU]
      depends on [MAC80211_DEBUG_MENU]
      inherited [NET && WIRELESS && MAC80211_DEBUG_MENU]
     }
     config MAC80211_HT_DEBUG boolean {
      prompt "Verbose HT debugging" if [NET && WIRELESS && MAC80211_DEBUG_MENU]
      depends on [MAC80211_DEBUG_MENU]
      inherited [NET && WIRELESS && MAC80211_DEBUG_MENU]
     }
     config MAC80211_TKIP_DEBUG boolean {
      prompt "Verbose TKIP debugging" if [NET && WIRELESS && MAC80211_DEBUG_MENU]
      depends on [MAC80211_DEBUG_MENU]
      inherited [NET && WIRELESS && MAC80211_DEBUG_MENU]
     }
     config MAC80211_IBSS_DEBUG boolean {
      prompt "Verbose IBSS debugging" if [NET && WIRELESS && MAC80211_DEBUG_MENU]
      depends on [MAC80211_DEBUG_MENU]
      inherited [NET && WIRELESS && MAC80211_DEBUG_MENU]
     }
     config MAC80211_VERBOSE_PS_DEBUG boolean {
      prompt "Verbose powersave mode debugging" if [NET && WIRELESS && MAC80211_DEBUG_MENU]
      depends on [MAC80211_DEBUG_MENU]
      inherited [NET && WIRELESS && MAC80211_DEBUG_MENU]
     }
     config MAC80211_VERBOSE_MPL_DEBUG boolean {
      prompt "Verbose mesh peer link debugging" if [NET && WIRELESS && MAC80211_DEBUG_MENU && MAC80211_MESH]
      depends on [MAC80211_DEBUG_MENU]
      depends on [MAC80211_MESH]
      inherited [NET && WIRELESS && MAC80211_DEBUG_MENU && MAC80211_MESH]
     }
     config MAC80211_VERBOSE_MHWMP_DEBUG boolean {
      prompt "Verbose mesh HWMP routing debugging" if [NET && WIRELESS && MAC80211_DEBUG_MENU && MAC80211_MESH]
      depends on [MAC80211_DEBUG_MENU]
      depends on [MAC80211_MESH]
      inherited [NET && WIRELESS && MAC80211_DEBUG_MENU && MAC80211_MESH]
     }
     config MAC80211_DEBUG_COUNTERS boolean {
      prompt "Extra statistics for TX/RX debugging" if [NET && WIRELESS && MAC80211_DEBUG_MENU && MAC80211_DEBUGFS]
      depends on [MAC80211_DEBUG_MENU]
      depends on [MAC80211_DEBUGFS]
      inherited [NET && WIRELESS && MAC80211_DEBUG_MENU && MAC80211_DEBUGFS]
     }
     config MAC80211_DRIVER_API_TRACER boolean {
      prompt "Driver API tracer" if [NET && WIRELESS && MAC80211_DEBUG_MENU && EVENT_TRACING]
      depends on [MAC80211_DEBUG_MENU]
      depends on [EVENT_TRACING]
      inherited [NET && WIRELESS && MAC80211_DEBUG_MENU && EVENT_TRACING]
     }
    }
   }
  }
  menuconfig WIMAX tristate {
   prompt "WiMAX Wireless Broadband support" if [NET && (RFKILL || !RFKILL)]
   depends on [RFKILL || !RFKILL]
   inherited [NET && (RFKILL || !RFKILL)]
   config WIMAX_DEBUG_LEVEL integer {
    prompt "WiMAX debug level" if [NET && WIMAX]
    depends on [WIMAX]
    default [8] if [NET && WIMAX]
    inherited [NET && WIMAX]
   }
  }
  menuconfig RFKILL tristate {
   prompt "RF switch subsystem support" if [NET]
   inherited [NET]
   config RFKILL_LEDS boolean {
    depends on [RFKILL]
    depends on [LEDS_TRIGGERS="y" || RFKILL="LEDS_TRIGGERS"]
    default [y] if [NET && RFKILL && (LEDS_TRIGGERS="y" || RFKILL="LEDS_TRIGGERS")]
    inherited [NET && RFKILL && (LEDS_TRIGGERS="y" || RFKILL="LEDS_TRIGGERS")]
   }
   config RFKILL_INPUT boolean {
    prompt "RF switch input support" if [NET && RFKILL && (INPUT="y" || RFKILL="INPUT") && EMBEDDED]
    depends on [RFKILL]
    depends on [INPUT="y" || RFKILL="INPUT"]
    default [y] if [NET && RFKILL && (INPUT="y" || RFKILL="INPUT") && !EMBEDDED]
    inherited [NET && RFKILL && (INPUT="y" || RFKILL="INPUT")]
   }
  }
  menuconfig NET_9P tristate {
   depends on [NET && EXPERIMENTAL]
   prompt "Plan 9 Resource Sharing Support (9P2000) (Experimental)" if [NET && EXPERIMENTAL]
   inherited [NET && EXPERIMENTAL]
   if [NET && NET_9P] {
    config NET_9P_VIRTIO tristate {
     depends on [EXPERIMENTAL && VIRTIO]
     prompt "9P Virtio Transport (Experimental)" if [NET && NET_9P && EXPERIMENTAL && VIRTIO]
     inherited [NET && NET_9P && EXPERIMENTAL && VIRTIO]
    }
    config NET_9P_RDMA tristate {
     depends on [INET && INFINIBAND && INFINIBAND_ADDR_TRANS && EXPERIMENTAL]
     prompt "9P RDMA Transport (Experimental)" if [NET && NET_9P && INET && INFINIBAND && INFINIBAND_ADDR_TRANS && EXPERIMENTAL]
     inherited [NET && NET_9P && INET && INFINIBAND && INFINIBAND_ADDR_TRANS && EXPERIMENTAL]
    }
    config NET_9P_DEBUG boolean {
     prompt "Debug information" if [NET && NET_9P]
     inherited [NET && NET_9P]
    }
   }
  }
 }
}
menu "Drivers for built-in interfaces" {
 if [ETRAX_ARCH_V10] {
  config ETRAX_ETHERNET boolean {
   prompt "Ethernet support" if [ETRAX_ARCH_V10]
   depends on [ETRAX_ARCH_V10]
   select NET_ETHERNET if [ETRAX_ARCH_V10]
   select MII if [ETRAX_ARCH_V10]
   prompt "Ethernet support" if [ETRAX_ARCH_V32]
   depends on [ETRAX_ARCH_V32]
   select NET_ETHERNET if [ETRAX_ARCH_V32]
   select MII if [ETRAX_ARCH_V32]
   inherited [ETRAX_ARCH_V10]
  }
  config ETRAX_SERIAL boolean {
   prompt "Serial-port support" if [ETRAX_ARCH_V10]
   depends on [ETRAX_ARCH_V10]
   inherited [ETRAX_ARCH_V10]
   config ETRAX_SERIAL_FAST_TIMER boolean {
    prompt "Use fast timers for serial DMA flush (experimental)" if [ETRAX_ARCH_V10 && ETRAX_SERIAL]
    depends on [ETRAX_SERIAL]
    inherited [ETRAX_ARCH_V10 && ETRAX_SERIAL]
    config ETRAX_SERIAL_FLUSH_DMA_FAST boolean {
     prompt "Fast serial port DMA flush" if [ETRAX_ARCH_V10 && ETRAX_SERIAL && !ETRAX_SERIAL_FAST_TIMER]
     depends on [ETRAX_SERIAL && !ETRAX_SERIAL_FAST_TIMER]
     inherited [ETRAX_ARCH_V10 && ETRAX_SERIAL && !ETRAX_SERIAL_FAST_TIMER]
     config ETRAX_SERIAL_RX_TIMEOUT_TICKS integer {
      prompt "Receive flush timeout (ticks) " if [ETRAX_ARCH_V10 && ETRAX_SERIAL && !ETRAX_SERIAL_FAST_TIMER && !ETRAX_SERIAL_FLUSH_DMA_FAST]
      depends on [ETRAX_SERIAL && !ETRAX_SERIAL_FAST_TIMER && !ETRAX_SERIAL_FLUSH_DMA_FAST]
      default [5] if [ETRAX_ARCH_V10 && ETRAX_SERIAL && !ETRAX_SERIAL_FAST_TIMER && !ETRAX_SERIAL_FLUSH_DMA_FAST]
      inherited [ETRAX_ARCH_V10 && ETRAX_SERIAL && !ETRAX_SERIAL_FAST_TIMER && !ETRAX_SERIAL_FLUSH_DMA_FAST]
     }
    }
   }
   config ETRAX_SERIAL_PORT0 boolean {
    prompt "Serial port 0 enabled" if [ETRAX_ARCH_V10 && ETRAX_SERIAL]
    depends on [ETRAX_SERIAL]
    prompt "Serial port 0 enabled" if [ETRAX_ARCH_V32 && ETRAXFS_SERIAL]
    depends on [ETRAXFS_SERIAL]
    inherited [ETRAX_ARCH_V10 && ETRAX_SERIAL]
    choice boolean {
     prompt "Ser0 DTR, RI, DSR and CD assignment" if [ETRAX_ARCH_V10 && ETRAX_SERIAL_PORT0]
     depends on [ETRAX_SERIAL_PORT0]
     default [ETRAX_SER0_DTR_RI_DSR_CD_ON_NONE] if [ETRAX_ARCH_V10 && ETRAX_SERIAL_PORT0]
     config ETRAX_SER0_DTR_RI_DSR_CD_ON_NONE boolean {
      prompt "No_DTR_RI_DSR_CD" if [<choice>]
      inherited [<choice>]
     }
     config ETRAX_SER0_DTR_RI_DSR_CD_ON_PA boolean {
      prompt "DTR_RI_DSR_CD_on_PA" if [<choice>]
      inherited [<choice>]
     }
     config ETRAX_SER0_DTR_RI_DSR_CD_ON_PB boolean {
      prompt "DTR_RI_DSR_CD_on_PB" if [<choice>]
      inherited [<choice>]
     }
     config ETRAX_SER0_DTR_RI_DSR_CD_MIXED boolean {
      prompt "DTR_RI_DSR_CD_mixed_on_PA_and_PB" if [<choice>]
      inherited [<choice>]
     }
    }
    config ETRAX_SER0_DTR_ON_PA_BIT integer {
     prompt "Ser0 DTR on PA bit (-1 = not used)" if [ETRAX_ARCH_V10 && ETRAX_SERIAL_PORT0 && (ETRAX_SER0_DTR_RI_DSR_CD_ON_PA || ETRAX_SER0_DTR_RI_DSR_CD_MIXED)]
     depends on [ETRAX_SERIAL_PORT0]
     default [-1] if [ETRAX_ARCH_V10 && ETRAX_SERIAL_PORT0 && !ETRAX_SER0_DTR_RI_DSR_CD_ON_PA && !ETRAX_SER0_DTR_RI_DSR_CD_MIXED]
     default [4] if [ETRAX_ARCH_V10 && ETRAX_SERIAL_PORT0 && (ETRAX_SER0_DTR_RI_DSR_CD_ON_PA || ETRAX_SER0_DTR_RI_DSR_CD_MIXED)]
     inherited [ETRAX_ARCH_V10 && ETRAX_SERIAL_PORT0]
    }
    config ETRAX_SER0_RI_ON_PA_BIT integer {
     prompt "Ser0 RI  on PA bit (-1 = not used)" if [ETRAX_ARCH_V10 && ETRAX_SERIAL_PORT0 && (ETRAX_SER0_DTR_RI_DSR_CD_ON_PA || ETRAX_SER0_DTR_RI_DSR_CD_MIXED)]
     depends on [ETRAX_SERIAL_PORT0]
     default [-1] if [ETRAX_ARCH_V10 && ETRAX_SERIAL_PORT0 && !ETRAX_SER0_DTR_RI_DSR_CD_ON_PA && !ETRAX_SER0_DTR_RI_DSR_CD_MIXED]
     default [5] if [ETRAX_ARCH_V10 && ETRAX_SERIAL_PORT0 && (ETRAX_SER0_DTR_RI_DSR_CD_ON_PA || ETRAX_SER0_DTR_RI_DSR_CD_MIXED)]
     inherited [ETRAX_ARCH_V10 && ETRAX_SERIAL_PORT0]
    }
    config ETRAX_SER0_DSR_ON_PA_BIT integer {
     prompt "Ser0 DSR on PA bit (-1 = not used)" if [ETRAX_ARCH_V10 && ETRAX_SERIAL_PORT0 && (ETRAX_SER0_DTR_RI_DSR_CD_ON_PA || ETRAX_SER0_DTR_RI_DSR_CD_MIXED)]
     depends on [ETRAX_SERIAL_PORT0]
     default [-1] if [ETRAX_ARCH_V10 && ETRAX_SERIAL_PORT0 && !ETRAX_SER0_DTR_RI_DSR_CD_ON_PA && !ETRAX_SER0_DTR_RI_DSR_CD_MIXED]
     default [6] if [ETRAX_ARCH_V10 && ETRAX_SERIAL_PORT0 && (ETRAX_SER0_DTR_RI_DSR_CD_ON_PA || ETRAX_SER0_DTR_RI_DSR_CD_MIXED)]
     inherited [ETRAX_ARCH_V10 && ETRAX_SERIAL_PORT0]
    }
    config ETRAX_SER0_CD_ON_PA_BIT integer {
     prompt "Ser0 CD  on PA bit (-1 = not used)" if [ETRAX_ARCH_V10 && ETRAX_SERIAL_PORT0 && (ETRAX_SER0_DTR_RI_DSR_CD_ON_PA || ETRAX_SER0_DTR_RI_DSR_CD_MIXED)]
     depends on [ETRAX_SERIAL_PORT0]
     default [-1] if [ETRAX_ARCH_V10 && ETRAX_SERIAL_PORT0 && !ETRAX_SER0_DTR_RI_DSR_CD_ON_PA && !ETRAX_SER0_DTR_RI_DSR_CD_MIXED]
     default [7] if [ETRAX_ARCH_V10 && ETRAX_SERIAL_PORT0 && (ETRAX_SER0_DTR_RI_DSR_CD_ON_PA || ETRAX_SER0_DTR_RI_DSR_CD_MIXED)]
     inherited [ETRAX_ARCH_V10 && ETRAX_SERIAL_PORT0]
    }
    config ETRAX_SER0_DTR_ON_PB_BIT integer {
     prompt "Ser0 DTR on PB bit (-1 = not used)" if [ETRAX_ARCH_V10 && ETRAX_SERIAL_PORT0 && (ETRAX_SER0_DTR_RI_DSR_CD_ON_PB || ETRAX_SER0_DTR_RI_DSR_CD_MIXED)]
     depends on [ETRAX_SERIAL_PORT0]
     default [-1] if [ETRAX_ARCH_V10 && ETRAX_SERIAL_PORT0 && !ETRAX_SER0_DTR_RI_DSR_CD_ON_PB && !ETRAX_SER0_DTR_RI_DSR_CD_MIXED]
     default [4] if [ETRAX_ARCH_V10 && ETRAX_SERIAL_PORT0 && (ETRAX_SER0_DTR_RI_DSR_CD_ON_PB || ETRAX_SER0_DTR_RI_DSR_CD_MIXED)]
     inherited [ETRAX_ARCH_V10 && ETRAX_SERIAL_PORT0]
    }
    config ETRAX_SER0_RI_ON_PB_BIT integer {
     prompt "Ser0 RI  on PB bit (-1 = not used)" if [ETRAX_ARCH_V10 && ETRAX_SERIAL_PORT0 && (ETRAX_SER0_DTR_RI_DSR_CD_ON_PB || ETRAX_SER0_DTR_RI_DSR_CD_MIXED)]
     depends on [ETRAX_SERIAL_PORT0]
     default [-1] if [ETRAX_ARCH_V10 && ETRAX_SERIAL_PORT0 && !ETRAX_SER0_DTR_RI_DSR_CD_ON_PB && !ETRAX_SER0_DTR_RI_DSR_CD_MIXED]
     default [5] if [ETRAX_ARCH_V10 && ETRAX_SERIAL_PORT0 && (ETRAX_SER0_DTR_RI_DSR_CD_ON_PB || ETRAX_SER0_DTR_RI_DSR_CD_MIXED)]
     inherited [ETRAX_ARCH_V10 && ETRAX_SERIAL_PORT0]
    }
    config ETRAX_SER0_DSR_ON_PB_BIT integer {
     prompt "Ser0 DSR on PB bit (-1 = not used)" if [ETRAX_ARCH_V10 && ETRAX_SERIAL_PORT0 && (ETRAX_SER0_DTR_RI_DSR_CD_ON_PB || ETRAX_SER0_DTR_RI_DSR_CD_MIXED)]
     depends on [ETRAX_SERIAL_PORT0]
     default [-1] if [ETRAX_ARCH_V10 && ETRAX_SERIAL_PORT0 && !ETRAX_SER0_DTR_RI_DSR_CD_ON_PB && !ETRAX_SER0_DTR_RI_DSR_CD_MIXED]
     default [6] if [ETRAX_ARCH_V10 && ETRAX_SERIAL_PORT0 && (ETRAX_SER0_DTR_RI_DSR_CD_ON_PB || ETRAX_SER0_DTR_RI_DSR_CD_MIXED)]
     inherited [ETRAX_ARCH_V10 && ETRAX_SERIAL_PORT0]
    }
    config ETRAX_SER0_CD_ON_PB_BIT integer {
     prompt "Ser0 CD  on PB bit (-1 = not used)" if [ETRAX_ARCH_V10 && ETRAX_SERIAL_PORT0 && (ETRAX_SER0_DTR_RI_DSR_CD_ON_PB || ETRAX_SER0_DTR_RI_DSR_CD_MIXED)]
     depends on [ETRAX_SERIAL_PORT0]
     default [-1] if [ETRAX_ARCH_V10 && ETRAX_SERIAL_PORT0 && !ETRAX_SER0_DTR_RI_DSR_CD_ON_PB && !ETRAX_SER0_DTR_RI_DSR_CD_MIXED]
     default [7] if [ETRAX_ARCH_V10 && ETRAX_SERIAL_PORT0 && (ETRAX_SER0_DTR_RI_DSR_CD_ON_PB || ETRAX_SER0_DTR_RI_DSR_CD_MIXED)]
     inherited [ETRAX_ARCH_V10 && ETRAX_SERIAL_PORT0]
    }
   }
   config ETRAX_SERIAL_PORT1 boolean {
    prompt "Serial port 1 enabled" if [ETRAX_ARCH_V10 && ETRAX_SERIAL]
    depends on [ETRAX_SERIAL]
    prompt "Serial port 1 enabled" if [ETRAX_ARCH_V32 && ETRAXFS_SERIAL]
    depends on [ETRAXFS_SERIAL]
    inherited [ETRAX_ARCH_V10 && ETRAX_SERIAL]
    choice boolean {
     prompt "Ser1 DTR, RI, DSR and CD assignment" if [ETRAX_ARCH_V10 && ETRAX_SERIAL_PORT1]
     depends on [ETRAX_SERIAL_PORT1]
     default [ETRAX_SER1_DTR_RI_DSR_CD_ON_NONE] if [ETRAX_ARCH_V10 && ETRAX_SERIAL_PORT1]
     config ETRAX_SER1_DTR_RI_DSR_CD_ON_NONE boolean {
      prompt "No_DTR_RI_DSR_CD" if [<choice>]
      inherited [<choice>]
     }
     config ETRAX_SER1_DTR_RI_DSR_CD_ON_PA boolean {
      prompt "DTR_RI_DSR_CD_on_PA" if [<choice>]
      inherited [<choice>]
     }
     config ETRAX_SER1_DTR_RI_DSR_CD_ON_PB boolean {
      prompt "DTR_RI_DSR_CD_on_PB" if [<choice>]
      inherited [<choice>]
     }
     config ETRAX_SER1_DTR_RI_DSR_CD_MIXED boolean {
      prompt "DTR_RI_DSR_CD_mixed_on_PA_and_PB" if [<choice>]
      inherited [<choice>]
     }
    }
    config ETRAX_SER1_DTR_ON_PA_BIT integer {
     prompt "Ser1 DTR on PA bit (-1 = not used)" if [ETRAX_ARCH_V10 && ETRAX_SERIAL_PORT1 && (ETRAX_SER1_DTR_RI_DSR_CD_ON_PA || ETRAX_SER1_DTR_RI_DSR_CD_MIXED)]
     depends on [ETRAX_SERIAL_PORT1]
     default [-1] if [ETRAX_ARCH_V10 && ETRAX_SERIAL_PORT1 && !ETRAX_SER1_DTR_RI_DSR_CD_ON_PA && !ETRAX_SER1_DTR_RI_DSR_CD_MIXED]
     default [4] if [ETRAX_ARCH_V10 && ETRAX_SERIAL_PORT1 && (ETRAX_SER1_DTR_RI_DSR_CD_ON_PA || ETRAX_SER1_DTR_RI_DSR_CD_MIXED)]
     inherited [ETRAX_ARCH_V10 && ETRAX_SERIAL_PORT1]
    }
    config ETRAX_SER1_RI_ON_PA_BIT integer {
     prompt "Ser1 RI  on PA bit (-1 = not used)" if [ETRAX_ARCH_V10 && ETRAX_SERIAL_PORT1 && (ETRAX_SER1_DTR_RI_DSR_CD_ON_PA || ETRAX_SER1_DTR_RI_DSR_CD_MIXED)]
     depends on [ETRAX_SERIAL_PORT1]
     default [-1] if [ETRAX_ARCH_V10 && ETRAX_SERIAL_PORT1 && !ETRAX_SER1_DTR_RI_DSR_CD_ON_PA && !ETRAX_SER1_DTR_RI_DSR_CD_MIXED]
     default [5] if [ETRAX_ARCH_V10 && ETRAX_SERIAL_PORT1 && (ETRAX_SER1_DTR_RI_DSR_CD_ON_PA || ETRAX_SER1_DTR_RI_DSR_CD_MIXED)]
     inherited [ETRAX_ARCH_V10 && ETRAX_SERIAL_PORT1]
    }
    config ETRAX_SER1_DSR_ON_PA_BIT integer {
     prompt "Ser1 DSR on PA bit (-1 = not used)" if [ETRAX_ARCH_V10 && ETRAX_SERIAL_PORT1 && (ETRAX_SER1_DTR_RI_DSR_CD_ON_PA || ETRAX_SER1_DTR_RI_DSR_CD_MIXED)]
     depends on [ETRAX_SERIAL_PORT1]
     default [-1] if [ETRAX_ARCH_V10 && ETRAX_SERIAL_PORT1 && !ETRAX_SER1_DTR_RI_DSR_CD_ON_PA && !ETRAX_SER1_DTR_RI_DSR_CD_MIXED]
     default [6] if [ETRAX_ARCH_V10 && ETRAX_SERIAL_PORT1 && (ETRAX_SER1_DTR_RI_DSR_CD_ON_PA || ETRAX_SER1_DTR_RI_DSR_CD_MIXED)]
     inherited [ETRAX_ARCH_V10 && ETRAX_SERIAL_PORT1]
    }
    config ETRAX_SER1_CD_ON_PA_BIT integer {
     prompt "Ser1 CD  on PA bit (-1 = not used)" if [ETRAX_ARCH_V10 && ETRAX_SERIAL_PORT1 && (ETRAX_SER1_DTR_RI_DSR_CD_ON_PA || ETRAX_SER1_DTR_RI_DSR_CD_MIXED)]
     depends on [ETRAX_SERIAL_PORT1]
     default [-1] if [ETRAX_ARCH_V10 && ETRAX_SERIAL_PORT1 && !ETRAX_SER1_DTR_RI_DSR_CD_ON_PA && !ETRAX_SER1_DTR_RI_DSR_CD_MIXED]
     default [7] if [ETRAX_ARCH_V10 && ETRAX_SERIAL_PORT1 && (ETRAX_SER1_DTR_RI_DSR_CD_ON_PA || ETRAX_SER1_DTR_RI_DSR_CD_MIXED)]
     inherited [ETRAX_ARCH_V10 && ETRAX_SERIAL_PORT1]
    }
    config ETRAX_SER1_DTR_ON_PB_BIT integer {
     prompt "Ser1 DTR on PB bit (-1 = not used)" if [ETRAX_ARCH_V10 && ETRAX_SERIAL_PORT1 && (ETRAX_SER1_DTR_RI_DSR_CD_ON_PB || ETRAX_SER1_DTR_RI_DSR_CD_MIXED)]
     depends on [ETRAX_SERIAL_PORT1]
     default [-1] if [ETRAX_ARCH_V10 && ETRAX_SERIAL_PORT1 && !ETRAX_SER1_DTR_RI_DSR_CD_ON_PB && !ETRAX_SER1_DTR_RI_DSR_CD_MIXED]
     default [4] if [ETRAX_ARCH_V10 && ETRAX_SERIAL_PORT1 && (ETRAX_SER1_DTR_RI_DSR_CD_ON_PB || ETRAX_SER1_DTR_RI_DSR_CD_MIXED)]
     inherited [ETRAX_ARCH_V10 && ETRAX_SERIAL_PORT1]
    }
    config ETRAX_SER1_RI_ON_PB_BIT integer {
     prompt "Ser1 RI  on PB bit (-1 = not used)" if [ETRAX_ARCH_V10 && ETRAX_SERIAL_PORT1 && (ETRAX_SER1_DTR_RI_DSR_CD_ON_PB || ETRAX_SER1_DTR_RI_DSR_CD_MIXED)]
     depends on [ETRAX_SERIAL_PORT1]
     default [-1] if [ETRAX_ARCH_V10 && ETRAX_SERIAL_PORT1 && !ETRAX_SER1_DTR_RI_DSR_CD_ON_PB && !ETRAX_SER1_DTR_RI_DSR_CD_MIXED]
     default [5] if [ETRAX_ARCH_V10 && ETRAX_SERIAL_PORT1 && (ETRAX_SER1_DTR_RI_DSR_CD_ON_PB || ETRAX_SER1_DTR_RI_DSR_CD_MIXED)]
     inherited [ETRAX_ARCH_V10 && ETRAX_SERIAL_PORT1]
    }
    config ETRAX_SER1_DSR_ON_PB_BIT integer {
     prompt "Ser1 DSR on PB bit (-1 = not used)" if [ETRAX_ARCH_V10 && ETRAX_SERIAL_PORT1 && (ETRAX_SER1_DTR_RI_DSR_CD_ON_PB || ETRAX_SER1_DTR_RI_DSR_CD_MIXED)]
     depends on [ETRAX_SERIAL_PORT1]
     default [-1] if [ETRAX_ARCH_V10 && ETRAX_SERIAL_PORT1 && !ETRAX_SER1_DTR_RI_DSR_CD_ON_PB && !ETRAX_SER1_DTR_RI_DSR_CD_MIXED]
     default [6] if [ETRAX_ARCH_V10 && ETRAX_SERIAL_PORT1 && (ETRAX_SER1_DTR_RI_DSR_CD_ON_PB || ETRAX_SER1_DTR_RI_DSR_CD_MIXED)]
     inherited [ETRAX_ARCH_V10 && ETRAX_SERIAL_PORT1]
    }
    config ETRAX_SER1_CD_ON_PB_BIT integer {
     prompt "Ser1 CD  on PB bit (-1 = not used)" if [ETRAX_ARCH_V10 && ETRAX_SERIAL_PORT1 && (ETRAX_SER1_DTR_RI_DSR_CD_ON_PB || ETRAX_SER1_DTR_RI_DSR_CD_MIXED)]
     depends on [ETRAX_SERIAL_PORT1]
     default [-1] if [ETRAX_ARCH_V10 && ETRAX_SERIAL_PORT1 && !ETRAX_SER1_DTR_RI_DSR_CD_ON_PB && !ETRAX_SER1_DTR_RI_DSR_CD_MIXED]
     default [7] if [ETRAX_ARCH_V10 && ETRAX_SERIAL_PORT1 && (ETRAX_SER1_DTR_RI_DSR_CD_ON_PB || ETRAX_SER1_DTR_RI_DSR_CD_MIXED)]
     inherited [ETRAX_ARCH_V10 && ETRAX_SERIAL_PORT1]
    }
   }
   config ETRAX_SERIAL_PORT2 boolean {
    prompt "Serial port 2 enabled" if [ETRAX_ARCH_V10 && ETRAX_SERIAL]
    depends on [ETRAX_SERIAL]
    prompt "Serial port 2 enabled" if [ETRAX_ARCH_V32 && ETRAXFS_SERIAL]
    depends on [ETRAXFS_SERIAL]
    inherited [ETRAX_ARCH_V10 && ETRAX_SERIAL]
    choice boolean {
     prompt "Ser2 DTR, RI, DSR and CD assignment" if [ETRAX_ARCH_V10 && ETRAX_SERIAL_PORT2]
     depends on [ETRAX_SERIAL_PORT2]
     default [ETRAX_SER2_DTR_RI_DSR_CD_ON_NONE] if [ETRAX_ARCH_V10 && ETRAX_SERIAL_PORT2]
     config ETRAX_SER2_DTR_RI_DSR_CD_ON_NONE boolean {
      prompt "No_DTR_RI_DSR_CD" if [<choice>]
      inherited [<choice>]
     }
     config ETRAX_SER2_DTR_RI_DSR_CD_ON_PA boolean {
      prompt "DTR_RI_DSR_CD_on_PA" if [<choice>]
      inherited [<choice>]
     }
     config ETRAX_SER2_DTR_RI_DSR_CD_ON_PB boolean {
      prompt "DTR_RI_DSR_CD_on_PB" if [<choice>]
      inherited [<choice>]
     }
     config ETRAX_SER2_DTR_RI_DSR_CD_MIXED boolean {
      prompt "DTR_RI_DSR_CD_mixed_on_PA_and_PB" if [<choice>]
      inherited [<choice>]
     }
    }
    config ETRAX_SER2_DTR_ON_PA_BIT integer {
     prompt "Ser2 DTR on PA bit (-1 = not used)" if [ETRAX_ARCH_V10 && ETRAX_SERIAL_PORT2 && (ETRAX_SER2_DTR_RI_DSR_CD_ON_PA || ETRAX_SER2_DTR_RI_DSR_CD_MIXED)]
     depends on [ETRAX_SERIAL_PORT2]
     default [-1] if [ETRAX_ARCH_V10 && ETRAX_SERIAL_PORT2 && !ETRAX_SER2_DTR_RI_DSR_CD_ON_PA && !ETRAX_SER2_DTR_RI_DSR_CD_MIXED]
     default [4] if [ETRAX_ARCH_V10 && ETRAX_SERIAL_PORT2 && (ETRAX_SER2_DTR_RI_DSR_CD_ON_PA || ETRAX_SER2_DTR_RI_DSR_CD_MIXED)]
     inherited [ETRAX_ARCH_V10 && ETRAX_SERIAL_PORT2]
    }
    config ETRAX_SER2_RI_ON_PA_BIT integer {
     prompt "Ser2 RI  on PA bit (-1 = not used)" if [ETRAX_ARCH_V10 && ETRAX_SERIAL_PORT2 && (ETRAX_SER2_DTR_RI_DSR_CD_ON_PA || ETRAX_SER2_DTR_RI_DSR_CD_MIXED)]
     depends on [ETRAX_SERIAL_PORT2]
     default [-1] if [ETRAX_ARCH_V10 && ETRAX_SERIAL_PORT2 && !ETRAX_SER2_DTR_RI_DSR_CD_ON_PA && !ETRAX_SER2_DTR_RI_DSR_CD_MIXED]
     default [5] if [ETRAX_ARCH_V10 && ETRAX_SERIAL_PORT2 && (ETRAX_SER2_DTR_RI_DSR_CD_ON_PA || ETRAX_SER2_DTR_RI_DSR_CD_MIXED)]
     inherited [ETRAX_ARCH_V10 && ETRAX_SERIAL_PORT2]
    }
    config ETRAX_SER2_DSR_ON_PA_BIT integer {
     prompt "Ser2 DSR on PA bit (-1 = not used)" if [ETRAX_ARCH_V10 && ETRAX_SERIAL_PORT2 && (ETRAX_SER2_DTR_RI_DSR_CD_ON_PA || ETRAX_SER2_DTR_RI_DSR_CD_MIXED)]
     depends on [ETRAX_SERIAL_PORT2]
     default [-1] if [ETRAX_ARCH_V10 && ETRAX_SERIAL_PORT2 && !ETRAX_SER2_DTR_RI_DSR_CD_ON_PA && !ETRAX_SER2_DTR_RI_DSR_CD_MIXED]
     default [6] if [ETRAX_ARCH_V10 && ETRAX_SERIAL_PORT2 && (ETRAX_SER2_DTR_RI_DSR_CD_ON_PA || ETRAX_SER2_DTR_RI_DSR_CD_MIXED)]
     inherited [ETRAX_ARCH_V10 && ETRAX_SERIAL_PORT2]
    }
    config ETRAX_SER2_CD_ON_PA_BIT integer {
     prompt "Ser2 CD  on PA bit (-1 = not used)" if [ETRAX_ARCH_V10 && ETRAX_SERIAL_PORT2 && (ETRAX_SER2_DTR_RI_DSR_CD_ON_PA || ETRAX_SER2_DTR_RI_DSR_CD_MIXED)]
     depends on [ETRAX_SERIAL_PORT2]
     default [-1] if [ETRAX_ARCH_V10 && ETRAX_SERIAL_PORT2 && !ETRAX_SER2_DTR_RI_DSR_CD_ON_PA && !ETRAX_SER2_DTR_RI_DSR_CD_MIXED]
     default [7] if [ETRAX_ARCH_V10 && ETRAX_SERIAL_PORT2 && (ETRAX_SER2_DTR_RI_DSR_CD_ON_PA || ETRAX_SER2_DTR_RI_DSR_CD_MIXED)]
     inherited [ETRAX_ARCH_V10 && ETRAX_SERIAL_PORT2]
    }
    config ETRAX_SER2_DTR_ON_PB_BIT integer {
     prompt "Ser2 DTR on PB bit (-1 = not used)" if [ETRAX_ARCH_V10 && ETRAX_SERIAL_PORT2 && (ETRAX_SER2_DTR_RI_DSR_CD_ON_PB || ETRAX_SER2_DTR_RI_DSR_CD_MIXED)]
     depends on [ETRAX_SERIAL_PORT2]
     default [-1] if [ETRAX_ARCH_V10 && ETRAX_SERIAL_PORT2 && !ETRAX_SER2_DTR_RI_DSR_CD_ON_PB && !ETRAX_SER2_DTR_RI_DSR_CD_MIXED]
     default [4] if [ETRAX_ARCH_V10 && ETRAX_SERIAL_PORT2 && (ETRAX_SER2_DTR_RI_DSR_CD_ON_PB || ETRAX_SER2_DTR_RI_DSR_CD_MIXED)]
     inherited [ETRAX_ARCH_V10 && ETRAX_SERIAL_PORT2]
    }
    config ETRAX_SER2_RI_ON_PB_BIT integer {
     prompt "Ser2 RI  on PB bit (-1 = not used)" if [ETRAX_ARCH_V10 && ETRAX_SERIAL_PORT2 && (ETRAX_SER2_DTR_RI_DSR_CD_ON_PB || ETRAX_SER2_DTR_RI_DSR_CD_MIXED)]
     depends on [ETRAX_SERIAL_PORT2]
     default [-1] if [ETRAX_ARCH_V10 && ETRAX_SERIAL_PORT2 && !ETRAX_SER2_DTR_RI_DSR_CD_ON_PB && !ETRAX_SER2_DTR_RI_DSR_CD_MIXED]
     default [5] if [ETRAX_ARCH_V10 && ETRAX_SERIAL_PORT2 && (ETRAX_SER2_DTR_RI_DSR_CD_ON_PB || ETRAX_SER2_DTR_RI_DSR_CD_MIXED)]
     inherited [ETRAX_ARCH_V10 && ETRAX_SERIAL_PORT2]
    }
    config ETRAX_SER2_DSR_ON_PB_BIT integer {
     prompt "Ser2 DSR on PB bit (-1 = not used)" if [ETRAX_ARCH_V10 && ETRAX_SERIAL_PORT2 && (ETRAX_SER2_DTR_RI_DSR_CD_ON_PB || ETRAX_SER2_DTR_RI_DSR_CD_MIXED)]
     depends on [ETRAX_SERIAL_PORT2]
     default [-1] if [ETRAX_ARCH_V10 && ETRAX_SERIAL_PORT2 && !ETRAX_SER2_DTR_RI_DSR_CD_ON_PB && !ETRAX_SER2_DTR_RI_DSR_CD_MIXED]
     default [6] if [ETRAX_ARCH_V10 && ETRAX_SERIAL_PORT2 && (ETRAX_SER2_DTR_RI_DSR_CD_ON_PB || ETRAX_SER2_DTR_RI_DSR_CD_MIXED)]
     inherited [ETRAX_ARCH_V10 && ETRAX_SERIAL_PORT2]
    }
    config ETRAX_SER2_CD_ON_PB_BIT integer {
     prompt "Ser2 CD  on PB bit (-1 = not used)" if [ETRAX_ARCH_V10 && ETRAX_SERIAL_PORT2 && (ETRAX_SER2_DTR_RI_DSR_CD_ON_PB || ETRAX_SER2_DTR_RI_DSR_CD_MIXED)]
     depends on [ETRAX_SERIAL_PORT2]
     default [-1] if [ETRAX_ARCH_V10 && ETRAX_SERIAL_PORT2 && !ETRAX_SER2_DTR_RI_DSR_CD_ON_PB && !ETRAX_SER2_DTR_RI_DSR_CD_MIXED]
     default [7] if [ETRAX_ARCH_V10 && ETRAX_SERIAL_PORT2 && (ETRAX_SER2_DTR_RI_DSR_CD_ON_PB || ETRAX_SER2_DTR_RI_DSR_CD_MIXED)]
     inherited [ETRAX_ARCH_V10 && ETRAX_SERIAL_PORT2]
    }
   }
   config ETRAX_SERIAL_PORT3 boolean {
    prompt "Serial port 3 enabled" if [ETRAX_ARCH_V10 && ETRAX_SERIAL]
    depends on [ETRAX_SERIAL]
    prompt "Serial port 3 enabled" if [ETRAX_ARCH_V32 && ETRAXFS_SERIAL]
    depends on [ETRAXFS_SERIAL]
    inherited [ETRAX_ARCH_V10 && ETRAX_SERIAL]
    choice boolean {
     prompt "Ser3 DTR, RI, DSR and CD assignment" if [ETRAX_ARCH_V10 && ETRAX_SERIAL_PORT3]
     depends on [ETRAX_SERIAL_PORT3]
     default [ETRAX_SER3_DTR_RI_DSR_CD_ON_NONE] if [ETRAX_ARCH_V10 && ETRAX_SERIAL_PORT3]
     config ETRAX_SER3_DTR_RI_DSR_CD_ON_NONE boolean {
      prompt "No_DTR_RI_DSR_CD" if [<choice>]
      inherited [<choice>]
     }
     config ETRAX_SER3_DTR_RI_DSR_CD_ON_PA boolean {
      prompt "DTR_RI_DSR_CD_on_PA" if [<choice>]
      inherited [<choice>]
     }
     config ETRAX_SER3_DTR_RI_DSR_CD_ON_PB boolean {
      prompt "DTR_RI_DSR_CD_on_PB" if [<choice>]
      inherited [<choice>]
     }
     config ETRAX_SER3_DTR_RI_DSR_CD_MIXED boolean {
      prompt "DTR_RI_DSR_CD_mixed_on_PA_and_PB" if [<choice>]
      inherited [<choice>]
     }
    }
    config ETRAX_SER3_DTR_ON_PA_BIT integer {
     prompt "Ser3 DTR on PA bit (-1 = not used)" if [ETRAX_ARCH_V10 && ETRAX_SERIAL_PORT3 && (ETRAX_SER3_DTR_RI_DSR_CD_ON_PA || ETRAX_SER3_DTR_RI_DSR_CD_MIXED)]
     depends on [ETRAX_SERIAL_PORT3]
     default [-1] if [ETRAX_ARCH_V10 && ETRAX_SERIAL_PORT3]
     inherited [ETRAX_ARCH_V10 && ETRAX_SERIAL_PORT3]
    }
    config ETRAX_SER3_RI_ON_PA_BIT integer {
     prompt "Ser3 RI  on PA bit (-1 = not used)" if [ETRAX_ARCH_V10 && ETRAX_SERIAL_PORT3 && (ETRAX_SER3_DTR_RI_DSR_CD_ON_PA || ETRAX_SER3_DTR_RI_DSR_CD_MIXED)]
     depends on [ETRAX_SERIAL_PORT3]
     default [-1] if [ETRAX_ARCH_V10 && ETRAX_SERIAL_PORT3]
     inherited [ETRAX_ARCH_V10 && ETRAX_SERIAL_PORT3]
    }
    config ETRAX_SER3_DSR_ON_PA_BIT integer {
     prompt "Ser3 DSR on PA bit (-1 = not used)" if [ETRAX_ARCH_V10 && ETRAX_SERIAL_PORT3 && (ETRAX_SER3_DTR_RI_DSR_CD_ON_PA || ETRAX_SER3_DTR_RI_DSR_CD_MIXED)]
     depends on [ETRAX_SERIAL_PORT3]
     default [-1] if [ETRAX_ARCH_V10 && ETRAX_SERIAL_PORT3]
     inherited [ETRAX_ARCH_V10 && ETRAX_SERIAL_PORT3]
    }
    config ETRAX_SER3_CD_ON_PA_BIT integer {
     prompt "Ser3 CD  on PA bit (-1 = not used)" if [ETRAX_ARCH_V10 && ETRAX_SERIAL_PORT3 && (ETRAX_SER3_DTR_RI_DSR_CD_ON_PA || ETRAX_SER3_DTR_RI_DSR_CD_MIXED)]
     depends on [ETRAX_SERIAL_PORT3]
     default [-1] if [ETRAX_ARCH_V10 && ETRAX_SERIAL_PORT3]
     inherited [ETRAX_ARCH_V10 && ETRAX_SERIAL_PORT3]
    }
    config ETRAX_SER3_DTR_ON_PB_BIT integer {
     prompt "Ser3 DTR on PB bit (-1 = not used)" if [ETRAX_ARCH_V10 && ETRAX_SERIAL_PORT3 && (ETRAX_SER3_DTR_RI_DSR_CD_ON_PB || ETRAX_SER3_DTR_RI_DSR_CD_MIXED)]
     depends on [ETRAX_SERIAL_PORT3]
     default [-1] if [ETRAX_ARCH_V10 && ETRAX_SERIAL_PORT3]
     inherited [ETRAX_ARCH_V10 && ETRAX_SERIAL_PORT3]
    }
    config ETRAX_SER3_RI_ON_PB_BIT integer {
     prompt "Ser3 RI  on PB bit (-1 = not used)" if [ETRAX_ARCH_V10 && ETRAX_SERIAL_PORT3 && (ETRAX_SER3_DTR_RI_DSR_CD_ON_PB || ETRAX_SER3_DTR_RI_DSR_CD_MIXED)]
     depends on [ETRAX_SERIAL_PORT3]
     default [-1] if [ETRAX_ARCH_V10 && ETRAX_SERIAL_PORT3]
     inherited [ETRAX_ARCH_V10 && ETRAX_SERIAL_PORT3]
    }
    config ETRAX_SER3_DSR_ON_PB_BIT integer {
     prompt "Ser3 DSR on PB bit (-1 = not used)" if [ETRAX_ARCH_V10 && ETRAX_SERIAL_PORT3 && (ETRAX_SER3_DTR_RI_DSR_CD_ON_PB || ETRAX_SER3_DTR_RI_DSR_CD_MIXED)]
     depends on [ETRAX_SERIAL_PORT3]
     default [-1] if [ETRAX_ARCH_V10 && ETRAX_SERIAL_PORT3]
     inherited [ETRAX_ARCH_V10 && ETRAX_SERIAL_PORT3]
    }
    config ETRAX_SER3_CD_ON_PB_BIT integer {
     prompt "Ser3 CD  on PB bit (-1 = not used)" if [ETRAX_ARCH_V10 && ETRAX_SERIAL_PORT3 && (ETRAX_SER3_DTR_RI_DSR_CD_ON_PB || ETRAX_SER3_DTR_RI_DSR_CD_MIXED)]
     depends on [ETRAX_SERIAL_PORT3]
     default [-1] if [ETRAX_ARCH_V10 && ETRAX_SERIAL_PORT3]
     inherited [ETRAX_ARCH_V10 && ETRAX_SERIAL_PORT3]
    }
   }
   config ETRAX_RS485 boolean {
    prompt "RS-485 support" if [ETRAX_ARCH_V10 && ETRAX_SERIAL]
    depends on [ETRAX_SERIAL]
    prompt "RS-485 support" if [ETRAX_ARCH_V32 && ETRAXFS_SERIAL]
    depends on [ETRAXFS_SERIAL]
    prompt "RS-485 support" if [ETRAX_ARCH_V32 && ETRAXFS_SERIAL]
    depends on [ETRAXFS_SERIAL]
    inherited [ETRAX_ARCH_V10 && ETRAX_SERIAL]
    config ETRAX_RS485_ON_PA boolean {
     prompt "RS-485 mode on PA" if [ETRAX_ARCH_V10 && ETRAX_RS485]
     depends on [ETRAX_RS485]
     inherited [ETRAX_ARCH_V10 && ETRAX_RS485]
     config ETRAX_RS485_ON_PA_BIT integer {
      prompt "RS-485 mode on PA bit" if [ETRAX_ARCH_V10 && ETRAX_RS485_ON_PA]
      depends on [ETRAX_RS485_ON_PA]
      default [3] if [ETRAX_ARCH_V10 && ETRAX_RS485_ON_PA]
      inherited [ETRAX_ARCH_V10 && ETRAX_RS485_ON_PA]
     }
    }
    config ETRAX_RS485_DISABLE_RECEIVER boolean {
     prompt "Disable serial receiver" if [ETRAX_ARCH_V10 && ETRAX_RS485]
     depends on [ETRAX_RS485]
     prompt "Disable serial receiver" if [ETRAX_ARCH_V32 && ETRAX_RS485]
     depends on [ETRAX_RS485]
     prompt "Disable serial receiver" if [ETRAX_ARCH_V32 && ETRAX_RS485]
     depends on [ETRAX_RS485]
     inherited [ETRAX_ARCH_V10 && ETRAX_RS485]
    }
   }
  }
  config ETRAX_USB_HOST boolean {
   prompt "USB host" if [ETRAX_ARCH_V10]
   select USB if [ETRAX_ARCH_V10]
   inherited [ETRAX_ARCH_V10]
   config ETRAX_USB_HOST_PORT1 boolean {
    prompt "USB port 1 enabled" if [ETRAX_ARCH_V10 && ETRAX_USB_HOST]
    depends on [ETRAX_USB_HOST]
    default [n] if [ETRAX_ARCH_V10 && ETRAX_USB_HOST]
    inherited [ETRAX_ARCH_V10 && ETRAX_USB_HOST]
   }
   config ETRAX_USB_HOST_PORT2 boolean {
    prompt "USB port 2 enabled" if [ETRAX_ARCH_V10 && ETRAX_USB_HOST]
    depends on [ETRAX_USB_HOST]
    default [n] if [ETRAX_ARCH_V10 && ETRAX_USB_HOST]
    inherited [ETRAX_ARCH_V10 && ETRAX_USB_HOST]
   }
  }
  config ETRAX_PTABLE_SECTOR integer {
   prompt "Byte-offset of partition table sector" if [ETRAX_ARCH_V10 && ETRAX_AXISFLASHMAP]
   depends on [ETRAX_AXISFLASHMAP]
   default [65536] if [ETRAX_ARCH_V10 && ETRAX_AXISFLASHMAP]
   prompt "Byte-offset of partition table sector" if [ETRAX_ARCH_V32 && ETRAX_AXISFLASHMAP]
   depends on [ETRAX_AXISFLASHMAP]
   default [65536] if [ETRAX_ARCH_V32 && ETRAX_AXISFLASHMAP]
   inherited [ETRAX_ARCH_V10 && ETRAX_AXISFLASHMAP]
  }
  config ETRAX_I2C boolean {
   prompt "I2C support" if [ETRAX_ARCH_V10]
   depends on [ETRAX_ARCH_V10]
   prompt "I2C driver" if [ETRAX_ARCH_V32]
   depends on [ETRAX_ARCH_V32]
   inherited [ETRAX_ARCH_V10]
   config ETRAX_I2C_USES_PB_NOT_PB_I2C boolean {
    prompt "I2C uses PB not PB-I2C" if [ETRAX_ARCH_V10 && ETRAX_I2C]
    depends on [ETRAX_I2C]
    inherited [ETRAX_ARCH_V10 && ETRAX_I2C]
    config ETRAX_I2C_DATA_PORT integer {
     prompt "I2C SDA bit number" if [ETRAX_ARCH_V10 && ETRAX_I2C_USES_PB_NOT_PB_I2C]
     depends on [ETRAX_I2C_USES_PB_NOT_PB_I2C]
     default [0] if [ETRAX_ARCH_V10 && ETRAX_I2C_USES_PB_NOT_PB_I2C]
     inherited [ETRAX_ARCH_V10 && ETRAX_I2C_USES_PB_NOT_PB_I2C]
    }
    config ETRAX_I2C_CLK_PORT integer {
     prompt "I2C SCL bit number" if [ETRAX_ARCH_V10 && ETRAX_I2C_USES_PB_NOT_PB_I2C]
     depends on [ETRAX_I2C_USES_PB_NOT_PB_I2C]
     default [1] if [ETRAX_ARCH_V10 && ETRAX_I2C_USES_PB_NOT_PB_I2C]
     inherited [ETRAX_ARCH_V10 && ETRAX_I2C_USES_PB_NOT_PB_I2C]
    }
   }
   config ETRAX_I2C_EEPROM boolean {
    prompt "I2C EEPROM (non-volatile RAM) support" if [ETRAX_ARCH_V10 && ETRAX_I2C]
    depends on [ETRAX_I2C]
    inherited [ETRAX_ARCH_V10 && ETRAX_I2C]
    choice boolean {
     prompt "EEPROM size" if [ETRAX_ARCH_V10 && ETRAX_I2C_EEPROM]
     depends on [ETRAX_I2C_EEPROM]
     default [ETRAX_I2C_EEPROM_PROBE] if [ETRAX_ARCH_V10 && ETRAX_I2C_EEPROM]
     config ETRAX_I2C_EEPROM_PROBE boolean {
      prompt "Probed" if [<choice>]
      inherited [<choice>]
     }
     config ETRAX_I2C_EEPROM_2KB boolean {
      prompt "2kB" if [<choice>]
      inherited [<choice>]
     }
     config ETRAX_I2C_EEPROM_8KB boolean {
      prompt "8kB" if [<choice>]
      inherited [<choice>]
     }
     config ETRAX_I2C_EEPROM_16KB boolean {
      prompt "16kB" if [<choice>]
      inherited [<choice>]
     }
    }
   }
  }
  config ETRAX_GPIO boolean {
   prompt "GPIO support" if [ETRAX_ARCH_V10]
   depends on [ETRAX_ARCH_V10]
   prompt "GPIO support" if [ETRAX_ARCH_V32]
   depends on [ETRAX_ARCH_V32]
   inherited [ETRAX_ARCH_V10]
   config ETRAX_PA_BUTTON_BITMASK hex {
    prompt "PA-buttons bitmask" if [ETRAX_ARCH_V10 && ETRAX_GPIO]
    depends on [ETRAX_GPIO]
    default [02] if [ETRAX_ARCH_V10 && ETRAX_GPIO]
    inherited [ETRAX_ARCH_V10 && ETRAX_GPIO]
   }
   config ETRAX_PA_CHANGEABLE_DIR hex {
    prompt "PA user changeable dir mask" if [ETRAX_ARCH_V10 && ETRAX_GPIO]
    depends on [ETRAX_GPIO]
    default [00] if [ETRAX_ARCH_V10 && ETRAX_GPIO]
    prompt "PA user changeable dir mask" if [ETRAX_ARCH_V32 && ETRAX_GPIO]
    depends on [ETRAX_GPIO]
    default [0x00] if [ETRAX_ARCH_V32 && ETRAX_GPIO && ETRAXFS]
    default [0x00000000] if [ETRAX_ARCH_V32 && ETRAX_GPIO && !ETRAXFS]
    inherited [ETRAX_ARCH_V10 && ETRAX_GPIO]
   }
   config ETRAX_PA_CHANGEABLE_BITS hex {
    prompt "PA user changeable bits mask" if [ETRAX_ARCH_V10 && ETRAX_GPIO]
    depends on [ETRAX_GPIO]
    default [FF] if [ETRAX_ARCH_V10 && ETRAX_GPIO]
    prompt "PA user changeable bits mask" if [ETRAX_ARCH_V32 && ETRAX_GPIO]
    depends on [ETRAX_GPIO]
    default [0x00] if [ETRAX_ARCH_V32 && ETRAX_GPIO && ETRAXFS]
    default [0x00000000] if [ETRAX_ARCH_V32 && ETRAX_GPIO && !ETRAXFS]
    inherited [ETRAX_ARCH_V10 && ETRAX_GPIO]
   }
   config ETRAX_PB_CHANGEABLE_DIR hex {
    prompt "PB user changeable dir mask" if [ETRAX_ARCH_V10 && ETRAX_GPIO]
    depends on [ETRAX_GPIO]
    default [00] if [ETRAX_ARCH_V10 && ETRAX_GPIO]
    prompt "PB user changeable dir mask" if [ETRAX_ARCH_V32 && ETRAX_GPIO]
    depends on [ETRAX_GPIO]
    default [0x00000] if [ETRAX_ARCH_V32 && ETRAX_GPIO && ETRAXFS]
    default [0x00000000] if [ETRAX_ARCH_V32 && ETRAX_GPIO && !ETRAXFS]
    inherited [ETRAX_ARCH_V10 && ETRAX_GPIO]
   }
   config ETRAX_PB_CHANGEABLE_BITS hex {
    prompt "PB user changeable bits mask" if [ETRAX_ARCH_V10 && ETRAX_GPIO]
    depends on [ETRAX_GPIO]
    default [FF] if [ETRAX_ARCH_V10 && ETRAX_GPIO]
    prompt "PB user changeable bits mask" if [ETRAX_ARCH_V32 && ETRAX_GPIO]
    depends on [ETRAX_GPIO]
    default [0x00000] if [ETRAX_ARCH_V32 && ETRAX_GPIO && ETRAXFS]
    default [0x00000000] if [ETRAX_ARCH_V32 && ETRAX_GPIO && !ETRAXFS]
    inherited [ETRAX_ARCH_V10 && ETRAX_GPIO]
   }
  }
  config ETRAX_DS1302_RST_ON_GENERIC_PORT boolean {
   prompt "DS1302 RST on Generic Port" if [ETRAX_ARCH_V10 && ETRAX_DS1302]
   depends on [ETRAX_DS1302]
   inherited [ETRAX_ARCH_V10 && ETRAX_DS1302]
  }
  config ETRAX_DS1302_RSTBIT integer {
   prompt "DS1302 RST bit number" if [ETRAX_ARCH_V10 && ETRAX_DS1302]
   depends on [ETRAX_DS1302]
   default [2] if [ETRAX_ARCH_V10 && ETRAX_DS1302]
   inherited [ETRAX_ARCH_V10 && ETRAX_DS1302]
  }
  config ETRAX_DS1302_SCLBIT integer {
   prompt "DS1302 SCL bit number" if [ETRAX_ARCH_V10 && ETRAX_DS1302]
   depends on [ETRAX_DS1302]
   default [1] if [ETRAX_ARCH_V10 && ETRAX_DS1302]
   inherited [ETRAX_ARCH_V10 && ETRAX_DS1302]
  }
  config ETRAX_DS1302_SDABIT integer {
   prompt "DS1302 SDA bit number" if [ETRAX_ARCH_V10 && ETRAX_DS1302]
   depends on [ETRAX_DS1302]
   default [0] if [ETRAX_ARCH_V10 && ETRAX_DS1302]
   inherited [ETRAX_ARCH_V10 && ETRAX_DS1302]
  }
  config ETRAX_DS1302_TRICKLE_CHARGE integer {
   prompt "DS1302 Trickle charger value" if [ETRAX_ARCH_V10 && ETRAX_DS1302]
   depends on [ETRAX_DS1302]
   default [0] if [ETRAX_ARCH_V10 && ETRAX_DS1302]
   inherited [ETRAX_ARCH_V10 && ETRAX_DS1302]
  }
 }
 if [ETRAX_ARCH_V32] {
  config ETRAX_ETHERNET boolean {
   prompt "Ethernet support" if [ETRAX_ARCH_V10]
   depends on [ETRAX_ARCH_V10]
   select NET_ETHERNET if [ETRAX_ARCH_V10]
   select MII if [ETRAX_ARCH_V10]
   prompt "Ethernet support" if [ETRAX_ARCH_V32]
   depends on [ETRAX_ARCH_V32]
   select NET_ETHERNET if [ETRAX_ARCH_V32]
   select MII if [ETRAX_ARCH_V32]
   inherited [ETRAX_ARCH_V32]
   config ETRAX_NO_PHY boolean {
    prompt "PHY not present" if [ETRAX_ARCH_V32 && ETRAX_ETHERNET]
    depends on [ETRAX_ETHERNET]
    default [N] if [ETRAX_ARCH_V32 && ETRAX_ETHERNET]
    inherited [ETRAX_ARCH_V32 && ETRAX_ETHERNET]
   }
   config ETRAX_ETHERNET_IFACE0 boolean {
    depends on [ETRAX_ETHERNET]
    prompt "Enable network interface 0" if [ETRAX_ARCH_V32 && ETRAX_ETHERNET]
    inherited [ETRAX_ARCH_V32 && ETRAX_ETHERNET]
   }
   config ETRAX_ETHERNET_IFACE1 boolean {
    depends on [ETRAX_ETHERNET && ETRAXFS]
    prompt "Enable network interface 1 (uses DMA6 and DMA7)" if [ETRAX_ARCH_V32 && ETRAX_ETHERNET && ETRAXFS]
    inherited [ETRAX_ARCH_V32 && ETRAX_ETHERNET && ETRAXFS]
   }
   config ETRAX_ETHERNET_GBIT boolean {
    depends on [ETRAX_ETHERNET && CRIS_MACH_ARTPEC3]
    prompt "Enable gigabit Ethernet support" if [ETRAX_ARCH_V32 && ETRAX_ETHERNET && CRIS_MACH_ARTPEC3]
    inherited [ETRAX_ARCH_V32 && ETRAX_ETHERNET && CRIS_MACH_ARTPEC3]
   }
  }
  choice boolean {
   prompt "Eth0 led group" if [ETRAX_ARCH_V32 && ETRAX_ETHERNET_IFACE0]
   depends on [ETRAX_ETHERNET_IFACE0]
   default [ETRAX_ETH0_USE_LEDGRP0] if [ETRAX_ARCH_V32 && ETRAX_ETHERNET_IFACE0]
   config ETRAX_ETH0_USE_LEDGRP0 boolean {
    prompt "Use LED grp 0" if [<choice> && (ETRAX_NBR_LED_GRP_ONE || ETRAX_NBR_LED_GRP_TWO)]
    depends on [ETRAX_NBR_LED_GRP_ONE || ETRAX_NBR_LED_GRP_TWO]
    inherited [<choice> && (ETRAX_NBR_LED_GRP_ONE || ETRAX_NBR_LED_GRP_TWO)]
   }
   config ETRAX_ETH0_USE_LEDGRP1 boolean {
    prompt "Use LED grp 1" if [<choice> && ETRAX_NBR_LED_GRP_TWO]
    depends on [ETRAX_NBR_LED_GRP_TWO]
    inherited [<choice> && ETRAX_NBR_LED_GRP_TWO]
   }
   config ETRAX_ETH0_USE_LEDGRPNULL boolean {
    prompt "Use no LEDs for eth0" if [<choice>]
    inherited [<choice>]
   }
  }
  choice boolean {
   prompt "Eth1 led group" if [ETRAX_ARCH_V32 && ETRAX_ETHERNET_IFACE1]
   depends on [ETRAX_ETHERNET_IFACE1]
   default [ETRAX_ETH1_USE_LEDGRP1] if [ETRAX_ARCH_V32 && ETRAX_ETHERNET_IFACE1]
   config ETRAX_ETH1_USE_LEDGRP0 boolean {
    prompt "Use LED grp 0" if [<choice> && (ETRAX_NBR_LED_GRP_ONE || ETRAX_NBR_LED_GRP_TWO)]
    depends on [ETRAX_NBR_LED_GRP_ONE || ETRAX_NBR_LED_GRP_TWO]
    inherited [<choice> && (ETRAX_NBR_LED_GRP_ONE || ETRAX_NBR_LED_GRP_TWO)]
   }
   config ETRAX_ETH1_USE_LEDGRP1 boolean {
    prompt "Use LED grp 1" if [<choice> && ETRAX_NBR_LED_GRP_TWO]
    depends on [ETRAX_NBR_LED_GRP_TWO]
    inherited [<choice> && ETRAX_NBR_LED_GRP_TWO]
   }
   config ETRAX_ETH1_USE_LEDGRPNULL boolean {
    prompt "Use no LEDs for eth1" if [<choice>]
    inherited [<choice>]
   }
  }
  config ETRAXFS_SERIAL boolean {
   prompt "Serial-port support" if [ETRAX_ARCH_V32]
   depends on [ETRAX_ARCH_V32]
   select SERIAL_CORE if [ETRAX_ARCH_V32]
   select SERIAL_CORE_CONSOLE if [ETRAX_ARCH_V32]
   inherited [ETRAX_ARCH_V32]
   config ETRAX_RS485 boolean {
    prompt "RS-485 support" if [ETRAX_ARCH_V10 && ETRAX_SERIAL]
    depends on [ETRAX_SERIAL]
    prompt "RS-485 support" if [ETRAX_ARCH_V32 && ETRAXFS_SERIAL]
    depends on [ETRAXFS_SERIAL]
    prompt "RS-485 support" if [ETRAX_ARCH_V32 && ETRAXFS_SERIAL]
    depends on [ETRAXFS_SERIAL]
    inherited [ETRAX_ARCH_V32 && ETRAXFS_SERIAL]
    config ETRAX_RS485_DISABLE_RECEIVER boolean {
     prompt "Disable serial receiver" if [ETRAX_ARCH_V10 && ETRAX_RS485]
     depends on [ETRAX_RS485]
     prompt "Disable serial receiver" if [ETRAX_ARCH_V32 && ETRAX_RS485]
     depends on [ETRAX_RS485]
     prompt "Disable serial receiver" if [ETRAX_ARCH_V32 && ETRAX_RS485]
     depends on [ETRAX_RS485]
     inherited [ETRAX_ARCH_V32 && ETRAX_RS485]
    }
   }
   config ETRAX_SERIAL_PORT0 boolean {
    prompt "Serial port 0 enabled" if [ETRAX_ARCH_V10 && ETRAX_SERIAL]
    depends on [ETRAX_SERIAL]
    prompt "Serial port 0 enabled" if [ETRAX_ARCH_V32 && ETRAXFS_SERIAL]
    depends on [ETRAXFS_SERIAL]
    inherited [ETRAX_ARCH_V32 && ETRAXFS_SERIAL]
    choice boolean {
     prompt "Ser0 default port type " if [ETRAX_ARCH_V32 && ETRAX_SERIAL_PORT0]
     depends on [ETRAX_SERIAL_PORT0]
     default [ETRAX_SERIAL_PORT0_TYPE_232] if [ETRAX_ARCH_V32 && ETRAX_SERIAL_PORT0]
     config ETRAX_SERIAL_PORT0_TYPE_232 boolean {
      prompt "Ser0 is a RS-232 port" if [<choice>]
      inherited [<choice>]
     }
     config ETRAX_SERIAL_PORT0_TYPE_485HD boolean {
      prompt "Ser0 is a half duplex RS-485 port" if [<choice> && ETRAX_RS485]
      depends on [ETRAX_RS485]
      inherited [<choice> && ETRAX_RS485]
     }
     config ETRAX_SERIAL_PORT0_TYPE_485FD boolean {
      prompt "Ser0 is a full duplex RS-485 port" if [<choice> && ETRAX_RS485]
      depends on [ETRAX_RS485]
      inherited [<choice> && ETRAX_RS485]
     }
    }
    config ETRAX_SER0_DTR_BIT string {
     prompt "Ser 0 DTR bit (empty = not used)" if [ETRAX_ARCH_V32 && ETRAX_SERIAL_PORT0]
     depends on [ETRAX_SERIAL_PORT0]
     inherited [ETRAX_ARCH_V32 && ETRAX_SERIAL_PORT0]
    }
    config ETRAX_SER0_RI_BIT string {
     prompt "Ser 0 RI bit (empty = not used)" if [ETRAX_ARCH_V32 && ETRAX_SERIAL_PORT0]
     depends on [ETRAX_SERIAL_PORT0]
     inherited [ETRAX_ARCH_V32 && ETRAX_SERIAL_PORT0]
    }
    config ETRAX_SER0_DSR_BIT string {
     prompt "Ser 0 DSR bit (empty = not used)" if [ETRAX_ARCH_V32 && ETRAX_SERIAL_PORT0]
     depends on [ETRAX_SERIAL_PORT0]
     inherited [ETRAX_ARCH_V32 && ETRAX_SERIAL_PORT0]
    }
    config ETRAX_SER0_CD_BIT string {
     prompt "Ser 0 CD bit (empty = not used)" if [ETRAX_ARCH_V32 && ETRAX_SERIAL_PORT0]
     depends on [ETRAX_SERIAL_PORT0]
     inherited [ETRAX_ARCH_V32 && ETRAX_SERIAL_PORT0]
    }
   }
   config ETRAX_SERIAL_PORT1 boolean {
    prompt "Serial port 1 enabled" if [ETRAX_ARCH_V10 && ETRAX_SERIAL]
    depends on [ETRAX_SERIAL]
    prompt "Serial port 1 enabled" if [ETRAX_ARCH_V32 && ETRAXFS_SERIAL]
    depends on [ETRAXFS_SERIAL]
    inherited [ETRAX_ARCH_V32 && ETRAXFS_SERIAL]
    choice boolean {
     prompt "Ser1 default port type" if [ETRAX_ARCH_V32 && ETRAX_SERIAL_PORT1]
     depends on [ETRAX_SERIAL_PORT1]
     default [ETRAX_SERIAL_PORT1_TYPE_232] if [ETRAX_ARCH_V32 && ETRAX_SERIAL_PORT1]
     config ETRAX_SERIAL_PORT1_TYPE_232 boolean {
      prompt "Ser1 is a RS-232 port" if [<choice>]
      inherited [<choice>]
     }
     config ETRAX_SERIAL_PORT1_TYPE_485HD boolean {
      prompt "Ser1 is a half duplex RS-485 port" if [<choice> && ETRAX_RS485]
      depends on [ETRAX_RS485]
      inherited [<choice> && ETRAX_RS485]
     }
     config ETRAX_SERIAL_PORT1_TYPE_485FD boolean {
      prompt "Ser1 is a full duplex RS-485 port" if [<choice> && ETRAX_RS485]
      depends on [ETRAX_RS485]
      inherited [<choice> && ETRAX_RS485]
     }
    }
    config ETRAX_SER1_DTR_BIT string {
     prompt "Ser 1 DTR bit (empty = not used)" if [ETRAX_ARCH_V32 && ETRAX_SERIAL_PORT1]
     depends on [ETRAX_SERIAL_PORT1]
     inherited [ETRAX_ARCH_V32 && ETRAX_SERIAL_PORT1]
    }
    config ETRAX_SER1_RI_BIT string {
     prompt "Ser 1 RI bit (empty = not used)" if [ETRAX_ARCH_V32 && ETRAX_SERIAL_PORT1]
     depends on [ETRAX_SERIAL_PORT1]
     inherited [ETRAX_ARCH_V32 && ETRAX_SERIAL_PORT1]
    }
    config ETRAX_SER1_DSR_BIT string {
     prompt "Ser 1 DSR bit (empty = not used)" if [ETRAX_ARCH_V32 && ETRAX_SERIAL_PORT1]
     depends on [ETRAX_SERIAL_PORT1]
     inherited [ETRAX_ARCH_V32 && ETRAX_SERIAL_PORT1]
    }
    config ETRAX_SER1_CD_BIT string {
     prompt "Ser 1 CD bit (empty = not used)" if [ETRAX_ARCH_V32 && ETRAX_SERIAL_PORT1]
     depends on [ETRAX_SERIAL_PORT1]
     inherited [ETRAX_ARCH_V32 && ETRAX_SERIAL_PORT1]
    }
   }
   config ETRAX_SERIAL_PORT2 boolean {
    prompt "Serial port 2 enabled" if [ETRAX_ARCH_V10 && ETRAX_SERIAL]
    depends on [ETRAX_SERIAL]
    prompt "Serial port 2 enabled" if [ETRAX_ARCH_V32 && ETRAXFS_SERIAL]
    depends on [ETRAXFS_SERIAL]
    inherited [ETRAX_ARCH_V32 && ETRAXFS_SERIAL]
    choice boolean {
     prompt "Ser2 default port type" if [ETRAX_ARCH_V32 && ETRAX_SERIAL_PORT2]
     depends on [ETRAX_SERIAL_PORT2]
     default [ETRAX_SERIAL_PORT2_TYPE_232] if [ETRAX_ARCH_V32 && ETRAX_SERIAL_PORT2]
     config ETRAX_SERIAL_PORT2_TYPE_232 boolean {
      prompt "Ser2 is a RS-232 port" if [<choice>]
      inherited [<choice>]
     }
     config ETRAX_SERIAL_PORT2_TYPE_485HD boolean {
      prompt "Ser2 is a half duplex RS-485 port" if [<choice> && ETRAX_RS485]
      depends on [ETRAX_RS485]
      inherited [<choice> && ETRAX_RS485]
     }
     config ETRAX_SERIAL_PORT2_TYPE_485FD boolean {
      prompt "Ser2 is a full duplex RS-485 port" if [<choice> && ETRAX_RS485]
      depends on [ETRAX_RS485]
      inherited [<choice> && ETRAX_RS485]
     }
    }
    config ETRAX_SER2_DTR_BIT string {
     prompt "Ser 2 DTR bit (empty = not used)" if [ETRAX_ARCH_V32 && ETRAX_SERIAL_PORT2]
     depends on [ETRAX_SERIAL_PORT2]
     inherited [ETRAX_ARCH_V32 && ETRAX_SERIAL_PORT2]
    }
    config ETRAX_SER2_RI_BIT string {
     prompt "Ser 2 RI bit (empty = not used)" if [ETRAX_ARCH_V32 && ETRAX_SERIAL_PORT2]
     depends on [ETRAX_SERIAL_PORT2]
     inherited [ETRAX_ARCH_V32 && ETRAX_SERIAL_PORT2]
    }
    config ETRAX_SER2_DSR_BIT string {
     prompt "Ser 2 DSR bit (empty = not used)" if [ETRAX_ARCH_V32 && ETRAX_SERIAL_PORT2]
     depends on [ETRAX_SERIAL_PORT2]
     inherited [ETRAX_ARCH_V32 && ETRAX_SERIAL_PORT2]
    }
    config ETRAX_SER2_CD_BIT string {
     prompt "Ser 2 CD bit (empty = not used)" if [ETRAX_ARCH_V32 && ETRAX_SERIAL_PORT2]
     depends on [ETRAX_SERIAL_PORT2]
     inherited [ETRAX_ARCH_V32 && ETRAX_SERIAL_PORT2]
    }
   }
   config ETRAX_SERIAL_PORT3 boolean {
    prompt "Serial port 3 enabled" if [ETRAX_ARCH_V10 && ETRAX_SERIAL]
    depends on [ETRAX_SERIAL]
    prompt "Serial port 3 enabled" if [ETRAX_ARCH_V32 && ETRAXFS_SERIAL]
    depends on [ETRAXFS_SERIAL]
    inherited [ETRAX_ARCH_V32 && ETRAXFS_SERIAL]
    choice boolean {
     prompt "Ser3 default port type" if [ETRAX_ARCH_V32 && ETRAX_SERIAL_PORT3]
     depends on [ETRAX_SERIAL_PORT3]
     default [ETRAX_SERIAL_PORT3_TYPE_232] if [ETRAX_ARCH_V32 && ETRAX_SERIAL_PORT3]
     config ETRAX_SERIAL_PORT3_TYPE_232 boolean {
      prompt "Ser3 is a RS-232 port" if [<choice>]
      inherited [<choice>]
     }
     config ETRAX_SERIAL_PORT3_TYPE_485HD boolean {
      prompt "Ser3 is a half duplex RS-485 port" if [<choice> && ETRAX_RS485]
      depends on [ETRAX_RS485]
      inherited [<choice> && ETRAX_RS485]
     }
     config ETRAX_SERIAL_PORT3_TYPE_485FD boolean {
      prompt "Ser3 is a full duplex RS-485 port" if [<choice> && ETRAX_RS485]
      depends on [ETRAX_RS485]
      inherited [<choice> && ETRAX_RS485]
     }
    }
    config ETRAX_SER3_DTR_BIT string {
     prompt "Ser 3 DTR bit (empty = not used)" if [ETRAX_ARCH_V32 && ETRAX_SERIAL_PORT3]
     depends on [ETRAX_SERIAL_PORT3]
     inherited [ETRAX_ARCH_V32 && ETRAX_SERIAL_PORT3]
    }
    config ETRAX_SER3_RI_BIT string {
     prompt "Ser 3 RI bit (empty = not used)" if [ETRAX_ARCH_V32 && ETRAX_SERIAL_PORT3]
     depends on [ETRAX_SERIAL_PORT3]
     inherited [ETRAX_ARCH_V32 && ETRAX_SERIAL_PORT3]
    }
    config ETRAX_SER3_DSR_BIT string {
     prompt "Ser 3 DSR bit (empty = not used)" if [ETRAX_ARCH_V32 && ETRAX_SERIAL_PORT3]
     depends on [ETRAX_SERIAL_PORT3]
     inherited [ETRAX_ARCH_V32 && ETRAX_SERIAL_PORT3]
    }
    config ETRAX_SER3_CD_BIT string {
     prompt "Ser 3 CD bit (empty = not used)" if [ETRAX_ARCH_V32 && ETRAX_SERIAL_PORT3]
     depends on [ETRAX_SERIAL_PORT3]
     prompt "Ser 4 CD bit (empty = not used)" if [ETRAX_ARCH_V32 && ETRAX_SERIAL_PORT4]
     depends on [ETRAX_SERIAL_PORT4]
     inherited [ETRAX_ARCH_V32 && ETRAX_SERIAL_PORT3]
    }
   }
   config ETRAX_SERIAL_PORT4 boolean {
    prompt "Serial port 4 enabled" if [ETRAX_ARCH_V32 && ETRAXFS_SERIAL && CRIS_MACH_ARTPEC3]
    depends on [ETRAXFS_SERIAL && CRIS_MACH_ARTPEC3]
    inherited [ETRAX_ARCH_V32 && ETRAXFS_SERIAL && CRIS_MACH_ARTPEC3]
    choice boolean {
     prompt "Ser4 default port type" if [ETRAX_ARCH_V32 && ETRAX_SERIAL_PORT4]
     depends on [ETRAX_SERIAL_PORT4]
     default [ETRAX_SERIAL_PORT4_TYPE_232] if [ETRAX_ARCH_V32 && ETRAX_SERIAL_PORT4]
     config ETRAX_SERIAL_PORT4_TYPE_232 boolean {
      prompt "Ser4 is a RS-232 port" if [<choice>]
      inherited [<choice>]
     }
     config ETRAX_SERIAL_PORT4_TYPE_485HD boolean {
      prompt "Ser4 is a half duplex RS-485 port" if [<choice> && ETRAX_RS485]
      depends on [ETRAX_RS485]
      inherited [<choice> && ETRAX_RS485]
     }
     config ETRAX_SERIAL_PORT4_TYPE_485FD boolean {
      prompt "Ser4 is a full duplex RS-485 port" if [<choice> && ETRAX_RS485]
      depends on [ETRAX_RS485]
      inherited [<choice> && ETRAX_RS485]
     }
    }
    choice boolean {
     prompt "Ser4 DMA in channel " if [ETRAX_ARCH_V32 && ETRAX_SERIAL_PORT4]
     depends on [ETRAX_SERIAL_PORT4]
     default [ETRAX_SERIAL_PORT4_NO_DMA_IN] if [ETRAX_ARCH_V32 && ETRAX_SERIAL_PORT4]
     config ETRAX_SERIAL_PORT4_NO_DMA_IN boolean {
      prompt "Ser4 uses no DMA for input" if [<choice>]
      inherited [<choice>]
     }
     config ETRAX_SERIAL_PORT4_DMA9_IN boolean {
      prompt "Ser4 uses DMA9 for input" if [<choice> && ETRAX_SERIAL_PORT4]
      depends on [ETRAX_SERIAL_PORT4]
      inherited [<choice> && ETRAX_SERIAL_PORT4]
     }
    }
    config ETRAX_SER4_DTR_BIT string {
     prompt "Ser 4 DTR bit (empty = not used)" if [ETRAX_ARCH_V32 && ETRAX_SERIAL_PORT4]
     depends on [ETRAX_SERIAL_PORT4]
     inherited [ETRAX_ARCH_V32 && ETRAX_SERIAL_PORT4]
    }
    config ETRAX_SER4_RI_BIT string {
     prompt "Ser 4 RI bit (empty = not used)" if [ETRAX_ARCH_V32 && ETRAX_SERIAL_PORT4]
     depends on [ETRAX_SERIAL_PORT4]
     inherited [ETRAX_ARCH_V32 && ETRAX_SERIAL_PORT4]
    }
    config ETRAX_SER4_DSR_BIT string {
     prompt "Ser 4 DSR bit (empty = not used)" if [ETRAX_ARCH_V32 && ETRAX_SERIAL_PORT4]
     depends on [ETRAX_SERIAL_PORT4]
     inherited [ETRAX_ARCH_V32 && ETRAX_SERIAL_PORT4]
    }
    config ETRAX_SER3_CD_BIT string {
     prompt "Ser 3 CD bit (empty = not used)" if [ETRAX_ARCH_V32 && ETRAX_SERIAL_PORT3]
     depends on [ETRAX_SERIAL_PORT3]
     prompt "Ser 4 CD bit (empty = not used)" if [ETRAX_ARCH_V32 && ETRAX_SERIAL_PORT4]
     depends on [ETRAX_SERIAL_PORT4]
     inherited [ETRAX_ARCH_V32 && ETRAX_SERIAL_PORT4]
    }
   }
   config ETRAX_RS485 boolean {
    prompt "RS-485 support" if [ETRAX_ARCH_V10 && ETRAX_SERIAL]
    depends on [ETRAX_SERIAL]
    prompt "RS-485 support" if [ETRAX_ARCH_V32 && ETRAXFS_SERIAL]
    depends on [ETRAXFS_SERIAL]
    prompt "RS-485 support" if [ETRAX_ARCH_V32 && ETRAXFS_SERIAL]
    depends on [ETRAXFS_SERIAL]
    inherited [ETRAX_ARCH_V32 && ETRAXFS_SERIAL]
    config ETRAX_RS485_DISABLE_RECEIVER boolean {
     prompt "Disable serial receiver" if [ETRAX_ARCH_V10 && ETRAX_RS485]
     depends on [ETRAX_RS485]
     prompt "Disable serial receiver" if [ETRAX_ARCH_V32 && ETRAX_RS485]
     depends on [ETRAX_RS485]
     prompt "Disable serial receiver" if [ETRAX_ARCH_V32 && ETRAX_RS485]
     depends on [ETRAX_RS485]
     inherited [ETRAX_ARCH_V32 && ETRAX_RS485]
    }
   }
  }
  config ETRAX_SYNCHRONOUS_SERIAL boolean {
   prompt "Synchronous serial-port support" if [ETRAX_ARCH_V32]
   depends on [ETRAX_ARCH_V32]
   prompt "Synchronous serial-port support" if []
   inherited [ETRAX_ARCH_V32]
   config ETRAX_SYNCHRONOUS_SERIAL_PORT0 boolean {
    prompt "Synchronous serial port 0 enabled" if [ETRAX_ARCH_V32 && ETRAX_SYNCHRONOUS_SERIAL]
    depends on [ETRAX_SYNCHRONOUS_SERIAL]
    prompt "Synchronous serial port 0 enabled" if [ETRAX_SYNCHRONOUS_SERIAL]
    depends on [ETRAX_SYNCHRONOUS_SERIAL]
    inherited [ETRAX_ARCH_V32 && ETRAX_SYNCHRONOUS_SERIAL]
    config ETRAX_SYNCHRONOUS_SERIAL0_DMA boolean {
     prompt "Enable DMA on synchronous serial port 0." if [ETRAX_ARCH_V32 && ETRAX_SYNCHRONOUS_SERIAL_PORT0]
     depends on [ETRAX_SYNCHRONOUS_SERIAL_PORT0]
     prompt "Enable DMA on synchronous serial port 0." if [ETRAX_SYNCHRONOUS_SERIAL_PORT0]
     depends on [ETRAX_SYNCHRONOUS_SERIAL_PORT0]
     inherited [ETRAX_ARCH_V32 && ETRAX_SYNCHRONOUS_SERIAL_PORT0]
    }
   }
   config ETRAX_SYNCHRONOUS_SERIAL_PORT1 boolean {
    prompt "Synchronous serial port 1 enabled" if [ETRAX_ARCH_V32 && ETRAX_SYNCHRONOUS_SERIAL && ETRAXFS]
    depends on [ETRAX_SYNCHRONOUS_SERIAL && ETRAXFS]
    prompt "Synchronous serial port 1 enabled" if [ETRAX_SYNCHRONOUS_SERIAL && (ETRAXFS || ETRAX_ARCH_V10)]
    depends on [ETRAX_SYNCHRONOUS_SERIAL && (ETRAXFS || ETRAX_ARCH_V10)]
    inherited [ETRAX_ARCH_V32 && ETRAX_SYNCHRONOUS_SERIAL && ETRAXFS]
    config ETRAX_SYNCHRONOUS_SERIAL1_DMA boolean {
     prompt "Enable DMA on synchronous serial port 1." if [ETRAX_ARCH_V32 && ETRAX_SYNCHRONOUS_SERIAL_PORT1]
     depends on [ETRAX_SYNCHRONOUS_SERIAL_PORT1]
     prompt "Enable DMA on synchronous serial port 1." if [ETRAX_SYNCHRONOUS_SERIAL_PORT1]
     depends on [ETRAX_SYNCHRONOUS_SERIAL_PORT1]
     inherited [ETRAX_ARCH_V32 && ETRAX_SYNCHRONOUS_SERIAL_PORT1]
    }
   }
  }
  config ETRAX_AXISFLASHMAP boolean {
   prompt "Axis flash-map support" if [ETRAX_ARCH_V32]
   depends on [ETRAX_ARCH_V32]
   select MTD if [ETRAX_ARCH_V32]
   select MTD_CFI if [ETRAX_ARCH_V32]
   select MTD_CFI_AMDSTD if [ETRAX_ARCH_V32]
   select MTD_JEDECPROBE if [ETRAX_ARCH_V32]
   select MTD_CHAR if [ETRAX_ARCH_V32]
   select MTD_BLOCK if [ETRAX_ARCH_V32]
   select MTD_PARTITIONS if [ETRAX_ARCH_V32]
   select MTD_CONCAT if [ETRAX_ARCH_V32]
   select MTD_COMPLEX_MAPPINGS if [ETRAX_ARCH_V32]
   prompt "Axis flash-map support" if []
   select MTD if []
   select MTD_CFI if []
   select MTD_CFI_AMDSTD if []
   select MTD_JEDECPROBE if [ETRAX_ARCH_V32]
   select MTD_CHAR if []
   select MTD_BLOCK if []
   select MTD_PARTITIONS if []
   select MTD_CONCAT if []
   select MTD_COMPLEX_MAPPINGS if []
   inherited [ETRAX_ARCH_V32]
   config ETRAX_AXISFLASHMAP_MTD0WHOLE boolean {
    prompt "MTD0 is whole boot flash device" if [ETRAX_ARCH_V32 && ETRAX_AXISFLASHMAP]
    depends on [ETRAX_AXISFLASHMAP]
    default [N] if [ETRAX_ARCH_V32 && ETRAX_AXISFLASHMAP]
    inherited [ETRAX_ARCH_V32 && ETRAX_AXISFLASHMAP]
   }
   config ETRAX_PTABLE_SECTOR integer {
    prompt "Byte-offset of partition table sector" if [ETRAX_ARCH_V10 && ETRAX_AXISFLASHMAP]
    depends on [ETRAX_AXISFLASHMAP]
    default [65536] if [ETRAX_ARCH_V10 && ETRAX_AXISFLASHMAP]
    prompt "Byte-offset of partition table sector" if [ETRAX_ARCH_V32 && ETRAX_AXISFLASHMAP]
    depends on [ETRAX_AXISFLASHMAP]
    default [65536] if [ETRAX_ARCH_V32 && ETRAX_AXISFLASHMAP]
    inherited [ETRAX_ARCH_V32 && ETRAX_AXISFLASHMAP]
   }
  }
  config ETRAX_NANDFLASH boolean {
   prompt "NAND flash support" if [ETRAX_ARCH_V32]
   depends on [ETRAX_ARCH_V32]
   select MTD_NAND if [ETRAX_ARCH_V32]
   select MTD_NAND_IDS if [ETRAX_ARCH_V32]
   inherited [ETRAX_ARCH_V32]
   config ETRAX_NANDBOOT boolean {
    prompt "Boot from NAND flash" if [ETRAX_ARCH_V32 && ETRAX_NANDFLASH]
    depends on [ETRAX_NANDFLASH]
    inherited [ETRAX_ARCH_V32 && ETRAX_NANDFLASH]
   }
  }
  config ETRAX_I2C boolean {
   prompt "I2C support" if [ETRAX_ARCH_V10]
   depends on [ETRAX_ARCH_V10]
   prompt "I2C driver" if [ETRAX_ARCH_V32]
   depends on [ETRAX_ARCH_V32]
   inherited [ETRAX_ARCH_V32]
   config ETRAX_V32_I2C_DATA_PORT string {
    prompt "I2C data pin" if [ETRAX_ARCH_V32 && ETRAX_I2C]
    depends on [ETRAX_I2C]
    inherited [ETRAX_ARCH_V32 && ETRAX_I2C]
   }
   config ETRAX_V32_I2C_CLK_PORT string {
    prompt "I2C clock pin" if [ETRAX_ARCH_V32 && ETRAX_I2C]
    depends on [ETRAX_I2C]
    inherited [ETRAX_ARCH_V32 && ETRAX_I2C]
   }
  }
  config ETRAX_GPIO boolean {
   prompt "GPIO support" if [ETRAX_ARCH_V10]
   depends on [ETRAX_ARCH_V10]
   prompt "GPIO support" if [ETRAX_ARCH_V32]
   depends on [ETRAX_ARCH_V32]
   inherited [ETRAX_ARCH_V32]
   config ETRAX_VIRTUAL_GPIO boolean {
    prompt "Virtual GPIO support" if [ETRAX_ARCH_V32 && ETRAX_GPIO]
    depends on [ETRAX_GPIO]
    inherited [ETRAX_ARCH_V32 && ETRAX_GPIO]
    config ETRAX_VIRTUAL_GPIO_INTERRUPT_PA_PIN integer {
     prompt "Virtual GPIO interrupt pin on PA pin" if [ETRAX_ARCH_V32 && ETRAX_VIRTUAL_GPIO]
     range [0 7] if [ETRAX_ARCH_V32 && ETRAX_VIRTUAL_GPIO]
     depends on [ETRAX_VIRTUAL_GPIO]
     inherited [ETRAX_ARCH_V32 && ETRAX_VIRTUAL_GPIO]
    }
   }
   config ETRAX_PA_CHANGEABLE_DIR hex {
    prompt "PA user changeable dir mask" if [ETRAX_ARCH_V10 && ETRAX_GPIO]
    depends on [ETRAX_GPIO]
    default [00] if [ETRAX_ARCH_V10 && ETRAX_GPIO]
    prompt "PA user changeable dir mask" if [ETRAX_ARCH_V32 && ETRAX_GPIO]
    depends on [ETRAX_GPIO]
    default [0x00] if [ETRAX_ARCH_V32 && ETRAX_GPIO && ETRAXFS]
    default [0x00000000] if [ETRAX_ARCH_V32 && ETRAX_GPIO && !ETRAXFS]
    inherited [ETRAX_ARCH_V32 && ETRAX_GPIO]
   }
   config ETRAX_PA_CHANGEABLE_BITS hex {
    prompt "PA user changeable bits mask" if [ETRAX_ARCH_V10 && ETRAX_GPIO]
    depends on [ETRAX_GPIO]
    default [FF] if [ETRAX_ARCH_V10 && ETRAX_GPIO]
    prompt "PA user changeable bits mask" if [ETRAX_ARCH_V32 && ETRAX_GPIO]
    depends on [ETRAX_GPIO]
    default [0x00] if [ETRAX_ARCH_V32 && ETRAX_GPIO && ETRAXFS]
    default [0x00000000] if [ETRAX_ARCH_V32 && ETRAX_GPIO && !ETRAXFS]
    inherited [ETRAX_ARCH_V32 && ETRAX_GPIO]
   }
   config ETRAX_PB_CHANGEABLE_DIR hex {
    prompt "PB user changeable dir mask" if [ETRAX_ARCH_V10 && ETRAX_GPIO]
    depends on [ETRAX_GPIO]
    default [00] if [ETRAX_ARCH_V10 && ETRAX_GPIO]
    prompt "PB user changeable dir mask" if [ETRAX_ARCH_V32 && ETRAX_GPIO]
    depends on [ETRAX_GPIO]
    default [0x00000] if [ETRAX_ARCH_V32 && ETRAX_GPIO && ETRAXFS]
    default [0x00000000] if [ETRAX_ARCH_V32 && ETRAX_GPIO && !ETRAXFS]
    inherited [ETRAX_ARCH_V32 && ETRAX_GPIO]
   }
   config ETRAX_PB_CHANGEABLE_BITS hex {
    prompt "PB user changeable bits mask" if [ETRAX_ARCH_V10 && ETRAX_GPIO]
    depends on [ETRAX_GPIO]
    default [FF] if [ETRAX_ARCH_V10 && ETRAX_GPIO]
    prompt "PB user changeable bits mask" if [ETRAX_ARCH_V32 && ETRAX_GPIO]
    depends on [ETRAX_GPIO]
    default [0x00000] if [ETRAX_ARCH_V32 && ETRAX_GPIO && ETRAXFS]
    default [0x00000000] if [ETRAX_ARCH_V32 && ETRAX_GPIO && !ETRAXFS]
    inherited [ETRAX_ARCH_V32 && ETRAX_GPIO]
   }
   config ETRAX_PC_CHANGEABLE_DIR hex {
    prompt "PC user changeable dir mask" if [ETRAX_ARCH_V32 && ETRAX_GPIO]
    depends on [ETRAX_GPIO]
    default [0x00000] if [ETRAX_ARCH_V32 && ETRAX_GPIO && ETRAXFS]
    default [0x00000000] if [ETRAX_ARCH_V32 && ETRAX_GPIO && !ETRAXFS]
    inherited [ETRAX_ARCH_V32 && ETRAX_GPIO]
   }
   config ETRAX_PC_CHANGEABLE_BITS hex {
    prompt "PC user changeable bits mask" if [ETRAX_ARCH_V32 && ETRAX_GPIO]
    depends on [ETRAX_GPIO]
    default [0x00000] if [ETRAX_ARCH_V32 && ETRAX_GPIO && ETRAXFS]
    default [0x00000000] if [ETRAX_ARCH_V32 && ETRAX_GPIO && ETRAXFS]
    inherited [ETRAX_ARCH_V32 && ETRAX_GPIO]
   }
   config ETRAX_PD_CHANGEABLE_DIR hex {
    prompt "PD user changeable dir mask" if [ETRAX_ARCH_V32 && ETRAX_GPIO && ETRAXFS]
    depends on [ETRAX_GPIO && ETRAXFS]
    default [0x00000] if [ETRAX_ARCH_V32 && ETRAX_GPIO && ETRAXFS]
    inherited [ETRAX_ARCH_V32 && ETRAX_GPIO && ETRAXFS]
   }
   config ETRAX_PD_CHANGEABLE_BITS hex {
    prompt "PD user changeable bits mask" if [ETRAX_ARCH_V32 && ETRAX_GPIO && ETRAXFS]
    depends on [ETRAX_GPIO && ETRAXFS]
    default [0x00000] if [ETRAX_ARCH_V32 && ETRAX_GPIO && ETRAXFS]
    inherited [ETRAX_ARCH_V32 && ETRAX_GPIO && ETRAXFS]
   }
   config ETRAX_PE_CHANGEABLE_DIR hex {
    prompt "PE user changeable dir mask" if [ETRAX_ARCH_V32 && ETRAX_GPIO && ETRAXFS]
    depends on [ETRAX_GPIO && ETRAXFS]
    default [0x00000] if [ETRAX_ARCH_V32 && ETRAX_GPIO && ETRAXFS]
    inherited [ETRAX_ARCH_V32 && ETRAX_GPIO && ETRAXFS]
   }
   config ETRAX_PE_CHANGEABLE_BITS hex {
    prompt "PE user changeable bits mask" if [ETRAX_ARCH_V32 && ETRAX_GPIO && ETRAXFS]
    depends on [ETRAX_GPIO && ETRAXFS]
    default [0x00000] if [ETRAX_ARCH_V32 && ETRAX_GPIO && ETRAXFS]
    inherited [ETRAX_ARCH_V32 && ETRAX_GPIO && ETRAXFS]
   }
  }
  config ETRAX_PV_CHANGEABLE_DIR hex {
   prompt "PV user changeable dir mask" if [ETRAX_ARCH_V32 && ETRAX_VIRTUAL_GPIO]
   depends on [ETRAX_VIRTUAL_GPIO]
   default [0x0000] if [ETRAX_ARCH_V32 && ETRAX_VIRTUAL_GPIO]
   inherited [ETRAX_ARCH_V32 && ETRAX_VIRTUAL_GPIO]
  }
  config ETRAX_PV_CHANGEABLE_BITS hex {
   prompt "PV user changeable bits mask" if [ETRAX_ARCH_V32 && ETRAX_VIRTUAL_GPIO]
   depends on [ETRAX_VIRTUAL_GPIO]
   default [0x0000] if [ETRAX_ARCH_V32 && ETRAX_VIRTUAL_GPIO]
   inherited [ETRAX_ARCH_V32 && ETRAX_VIRTUAL_GPIO]
  }
  config ETRAX_CARDBUS boolean {
   prompt "Cardbus support" if [ETRAX_ARCH_V32]
   depends on [ETRAX_ARCH_V32]
   select HOTPLUG if [ETRAX_ARCH_V32]
   inherited [ETRAX_ARCH_V32]
   config PCI boolean {
    depends on [ETRAX_CARDBUS]
    default [y] if [ETRAX_ARCH_V32 && ETRAX_CARDBUS]
    select HAVE_GENERIC_DMA_COHERENT if [ETRAX_ARCH_V32 && ETRAX_CARDBUS]
    inherited [ETRAX_ARCH_V32 && ETRAX_CARDBUS]
   }
  }
  config ETRAX_IOP_FW_LOAD tristate {
   prompt "IO-processor hotplug firmware loading support" if [ETRAX_ARCH_V32]
   depends on [ETRAX_ARCH_V32]
   select FW_LOADER if [ETRAX_ARCH_V32]
   inherited [ETRAX_ARCH_V32]
  }
  config ETRAX_STREAMCOPROC tristate {
   prompt "Stream co-processor driver enabled" if [ETRAX_ARCH_V32]
   depends on [ETRAX_ARCH_V32]
   inherited [ETRAX_ARCH_V32]
  }
  menuconfig MMC tristate {
   prompt "MMC/SD/SDIO card support" if [ETRAX_ARCH_V32 && HAS_IOMEM]
   depends on [HAS_IOMEM]
   inherited [ETRAX_ARCH_V32 && HAS_IOMEM]
   config MMC_DEBUG boolean {
    prompt "MMC debugging" if [ETRAX_ARCH_V32 && MMC]
    depends on [MMC]
    inherited [ETRAX_ARCH_V32 && MMC]
   }
   if [ETRAX_ARCH_V32 && MMC] {
    config MMC_UNSAFE_RESUME boolean {
     prompt "Assume MMC/SD cards are non-removable (DANGEROUS)" if [ETRAX_ARCH_V32 && MMC]
     inherited [ETRAX_ARCH_V32 && MMC]
    }
    config MMC_BLOCK tristate {
     prompt "MMC block device driver" if [ETRAX_ARCH_V32 && MMC && BLOCK]
     depends on [BLOCK]
     default [y] if [ETRAX_ARCH_V32 && MMC && BLOCK]
     inherited [ETRAX_ARCH_V32 && MMC && BLOCK]
     config MMC_BLOCK_BOUNCE boolean {
      prompt "Use bounce buffer for simple hosts" if [ETRAX_ARCH_V32 && MMC && MMC_BLOCK]
      depends on [MMC_BLOCK]
      default [y] if [ETRAX_ARCH_V32 && MMC && MMC_BLOCK]
      inherited [ETRAX_ARCH_V32 && MMC && MMC_BLOCK]
     }
    }
    config SDIO_UART tristate {
     prompt "SDIO UART/GPS class support" if [ETRAX_ARCH_V32 && MMC]
     inherited [ETRAX_ARCH_V32 && MMC]
    }
    config MMC_TEST tristate {
     prompt "MMC host test driver" if [ETRAX_ARCH_V32 && MMC]
     default [n] if [ETRAX_ARCH_V32 && MMC]
     inherited [ETRAX_ARCH_V32 && MMC]
    }
    config MMC_ARMMMCI tristate {
     prompt "ARM AMBA Multimedia Card Interface support" if [ETRAX_ARCH_V32 && MMC && ARM_AMBA]
     depends on [ARM_AMBA]
     inherited [ETRAX_ARCH_V32 && MMC && ARM_AMBA]
    }
    config MMC_PXA tristate {
     prompt "Intel PXA25x/26x/27x Multimedia Card Interface support" if [ETRAX_ARCH_V32 && MMC && ARCH_PXA]
     depends on [ARCH_PXA]
     inherited [ETRAX_ARCH_V32 && MMC && ARCH_PXA]
    }
    config MMC_SDHCI tristate {
     prompt "Secure Digital Host Controller Interface support" if [ETRAX_ARCH_V32 && MMC && HAS_DMA]
     depends on [HAS_DMA]
     inherited [ETRAX_ARCH_V32 && MMC && HAS_DMA]
     config MMC_SDHCI_IO_ACCESSORS boolean {
      depends on [MMC_SDHCI]
      inherited [ETRAX_ARCH_V32 && MMC && MMC_SDHCI]
     }
    }
    config MMC_SDHCI_BIG_ENDIAN_32BIT_BYTE_SWAPPER boolean {
     select MMC_SDHCI_IO_ACCESSORS if [ETRAX_ARCH_V32 && MMC]
     inherited [ETRAX_ARCH_V32 && MMC]
    }
    config MMC_SDHCI_PCI tristate {
     prompt "SDHCI support on PCI bus" if [ETRAX_ARCH_V32 && MMC && MMC_SDHCI && PCI]
     depends on [MMC_SDHCI && PCI]
     inherited [ETRAX_ARCH_V32 && MMC && MMC_SDHCI && PCI]
     config MMC_RICOH_MMC tristate {
      prompt "Ricoh MMC Controller Disabler  (EXPERIMENTAL)" if [ETRAX_ARCH_V32 && MMC && MMC_SDHCI_PCI]
      depends on [MMC_SDHCI_PCI]
      inherited [ETRAX_ARCH_V32 && MMC && MMC_SDHCI_PCI]
     }
    }
    config MMC_SDHCI_OF tristate {
     prompt "SDHCI support on OpenFirmware platforms" if [ETRAX_ARCH_V32 && MMC && MMC_SDHCI && PPC_OF]
     depends on [MMC_SDHCI && PPC_OF]
     inherited [ETRAX_ARCH_V32 && MMC && MMC_SDHCI && PPC_OF]
     config MMC_SDHCI_OF_ESDHC boolean {
      prompt "SDHCI OF support for the Freescale eSDHC controller" if [ETRAX_ARCH_V32 && MMC && MMC_SDHCI_OF]
      depends on [MMC_SDHCI_OF]
      select MMC_SDHCI_BIG_ENDIAN_32BIT_BYTE_SWAPPER if [ETRAX_ARCH_V32 && MMC && MMC_SDHCI_OF]
      inherited [ETRAX_ARCH_V32 && MMC && MMC_SDHCI_OF]
     }
     config MMC_SDHCI_OF_HLWD boolean {
      prompt "SDHCI OF support for the Nintendo Wii SDHCI controllers" if [ETRAX_ARCH_V32 && MMC && MMC_SDHCI_OF]
      depends on [MMC_SDHCI_OF]
      select MMC_SDHCI_BIG_ENDIAN_32BIT_BYTE_SWAPPER if [ETRAX_ARCH_V32 && MMC && MMC_SDHCI_OF]
      inherited [ETRAX_ARCH_V32 && MMC && MMC_SDHCI_OF]
     }
    }
    config MMC_SDHCI_PLTFM tristate {
     prompt "SDHCI support on the platform specific bus" if [ETRAX_ARCH_V32 && MMC && MMC_SDHCI]
     depends on [MMC_SDHCI]
     inherited [ETRAX_ARCH_V32 && MMC && MMC_SDHCI]
    }
    config MMC_SDHCI_S3C tristate {
     prompt "SDHCI support on Samsung S3C SoC" if [ETRAX_ARCH_V32 && MMC && MMC_SDHCI && (PLAT_S3C24XX || PLAT_S3C64XX)]
     depends on [MMC_SDHCI && (PLAT_S3C24XX || PLAT_S3C64XX)]
     inherited [ETRAX_ARCH_V32 && MMC && MMC_SDHCI && (PLAT_S3C24XX || PLAT_S3C64XX)]
     config MMC_SDHCI_S3C_DMA boolean {
      prompt "DMA support on S3C SDHCI" if [ETRAX_ARCH_V32 && MMC && MMC_SDHCI_S3C && EXPERIMENTAL]
      depends on [MMC_SDHCI_S3C && EXPERIMENTAL]
      inherited [ETRAX_ARCH_V32 && MMC && MMC_SDHCI_S3C && EXPERIMENTAL]
     }
    }
    config MMC_OMAP tristate {
     prompt "TI OMAP Multimedia Card Interface support" if [ETRAX_ARCH_V32 && MMC && ARCH_OMAP]
     depends on [ARCH_OMAP]
     select TPS65010 if [ETRAX_ARCH_V32 && MMC && ARCH_OMAP && MACH_OMAP_H2]
     inherited [ETRAX_ARCH_V32 && MMC && ARCH_OMAP]
    }
    config MMC_OMAP_HS tristate {
     prompt "TI OMAP High Speed Multimedia Card Interface support" if [ETRAX_ARCH_V32 && MMC && (ARCH_OMAP2430 || ARCH_OMAP3 || ARCH_OMAP4)]
     depends on [ARCH_OMAP2430 || ARCH_OMAP3 || ARCH_OMAP4]
     inherited [ETRAX_ARCH_V32 && MMC && (ARCH_OMAP2430 || ARCH_OMAP3 || ARCH_OMAP4)]
    }
    config MMC_WBSD tristate {
     prompt "Winbond W83L51xD SD/MMC Card Interface support" if [ETRAX_ARCH_V32 && MMC && ISA_DMA_API]
     depends on [ISA_DMA_API]
     inherited [ETRAX_ARCH_V32 && MMC && ISA_DMA_API]
    }
    config MMC_AU1X tristate {
     prompt "Alchemy AU1XX0 MMC Card Interface support" if [ETRAX_ARCH_V32 && MMC && SOC_AU1200]
     depends on [SOC_AU1200]
     inherited [ETRAX_ARCH_V32 && MMC && SOC_AU1200]
    }
    choice tristate {
     prompt "Atmel SD/MMC Driver" if [ETRAX_ARCH_V32 && MMC]
     default [MMC_ATMELMCI] if [ETRAX_ARCH_V32 && MMC && AVR32]
     config MMC_AT91 tristate {
      prompt "AT91 SD/MMC Card Interface support" if [<choice> && ARCH_AT91]
      depends on [ARCH_AT91]
      inherited [<choice> && ARCH_AT91]
     }
     config MMC_ATMELMCI tristate {
      prompt "Atmel Multimedia Card Interface support" if [<choice> && (AVR32 || ARCH_AT91)]
      depends on [AVR32 || ARCH_AT91]
      inherited [<choice> && (AVR32 || ARCH_AT91)]
     }
    }
    config MMC_ATMELMCI_DMA boolean {
     prompt "Atmel MCI DMA support (EXPERIMENTAL)" if [ETRAX_ARCH_V32 && MMC && MMC_ATMELMCI && AVR32 && DMA_ENGINE && EXPERIMENTAL]
     depends on [MMC_ATMELMCI && AVR32 && DMA_ENGINE && EXPERIMENTAL]
     inherited [ETRAX_ARCH_V32 && MMC && MMC_ATMELMCI && AVR32 && DMA_ENGINE && EXPERIMENTAL]
    }
    config MMC_IMX tristate {
     prompt "Motorola i.MX Multimedia Card Interface support" if [ETRAX_ARCH_V32 && MMC && ARCH_MX1]
     depends on [ARCH_MX1]
     inherited [ETRAX_ARCH_V32 && MMC && ARCH_MX1]
    }
    config MMC_MSM7X00A tristate {
     prompt "Qualcomm MSM 7X00A SDCC Controller Support" if [ETRAX_ARCH_V32 && MMC && ARCH_MSM]
     depends on [MMC && ARCH_MSM]
     inherited [ETRAX_ARCH_V32 && MMC && ARCH_MSM]
    }
    config MMC_MXC tristate {
     prompt "Freescale i.MX2/3 Multimedia Card Interface support" if [ETRAX_ARCH_V32 && MMC && ARCH_MXC]
     depends on [ARCH_MXC]
     inherited [ETRAX_ARCH_V32 && MMC && ARCH_MXC]
    }
    config MMC_TIFM_SD tristate {
     prompt "TI Flash Media MMC/SD Interface support  (EXPERIMENTAL)" if [ETRAX_ARCH_V32 && MMC && EXPERIMENTAL && PCI]
     depends on [EXPERIMENTAL && PCI]
     select TIFM_CORE if [ETRAX_ARCH_V32 && MMC && EXPERIMENTAL && PCI]
     inherited [ETRAX_ARCH_V32 && MMC && EXPERIMENTAL && PCI]
    }
    config MMC_MVSDIO tristate {
     prompt "Marvell MMC/SD/SDIO host driver" if [ETRAX_ARCH_V32 && MMC && PLAT_ORION]
     depends on [PLAT_ORION]
     inherited [ETRAX_ARCH_V32 && MMC && PLAT_ORION]
    }
    config MMC_DAVINCI tristate {
     prompt "TI DAVINCI Multimedia Card Interface support" if [ETRAX_ARCH_V32 && MMC && ARCH_DAVINCI]
     depends on [ARCH_DAVINCI]
     inherited [ETRAX_ARCH_V32 && MMC && ARCH_DAVINCI]
    }
    config MMC_SPI tristate {
     prompt "MMC/SD/SDIO over SPI" if [ETRAX_ARCH_V32 && MMC && SPI_MASTER && !HIGHMEM && HAS_DMA]
     depends on [SPI_MASTER && !HIGHMEM && HAS_DMA]
     select CRC7 if [ETRAX_ARCH_V32 && MMC && SPI_MASTER && !HIGHMEM && HAS_DMA]
     select CRC_ITU_T if [ETRAX_ARCH_V32 && MMC && SPI_MASTER && !HIGHMEM && HAS_DMA]
     inherited [ETRAX_ARCH_V32 && MMC && SPI_MASTER && !HIGHMEM && HAS_DMA]
    }
    config MMC_S3C tristate {
     prompt "Samsung S3C SD/MMC Card Interface support" if [ETRAX_ARCH_V32 && MMC && ARCH_S3C2410]
     depends on [ARCH_S3C2410]
     inherited [ETRAX_ARCH_V32 && MMC && ARCH_S3C2410]
     config MMC_S3C_HW_SDIO_IRQ boolean {
      prompt "Hardware support for SDIO IRQ" if [ETRAX_ARCH_V32 && MMC && MMC_S3C]
      depends on [MMC_S3C]
      inherited [ETRAX_ARCH_V32 && MMC && MMC_S3C]
     }
     choice boolean {
      prompt "Samsung S3C SD/MMC transfer code" if [ETRAX_ARCH_V32 && MMC && MMC_S3C]
      depends on [MMC_S3C]
      config MMC_S3C_PIO boolean {
       prompt "Use PIO transfers only" if [<choice>]
       inherited [<choice>]
      }
      config MMC_S3C_DMA boolean {
       prompt "Use DMA transfers only (EXPERIMENTAL)" if [<choice> && EXPERIMENTAL]
       depends on [EXPERIMENTAL]
       inherited [<choice> && EXPERIMENTAL]
      }
      config MMC_S3C_PIODMA boolean {
       prompt "Support for both PIO and DMA (EXPERIMENTAL)" if [<choice>]
       inherited [<choice>]
      }
     }
    }
    config MMC_SDRICOH_CS tristate {
     prompt "MMC/SD driver for Ricoh Bay1Controllers (EXPERIMENTAL)" if [ETRAX_ARCH_V32 && MMC && EXPERIMENTAL && PCI && PCMCIA]
     depends on [EXPERIMENTAL && PCI && PCMCIA]
     inherited [ETRAX_ARCH_V32 && MMC && EXPERIMENTAL && PCI && PCMCIA]
    }
    config MMC_TMIO tristate {
     prompt "Toshiba Mobile IO Controller (TMIO) MMC/SD function support" if [ETRAX_ARCH_V32 && MMC && (MFD_TMIO || MFD_ASIC3 || SUPERH)]
     depends on [MFD_TMIO || MFD_ASIC3 || SUPERH]
     inherited [ETRAX_ARCH_V32 && MMC && (MFD_TMIO || MFD_ASIC3 || SUPERH)]
    }
    config MMC_CB710 tristate {
     prompt "ENE CB710 MMC/SD Interface support" if [ETRAX_ARCH_V32 && MMC && PCI]
     depends on [PCI]
     select CB710_CORE if [ETRAX_ARCH_V32 && MMC && PCI]
     inherited [ETRAX_ARCH_V32 && MMC && PCI]
    }
    config MMC_VIA_SDMMC tristate {
     prompt "VIA SD/MMC Card Reader Driver" if [ETRAX_ARCH_V32 && MMC && PCI]
     depends on [PCI]
     inherited [ETRAX_ARCH_V32 && MMC && PCI]
    }
    config SDH_BFIN tristate {
     prompt "Blackfin Secure Digital Host support" if [ETRAX_ARCH_V32 && MMC && (BF54x && !BF544 || BF51x && !BF512)]
     depends on [MMC && (BF54x && !BF544 || BF51x && !BF512)]
     inherited [ETRAX_ARCH_V32 && MMC && (BF54x && !BF544 || BF51x && !BF512)]
     config SDH_BFIN_MISSING_CMD_PULLUP_WORKAROUND boolean {
      prompt "Blackfin EZkit Missing SDH_CMD Pull Up Resistor Workaround" if [ETRAX_ARCH_V32 && MMC && SDH_BFIN]
      depends on [SDH_BFIN]
      inherited [ETRAX_ARCH_V32 && MMC && SDH_BFIN]
     }
    }
   }
   config ETRAX_MMC_IOP tristate {
    prompt "MMC/SD host driver using IO-processor" if [ETRAX_ARCH_V32 && MMC]
    depends on [ETRAX_ARCH_V32 && MMC]
    inherited [ETRAX_ARCH_V32 && MMC]
   }
  }
  config ETRAX_SPI_MMC tristate {
   depends on [!ETRAX_MMC_IOP]
   default [MMC] if [ETRAX_ARCH_V32 && !ETRAX_MMC_IOP]
   select SPI if [ETRAX_ARCH_V32 && !ETRAX_MMC_IOP]
   select MMC_SPI if [ETRAX_ARCH_V32 && !ETRAX_MMC_IOP]
   select ETRAX_SPI_MMC_BOARD if [ETRAX_ARCH_V32 && !ETRAX_MMC_IOP]
   inherited [ETRAX_ARCH_V32 && !ETRAX_MMC_IOP]
  }
  config ETRAX_SPI_MMC_BOARD boolean {
   default [n] if [ETRAX_ARCH_V32]
   inherited [ETRAX_ARCH_V32]
  }
  config SPI_ETRAX_SSER tristate {
   depends on [SPI_MASTER && ETRAX_ARCH_V32 && EXPERIMENTAL]
   select SPI_BITBANG if [SPI_MASTER && ETRAX_ARCH_V32 && EXPERIMENTAL]
   inherited [SPI_MASTER && ETRAX_ARCH_V32 && EXPERIMENTAL]
  }
  config SPI_ETRAX_GPIO tristate {
   depends on [SPI_MASTER && ETRAX_ARCH_V32 && EXPERIMENTAL]
   select SPI_BITBANG if [SPI_MASTER && ETRAX_ARCH_V32 && EXPERIMENTAL]
   inherited [SPI_MASTER && ETRAX_ARCH_V32 && EXPERIMENTAL]
  }
  config ETRAX_SPI_SSER0 tristate {
   prompt "SPI using synchronous serial port 0 (sser0)" if [ETRAX_ARCH_V32 && ETRAX_SPI_MMC]
   depends on [ETRAX_SPI_MMC]
   default [m] if [ETRAX_ARCH_V32 && ETRAX_SPI_MMC && MMC_SPI="m"]
   default [y] if [ETRAX_ARCH_V32 && ETRAX_SPI_MMC && MMC_SPI="y"]
   default [y] if [ETRAX_ARCH_V32 && ETRAX_SPI_MMC && MMC_SPI="n"]
   select SPI_ETRAX_SSER if [ETRAX_ARCH_V32 && ETRAX_SPI_MMC]
   inherited [ETRAX_ARCH_V32 && ETRAX_SPI_MMC]
   config ETRAX_SPI_SSER0_DMA boolean {
    prompt "DMA for SPI on sser0 enabled" if [ETRAX_ARCH_V32 && ETRAX_SPI_SSER0 && !ETRAX_SERIAL_PORT1_DMA4_OUT && !ETRAX_SERIAL_PORT1_DMA5_IN]
    depends on [ETRAX_SPI_SSER0]
    depends on [!ETRAX_SERIAL_PORT1_DMA4_OUT && !ETRAX_SERIAL_PORT1_DMA5_IN]
    default [y] if [ETRAX_ARCH_V32 && ETRAX_SPI_SSER0 && !ETRAX_SERIAL_PORT1_DMA4_OUT && !ETRAX_SERIAL_PORT1_DMA5_IN]
    inherited [ETRAX_ARCH_V32 && ETRAX_SPI_SSER0 && !ETRAX_SERIAL_PORT1_DMA4_OUT && !ETRAX_SERIAL_PORT1_DMA5_IN]
   }
   config ETRAX_SPI_MMC_CD_SSER0_PIN string {
    prompt "MMC/SD card detect pin for SPI on sser0" if [ETRAX_ARCH_V32 && ETRAX_SPI_SSER0 && MMC_SPI]
    depends on [ETRAX_SPI_SSER0 && MMC_SPI]
    default ["pd11"] if [ETRAX_ARCH_V32 && ETRAX_SPI_SSER0 && MMC_SPI]
    inherited [ETRAX_ARCH_V32 && ETRAX_SPI_SSER0 && MMC_SPI]
   }
   config ETRAX_SPI_MMC_WP_SSER0_PIN string {
    prompt "MMC/SD card write-protect pin for SPI on sser0" if [ETRAX_ARCH_V32 && ETRAX_SPI_SSER0 && MMC_SPI]
    depends on [ETRAX_SPI_SSER0 && MMC_SPI]
    default ["pd10"] if [ETRAX_ARCH_V32 && ETRAX_SPI_SSER0 && MMC_SPI]
    inherited [ETRAX_ARCH_V32 && ETRAX_SPI_SSER0 && MMC_SPI]
   }
  }
  config ETRAX_SPI_SSER1 tristate {
   prompt "SPI using synchronous serial port 1 (sser1)" if [ETRAX_ARCH_V32 && ETRAX_SPI_MMC]
   depends on [ETRAX_SPI_MMC]
   default [m] if [ETRAX_ARCH_V32 && ETRAX_SPI_MMC && MMC_SPI="m" && ETRAX_SPI_SSER0="n"]
   default [y] if [ETRAX_ARCH_V32 && ETRAX_SPI_MMC && MMC_SPI="y" && ETRAX_SPI_SSER0="n"]
   default [y] if [ETRAX_ARCH_V32 && ETRAX_SPI_MMC && MMC_SPI="n" && ETRAX_SPI_SSER0="n"]
   select SPI_ETRAX_SSER if [ETRAX_ARCH_V32 && ETRAX_SPI_MMC]
   inherited [ETRAX_ARCH_V32 && ETRAX_SPI_MMC]
   config ETRAX_SPI_SSER1_DMA boolean {
    prompt "DMA for SPI on sser1 enabled" if [ETRAX_ARCH_V32 && ETRAX_SPI_SSER1 && !ETRAX_ETHERNET_IFACE1 && !ETRAX_SERIAL_PORT0_DMA6_OUT && !ETRAX_SERIAL_PORT0_DMA7_IN]
    depends on [ETRAX_SPI_SSER1 && !ETRAX_ETHERNET_IFACE1]
    depends on [!ETRAX_SERIAL_PORT0_DMA6_OUT && !ETRAX_SERIAL_PORT0_DMA7_IN]
    default [y] if [ETRAX_ARCH_V32 && ETRAX_SPI_SSER1 && !ETRAX_ETHERNET_IFACE1 && !ETRAX_SERIAL_PORT0_DMA6_OUT && !ETRAX_SERIAL_PORT0_DMA7_IN]
    inherited [ETRAX_ARCH_V32 && ETRAX_SPI_SSER1 && !ETRAX_ETHERNET_IFACE1 && !ETRAX_SERIAL_PORT0_DMA6_OUT && !ETRAX_SERIAL_PORT0_DMA7_IN]
   }
   config ETRAX_SPI_MMC_CD_SSER1_PIN string {
    prompt "MMC/SD card detect pin for SPI on sser1" if [ETRAX_ARCH_V32 && ETRAX_SPI_SSER1 && MMC_SPI]
    depends on [ETRAX_SPI_SSER1 && MMC_SPI]
    default ["pd12"] if [ETRAX_ARCH_V32 && ETRAX_SPI_SSER1 && MMC_SPI]
    inherited [ETRAX_ARCH_V32 && ETRAX_SPI_SSER1 && MMC_SPI]
   }
   config ETRAX_SPI_MMC_WP_SSER1_PIN string {
    prompt "MMC/SD card write-protect pin for SPI on sser1" if [ETRAX_ARCH_V32 && ETRAX_SPI_SSER1 && MMC_SPI]
    depends on [ETRAX_SPI_SSER1 && MMC_SPI]
    default ["pd9"] if [ETRAX_ARCH_V32 && ETRAX_SPI_SSER1 && MMC_SPI]
    inherited [ETRAX_ARCH_V32 && ETRAX_SPI_SSER1 && MMC_SPI]
   }
  }
  config ETRAX_SPI_GPIO tristate {
   prompt "Bitbanged SPI using gpio pins" if [ETRAX_ARCH_V32 && ETRAX_SPI_MMC]
   depends on [ETRAX_SPI_MMC]
   select SPI_ETRAX_GPIO if [ETRAX_ARCH_V32 && ETRAX_SPI_MMC]
   default [m] if [ETRAX_ARCH_V32 && ETRAX_SPI_MMC && MMC_SPI="m" && ETRAX_SPI_SSER0="n" && ETRAX_SPI_SSER1="n"]
   default [y] if [ETRAX_ARCH_V32 && ETRAX_SPI_MMC && MMC_SPI="y" && ETRAX_SPI_SSER0="n" && ETRAX_SPI_SSER1="n"]
   default [y] if [ETRAX_ARCH_V32 && ETRAX_SPI_MMC && MMC_SPI="n" && ETRAX_SPI_SSER0="n" && ETRAX_SPI_SSER1="n"]
   inherited [ETRAX_ARCH_V32 && ETRAX_SPI_MMC]
   config ETRAX_SPI_CS_PIN string {
    prompt "SPI chip select pin" if [ETRAX_ARCH_V32 && ETRAX_SPI_GPIO]
    depends on [ETRAX_SPI_GPIO]
    default ["pc3"] if [ETRAX_ARCH_V32 && ETRAX_SPI_GPIO]
    inherited [ETRAX_ARCH_V32 && ETRAX_SPI_GPIO]
   }
   config ETRAX_SPI_CLK_PIN string {
    prompt "SPI clock pin" if [ETRAX_ARCH_V32 && ETRAX_SPI_GPIO]
    depends on [ETRAX_SPI_GPIO]
    default ["pc1"] if [ETRAX_ARCH_V32 && ETRAX_SPI_GPIO]
    inherited [ETRAX_ARCH_V32 && ETRAX_SPI_GPIO]
   }
   config ETRAX_SPI_DATAIN_PIN string {
    prompt "SPI MISO (data in) pin" if [ETRAX_ARCH_V32 && ETRAX_SPI_GPIO]
    depends on [ETRAX_SPI_GPIO]
    default ["pc16"] if [ETRAX_ARCH_V32 && ETRAX_SPI_GPIO]
    inherited [ETRAX_ARCH_V32 && ETRAX_SPI_GPIO]
   }
   config ETRAX_SPI_DATAOUT_PIN string {
    prompt "SPI MOSI (data out) pin" if [ETRAX_ARCH_V32 && ETRAX_SPI_GPIO]
    depends on [ETRAX_SPI_GPIO]
    default ["pc0"] if [ETRAX_ARCH_V32 && ETRAX_SPI_GPIO]
    inherited [ETRAX_ARCH_V32 && ETRAX_SPI_GPIO]
   }
   config ETRAX_SPI_MMC_CD_GPIO_PIN string {
    prompt "MMC/SD card detect pin for SPI using gpio (space for none)" if [ETRAX_ARCH_V32 && ETRAX_SPI_GPIO && MMC_SPI]
    depends on [ETRAX_SPI_GPIO && MMC_SPI]
    default ["pd11"] if [ETRAX_ARCH_V32 && ETRAX_SPI_GPIO && MMC_SPI]
    inherited [ETRAX_ARCH_V32 && ETRAX_SPI_GPIO && MMC_SPI]
   }
   config ETRAX_SPI_MMC_WP_GPIO_PIN string {
    prompt "MMC/SD card write-protect pin for SPI using gpio (space for none)" if [ETRAX_ARCH_V32 && ETRAX_SPI_GPIO && MMC_SPI]
    depends on [ETRAX_SPI_GPIO && MMC_SPI]
    default ["pd10"] if [ETRAX_ARCH_V32 && ETRAX_SPI_GPIO && MMC_SPI]
    inherited [ETRAX_ARCH_V32 && ETRAX_SPI_GPIO && MMC_SPI]
   }
  }
  if [ETRAX_ARCH_V32 && ETRAX_SPI_MMC] {
   menuconfig SPI boolean {
    prompt "SPI support" if [ETRAX_ARCH_V32 && ETRAX_SPI_MMC && HAS_IOMEM]
    depends on [HAS_IOMEM]
    inherited [ETRAX_ARCH_V32 && ETRAX_SPI_MMC && HAS_IOMEM]
    if [ETRAX_ARCH_V32 && ETRAX_SPI_MMC && SPI] {
     config SPI_DEBUG boolean {
      prompt "Debug support for SPI drivers" if [ETRAX_ARCH_V32 && ETRAX_SPI_MMC && SPI && DEBUG_KERNEL]
      depends on [DEBUG_KERNEL]
      inherited [ETRAX_ARCH_V32 && ETRAX_SPI_MMC && SPI && DEBUG_KERNEL]
     }
     config SPI_MASTER boolean {
      default [SPI] if [ETRAX_ARCH_V32 && ETRAX_SPI_MMC && SPI]
      inherited [ETRAX_ARCH_V32 && ETRAX_SPI_MMC && SPI]
     }
     if [ETRAX_ARCH_V32 && ETRAX_SPI_MMC && SPI && SPI_MASTER] {
      config SPI_ATMEL tristate {
       prompt "Atmel SPI Controller" if [ETRAX_ARCH_V32 && ETRAX_SPI_MMC && SPI && SPI_MASTER && (ARCH_AT91 || AVR32)]
       depends on [ARCH_AT91 || AVR32]
       inherited [ETRAX_ARCH_V32 && ETRAX_SPI_MMC && SPI && SPI_MASTER && (ARCH_AT91 || AVR32)]
      }
      config SPI_BFIN tristate {
       prompt "SPI controller driver for ADI Blackfin5xx" if [ETRAX_ARCH_V32 && ETRAX_SPI_MMC && SPI && SPI_MASTER && BLACKFIN]
       depends on [BLACKFIN]
       inherited [ETRAX_ARCH_V32 && ETRAX_SPI_MMC && SPI && SPI_MASTER && BLACKFIN]
      }
      config SPI_AU1550 tristate {
       prompt "Au1550/Au12x0 SPI Controller" if [ETRAX_ARCH_V32 && ETRAX_SPI_MMC && SPI && SPI_MASTER && (SOC_AU1550 || SOC_AU1200) && EXPERIMENTAL]
       depends on [(SOC_AU1550 || SOC_AU1200) && EXPERIMENTAL]
       select SPI_BITBANG if [ETRAX_ARCH_V32 && ETRAX_SPI_MMC && SPI && SPI_MASTER && (SOC_AU1550 || SOC_AU1200) && EXPERIMENTAL]
       inherited [ETRAX_ARCH_V32 && ETRAX_SPI_MMC && SPI && SPI_MASTER && (SOC_AU1550 || SOC_AU1200) && EXPERIMENTAL]
      }
      config SPI_BITBANG tristate {
       prompt "Utilities for Bitbanging SPI masters" if [ETRAX_ARCH_V32 && ETRAX_SPI_MMC && SPI && SPI_MASTER]
       inherited [ETRAX_ARCH_V32 && ETRAX_SPI_MMC && SPI && SPI_MASTER]
      }
      config SPI_BUTTERFLY tristate {
       prompt "Parallel port adapter for AVR Butterfly (DEVELOPMENT)" if [ETRAX_ARCH_V32 && ETRAX_SPI_MMC && SPI && SPI_MASTER && PARPORT]
       depends on [PARPORT]
       select SPI_BITBANG if [ETRAX_ARCH_V32 && ETRAX_SPI_MMC && SPI && SPI_MASTER && PARPORT]
       inherited [ETRAX_ARCH_V32 && ETRAX_SPI_MMC && SPI && SPI_MASTER && PARPORT]
      }
      config SPI_GPIO tristate {
       prompt "GPIO-based bitbanging SPI Master" if [ETRAX_ARCH_V32 && ETRAX_SPI_MMC && SPI && SPI_MASTER && GENERIC_GPIO]
       depends on [GENERIC_GPIO]
       select SPI_BITBANG if [ETRAX_ARCH_V32 && ETRAX_SPI_MMC && SPI && SPI_MASTER && GENERIC_GPIO]
       inherited [ETRAX_ARCH_V32 && ETRAX_SPI_MMC && SPI && SPI_MASTER && GENERIC_GPIO]
      }
      config SPI_IMX tristate {
       prompt "Freescale i.MX SPI controllers" if [ETRAX_ARCH_V32 && ETRAX_SPI_MMC && SPI && SPI_MASTER && ARCH_MXC]
       depends on [ARCH_MXC]
       select SPI_BITBANG if [ETRAX_ARCH_V32 && ETRAX_SPI_MMC && SPI && SPI_MASTER && ARCH_MXC]
       inherited [ETRAX_ARCH_V32 && ETRAX_SPI_MMC && SPI && SPI_MASTER && ARCH_MXC]
      }
      config SPI_LM70_LLP tristate {
       prompt "Parallel port adapter for LM70 eval board (DEVELOPMENT)" if [ETRAX_ARCH_V32 && ETRAX_SPI_MMC && SPI && SPI_MASTER && PARPORT && EXPERIMENTAL]
       depends on [PARPORT && EXPERIMENTAL]
       select SPI_BITBANG if [ETRAX_ARCH_V32 && ETRAX_SPI_MMC && SPI && SPI_MASTER && PARPORT && EXPERIMENTAL]
       inherited [ETRAX_ARCH_V32 && ETRAX_SPI_MMC && SPI && SPI_MASTER && PARPORT && EXPERIMENTAL]
      }
      config SPI_MPC52xx tristate {
       prompt "Freescale MPC52xx SPI (non-PSC) controller support" if [ETRAX_ARCH_V32 && ETRAX_SPI_MMC && SPI_MASTER && PPC_MPC52xx && SPI]
       depends on [PPC_MPC52xx && SPI]
       select SPI_MASTER_OF if [ETRAX_ARCH_V32 && ETRAX_SPI_MMC && SPI_MASTER && PPC_MPC52xx && SPI]
       inherited [ETRAX_ARCH_V32 && ETRAX_SPI_MMC && SPI_MASTER && PPC_MPC52xx && SPI]
      }
      config SPI_MPC52xx_PSC tristate {
       prompt "Freescale MPC52xx PSC SPI controller" if [ETRAX_ARCH_V32 && ETRAX_SPI_MMC && SPI && SPI_MASTER && PPC_MPC52xx && EXPERIMENTAL]
       depends on [PPC_MPC52xx && EXPERIMENTAL]
       inherited [ETRAX_ARCH_V32 && ETRAX_SPI_MMC && SPI && SPI_MASTER && PPC_MPC52xx && EXPERIMENTAL]
      }
      config SPI_MPC8xxx tristate {
       prompt "Freescale MPC8xxx SPI controller" if [ETRAX_ARCH_V32 && ETRAX_SPI_MMC && SPI && SPI_MASTER && FSL_SOC]
       depends on [FSL_SOC]
       inherited [ETRAX_ARCH_V32 && ETRAX_SPI_MMC && SPI && SPI_MASTER && FSL_SOC]
      }
      config SPI_OMAP_UWIRE tristate {
       prompt "OMAP1 MicroWire" if [ETRAX_ARCH_V32 && ETRAX_SPI_MMC && SPI && SPI_MASTER && ARCH_OMAP1]
       depends on [ARCH_OMAP1]
       select SPI_BITBANG if [ETRAX_ARCH_V32 && ETRAX_SPI_MMC && SPI && SPI_MASTER && ARCH_OMAP1]
       inherited [ETRAX_ARCH_V32 && ETRAX_SPI_MMC && SPI && SPI_MASTER && ARCH_OMAP1]
      }
      config SPI_OMAP24XX tristate {
       prompt "McSPI driver for OMAP24xx/OMAP34xx" if [ETRAX_ARCH_V32 && ETRAX_SPI_MMC && SPI && SPI_MASTER && (ARCH_OMAP24XX || ARCH_OMAP34XX)]
       depends on [ARCH_OMAP24XX || ARCH_OMAP34XX]
       inherited [ETRAX_ARCH_V32 && ETRAX_SPI_MMC && SPI && SPI_MASTER && (ARCH_OMAP24XX || ARCH_OMAP34XX)]
      }
      config SPI_OMAP_100K tristate {
       prompt "OMAP SPI 100K" if [ETRAX_ARCH_V32 && ETRAX_SPI_MMC && SPI && SPI_MASTER && (ARCH_OMAP850 || ARCH_OMAP730)]
       depends on [SPI_MASTER && (ARCH_OMAP850 || ARCH_OMAP730)]
       inherited [ETRAX_ARCH_V32 && ETRAX_SPI_MMC && SPI && SPI_MASTER && (ARCH_OMAP850 || ARCH_OMAP730)]
      }
      config SPI_ORION tristate {
       prompt "Orion SPI master (EXPERIMENTAL)" if [ETRAX_ARCH_V32 && ETRAX_SPI_MMC && SPI && SPI_MASTER && PLAT_ORION && EXPERIMENTAL]
       depends on [PLAT_ORION && EXPERIMENTAL]
       inherited [ETRAX_ARCH_V32 && ETRAX_SPI_MMC && SPI && SPI_MASTER && PLAT_ORION && EXPERIMENTAL]
      }
      config SPI_PL022 tristate {
       prompt "ARM AMBA PL022 SSP controller (EXPERIMENTAL)" if [ETRAX_ARCH_V32 && ETRAX_SPI_MMC && SPI && SPI_MASTER && ARM_AMBA && EXPERIMENTAL]
       depends on [ARM_AMBA && EXPERIMENTAL]
       default [y] if [ETRAX_ARCH_V32 && ETRAX_SPI_MMC && SPI && SPI_MASTER && ARM_AMBA && EXPERIMENTAL && MACH_U300]
       default [y] if [ETRAX_ARCH_V32 && ETRAX_SPI_MMC && SPI && SPI_MASTER && ARM_AMBA && EXPERIMENTAL && ARCH_REALVIEW]
       default [y] if [ETRAX_ARCH_V32 && ETRAX_SPI_MMC && SPI && SPI_MASTER && ARM_AMBA && EXPERIMENTAL && INTEGRATOR_IMPD1]
       default [y] if [ETRAX_ARCH_V32 && ETRAX_SPI_MMC && SPI && SPI_MASTER && ARM_AMBA && EXPERIMENTAL && ARCH_VERSATILE]
       inherited [ETRAX_ARCH_V32 && ETRAX_SPI_MMC && SPI && SPI_MASTER && ARM_AMBA && EXPERIMENTAL]
      }
      config SPI_PPC4xx tristate {
       prompt "PPC4xx SPI Controller" if [ETRAX_ARCH_V32 && ETRAX_SPI_MMC && SPI && PPC32 && 4xx && SPI_MASTER]
       depends on [PPC32 && 4xx && SPI_MASTER]
       select SPI_BITBANG if [ETRAX_ARCH_V32 && ETRAX_SPI_MMC && SPI && PPC32 && 4xx && SPI_MASTER]
       inherited [ETRAX_ARCH_V32 && ETRAX_SPI_MMC && SPI && PPC32 && 4xx && SPI_MASTER]
      }
      config SPI_PXA2XX tristate {
       prompt "PXA2xx SSP SPI master" if [ETRAX_ARCH_V32 && ETRAX_SPI_MMC && SPI && SPI_MASTER && ARCH_PXA && EXPERIMENTAL]
       depends on [ARCH_PXA && EXPERIMENTAL]
       select PXA_SSP if [ETRAX_ARCH_V32 && ETRAX_SPI_MMC && SPI && SPI_MASTER && ARCH_PXA && EXPERIMENTAL]
       inherited [ETRAX_ARCH_V32 && ETRAX_SPI_MMC && SPI && SPI_MASTER && ARCH_PXA && EXPERIMENTAL]
      }
      config SPI_S3C24XX tristate {
       prompt "Samsung S3C24XX series SPI" if [ETRAX_ARCH_V32 && ETRAX_SPI_MMC && SPI && SPI_MASTER && ARCH_S3C2410 && EXPERIMENTAL]
       depends on [ARCH_S3C2410 && EXPERIMENTAL]
       select SPI_BITBANG if [ETRAX_ARCH_V32 && ETRAX_SPI_MMC && SPI && SPI_MASTER && ARCH_S3C2410 && EXPERIMENTAL]
       inherited [ETRAX_ARCH_V32 && ETRAX_SPI_MMC && SPI && SPI_MASTER && ARCH_S3C2410 && EXPERIMENTAL]
       config SPI_S3C24XX_FIQ boolean {
        prompt "S3C24XX driver with FIQ pseudo-DMA" if [ETRAX_ARCH_V32 && ETRAX_SPI_MMC && SPI && SPI_MASTER && SPI_S3C24XX]
        depends on [SPI_S3C24XX]
        select FIQ if [ETRAX_ARCH_V32 && ETRAX_SPI_MMC && SPI && SPI_MASTER && SPI_S3C24XX]
        inherited [ETRAX_ARCH_V32 && ETRAX_SPI_MMC && SPI && SPI_MASTER && SPI_S3C24XX]
       }
      }
      config SPI_S3C24XX_GPIO tristate {
       prompt "Samsung S3C24XX series SPI by GPIO" if [ETRAX_ARCH_V32 && ETRAX_SPI_MMC && SPI && SPI_MASTER && ARCH_S3C2410 && EXPERIMENTAL]
       depends on [ARCH_S3C2410 && EXPERIMENTAL]
       select SPI_BITBANG if [ETRAX_ARCH_V32 && ETRAX_SPI_MMC && SPI && SPI_MASTER && ARCH_S3C2410 && EXPERIMENTAL]
       inherited [ETRAX_ARCH_V32 && ETRAX_SPI_MMC && SPI && SPI_MASTER && ARCH_S3C2410 && EXPERIMENTAL]
      }
      config SPI_S3C64XX tristate {
       prompt "Samsung S3C64XX series type SPI" if [ETRAX_ARCH_V32 && ETRAX_SPI_MMC && SPI && SPI_MASTER && ARCH_S3C64XX && EXPERIMENTAL]
       depends on [ARCH_S3C64XX && EXPERIMENTAL]
       select S3C64XX_DMA if [ETRAX_ARCH_V32 && ETRAX_SPI_MMC && SPI && SPI_MASTER && ARCH_S3C64XX && EXPERIMENTAL]
       inherited [ETRAX_ARCH_V32 && ETRAX_SPI_MMC && SPI && SPI_MASTER && ARCH_S3C64XX && EXPERIMENTAL]
      }
      config SPI_SH_MSIOF tristate {
       prompt "SuperH MSIOF SPI controller" if [ETRAX_ARCH_V32 && ETRAX_SPI_MMC && SPI && SPI_MASTER && SUPERH && HAVE_CLK]
       depends on [SUPERH && HAVE_CLK]
       select SPI_BITBANG if [ETRAX_ARCH_V32 && ETRAX_SPI_MMC && SPI && SPI_MASTER && SUPERH && HAVE_CLK]
       inherited [ETRAX_ARCH_V32 && ETRAX_SPI_MMC && SPI && SPI_MASTER && SUPERH && HAVE_CLK]
      }
      config SPI_SH_SCI tristate {
       prompt "SuperH SCI SPI controller" if [ETRAX_ARCH_V32 && ETRAX_SPI_MMC && SPI && SPI_MASTER && SUPERH]
       depends on [SUPERH]
       select SPI_BITBANG if [ETRAX_ARCH_V32 && ETRAX_SPI_MMC && SPI && SPI_MASTER && SUPERH]
       inherited [ETRAX_ARCH_V32 && ETRAX_SPI_MMC && SPI && SPI_MASTER && SUPERH]
      }
      config SPI_STMP3XXX tristate {
       prompt "Freescale STMP37xx/378x SPI/SSP controller" if [ETRAX_ARCH_V32 && ETRAX_SPI_MMC && SPI && ARCH_STMP3XXX && SPI_MASTER]
       depends on [ARCH_STMP3XXX && SPI_MASTER]
       inherited [ETRAX_ARCH_V32 && ETRAX_SPI_MMC && SPI && ARCH_STMP3XXX && SPI_MASTER]
      }
      config SPI_TXX9 tristate {
       prompt "Toshiba TXx9 SPI controller" if [ETRAX_ARCH_V32 && ETRAX_SPI_MMC && SPI && SPI_MASTER && GENERIC_GPIO && CPU_TX49XX]
       depends on [GENERIC_GPIO && CPU_TX49XX]
       inherited [ETRAX_ARCH_V32 && ETRAX_SPI_MMC && SPI && SPI_MASTER && GENERIC_GPIO && CPU_TX49XX]
      }
      config SPI_XILINX tristate {
       prompt "Xilinx SPI controller common module" if [ETRAX_ARCH_V32 && ETRAX_SPI_MMC && SPI && SPI_MASTER && HAS_IOMEM && EXPERIMENTAL]
       depends on [HAS_IOMEM && EXPERIMENTAL]
       select SPI_BITBANG if [ETRAX_ARCH_V32 && ETRAX_SPI_MMC && SPI && SPI_MASTER && HAS_IOMEM && EXPERIMENTAL]
       select SPI_XILINX_OF if [ETRAX_ARCH_V32 && ETRAX_SPI_MMC && SPI && SPI_MASTER && HAS_IOMEM && EXPERIMENTAL && (XILINX_VIRTEX || MICROBLAZE)]
       inherited [ETRAX_ARCH_V32 && ETRAX_SPI_MMC && SPI && SPI_MASTER && HAS_IOMEM && EXPERIMENTAL]
       config SPI_XILINX_OF tristate {
        prompt "Xilinx SPI controller OF device" if [ETRAX_ARCH_V32 && ETRAX_SPI_MMC && SPI && SPI_MASTER && SPI_XILINX && (XILINX_VIRTEX || MICROBLAZE)]
        depends on [SPI_XILINX && (XILINX_VIRTEX || MICROBLAZE)]
        inherited [ETRAX_ARCH_V32 && ETRAX_SPI_MMC && SPI && SPI_MASTER && SPI_XILINX && (XILINX_VIRTEX || MICROBLAZE)]
       }
       config SPI_XILINX_PLTFM tristate {
        prompt "Xilinx SPI controller platform device" if [ETRAX_ARCH_V32 && ETRAX_SPI_MMC && SPI && SPI_MASTER && SPI_XILINX]
        depends on [SPI_XILINX]
        inherited [ETRAX_ARCH_V32 && ETRAX_SPI_MMC && SPI && SPI_MASTER && SPI_XILINX]
       }
      }
      config SPI_NUC900 tristate {
       prompt "Nuvoton NUC900 series SPI" if [ETRAX_ARCH_V32 && ETRAX_SPI_MMC && SPI && SPI_MASTER && ARCH_W90X900 && EXPERIMENTAL]
       depends on [ARCH_W90X900 && EXPERIMENTAL]
       select SPI_BITBANG if [ETRAX_ARCH_V32 && ETRAX_SPI_MMC && SPI && SPI_MASTER && ARCH_W90X900 && EXPERIMENTAL]
       inherited [ETRAX_ARCH_V32 && ETRAX_SPI_MMC && SPI && SPI_MASTER && ARCH_W90X900 && EXPERIMENTAL]
      }
      config SPI_DESIGNWARE boolean {
       prompt "DesignWare SPI controller core support" if [ETRAX_ARCH_V32 && ETRAX_SPI_MMC && SPI && SPI_MASTER]
       depends on [SPI_MASTER]
       inherited [ETRAX_ARCH_V32 && ETRAX_SPI_MMC && SPI && SPI_MASTER]
       config SPI_DW_PCI tristate {
        prompt "PCI interface driver for DW SPI core" if [ETRAX_ARCH_V32 && ETRAX_SPI_MMC && SPI && SPI_MASTER && SPI_DESIGNWARE && PCI]
        depends on [SPI_DESIGNWARE && PCI]
        inherited [ETRAX_ARCH_V32 && ETRAX_SPI_MMC && SPI && SPI_MASTER && SPI_DESIGNWARE && PCI]
       }
      }
      config SPI_SPIDEV tristate {
       prompt "User mode SPI device driver support" if [ETRAX_ARCH_V32 && ETRAX_SPI_MMC && SPI && SPI_MASTER && EXPERIMENTAL]
       depends on [EXPERIMENTAL]
       inherited [ETRAX_ARCH_V32 && ETRAX_SPI_MMC && SPI && SPI_MASTER && EXPERIMENTAL]
      }
      config SPI_TLE62X0 tristate {
       prompt "Infineon TLE62X0 (for power switching)" if [ETRAX_ARCH_V32 && ETRAX_SPI_MMC && SPI && SPI_MASTER && SYSFS]
       depends on [SYSFS]
       inherited [ETRAX_ARCH_V32 && ETRAX_SPI_MMC && SPI && SPI_MASTER && SYSFS]
      }
     }
    }
   }
  }
 }
 config ETRAX_AXISFLASHMAP boolean {
  prompt "Axis flash-map support" if [ETRAX_ARCH_V32]
  depends on [ETRAX_ARCH_V32]
  select MTD if [ETRAX_ARCH_V32]
  select MTD_CFI if [ETRAX_ARCH_V32]
  select MTD_CFI_AMDSTD if [ETRAX_ARCH_V32]
  select MTD_JEDECPROBE if [ETRAX_ARCH_V32]
  select MTD_CHAR if [ETRAX_ARCH_V32]
  select MTD_BLOCK if [ETRAX_ARCH_V32]
  select MTD_PARTITIONS if [ETRAX_ARCH_V32]
  select MTD_CONCAT if [ETRAX_ARCH_V32]
  select MTD_COMPLEX_MAPPINGS if [ETRAX_ARCH_V32]
  prompt "Axis flash-map support" if []
  select MTD if []
  select MTD_CFI if []
  select MTD_CFI_AMDSTD if []
  select MTD_JEDECPROBE if [ETRAX_ARCH_V32]
  select MTD_CHAR if []
  select MTD_BLOCK if []
  select MTD_PARTITIONS if []
  select MTD_CONCAT if []
  select MTD_COMPLEX_MAPPINGS if []
 }
 config ETRAX_RTC boolean {
  prompt "Real Time Clock support" if [ETRAX_I2C]
  depends on [ETRAX_I2C]
  inherited [ETRAX_I2C]
  choice boolean {
   prompt "RTC chip" if [ETRAX_RTC]
   depends on [ETRAX_RTC]
   default [ETRAX_PCF8563] if [ETRAX_RTC && ETRAX_ARCH_V32]
   default [ETRAX_DS1302] if [ETRAX_RTC && ETRAX_ARCH_V10]
   config ETRAX_DS1302 boolean {
    depends on [ETRAX_ARCH_V10]
    prompt "DS1302" if [<choice> && ETRAX_ARCH_V10]
    inherited [<choice> && ETRAX_ARCH_V10]
   }
   config ETRAX_PCF8563 boolean {
    prompt "PCF8563" if [<choice>]
    inherited [<choice>]
   }
  }
 }
 config ETRAX_SYNCHRONOUS_SERIAL boolean {
  prompt "Synchronous serial-port support" if [ETRAX_ARCH_V32]
  depends on [ETRAX_ARCH_V32]
  prompt "Synchronous serial-port support" if []
  config ETRAX_SYNCHRONOUS_SERIAL_PORT0 boolean {
   prompt "Synchronous serial port 0 enabled" if [ETRAX_ARCH_V32 && ETRAX_SYNCHRONOUS_SERIAL]
   depends on [ETRAX_SYNCHRONOUS_SERIAL]
   prompt "Synchronous serial port 0 enabled" if [ETRAX_SYNCHRONOUS_SERIAL]
   depends on [ETRAX_SYNCHRONOUS_SERIAL]
   inherited [ETRAX_SYNCHRONOUS_SERIAL]
   config ETRAX_SYNCHRONOUS_SERIAL0_DMA boolean {
    prompt "Enable DMA on synchronous serial port 0." if [ETRAX_ARCH_V32 && ETRAX_SYNCHRONOUS_SERIAL_PORT0]
    depends on [ETRAX_SYNCHRONOUS_SERIAL_PORT0]
    prompt "Enable DMA on synchronous serial port 0." if [ETRAX_SYNCHRONOUS_SERIAL_PORT0]
    depends on [ETRAX_SYNCHRONOUS_SERIAL_PORT0]
    inherited [ETRAX_SYNCHRONOUS_SERIAL_PORT0]
   }
  }
  config ETRAX_SYNCHRONOUS_SERIAL_PORT1 boolean {
   prompt "Synchronous serial port 1 enabled" if [ETRAX_ARCH_V32 && ETRAX_SYNCHRONOUS_SERIAL && ETRAXFS]
   depends on [ETRAX_SYNCHRONOUS_SERIAL && ETRAXFS]
   prompt "Synchronous serial port 1 enabled" if [ETRAX_SYNCHRONOUS_SERIAL && (ETRAXFS || ETRAX_ARCH_V10)]
   depends on [ETRAX_SYNCHRONOUS_SERIAL && (ETRAXFS || ETRAX_ARCH_V10)]
   inherited [ETRAX_SYNCHRONOUS_SERIAL && (ETRAXFS || ETRAX_ARCH_V10)]
   config ETRAX_SYNCHRONOUS_SERIAL1_DMA boolean {
    prompt "Enable DMA on synchronous serial port 1." if [ETRAX_ARCH_V32 && ETRAX_SYNCHRONOUS_SERIAL_PORT1]
    depends on [ETRAX_SYNCHRONOUS_SERIAL_PORT1]
    prompt "Enable DMA on synchronous serial port 1." if [ETRAX_SYNCHRONOUS_SERIAL_PORT1]
    depends on [ETRAX_SYNCHRONOUS_SERIAL_PORT1]
    inherited [ETRAX_SYNCHRONOUS_SERIAL_PORT1]
   }
  }
 }
 choice boolean {
  prompt "Network LED behavior" if [ETRAX_ETHERNET]
  depends on [ETRAX_ETHERNET]
  default [ETRAX_NETWORK_LED_ON_WHEN_ACTIVITY] if [ETRAX_ETHERNET]
  config ETRAX_NETWORK_LED_ON_WHEN_LINK boolean {
   prompt "LED_on_when_link" if [<choice>]
   inherited [<choice>]
  }
  config ETRAX_NETWORK_LED_ON_WHEN_ACTIVITY boolean {
   prompt "LED_on_when_activity" if [<choice>]
   inherited [<choice>]
  }
 }
 choice boolean {
  prompt "Ser0 DMA out channel" if [ETRAX_SERIAL_PORT0]
  depends on [ETRAX_SERIAL_PORT0]
  default [ETRAX_SERIAL_PORT0_DMA6_OUT] if [ETRAX_SERIAL_PORT0 && ETRAX_ARCH_V32]
  default [ETRAX_SERIAL_PORT0_NO_DMA_OUT] if [ETRAX_SERIAL_PORT0 && ETRAX_ARCH_V10]
  config ETRAX_SERIAL_PORT0_NO_DMA_OUT boolean {
   prompt "Ser0 uses no DMA for output" if [<choice>]
   inherited [<choice>]
  }
  config ETRAX_SERIAL_PORT0_DMA6_OUT boolean {
   prompt "Ser0 uses DMA6 for output" if [<choice> && ETRAXFS]
   depends on [ETRAXFS]
   inherited [<choice> && ETRAXFS]
  }
  config ETRAX_SERIAL_PORT0_DMA0_OUT boolean {
   prompt "Ser0 uses DMA0 for output" if [<choice> && CRIS_MACH_ARTPEC3]
   depends on [CRIS_MACH_ARTPEC3]
   inherited [<choice> && CRIS_MACH_ARTPEC3]
  }
 }
 choice boolean {
  prompt "Ser0 DMA in channel " if [ETRAX_SERIAL_PORT0]
  depends on [ETRAX_SERIAL_PORT0]
  default [ETRAX_SERIAL_PORT0_NO_DMA_IN] if [ETRAX_SERIAL_PORT0 && ETRAX_ARCH_V32]
  default [ETRAX_SERIAL_PORT0_DMA7_IN] if [ETRAX_SERIAL_PORT0 && ETRAX_ARCH_V10]
  config ETRAX_SERIAL_PORT0_NO_DMA_IN boolean {
   prompt "Ser0 uses no DMA for input" if [<choice>]
   inherited [<choice>]
  }
  config ETRAX_SERIAL_PORT0_DMA7_IN boolean {
   prompt "Ser0 uses DMA7 for input" if [<choice> && ETRAXFS]
   depends on [ETRAXFS]
   inherited [<choice> && ETRAXFS]
  }
  config ETRAX_SERIAL_PORT0_DMA1_IN boolean {
   prompt "Ser0 uses DMA1 for input" if [<choice> && CRIS_MACH_ARTPEC3]
   depends on [CRIS_MACH_ARTPEC3]
   inherited [<choice> && CRIS_MACH_ARTPEC3]
  }
 }
 choice boolean {
  prompt "Ser1 DMA in channel " if [ETRAX_SERIAL_PORT1]
  depends on [ETRAX_SERIAL_PORT1]
  default [ETRAX_SERIAL_PORT1_NO_DMA_IN] if [ETRAX_SERIAL_PORT1 && ETRAX_ARCH_V32]
  default [ETRAX_SERIAL_PORT1_DMA9_IN] if [ETRAX_SERIAL_PORT1 && ETRAX_ARCH_V10]
  config ETRAX_SERIAL_PORT1_NO_DMA_IN boolean {
   prompt "Ser1 uses no DMA for input" if [<choice>]
   inherited [<choice>]
  }
  config ETRAX_SERIAL_PORT1_DMA5_IN boolean {
   prompt "Ser1 uses DMA5 for input" if [<choice> && ETRAX_ARCH_V32]
   depends on [ETRAX_ARCH_V32]
   inherited [<choice> && ETRAX_ARCH_V32]
  }
  config ETRAX_SERIAL_PORT1_DMA9_IN boolean {
   depends on [ETRAX_ARCH_V10]
   prompt "Ser1 uses DMA9 for input" if [<choice> && ETRAX_ARCH_V10]
   inherited [<choice> && ETRAX_ARCH_V10]
  }
 }
 choice boolean {
  prompt "Ser1 DMA out channel" if [ETRAX_SERIAL_PORT1]
  depends on [ETRAX_SERIAL_PORT1]
  default [ETRAX_SERIAL_PORT1_NO_DMA_OUT] if [ETRAX_SERIAL_PORT1 && ETRAX_ARCH_V32]
  default [ETRAX_SERIAL_PORT1_DMA8_OUT] if [ETRAX_SERIAL_PORT1 && ETRAX_ARCH_V10]
  config ETRAX_SERIAL_PORT1_NO_DMA_OUT boolean {
   prompt "Ser1 uses no DMA for output" if [<choice>]
   inherited [<choice>]
  }
  config ETRAX_SERIAL_PORT1_DMA8_OUT boolean {
   depends on [ETRAX_ARCH_V10]
   prompt "Ser1 uses DMA8 for output" if [<choice> && ETRAX_ARCH_V10]
   inherited [<choice> && ETRAX_ARCH_V10]
  }
  config ETRAX_SERIAL_PORT1_DMA4_OUT boolean {
   depends on [ETRAX_ARCH_V32]
   prompt "Ser1 uses DMA4 for output" if [<choice> && ETRAX_ARCH_V32]
   inherited [<choice> && ETRAX_ARCH_V32]
  }
 }
 choice boolean {
  prompt "Ser2 DMA out channel" if [ETRAX_SERIAL_PORT2]
  depends on [ETRAX_SERIAL_PORT2]
  default [ETRAX_SERIAL_PORT2_NO_DMA_OUT] if [ETRAX_SERIAL_PORT2 && ETRAX_ARCH_V32]
  default [ETRAX_SERIAL_PORT2_DMA2_OUT] if [ETRAX_SERIAL_PORT2 && ETRAX_ARCH_V10]
  config ETRAX_SERIAL_PORT2_NO_DMA_OUT boolean {
   prompt "Ser2 uses no DMA for output" if [<choice>]
   inherited [<choice>]
  }
  config ETRAX_SERIAL_PORT2_DMA2_OUT boolean {
   prompt "Ser2 uses DMA2 for output" if [<choice> && (ETRAXFS || ETRAX_ARCH_V10)]
   depends on [ETRAXFS || ETRAX_ARCH_V10]
   inherited [<choice> && (ETRAXFS || ETRAX_ARCH_V10)]
  }
  config ETRAX_SERIAL_PORT2_DMA6_OUT boolean {
   prompt "Ser2 uses DMA6 for output" if [<choice> && CRIS_MACH_ARTPEC3]
   depends on [CRIS_MACH_ARTPEC3]
   inherited [<choice> && CRIS_MACH_ARTPEC3]
  }
 }
 choice boolean {
  prompt "Ser2 DMA in channel" if [ETRAX_SERIAL_PORT2]
  depends on [ETRAX_SERIAL_PORT2]
  default [ETRAX_SERIAL_PORT2_NO_DMA_IN] if [ETRAX_SERIAL_PORT2 && ETRAX_ARCH_V32]
  default [ETRAX_SERIAL_PORT2_DMA3_IN] if [ETRAX_SERIAL_PORT2 && ETRAX_ARCH_V10]
  config ETRAX_SERIAL_PORT2_NO_DMA_IN boolean {
   prompt "Ser2 uses no DMA for input" if [<choice>]
   inherited [<choice>]
  }
  config ETRAX_SERIAL_PORT2_DMA3_IN boolean {
   prompt "Ser2 uses DMA3 for input" if [<choice> && (ETRAXFS || ETRAX_ARCH_V10)]
   depends on [ETRAXFS || ETRAX_ARCH_V10]
   inherited [<choice> && (ETRAXFS || ETRAX_ARCH_V10)]
  }
  config ETRAX_SERIAL_PORT2_DMA7_IN boolean {
   prompt "Ser2 uses DMA7 for input" if [<choice> && CRIS_MACH_ARTPEC3]
   depends on [CRIS_MACH_ARTPEC3]
   inherited [<choice> && CRIS_MACH_ARTPEC3]
  }
 }
 choice boolean {
  prompt "Ser3 DMA in channel" if [ETRAX_SERIAL_PORT3]
  depends on [ETRAX_SERIAL_PORT3]
  default [ETRAX_SERIAL_PORT3_NO_DMA_IN] if [ETRAX_SERIAL_PORT3 && ETRAX_ARCH_V32]
  default [ETRAX_SERIAL_PORT3_DMA5_IN] if [ETRAX_SERIAL_PORT3 && ETRAX_ARCH_V10]
  config ETRAX_SERIAL_PORT3_NO_DMA_IN boolean {
   prompt "Ser3 uses no DMA for input" if [<choice>]
   inherited [<choice>]
  }
  config ETRAX_SERIAL_PORT3_DMA5_IN boolean {
   depends on [ETRAX_ARCH_V10]
   prompt "DMA 5" if [<choice> && ETRAX_ARCH_V10]
   inherited [<choice> && ETRAX_ARCH_V10]
  }
  config ETRAX_SERIAL_PORT3_DMA9_IN boolean {
   prompt "Ser3 uses DMA9 for input" if [<choice> && ETRAXFS]
   depends on [ETRAXFS]
   inherited [<choice> && ETRAXFS]
  }
  config ETRAX_SERIAL_PORT3_DMA3_IN boolean {
   prompt "Ser3 uses DMA3 for input" if [<choice> && CRIS_MACH_ARTPEC3]
   depends on [CRIS_MACH_ARTPEC3]
   inherited [<choice> && CRIS_MACH_ARTPEC3]
  }
 }
 choice boolean {
  prompt "Ser3 DMA out channel" if [ETRAX_SERIAL_PORT3]
  depends on [ETRAX_SERIAL_PORT3]
  default [ETRAX_SERIAL_PORT3_NO_DMA_OUT] if [ETRAX_SERIAL_PORT3 && ETRAX_ARCH_V32]
  default [ETRAX_SERIAL_PORT3_DMA4_OUT] if [ETRAX_SERIAL_PORT3 && ETRAX_ARCH_V10]
  config ETRAX_SERIAL_PORT3_NO_DMA_OUT boolean {
   prompt "Ser3 uses no DMA for output" if [<choice>]
   inherited [<choice>]
  }
  config ETRAX_SERIAL_PORT3_DMA4_OUT boolean {
   depends on [ETRAX_ARCH_V10]
   prompt "DMA 4" if [<choice> && ETRAX_ARCH_V10]
   inherited [<choice> && ETRAX_ARCH_V10]
  }
  config ETRAX_SERIAL_PORT3_DMA8_OUT boolean {
   prompt "Ser3 uses DMA8 for output" if [<choice> && ETRAXFS]
   depends on [ETRAXFS]
   inherited [<choice> && ETRAXFS]
  }
  config ETRAX_SERIAL_PORT3_DMA2_OUT boolean {
   prompt "Ser3 uses DMA2 for output" if [<choice> && CRIS_MACH_ARTPEC3]
   depends on [CRIS_MACH_ARTPEC3]
   inherited [<choice> && CRIS_MACH_ARTPEC3]
  }
 }
}
menu "Generic Driver Options" {
 config UEVENT_HELPER_PATH string {
  prompt "path to uevent helper" if [HOTPLUG]
  depends on [HOTPLUG]
  default ["/sbin/hotplug"] if [HOTPLUG]
  inherited [HOTPLUG]
 }
 config DEVTMPFS boolean {
  prompt "Create a kernel maintained /dev tmpfs (EXPERIMENTAL)" if [HOTPLUG && SHMEM && TMPFS]
  depends on [HOTPLUG && SHMEM && TMPFS]
  inherited [HOTPLUG && SHMEM && TMPFS]
  config DEVTMPFS_MOUNT boolean {
   prompt "Automount devtmpfs at /dev" if [DEVTMPFS]
   depends on [DEVTMPFS]
   inherited [DEVTMPFS]
  }
 }
 config STANDALONE boolean {
  prompt "Select only drivers that don't need compile-time external firmware" if [EXPERIMENTAL]
  default [y] if []
 }
 config PREVENT_FIRMWARE_BUILD boolean {
  prompt "Prevent firmware from being built" if []
  default [y] if []
 }
 config FW_LOADER tristate {
  prompt "Userspace firmware loading support" if [HOTPLUG && EMBEDDED]
  depends on [HOTPLUG]
  default [y] if [HOTPLUG]
  inherited [HOTPLUG]
  config FIRMWARE_IN_KERNEL boolean {
   prompt "Include in-kernel firmware blobs in kernel binary" if [FW_LOADER]
   depends on [FW_LOADER]
   default [y] if [FW_LOADER]
   inherited [FW_LOADER]
  }
  config EXTRA_FIRMWARE string {
   prompt "External firmware blobs to build into the kernel binary" if [FW_LOADER]
   depends on [FW_LOADER]
   inherited [FW_LOADER]
  }
 }
 config EXTRA_FIRMWARE_DIR string {
  prompt "Firmware blobs root directory" if [EXTRA_FIRMWARE!=""]
  depends on [EXTRA_FIRMWARE!=""]
  default ["firmware"] if [EXTRA_FIRMWARE!=""]
  inherited [EXTRA_FIRMWARE!=""]
 }
 config DEBUG_DRIVER boolean {
  prompt "Driver Core verbose debug messages" if [DEBUG_KERNEL]
  depends on [DEBUG_KERNEL]
  inherited [DEBUG_KERNEL]
 }
 config DEBUG_DEVRES boolean {
  prompt "Managed device resources verbose debug messages" if [DEBUG_KERNEL]
  depends on [DEBUG_KERNEL]
  inherited [DEBUG_KERNEL]
 }
 config SYS_HYPERVISOR boolean {
  default [n] if []
 }
}
menuconfig MTD tristate {
 prompt "Memory Technology Device (MTD) support" if [HAS_IOMEM]
 depends on [HAS_IOMEM]
 inherited [HAS_IOMEM]
 if [MTD] {
  config MTD_DEBUG boolean {
   prompt "Debugging" if [MTD]
   inherited [MTD]
   config MTD_DEBUG_VERBOSE integer {
    prompt "Debugging verbosity (0 = quiet, 3 = noisy)" if [MTD && MTD_DEBUG]
    depends on [MTD_DEBUG]
    default [0] if [MTD && MTD_DEBUG]
    inherited [MTD && MTD_DEBUG]
   }
  }
  config MTD_TESTS tristate {
   prompt "MTD tests support" if [MTD && m && <choice>]
   depends on [m]
   inherited [MTD && m && <choice>]
  }
  config MTD_CONCAT tristate {
   prompt "MTD concatenating support" if [MTD]
   inherited [MTD]
  }
  config MTD_PARTITIONS boolean {
   prompt "MTD partitioning support" if [MTD]
   inherited [MTD]
   config MTD_REDBOOT_PARTS tristate {
    prompt "RedBoot partition table parsing" if [MTD && MTD_PARTITIONS]
    depends on [MTD_PARTITIONS]
    inherited [MTD && MTD_PARTITIONS]
    config MTD_REDBOOT_DIRECTORY_BLOCK integer {
     prompt "Location of RedBoot partition table" if [MTD && MTD_REDBOOT_PARTS]
     depends on [MTD_REDBOOT_PARTS]
     default [-1] if [MTD && MTD_REDBOOT_PARTS]
     inherited [MTD && MTD_REDBOOT_PARTS]
    }
    config MTD_REDBOOT_PARTS_UNALLOCATED boolean {
     prompt "Include unallocated flash regions" if [MTD && MTD_REDBOOT_PARTS]
     depends on [MTD_REDBOOT_PARTS]
     inherited [MTD && MTD_REDBOOT_PARTS]
    }
    config MTD_REDBOOT_PARTS_READONLY boolean {
     prompt "Force read-only for RedBoot system images" if [MTD && MTD_REDBOOT_PARTS]
     depends on [MTD_REDBOOT_PARTS]
     inherited [MTD && MTD_REDBOOT_PARTS]
    }
   }
   config MTD_CMDLINE_PARTS boolean {
    prompt "Command line partition table parsing" if [MTD_PARTITIONS && MTD="y"]
    depends on [MTD_PARTITIONS="y" && MTD="y"]
    inherited [MTD_PARTITIONS && MTD="y"]
   }
   config MTD_AFS_PARTS tristate {
    prompt "ARM Firmware Suite partition parsing" if [MTD && ARM && MTD_PARTITIONS]
    depends on [ARM && MTD_PARTITIONS]
    inherited [MTD && ARM && MTD_PARTITIONS]
   }
   config MTD_OF_PARTS tristate {
    prompt "Flash partition map based on OF description" if [MTD && (MICROBLAZE || PPC_OF) && MTD_PARTITIONS]
    depends on [(MICROBLAZE || PPC_OF) && MTD_PARTITIONS]
    inherited [MTD && (MICROBLAZE || PPC_OF) && MTD_PARTITIONS]
   }
   config MTD_AR7_PARTS tristate {
    prompt "TI AR7 partitioning support" if [MTD && MTD_PARTITIONS]
    depends on [MTD_PARTITIONS]
    inherited [MTD && MTD_PARTITIONS]
   }
  }
  config MTD_CHAR tristate {
   prompt "Direct char device access to MTD devices" if [MTD]
   inherited [MTD]
  }
  config HAVE_MTD_OTP boolean {
   inherited [MTD]
  }
  config MTD_BLKDEVS tristate {
   prompt "Common interface to block layer for MTD 'translation layers'" if [MTD && BLOCK]
   depends on [BLOCK]
   default [n] if [MTD && BLOCK]
   inherited [MTD && BLOCK]
  }
  config MTD_BLOCK tristate {
   prompt "Caching block device access to MTD devices" if [MTD && BLOCK]
   depends on [BLOCK]
   select MTD_BLKDEVS if [MTD && BLOCK]
   inherited [MTD && BLOCK]
   config MTD_BLOCK_RO tristate {
    prompt "Readonly block device access to MTD devices" if [MTD && MTD_BLOCK!="y" && BLOCK]
    depends on [MTD_BLOCK!="y" && BLOCK]
    select MTD_BLKDEVS if [MTD && MTD_BLOCK!="y" && BLOCK]
    inherited [MTD && MTD_BLOCK!="y" && BLOCK]
   }
  }
  config FTL tristate {
   prompt "FTL (Flash Translation Layer) support" if [MTD && BLOCK]
   depends on [BLOCK]
   select MTD_BLKDEVS if [MTD && BLOCK]
   inherited [MTD && BLOCK]
  }
  config NFTL tristate {
   prompt "NFTL (NAND Flash Translation Layer) support" if [MTD && BLOCK]
   depends on [BLOCK]
   select MTD_BLKDEVS if [MTD && BLOCK]
   inherited [MTD && BLOCK]
   config NFTL_RW boolean {
    prompt "Write support for NFTL" if [MTD && NFTL]
    depends on [NFTL]
    inherited [MTD && NFTL]
   }
  }
  config INFTL tristate {
   prompt "INFTL (Inverse NAND Flash Translation Layer) support" if [MTD && BLOCK]
   depends on [BLOCK]
   select MTD_BLKDEVS if [MTD && BLOCK]
   inherited [MTD && BLOCK]
  }
  config RFD_FTL tristate {
   prompt "Resident Flash Disk (Flash Translation Layer) support" if [MTD && BLOCK]
   depends on [BLOCK]
   select MTD_BLKDEVS if [MTD && BLOCK]
   inherited [MTD && BLOCK]
  }
  config SSFDC tristate {
   prompt "NAND SSFDC (SmartMedia) read only translation layer" if [MTD && BLOCK]
   depends on [BLOCK]
   select MTD_BLKDEVS if [MTD && BLOCK]
   inherited [MTD && BLOCK]
  }
  config MTD_OOPS tristate {
   prompt "Log panic/oops to an MTD buffer" if [MTD]
   depends on [MTD]
   inherited [MTD]
  }
  menu "RAM/ROM/Flash chip drivers" {
   depends on [MTD]
   config MTD_CFI tristate {
    prompt "Detect flash chips by Common Flash Interface (CFI) probe" if [MTD]
    select MTD_GEN_PROBE if [MTD]
    select MTD_CFI_UTIL if [MTD]
    inherited [MTD]
   }
   config MTD_JEDECPROBE tristate {
    prompt "Detect non-CFI AMD/JEDEC-compatible flash chips" if [MTD]
    select MTD_GEN_PROBE if [MTD]
    inherited [MTD]
   }
   config MTD_GEN_PROBE tristate {
    inherited [MTD]
   }
   config MTD_CFI_ADV_OPTIONS boolean {
    prompt "Flash chip driver advanced configuration options" if [MTD && MTD_GEN_PROBE]
    depends on [MTD_GEN_PROBE]
    inherited [MTD && MTD_GEN_PROBE]
    choice boolean {
     prompt "Flash cmd/query data swapping" if [MTD && MTD_CFI_ADV_OPTIONS]
     depends on [MTD_CFI_ADV_OPTIONS]
     default [MTD_CFI_NOSWAP] if [MTD && MTD_CFI_ADV_OPTIONS]
     config MTD_CFI_NOSWAP boolean {
      prompt "NO" if [<choice>]
      inherited [<choice>]
     }
     config MTD_CFI_BE_BYTE_SWAP boolean {
      prompt "BIG_ENDIAN_BYTE" if [<choice>]
      inherited [<choice>]
     }
     config MTD_CFI_LE_BYTE_SWAP boolean {
      prompt "LITTLE_ENDIAN_BYTE" if [<choice>]
      inherited [<choice>]
     }
    }
    config MTD_CFI_GEOMETRY boolean {
     prompt "Specific CFI Flash geometry selection" if [MTD && MTD_CFI_ADV_OPTIONS]
     depends on [MTD_CFI_ADV_OPTIONS]
     inherited [MTD && MTD_CFI_ADV_OPTIONS]
     config MTD_MAP_BANK_WIDTH_1 boolean {
      prompt "Support  8-bit buswidth" if [MTD && MTD_CFI_GEOMETRY]
      default [y] if [MTD]
      inherited [MTD]
     }
     config MTD_MAP_BANK_WIDTH_2 boolean {
      prompt "Support 16-bit buswidth" if [MTD && MTD_CFI_GEOMETRY]
      default [y] if [MTD]
      inherited [MTD]
     }
     config MTD_MAP_BANK_WIDTH_4 boolean {
      prompt "Support 32-bit buswidth" if [MTD && MTD_CFI_GEOMETRY]
      default [y] if [MTD]
      inherited [MTD]
     }
     config MTD_MAP_BANK_WIDTH_8 boolean {
      prompt "Support 64-bit buswidth" if [MTD && MTD_CFI_GEOMETRY]
      default [n] if [MTD]
      inherited [MTD]
     }
     config MTD_MAP_BANK_WIDTH_16 boolean {
      prompt "Support 128-bit buswidth" if [MTD && MTD_CFI_GEOMETRY]
      default [n] if [MTD]
      inherited [MTD]
     }
     config MTD_MAP_BANK_WIDTH_32 boolean {
      prompt "Support 256-bit buswidth" if [MTD && MTD_CFI_GEOMETRY]
      default [n] if [MTD]
      inherited [MTD]
     }
     config MTD_CFI_I1 boolean {
      prompt "Support 1-chip flash interleave" if [MTD && MTD_CFI_GEOMETRY]
      default [y] if [MTD]
      inherited [MTD]
     }
     config MTD_CFI_I2 boolean {
      prompt "Support 2-chip flash interleave" if [MTD && MTD_CFI_GEOMETRY]
      default [y] if [MTD]
      inherited [MTD]
     }
     config MTD_CFI_I4 boolean {
      prompt "Support 4-chip flash interleave" if [MTD && MTD_CFI_GEOMETRY]
      default [n] if [MTD]
      inherited [MTD]
     }
     config MTD_CFI_I8 boolean {
      prompt "Support 8-chip flash interleave" if [MTD && MTD_CFI_GEOMETRY]
      default [n] if [MTD]
      inherited [MTD]
     }
    }
    config MTD_OTP boolean {
     prompt "Protection Registers aka one-time programmable (OTP) bits" if [MTD && MTD_CFI_ADV_OPTIONS]
     depends on [MTD_CFI_ADV_OPTIONS]
     select HAVE_MTD_OTP if [MTD && MTD_CFI_ADV_OPTIONS]
     default [n] if [MTD && MTD_CFI_ADV_OPTIONS]
     inherited [MTD && MTD_CFI_ADV_OPTIONS]
    }
   }
   config MTD_CFI_INTELEXT tristate {
    prompt "Support for Intel/Sharp flash chips" if [MTD && MTD_GEN_PROBE]
    depends on [MTD_GEN_PROBE]
    select MTD_CFI_UTIL if [MTD && MTD_GEN_PROBE]
    inherited [MTD && MTD_GEN_PROBE]
   }
   config MTD_CFI_AMDSTD tristate {
    prompt "Support for AMD/Fujitsu/Spansion flash chips" if [MTD && MTD_GEN_PROBE]
    depends on [MTD_GEN_PROBE]
    select MTD_CFI_UTIL if [MTD && MTD_GEN_PROBE]
    inherited [MTD && MTD_GEN_PROBE]
   }
   config MTD_CFI_STAA tristate {
    prompt "Support for ST (Advanced Architecture) flash chips" if [MTD && MTD_GEN_PROBE]
    depends on [MTD_GEN_PROBE]
    select MTD_CFI_UTIL if [MTD && MTD_GEN_PROBE]
    inherited [MTD && MTD_GEN_PROBE]
   }
   config MTD_CFI_UTIL tristate {
    inherited [MTD]
   }
   config MTD_RAM tristate {
    prompt "Support for RAM chips in bus mapping" if [MTD]
    inherited [MTD]
   }
   config MTD_ROM tristate {
    prompt "Support for ROM chips in bus mapping" if [MTD]
    inherited [MTD]
   }
   config MTD_ABSENT tristate {
    prompt "Support for absent chips in bus mapping" if [MTD]
    inherited [MTD]
   }
   config MTD_XIP boolean {
    prompt "XIP aware MTD support" if [MTD && !SMP && (MTD_CFI_INTELEXT || MTD_CFI_AMDSTD) && EXPERIMENTAL && ARCH_MTD_XIP]
    depends on [!SMP && (MTD_CFI_INTELEXT || MTD_CFI_AMDSTD) && EXPERIMENTAL && ARCH_MTD_XIP]
    default [y] if [MTD && !SMP && (MTD_CFI_INTELEXT || MTD_CFI_AMDSTD) && EXPERIMENTAL && ARCH_MTD_XIP && XIP_KERNEL]
    inherited [MTD && !SMP && (MTD_CFI_INTELEXT || MTD_CFI_AMDSTD) && EXPERIMENTAL && ARCH_MTD_XIP]
   }
  }
  menu "Mapping drivers for chip access" {
   depends on [MTD]
   config MTD_COMPLEX_MAPPINGS boolean {
    prompt "Support non-linear mappings of flash chips" if [MTD]
    inherited [MTD]
   }
   config MTD_PHYSMAP tristate {
    prompt "Flash device in physical memory map" if [MTD && (MTD_CFI || MTD_JEDECPROBE || MTD_ROM || MTD_LPDDR)]
    depends on [MTD_CFI || MTD_JEDECPROBE || MTD_ROM || MTD_LPDDR]
    inherited [MTD && (MTD_CFI || MTD_JEDECPROBE || MTD_ROM || MTD_LPDDR)]
    config MTD_PHYSMAP_COMPAT boolean {
     prompt "Physmap compat support" if [MTD && MTD_PHYSMAP]
     depends on [MTD_PHYSMAP]
     default [n] if [MTD && MTD_PHYSMAP]
     inherited [MTD && MTD_PHYSMAP]
     config MTD_PHYSMAP_START hex {
      prompt "Physical start address of flash mapping" if [MTD && MTD_PHYSMAP_COMPAT]
      depends on [MTD_PHYSMAP_COMPAT]
      default [0x8000000] if [MTD && MTD_PHYSMAP_COMPAT]
      inherited [MTD && MTD_PHYSMAP_COMPAT]
     }
     config MTD_PHYSMAP_LEN hex {
      prompt "Physical length of flash mapping" if [MTD && MTD_PHYSMAP_COMPAT]
      depends on [MTD_PHYSMAP_COMPAT]
      default [0] if [MTD && MTD_PHYSMAP_COMPAT]
      inherited [MTD && MTD_PHYSMAP_COMPAT]
     }
     config MTD_PHYSMAP_BANKWIDTH integer {
      prompt "Bank width in octets" if [MTD && MTD_PHYSMAP_COMPAT]
      depends on [MTD_PHYSMAP_COMPAT]
      default [2] if [MTD && MTD_PHYSMAP_COMPAT]
      inherited [MTD && MTD_PHYSMAP_COMPAT]
     }
    }
   }
   config MTD_PHYSMAP_OF tristate {
    prompt "Flash device in physical memory map based on OF description" if [MTD && (MICROBLAZE || PPC_OF) && (MTD_CFI || MTD_JEDECPROBE || MTD_ROM)]
    depends on [(MICROBLAZE || PPC_OF) && (MTD_CFI || MTD_JEDECPROBE || MTD_ROM)]
    inherited [MTD && (MICROBLAZE || PPC_OF) && (MTD_CFI || MTD_JEDECPROBE || MTD_ROM)]
   }
   config MTD_PMC_MSP_EVM tristate {
    prompt "CFI Flash device mapped on PMC-Sierra MSP" if [MTD && PMC_MSP && MTD_CFI]
    depends on [PMC_MSP && MTD_CFI]
    select MTD_PARTITIONS if [MTD && PMC_MSP && MTD_CFI]
    inherited [MTD && PMC_MSP && MTD_CFI]
    choice boolean {
     prompt "Maximum mappable memory available for flash IO" if [MTD && MTD_PMC_MSP_EVM]
     depends on [MTD_PMC_MSP_EVM]
     default [MSP_FLASH_MAP_LIMIT_32M] if [MTD && MTD_PMC_MSP_EVM]
     config MSP_FLASH_MAP_LIMIT_32M boolean {
      prompt "32M" if [<choice>]
      inherited [<choice>]
     }
    }
   }
   config MSP_FLASH_MAP_LIMIT hex {
    default [0x02000000] if [MTD && MSP_FLASH_MAP_LIMIT_32M]
    depends on [MSP_FLASH_MAP_LIMIT_32M]
    inherited [MTD && MSP_FLASH_MAP_LIMIT_32M]
   }
   config MTD_SUN_UFLASH tristate {
    prompt "Sun Microsystems userflash support" if [MTD && SPARC && MTD_CFI && PCI]
    depends on [SPARC && MTD_CFI && PCI]
    inherited [MTD && SPARC && MTD_CFI && PCI]
   }
   config MTD_SC520CDP tristate {
    prompt "CFI Flash device mapped on AMD SC520 CDP" if [MTD && X86 && MTD_CFI && MTD_CONCAT]
    depends on [X86 && MTD_CFI && MTD_CONCAT]
    inherited [MTD && X86 && MTD_CFI && MTD_CONCAT]
   }
   config MTD_NETSC520 tristate {
    prompt "CFI Flash device mapped on AMD NetSc520" if [MTD && X86 && MTD_CFI && MTD_PARTITIONS]
    depends on [X86 && MTD_CFI && MTD_PARTITIONS]
    inherited [MTD && X86 && MTD_CFI && MTD_PARTITIONS]
   }
   config MTD_TS5500 tristate {
    prompt "JEDEC Flash device mapped on Technologic Systems TS-5500" if [MTD && X86]
    depends on [X86]
    select MTD_PARTITIONS if [MTD && X86]
    select MTD_JEDECPROBE if [MTD && X86]
    select MTD_CFI_AMDSTD if [MTD && X86]
    inherited [MTD && X86]
   }
   config MTD_SBC_GXX tristate {
    prompt "CFI Flash device mapped on Arcom SBC-GXx boards" if [MTD && X86 && MTD_CFI_INTELEXT && MTD_PARTITIONS && MTD_COMPLEX_MAPPINGS]
    depends on [X86 && MTD_CFI_INTELEXT && MTD_PARTITIONS && MTD_COMPLEX_MAPPINGS]
    inherited [MTD && X86 && MTD_CFI_INTELEXT && MTD_PARTITIONS && MTD_COMPLEX_MAPPINGS]
   }
   config MTD_PXA2XX tristate {
    prompt "CFI Flash device mapped on Intel XScale PXA2xx based boards" if [MTD && (PXA25x || PXA27x) && MTD_CFI_INTELEXT]
    depends on [(PXA25x || PXA27x) && MTD_CFI_INTELEXT]
    select MTD_PARTITIONS if [MTD && (PXA25x || PXA27x) && MTD_CFI_INTELEXT]
    inherited [MTD && (PXA25x || PXA27x) && MTD_CFI_INTELEXT]
   }
   config MTD_OCTAGON tristate {
    prompt "JEDEC Flash device mapped on Octagon 5066 SBC" if [MTD && X86 && MTD_JEDEC && MTD_COMPLEX_MAPPINGS]
    depends on [X86 && MTD_JEDEC && MTD_COMPLEX_MAPPINGS]
    inherited [MTD && X86 && MTD_JEDEC && MTD_COMPLEX_MAPPINGS]
   }
   config MTD_VMAX tristate {
    prompt "JEDEC Flash device mapped on Tempustech VMAX SBC301" if [MTD && X86 && MTD_JEDEC && MTD_COMPLEX_MAPPINGS]
    depends on [X86 && MTD_JEDEC && MTD_COMPLEX_MAPPINGS]
    inherited [MTD && X86 && MTD_JEDEC && MTD_COMPLEX_MAPPINGS]
   }
   config MTD_SCx200_DOCFLASH tristate {
    prompt "Flash device mapped with DOCCS on NatSemi SCx200" if [MTD && SCx200 && MTD_CFI && MTD_PARTITIONS]
    depends on [SCx200 && MTD_CFI && MTD_PARTITIONS]
    inherited [MTD && SCx200 && MTD_CFI && MTD_PARTITIONS]
   }
   config MTD_AMD76XROM tristate {
    prompt "BIOS flash chip on AMD76x southbridge" if [MTD && X86 && MTD_JEDECPROBE]
    depends on [X86 && MTD_JEDECPROBE]
    inherited [MTD && X86 && MTD_JEDECPROBE]
   }
   config MTD_ICHXROM tristate {
    prompt "BIOS flash chip on Intel Controller Hub 2/3/4/5" if [MTD && X86 && MTD_JEDECPROBE]
    depends on [X86 && MTD_JEDECPROBE]
    inherited [MTD && X86 && MTD_JEDECPROBE]
   }
   config MTD_ESB2ROM tristate {
    prompt "BIOS flash chip on Intel ESB Controller Hub 2" if [MTD && X86 && MTD_JEDECPROBE && PCI]
    depends on [X86 && MTD_JEDECPROBE && PCI]
    inherited [MTD && X86 && MTD_JEDECPROBE && PCI]
   }
   config MTD_CK804XROM tristate {
    prompt "BIOS flash chip on Nvidia CK804" if [MTD && X86 && MTD_JEDECPROBE && PCI]
    depends on [X86 && MTD_JEDECPROBE && PCI]
    inherited [MTD && X86 && MTD_JEDECPROBE && PCI]
   }
   config MTD_SCB2_FLASH tristate {
    prompt "BIOS flash chip on Intel SCB2 boards" if [MTD && X86 && MTD_JEDECPROBE]
    depends on [X86 && MTD_JEDECPROBE]
    inherited [MTD && X86 && MTD_JEDECPROBE]
   }
   config MTD_TSUNAMI tristate {
    prompt "Flash chips on Tsunami TIG bus" if [MTD && ALPHA_TSUNAMI && MTD_COMPLEX_MAPPINGS]
    depends on [ALPHA_TSUNAMI && MTD_COMPLEX_MAPPINGS]
    inherited [MTD && ALPHA_TSUNAMI && MTD_COMPLEX_MAPPINGS]
   }
   config MTD_NETtel tristate {
    prompt "CFI flash device on SnapGear/SecureEdge" if [MTD && X86 && MTD_PARTITIONS && MTD_JEDECPROBE]
    depends on [X86 && MTD_PARTITIONS && MTD_JEDECPROBE]
    inherited [MTD && X86 && MTD_PARTITIONS && MTD_JEDECPROBE]
   }
   config MTD_ALCHEMY tristate {
    prompt "AMD Alchemy Pb1xxx/Db1xxx/RDK MTD support" if [MTD && SOC_AU1X00 && MTD_PARTITIONS && MTD_CFI]
    depends on [SOC_AU1X00 && MTD_PARTITIONS && MTD_CFI]
    inherited [MTD && SOC_AU1X00 && MTD_PARTITIONS && MTD_CFI]
   }
   config MTD_DILNETPC tristate {
    prompt "CFI Flash device mapped on DIL/Net PC" if [MTD && X86 && MTD_CONCAT && MTD_PARTITIONS && MTD_CFI_INTELEXT && BROKEN]
    depends on [X86 && MTD_CONCAT && MTD_PARTITIONS && MTD_CFI_INTELEXT && BROKEN]
    inherited [MTD && X86 && MTD_CONCAT && MTD_PARTITIONS && MTD_CFI_INTELEXT && BROKEN]
    config MTD_DILNETPC_BOOTSIZE hex {
     prompt "Size of DIL/Net PC flash boot partition" if [MTD && MTD_DILNETPC]
     depends on [MTD_DILNETPC]
     default [0x80000] if [MTD && MTD_DILNETPC]
     inherited [MTD && MTD_DILNETPC]
    }
   }
   config MTD_L440GX tristate {
    prompt "BIOS flash chip on Intel L440GX boards" if [MTD && X86 && MTD_JEDECPROBE]
    depends on [X86 && MTD_JEDECPROBE]
    inherited [MTD && X86 && MTD_JEDECPROBE]
   }
   config MTD_TQM8XXL tristate {
    prompt "CFI Flash device mapped on TQM8XXL" if [MTD && MTD_CFI && TQM8xxL]
    depends on [MTD_CFI && TQM8xxL]
    inherited [MTD && MTD_CFI && TQM8xxL]
   }
   config MTD_RPXLITE tristate {
    prompt "CFI Flash device mapped on RPX Lite or CLLF" if [MTD && MTD_CFI && (RPXCLASSIC || RPXLITE)]
    depends on [MTD_CFI && (RPXCLASSIC || RPXLITE)]
    inherited [MTD && MTD_CFI && (RPXCLASSIC || RPXLITE)]
   }
   config MTD_MBX860 tristate {
    prompt "System flash on MBX860 board" if [MTD && MTD_CFI && MBX]
    depends on [MTD_CFI && MBX]
    inherited [MTD && MTD_CFI && MBX]
   }
   config MTD_DBOX2 tristate {
    prompt "CFI Flash device mapped on D-Box2" if [MTD && DBOX2 && MTD_CFI_INTELSTD && MTD_CFI_INTELEXT && MTD_CFI_AMDSTD]
    depends on [DBOX2 && MTD_CFI_INTELSTD && MTD_CFI_INTELEXT && MTD_CFI_AMDSTD]
    inherited [MTD && DBOX2 && MTD_CFI_INTELSTD && MTD_CFI_INTELEXT && MTD_CFI_AMDSTD]
   }
   config MTD_CFI_FLAGADM tristate {
    prompt "CFI Flash device mapping on FlagaDM" if [MTD && 8xx && MTD_CFI]
    depends on [8xx && MTD_CFI]
    inherited [MTD && 8xx && MTD_CFI]
   }
   config MTD_REDWOOD tristate {
    prompt "CFI Flash devices mapped on IBM Redwood" if [MTD && MTD_CFI && (REDWOOD_4 || REDWOOD_5 || REDWOOD_6)]
    depends on [MTD_CFI && (REDWOOD_4 || REDWOOD_5 || REDWOOD_6)]
    inherited [MTD && MTD_CFI && (REDWOOD_4 || REDWOOD_5 || REDWOOD_6)]
   }
   config MTD_SOLUTIONENGINE tristate {
    prompt "CFI Flash device mapped on Hitachi SolutionEngine" if [MTD && SUPERH && SOLUTION_ENGINE && MTD_CFI && MTD_REDBOOT_PARTS]
    depends on [SUPERH && SOLUTION_ENGINE && MTD_CFI && MTD_REDBOOT_PARTS]
    inherited [MTD && SUPERH && SOLUTION_ENGINE && MTD_CFI && MTD_REDBOOT_PARTS]
   }
   config MTD_ARM_INTEGRATOR tristate {
    prompt "CFI Flash device mapped on ARM Integrator/P720T" if [MTD && ARM && MTD_CFI]
    depends on [ARM && MTD_CFI]
    inherited [MTD && ARM && MTD_CFI]
   }
   config MTD_CDB89712 tristate {
    prompt "Cirrus CDB89712 evaluation board mappings" if [MTD && MTD_CFI && ARCH_CDB89712]
    depends on [MTD_CFI && ARCH_CDB89712]
    inherited [MTD && MTD_CFI && ARCH_CDB89712]
   }
   config MTD_SA1100 tristate {
    prompt "CFI Flash device mapped on StrongARM SA11x0" if [MTD && MTD_CFI && ARCH_SA1100 && MTD_PARTITIONS]
    depends on [MTD_CFI && ARCH_SA1100 && MTD_PARTITIONS]
    inherited [MTD && MTD_CFI && ARCH_SA1100 && MTD_PARTITIONS]
   }
   config MTD_DC21285 tristate {
    prompt "CFI Flash device mapped on DC21285 Footbridge" if [MTD && MTD_CFI && ARCH_FOOTBRIDGE && MTD_COMPLEX_MAPPINGS]
    depends on [MTD_CFI && ARCH_FOOTBRIDGE && MTD_COMPLEX_MAPPINGS]
    inherited [MTD && MTD_CFI && ARCH_FOOTBRIDGE && MTD_COMPLEX_MAPPINGS]
   }
   config MTD_IXP4XX tristate {
    prompt "CFI Flash device mapped on Intel IXP4xx based systems" if [MTD && MTD_CFI && MTD_COMPLEX_MAPPINGS && ARCH_IXP4XX]
    depends on [MTD_CFI && MTD_COMPLEX_MAPPINGS && ARCH_IXP4XX]
    inherited [MTD && MTD_CFI && MTD_COMPLEX_MAPPINGS && ARCH_IXP4XX]
   }
   config MTD_IXP2000 tristate {
    prompt "CFI Flash device mapped on Intel IXP2000 based systems" if [MTD && MTD_CFI && MTD_COMPLEX_MAPPINGS && ARCH_IXP2000]
    depends on [MTD_CFI && MTD_COMPLEX_MAPPINGS && ARCH_IXP2000]
    inherited [MTD && MTD_CFI && MTD_COMPLEX_MAPPINGS && ARCH_IXP2000]
   }
   config MTD_FORTUNET tristate {
    prompt "CFI Flash device mapped on the FortuNet board" if [MTD && MTD_CFI && MTD_PARTITIONS && SA1100_FORTUNET]
    depends on [MTD_CFI && MTD_PARTITIONS && SA1100_FORTUNET]
    inherited [MTD && MTD_CFI && MTD_PARTITIONS && SA1100_FORTUNET]
   }
   config MTD_AUTCPU12 tristate {
    prompt "NV-RAM mapping AUTCPU12 board" if [MTD && ARCH_AUTCPU12]
    depends on [ARCH_AUTCPU12]
    inherited [MTD && ARCH_AUTCPU12]
   }
   config MTD_EDB7312 tristate {
    prompt "CFI Flash device mapped on EDB7312" if [MTD && ARCH_EDB7312 && MTD_CFI]
    depends on [ARCH_EDB7312 && MTD_CFI]
    inherited [MTD && ARCH_EDB7312 && MTD_CFI]
   }
   config MTD_IMPA7 tristate {
    prompt "JEDEC Flash device mapped on impA7" if [MTD && ARM && MTD_JEDECPROBE]
    depends on [ARM && MTD_JEDECPROBE]
    inherited [MTD && ARM && MTD_JEDECPROBE]
   }
   config MTD_CEIVA tristate {
    prompt "JEDEC Flash device mapped on Ceiva/Polaroid PhotoMax Digital Picture Frame" if [MTD && MTD_JEDECPROBE && ARCH_CEIVA]
    depends on [MTD_JEDECPROBE && ARCH_CEIVA]
    inherited [MTD && MTD_JEDECPROBE && ARCH_CEIVA]
   }
   config MTD_H720X tristate {
    prompt "Hynix evaluation board mappings" if [MTD && MTD_CFI && (ARCH_H7201 || ARCH_H7202)]
    depends on [MTD_CFI && (ARCH_H7201 || ARCH_H7202)]
    inherited [MTD && MTD_CFI && (ARCH_H7201 || ARCH_H7202)]
   }
   config MTD_OMAP_NOR tristate {
    prompt "TI OMAP board mappings" if [MTD && MTD_CFI && ARCH_OMAP]
    depends on [MTD_CFI && ARCH_OMAP]
    inherited [MTD && MTD_CFI && ARCH_OMAP]
   }
   config MTD_PCI tristate {
    prompt "PCI MTD driver" if [MTD && PCI && MTD_COMPLEX_MAPPINGS]
    depends on [PCI && MTD_COMPLEX_MAPPINGS]
    inherited [MTD && PCI && MTD_COMPLEX_MAPPINGS]
   }
   config MTD_PCMCIA tristate {
    prompt "PCMCIA MTD driver" if [MTD && PCMCIA && MTD_COMPLEX_MAPPINGS && BROKEN]
    depends on [PCMCIA && MTD_COMPLEX_MAPPINGS && BROKEN]
    inherited [MTD && PCMCIA && MTD_COMPLEX_MAPPINGS && BROKEN]
    config MTD_PCMCIA_ANONYMOUS boolean {
     prompt "Use PCMCIA MTD drivers for anonymous PCMCIA cards" if [MTD && MTD_PCMCIA]
     depends on [MTD_PCMCIA]
     inherited [MTD && MTD_PCMCIA]
    }
   }
   config MTD_BFIN_ASYNC tristate {
    prompt "Blackfin BF533-STAMP Flash Chip Support" if [MTD && BFIN533_STAMP && MTD_CFI && MTD_COMPLEX_MAPPINGS]
    depends on [BFIN533_STAMP && MTD_CFI && MTD_COMPLEX_MAPPINGS]
    select MTD_PARTITIONS if [MTD && BFIN533_STAMP && MTD_CFI && MTD_COMPLEX_MAPPINGS]
    default [y] if [MTD && BFIN533_STAMP && MTD_CFI && MTD_COMPLEX_MAPPINGS]
    inherited [MTD && BFIN533_STAMP && MTD_CFI && MTD_COMPLEX_MAPPINGS]
   }
   config MTD_GPIO_ADDR tristate {
    prompt "GPIO-assisted Flash Chip Support" if [MTD && (GENERIC_GPIO || GPIOLIB) && MTD_COMPLEX_MAPPINGS]
    depends on [GENERIC_GPIO || GPIOLIB]
    depends on [MTD_COMPLEX_MAPPINGS]
    select MTD_PARTITIONS if [MTD && (GENERIC_GPIO || GPIOLIB) && MTD_COMPLEX_MAPPINGS]
    inherited [MTD && (GENERIC_GPIO || GPIOLIB) && MTD_COMPLEX_MAPPINGS]
   }
   config MTD_UCLINUX boolean {
    prompt "Generic uClinux RAM/ROM filesystem support" if [MTD && MTD_PARTITIONS && MTD_RAM="y" && !MMU]
    depends on [MTD_PARTITIONS && MTD_RAM="y" && !MMU]
    inherited [MTD && MTD_PARTITIONS && MTD_RAM="y" && !MMU]
   }
   config MTD_WRSBC8260 tristate {
    prompt "Map driver for WindRiver PowerQUICC II MPC82xx board" if [MTD && (SBC82xx || SBC8560)]
    depends on [SBC82xx || SBC8560]
    select MTD_PARTITIONS if [MTD && (SBC82xx || SBC8560)]
    select MTD_MAP_BANK_WIDTH_4 if [MTD && (SBC82xx || SBC8560)]
    select MTD_MAP_BANK_WIDTH_1 if [MTD && (SBC82xx || SBC8560)]
    select MTD_CFI_I1 if [MTD && (SBC82xx || SBC8560)]
    select MTD_CFI_I4 if [MTD && (SBC82xx || SBC8560)]
    inherited [MTD && (SBC82xx || SBC8560)]
   }
   config MTD_DMV182 tristate {
    prompt "Map driver for Dy-4 SVME/DMV-182 board." if [MTD && DMV182]
    depends on [DMV182]
    select MTD_PARTITIONS if [MTD && DMV182]
    select MTD_MAP_BANK_WIDTH_32 if [MTD && DMV182]
    select MTD_CFI_I8 if [MTD && DMV182]
    select MTD_CFI_AMDSTD if [MTD && DMV182]
    inherited [MTD && DMV182]
   }
   config MTD_INTEL_VR_NOR tristate {
    prompt "NOR flash on Intel Vermilion Range Expansion Bus CS0" if [MTD && PCI]
    depends on [PCI]
    inherited [MTD && PCI]
   }
   config MTD_RBTX4939 tristate {
    prompt "Map driver for RBTX4939 board" if [MTD && TOSHIBA_RBTX4939 && MTD_CFI && MTD_COMPLEX_MAPPINGS]
    depends on [TOSHIBA_RBTX4939 && MTD_CFI && MTD_COMPLEX_MAPPINGS]
    inherited [MTD && TOSHIBA_RBTX4939 && MTD_CFI && MTD_COMPLEX_MAPPINGS]
   }
   config MTD_PLATRAM tristate {
    prompt "Map driver for platform device RAM (mtd-ram)" if [MTD]
    select MTD_RAM if [MTD]
    inherited [MTD]
   }
   config MTD_VMU tristate {
    prompt "Map driver for Dreamcast VMU" if [MTD && MAPLE]
    depends on [MAPLE]
    inherited [MTD && MAPLE]
   }
   config MTD_PISMO tristate {
    prompt "MTD discovery driver for PISMO modules" if [MTD && I2C && ARCH_VERSATILE]
    depends on [I2C]
    depends on [ARCH_VERSATILE]
    inherited [MTD && I2C && ARCH_VERSATILE]
   }
  }
  menu "Self-contained MTD device drivers" {
   depends on [MTD]
   config MTD_PMC551 tristate {
    prompt "Ramix PMC551 PCI Mezzanine RAM card support" if [MTD && PCI]
    depends on [PCI]
    inherited [MTD && PCI]
    config MTD_PMC551_BUGFIX boolean {
     prompt "PMC551 256M DRAM Bugfix" if [MTD && MTD_PMC551]
     depends on [MTD_PMC551]
     inherited [MTD && MTD_PMC551]
    }
    config MTD_PMC551_DEBUG boolean {
     prompt "PMC551 Debugging" if [MTD && MTD_PMC551]
     depends on [MTD_PMC551]
     inherited [MTD && MTD_PMC551]
    }
   }
   config MTD_MS02NV tristate {
    prompt "DEC MS02-NV NVRAM module support" if [MTD && MACH_DECSTATION]
    depends on [MACH_DECSTATION]
    inherited [MTD && MACH_DECSTATION]
   }
   config MTD_DATAFLASH tristate {
    prompt "Support for AT45xxx DataFlash" if [MTD && SPI_MASTER && EXPERIMENTAL]
    depends on [SPI_MASTER && EXPERIMENTAL]
    inherited [MTD && SPI_MASTER && EXPERIMENTAL]
    config MTD_DATAFLASH_WRITE_VERIFY boolean {
     prompt "Verify DataFlash page writes" if [MTD && MTD_DATAFLASH]
     depends on [MTD_DATAFLASH]
     inherited [MTD && MTD_DATAFLASH]
    }
    config MTD_DATAFLASH_OTP boolean {
     prompt "DataFlash OTP support (Security Register)" if [MTD && MTD_DATAFLASH]
     depends on [MTD_DATAFLASH]
     select HAVE_MTD_OTP if [MTD && MTD_DATAFLASH]
     inherited [MTD && MTD_DATAFLASH]
    }
   }
   config MTD_M25P80 tristate {
    prompt "Support most SPI Flash chips (AT26DF, M25P, W25X, ...)" if [MTD && SPI_MASTER && EXPERIMENTAL]
    depends on [SPI_MASTER && EXPERIMENTAL]
    inherited [MTD && SPI_MASTER && EXPERIMENTAL]
    config M25PXX_USE_FAST_READ boolean {
     prompt "Use FAST_READ OPCode allowing SPI CLK <= 50MHz" if [MTD && MTD_M25P80]
     depends on [MTD_M25P80]
     default [y] if [MTD && MTD_M25P80]
     inherited [MTD && MTD_M25P80]
    }
   }
   config MTD_SST25L tristate {
    prompt "Support SST25L (non JEDEC) SPI Flash chips" if [MTD && SPI_MASTER]
    depends on [SPI_MASTER]
    inherited [MTD && SPI_MASTER]
   }
   config MTD_SLRAM tristate {
    prompt "Uncached system RAM" if [MTD]
    inherited [MTD]
   }
   config MTD_PHRAM tristate {
    prompt "Physical system RAM" if [MTD]
    inherited [MTD]
   }
   config MTD_LART tristate {
    prompt "28F160xx flash driver for LART" if [MTD && SA1100_LART]
    depends on [SA1100_LART]
    inherited [MTD && SA1100_LART]
   }
   config MTD_MTDRAM tristate {
    prompt "Test driver using RAM" if [MTD]
    inherited [MTD]
    config MTDRAM_TOTAL_SIZE integer {
     prompt "MTDRAM device size in KiB" if [MTD && MTD_MTDRAM]
     depends on [MTD_MTDRAM]
     default [4096] if [MTD && MTD_MTDRAM]
     inherited [MTD && MTD_MTDRAM]
    }
    config MTDRAM_ERASE_SIZE integer {
     prompt "MTDRAM erase block size in KiB" if [MTD && MTD_MTDRAM]
     depends on [MTD_MTDRAM]
     default [128] if [MTD && MTD_MTDRAM]
     inherited [MTD && MTD_MTDRAM]
    }
    config MTDRAM_ABS_POS hex {
     prompt "SRAM Hexadecimal Absolute position or 0" if [MTD && MTD_MTDRAM="y"]
     depends on [MTD_MTDRAM="y"]
     default [0] if [MTD && MTD_MTDRAM="y"]
     inherited [MTD && MTD_MTDRAM="y"]
    }
   }
   config MTD_BLOCK2MTD tristate {
    prompt "MTD using block device" if [MTD && BLOCK]
    depends on [BLOCK]
    inherited [MTD && BLOCK]
   }
   config MTD_DOC2000 tristate {
    prompt "M-Systems Disk-On-Chip 2000 and Millennium (DEPRECATED)" if [MTD]
    select MTD_DOCPROBE if [MTD]
    select MTD_NAND_IDS if [MTD]
    inherited [MTD]
   }
   config MTD_DOC2001 tristate {
    prompt "M-Systems Disk-On-Chip Millennium-only alternative driver (DEPRECATED)" if [MTD]
    select MTD_DOCPROBE if [MTD]
    select MTD_NAND_IDS if [MTD]
    inherited [MTD]
   }
   config MTD_DOC2001PLUS tristate {
    prompt "M-Systems Disk-On-Chip Millennium Plus" if [MTD]
    select MTD_DOCPROBE if [MTD]
    select MTD_NAND_IDS if [MTD]
    inherited [MTD]
   }
   config MTD_DOCPROBE tristate {
    select MTD_DOCECC if [MTD]
    inherited [MTD]
   }
   config MTD_DOCECC tristate {
    inherited [MTD]
   }
   config MTD_DOCPROBE_ADVANCED boolean {
    prompt "Advanced detection options for DiskOnChip" if [MTD && MTD_DOCPROBE]
    depends on [MTD_DOCPROBE]
    inherited [MTD && MTD_DOCPROBE]
    config MTD_DOCPROBE_ADDRESS hex {
     prompt "Physical address of DiskOnChip" if [MTD && MTD_DOCPROBE && MTD_DOCPROBE_ADVANCED]
     depends on [MTD_DOCPROBE]
     default [0x0000] if [MTD && MTD_DOCPROBE && MTD_DOCPROBE_ADVANCED]
     default [0] if [MTD && MTD_DOCPROBE && !MTD_DOCPROBE_ADVANCED]
     inherited [MTD && MTD_DOCPROBE]
    }
    config MTD_DOCPROBE_HIGH boolean {
     prompt "Probe high addresses" if [MTD && MTD_DOCPROBE_ADVANCED]
     depends on [MTD_DOCPROBE_ADVANCED]
     inherited [MTD && MTD_DOCPROBE_ADVANCED]
    }
    config MTD_DOCPROBE_55AA boolean {
     prompt "Probe for 0x55 0xAA BIOS Extension Signature" if [MTD && MTD_DOCPROBE_ADVANCED]
     depends on [MTD_DOCPROBE_ADVANCED]
     inherited [MTD && MTD_DOCPROBE_ADVANCED]
    }
   }
  }
  menuconfig MTD_NAND tristate {
   prompt "NAND Device Support" if [MTD]
   depends on [MTD]
   select MTD_NAND_IDS if [MTD]
   inherited [MTD]
   if [MTD && MTD_NAND] {
    config MTD_NAND_VERIFY_WRITE boolean {
     prompt "Verify NAND page writes" if [MTD && MTD_NAND]
     inherited [MTD && MTD_NAND]
    }
    config MTD_NAND_ECC_SMC boolean {
     prompt "NAND ECC Smart Media byte order" if [MTD && MTD_NAND]
     default [n] if [MTD && MTD_NAND]
     inherited [MTD && MTD_NAND]
    }
    config MTD_NAND_MUSEUM_IDS boolean {
     prompt "Enable chip ids for obsolete ancient NAND devices" if [MTD && MTD_NAND]
     depends on [MTD_NAND]
     default [n] if [MTD && MTD_NAND]
     inherited [MTD && MTD_NAND]
    }
    config MTD_NAND_AUTCPU12 tristate {
     prompt "SmartMediaCard on autronix autcpu12 board" if [MTD && MTD_NAND && ARCH_AUTCPU12]
     depends on [ARCH_AUTCPU12]
     inherited [MTD && MTD_NAND && ARCH_AUTCPU12]
    }
    config MTD_NAND_EDB7312 tristate {
     prompt "Support for Cirrus Logic EBD7312 evaluation board" if [MTD && MTD_NAND && ARCH_EDB7312]
     depends on [ARCH_EDB7312]
     inherited [MTD && MTD_NAND && ARCH_EDB7312]
    }
    config MTD_NAND_H1900 tristate {
     prompt "iPAQ H1900 flash" if [MTD && MTD_NAND && ARCH_PXA && MTD_PARTITIONS]
     depends on [ARCH_PXA && MTD_PARTITIONS]
     inherited [MTD && MTD_NAND && ARCH_PXA && MTD_PARTITIONS]
    }
    config MTD_NAND_GPIO tristate {
     prompt "GPIO NAND Flash driver" if [MTD && MTD_NAND && GENERIC_GPIO && ARM]
     depends on [GENERIC_GPIO && ARM]
     inherited [MTD && MTD_NAND && GENERIC_GPIO && ARM]
    }
    config MTD_NAND_SPIA tristate {
     prompt "NAND Flash device on SPIA board" if [MTD && MTD_NAND && ARCH_P720T]
     depends on [ARCH_P720T]
     inherited [MTD && MTD_NAND && ARCH_P720T]
    }
    config MTD_NAND_AMS_DELTA tristate {
     prompt "NAND Flash device on Amstrad E3" if [MTD && MTD_NAND && MACH_AMS_DELTA]
     depends on [MACH_AMS_DELTA]
     inherited [MTD && MTD_NAND && MACH_AMS_DELTA]
    }
    config MTD_NAND_OMAP2 tristate {
     prompt "NAND Flash device on OMAP2 and OMAP3" if [MTD && ARM && MTD_NAND && (ARCH_OMAP2 || ARCH_OMAP3)]
     depends on [ARM && MTD_NAND && (ARCH_OMAP2 || ARCH_OMAP3)]
     inherited [MTD && ARM && MTD_NAND && (ARCH_OMAP2 || ARCH_OMAP3)]
     config MTD_NAND_OMAP_PREFETCH boolean {
      prompt "GPMC prefetch support for NAND Flash device" if [MTD && MTD_NAND && MTD_NAND_OMAP2]
      depends on [MTD_NAND && MTD_NAND_OMAP2]
      default [y] if [MTD && MTD_NAND && MTD_NAND_OMAP2]
      inherited [MTD && MTD_NAND && MTD_NAND_OMAP2]
      config MTD_NAND_OMAP_PREFETCH_DMA boolean {
       depends on [MTD_NAND_OMAP_PREFETCH]
       prompt "DMA mode" if [MTD && MTD_NAND && MTD_NAND_OMAP_PREFETCH]
       default [n] if [MTD && MTD_NAND && MTD_NAND_OMAP_PREFETCH]
       inherited [MTD && MTD_NAND && MTD_NAND_OMAP_PREFETCH]
      }
     }
    }
    config MTD_NAND_TS7250 tristate {
     prompt "NAND Flash device on TS-7250 board" if [MTD && MTD_NAND && MACH_TS72XX]
     depends on [MACH_TS72XX]
     inherited [MTD && MTD_NAND && MACH_TS72XX]
    }
    config MTD_NAND_IDS tristate {
     inherited [MTD && MTD_NAND]
    }
    config MTD_NAND_AU1550 tristate {
     prompt "Au1550/1200 NAND support" if [MTD && MTD_NAND && (SOC_AU1200 || SOC_AU1550)]
     depends on [SOC_AU1200 || SOC_AU1550]
     inherited [MTD && MTD_NAND && (SOC_AU1200 || SOC_AU1550)]
    }
    config MTD_NAND_BF5XX tristate {
     prompt "Blackfin on-chip NAND Flash Controller driver" if [MTD && (BF54x || BF52x) && MTD_NAND]
     depends on [(BF54x || BF52x) && MTD_NAND]
     inherited [MTD && (BF54x || BF52x) && MTD_NAND]
     config MTD_NAND_BF5XX_HWECC boolean {
      prompt "BF5XX NAND Hardware ECC" if [MTD && MTD_NAND && MTD_NAND_BF5XX]
      default [y] if [MTD && MTD_NAND && MTD_NAND_BF5XX]
      depends on [MTD_NAND_BF5XX]
      inherited [MTD && MTD_NAND && MTD_NAND_BF5XX]
      config MTD_NAND_BF5XX_BOOTROM_ECC boolean {
       prompt "Use Blackfin BootROM ECC Layout" if [MTD && MTD_NAND && MTD_NAND_BF5XX_HWECC]
       default [n] if [MTD && MTD_NAND && MTD_NAND_BF5XX_HWECC]
       depends on [MTD_NAND_BF5XX_HWECC]
       inherited [MTD && MTD_NAND && MTD_NAND_BF5XX_HWECC]
      }
     }
    }
    config MTD_NAND_RTC_FROM4 tristate {
     prompt "Renesas Flash ROM 4-slot interface board (FROM_BOARD4)" if [MTD && MTD_NAND && SH_SOLUTION_ENGINE]
     depends on [SH_SOLUTION_ENGINE]
     select REED_SOLOMON if [MTD && MTD_NAND && SH_SOLUTION_ENGINE]
     select REED_SOLOMON_DEC8 if [MTD && MTD_NAND && SH_SOLUTION_ENGINE]
     select BITREVERSE if [MTD && MTD_NAND && SH_SOLUTION_ENGINE]
     inherited [MTD && MTD_NAND && SH_SOLUTION_ENGINE]
    }
    config MTD_NAND_PPCHAMELEONEVB tristate {
     prompt "NAND Flash device on PPChameleonEVB board" if [MTD && MTD_NAND && PPCHAMELEONEVB && BROKEN]
     depends on [PPCHAMELEONEVB && BROKEN]
     inherited [MTD && MTD_NAND && PPCHAMELEONEVB && BROKEN]
    }
    config MTD_NAND_S3C2410 tristate {
     prompt "NAND Flash support for Samsung S3C SoCs" if [MTD && MTD_NAND && (ARCH_S3C2410 || ARCH_S3C64XX)]
     depends on [ARCH_S3C2410 || ARCH_S3C64XX]
     inherited [MTD && MTD_NAND && (ARCH_S3C2410 || ARCH_S3C64XX)]
     config MTD_NAND_S3C2410_DEBUG boolean {
      prompt "Samsung S3C NAND driver debug" if [MTD && MTD_NAND && MTD_NAND_S3C2410]
      depends on [MTD_NAND_S3C2410]
      inherited [MTD && MTD_NAND && MTD_NAND_S3C2410]
     }
     config MTD_NAND_S3C2410_HWECC boolean {
      prompt "Samsung S3C NAND Hardware ECC" if [MTD && MTD_NAND && MTD_NAND_S3C2410]
      depends on [MTD_NAND_S3C2410]
      inherited [MTD && MTD_NAND && MTD_NAND_S3C2410]
     }
    }
    config MTD_NAND_NDFC tristate {
     prompt "NDFC NanD Flash Controller" if [MTD && MTD_NAND && 4xx]
     depends on [4xx]
     select MTD_NAND_ECC_SMC if [MTD && MTD_NAND && 4xx]
     inherited [MTD && MTD_NAND && 4xx]
    }
    config MTD_NAND_S3C2410_CLKSTOP boolean {
     prompt "Samsung S3C NAND IDLE clock stop" if [MTD && MTD_NAND && MTD_NAND_S3C2410]
     depends on [MTD_NAND_S3C2410]
     default [n] if [MTD && MTD_NAND && MTD_NAND_S3C2410]
     inherited [MTD && MTD_NAND && MTD_NAND_S3C2410]
    }
    config MTD_NAND_BCM_UMI tristate {
     prompt "NAND Flash support for BCM Reference Boards" if [MTD && ARCH_BCMRING && MTD_NAND]
     depends on [ARCH_BCMRING && MTD_NAND]
     inherited [MTD && ARCH_BCMRING && MTD_NAND]
     config MTD_NAND_BCM_UMI_HWCS boolean {
      prompt "BCM UMI NAND Hardware CS" if [MTD && MTD_NAND && MTD_NAND_BCM_UMI]
      depends on [MTD_NAND_BCM_UMI]
      inherited [MTD && MTD_NAND && MTD_NAND_BCM_UMI]
     }
    }
    config MTD_NAND_DISKONCHIP tristate {
     prompt "DiskOnChip 2000, Millennium and Millennium Plus (NAND reimplementation) (EXPERIMENTAL)" if [MTD && MTD_NAND && EXPERIMENTAL]
     depends on [EXPERIMENTAL]
     select REED_SOLOMON if [MTD && MTD_NAND && EXPERIMENTAL]
     select REED_SOLOMON_DEC16 if [MTD && MTD_NAND && EXPERIMENTAL]
     inherited [MTD && MTD_NAND && EXPERIMENTAL]
     config MTD_NAND_DISKONCHIP_PROBE_ADVANCED boolean {
      prompt "Advanced detection options for DiskOnChip" if [MTD && MTD_NAND && MTD_NAND_DISKONCHIP]
      depends on [MTD_NAND_DISKONCHIP]
      inherited [MTD && MTD_NAND && MTD_NAND_DISKONCHIP]
      config MTD_NAND_DISKONCHIP_PROBE_ADDRESS hex {
       prompt "Physical address of DiskOnChip" if [MTD && MTD_NAND && MTD_NAND_DISKONCHIP && MTD_NAND_DISKONCHIP_PROBE_ADVANCED]
       depends on [MTD_NAND_DISKONCHIP]
       default [0] if [MTD && MTD_NAND && MTD_NAND_DISKONCHIP]
       inherited [MTD && MTD_NAND && MTD_NAND_DISKONCHIP]
      }
      config MTD_NAND_DISKONCHIP_PROBE_HIGH boolean {
       prompt "Probe high addresses" if [MTD && MTD_NAND && MTD_NAND_DISKONCHIP_PROBE_ADVANCED]
       depends on [MTD_NAND_DISKONCHIP_PROBE_ADVANCED]
       inherited [MTD && MTD_NAND && MTD_NAND_DISKONCHIP_PROBE_ADVANCED]
      }
     }
     config MTD_NAND_DISKONCHIP_BBTWRITE boolean {
      prompt "Allow BBT writes on DiskOnChip Millennium and 2000TSOP" if [MTD && MTD_NAND && MTD_NAND_DISKONCHIP]
      depends on [MTD_NAND_DISKONCHIP]
      inherited [MTD && MTD_NAND && MTD_NAND_DISKONCHIP]
     }
    }
    config MTD_NAND_SHARPSL tristate {
     prompt "Support for NAND Flash on Sharp SL Series (C7xx + others)" if [MTD && MTD_NAND && ARCH_PXA]
     depends on [ARCH_PXA]
     inherited [MTD && MTD_NAND && ARCH_PXA]
    }
    config MTD_NAND_CAFE tristate {
     prompt "NAND support for OLPC CAFÉ chip" if [MTD && MTD_NAND && PCI]
     depends on [PCI]
     select REED_SOLOMON if [MTD && MTD_NAND && PCI]
     select REED_SOLOMON_DEC16 if [MTD && MTD_NAND && PCI]
     inherited [MTD && MTD_NAND && PCI]
    }
    config MTD_NAND_CS553X tristate {
     prompt "NAND support for CS5535/CS5536 (AMD Geode companion chip)" if [MTD && MTD_NAND && X86_32]
     depends on [X86_32]
     inherited [MTD && MTD_NAND && X86_32]
    }
    config MTD_NAND_ATMEL tristate {
     prompt "Support for NAND Flash / SmartMedia on AT91 and AVR32" if [MTD && MTD_NAND && (ARCH_AT91 || AVR32)]
     depends on [ARCH_AT91 || AVR32]
     inherited [MTD && MTD_NAND && (ARCH_AT91 || AVR32)]
     choice boolean {
      prompt "ECC management for NAND Flash / SmartMedia on AT91 / AVR32" if [MTD && MTD_NAND && MTD_NAND_ATMEL]
      depends on [MTD_NAND_ATMEL]
      config MTD_NAND_ATMEL_ECC_HW boolean {
       prompt "Hardware ECC" if [<choice> && (ARCH_AT91SAM9263 || ARCH_AT91SAM9260 || AVR32)]
       depends on [ARCH_AT91SAM9263 || ARCH_AT91SAM9260 || AVR32]
       inherited [<choice> && (ARCH_AT91SAM9263 || ARCH_AT91SAM9260 || AVR32)]
      }
      config MTD_NAND_ATMEL_ECC_SOFT boolean {
       prompt "Software ECC" if [<choice>]
       inherited [<choice>]
      }
      config MTD_NAND_ATMEL_ECC_NONE boolean {
       prompt "No ECC (testing only, DANGEROUS)" if [<choice> && DEBUG_KERNEL]
       depends on [DEBUG_KERNEL]
       inherited [<choice> && DEBUG_KERNEL]
      }
     }
    }
    config MTD_NAND_PXA3xx tristate {
     prompt "Support for NAND flash devices on PXA3xx" if [MTD && MTD_NAND && (PXA3xx || ARCH_MMP)]
     depends on [MTD_NAND && (PXA3xx || ARCH_MMP)]
     inherited [MTD && MTD_NAND && (PXA3xx || ARCH_MMP)]
     config MTD_NAND_PXA3xx_BUILTIN boolean {
      prompt "Use builtin definitions for some NAND chips (deprecated)" if [MTD && MTD_NAND && MTD_NAND_PXA3xx]
      depends on [MTD_NAND_PXA3xx]
      inherited [MTD && MTD_NAND && MTD_NAND_PXA3xx]
     }
    }
    config MTD_NAND_CM_X270 tristate {
     prompt "Support for NAND Flash on CM-X270 modules" if [MTD && MTD_NAND && MACH_ARMCORE]
     depends on [MTD_NAND && MACH_ARMCORE]
     inherited [MTD && MTD_NAND && MACH_ARMCORE]
    }
    config MTD_NAND_PASEMI tristate {
     prompt "NAND support for PA Semi PWRficient" if [MTD && MTD_NAND && PPC_PASEMI]
     depends on [MTD_NAND && PPC_PASEMI]
     inherited [MTD && MTD_NAND && PPC_PASEMI]
    }
    config MTD_NAND_TMIO tristate {
     prompt "NAND Flash device on Toshiba Mobile IO Controller" if [MTD && MTD_NAND && MFD_TMIO]
     depends on [MTD_NAND && MFD_TMIO]
     inherited [MTD && MTD_NAND && MFD_TMIO]
    }
    config MTD_NAND_NANDSIM tristate {
     prompt "Support for NAND Flash Simulator" if [MTD && MTD_NAND && MTD_PARTITIONS]
     depends on [MTD_PARTITIONS]
     inherited [MTD && MTD_NAND && MTD_PARTITIONS]
    }
    config MTD_NAND_PLATFORM tristate {
     prompt "Support for generic platform NAND driver" if [MTD && MTD_NAND]
     depends on [MTD_NAND]
     inherited [MTD && MTD_NAND]
    }
    config MTD_ALAUDA tristate {
     prompt "MTD driver for Olympus MAUSB-10 and Fujifilm DPC-R1" if [MTD && MTD_NAND && USB]
     depends on [MTD_NAND && USB]
     inherited [MTD && MTD_NAND && USB]
    }
    config MTD_NAND_ORION tristate {
     prompt "NAND Flash support for Marvell Orion SoC" if [MTD && PLAT_ORION && MTD_NAND]
     depends on [PLAT_ORION && MTD_NAND]
     inherited [MTD && PLAT_ORION && MTD_NAND]
    }
    config MTD_NAND_FSL_ELBC tristate {
     prompt "NAND support for Freescale eLBC controllers" if [MTD && MTD_NAND && PPC_OF]
     depends on [MTD_NAND && PPC_OF]
     inherited [MTD && MTD_NAND && PPC_OF]
    }
    config MTD_NAND_FSL_UPM tristate {
     prompt "Support for NAND on Freescale UPM" if [MTD && MTD_NAND && (PPC_83xx || PPC_85xx)]
     depends on [MTD_NAND && (PPC_83xx || PPC_85xx)]
     select FSL_LBC if [MTD && MTD_NAND && (PPC_83xx || PPC_85xx)]
     inherited [MTD && MTD_NAND && (PPC_83xx || PPC_85xx)]
    }
    config MTD_NAND_MXC tristate {
     prompt "MXC NAND support" if [MTD && MTD_NAND && (ARCH_MX2 || ARCH_MX3)]
     depends on [ARCH_MX2 || ARCH_MX3]
     inherited [MTD && MTD_NAND && (ARCH_MX2 || ARCH_MX3)]
    }
    config MTD_NAND_NOMADIK tristate {
     prompt "ST Nomadik 8815 NAND support" if [MTD && MTD_NAND && ARCH_NOMADIK]
     depends on [ARCH_NOMADIK]
     inherited [MTD && MTD_NAND && ARCH_NOMADIK]
    }
    config MTD_NAND_SH_FLCTL tristate {
     prompt "Support for NAND on Renesas SuperH FLCTL" if [MTD && MTD_NAND && SUPERH && CPU_SUBTYPE_SH7723]
     depends on [MTD_NAND && SUPERH && CPU_SUBTYPE_SH7723]
     inherited [MTD && MTD_NAND && SUPERH && CPU_SUBTYPE_SH7723]
    }
    config MTD_NAND_DAVINCI tristate {
     prompt "Support NAND on DaVinci SoC" if [MTD && MTD_NAND && ARCH_DAVINCI]
     depends on [ARCH_DAVINCI]
     inherited [MTD && MTD_NAND && ARCH_DAVINCI]
    }
    config MTD_NAND_TXX9NDFMC tristate {
     prompt "NAND Flash support for TXx9 SoC" if [MTD && MTD_NAND && (SOC_TX4938 || SOC_TX4939)]
     depends on [SOC_TX4938 || SOC_TX4939]
     inherited [MTD && MTD_NAND && (SOC_TX4938 || SOC_TX4939)]
    }
    config MTD_NAND_SOCRATES tristate {
     prompt "Support for NAND on Socrates board" if [MTD && MTD_NAND && SOCRATES]
     depends on [MTD_NAND && SOCRATES]
     inherited [MTD && MTD_NAND && SOCRATES]
    }
    config MTD_NAND_W90P910 tristate {
     prompt "Support for NAND on w90p910 evaluation board." if [MTD && MTD_NAND && ARCH_W90X900 && MTD_PARTITIONS]
     depends on [ARCH_W90X900 && MTD_PARTITIONS]
     inherited [MTD && MTD_NAND && ARCH_W90X900 && MTD_PARTITIONS]
    }
   }
  }
  menuconfig MTD_ONENAND tristate {
   prompt "OneNAND Device Support" if [MTD]
   depends on [MTD]
   select MTD_PARTITIONS if [MTD]
   inherited [MTD]
   if [MTD && MTD_ONENAND] {
    config MTD_ONENAND_VERIFY_WRITE boolean {
     prompt "Verify OneNAND page writes" if [MTD && MTD_ONENAND]
     inherited [MTD && MTD_ONENAND]
    }
    config MTD_ONENAND_GENERIC tristate {
     prompt "OneNAND Flash device via platform device driver" if [MTD && MTD_ONENAND]
     inherited [MTD && MTD_ONENAND]
    }
    config MTD_ONENAND_OMAP2 tristate {
     prompt "OneNAND on OMAP2/OMAP3 support" if [MTD && MTD_ONENAND && (ARCH_OMAP2 || ARCH_OMAP3)]
     depends on [MTD_ONENAND && (ARCH_OMAP2 || ARCH_OMAP3)]
     inherited [MTD && MTD_ONENAND && (ARCH_OMAP2 || ARCH_OMAP3)]
    }
    config MTD_ONENAND_OTP boolean {
     prompt "OneNAND OTP Support" if [MTD && MTD_ONENAND]
     select HAVE_MTD_OTP if [MTD && MTD_ONENAND]
     inherited [MTD && MTD_ONENAND]
    }
    config MTD_ONENAND_2X_PROGRAM boolean {
     prompt "OneNAND 2X program support" if [MTD && MTD_ONENAND]
     inherited [MTD && MTD_ONENAND]
    }
    config MTD_ONENAND_SIM tristate {
     prompt "OneNAND simulator support" if [MTD && MTD_ONENAND]
     inherited [MTD && MTD_ONENAND]
    }
   }
  }
  menu "LPDDR flash memory drivers" {
   depends on [MTD]
   config MTD_LPDDR tristate {
    prompt "Support for LPDDR flash chips" if [MTD]
    select MTD_QINFO_PROBE if [MTD]
    inherited [MTD]
    config MTD_QINFO_PROBE tristate {
     depends on [MTD_LPDDR]
     prompt "Detect flash chips by QINFO probe" if [MTD && MTD_LPDDR]
     inherited [MTD && MTD_LPDDR]
    }
   }
  }
  menu "UBI - Unsorted block images" {
   depends on [MTD]
   config MTD_UBI tristate {
    prompt "Enable UBI" if [MTD]
    depends on [MTD]
    select CRC32 if [MTD]
    inherited [MTD]
    config MTD_UBI_WL_THRESHOLD integer {
     prompt "UBI wear-leveling threshold" if [MTD && MTD_UBI]
     default [4096] if [MTD && MTD_UBI]
     range [2 65536] if [MTD && MTD_UBI]
     depends on [MTD_UBI]
     inherited [MTD && MTD_UBI]
    }
    config MTD_UBI_BEB_RESERVE integer {
     prompt "Percentage of reserved eraseblocks for bad eraseblocks handling" if [MTD && MTD_UBI]
     default [1] if [MTD && MTD_UBI]
     range [0 25] if [MTD && MTD_UBI]
     depends on [MTD_UBI]
     inherited [MTD && MTD_UBI]
    }
    config MTD_UBI_GLUEBI tristate {
     prompt "MTD devices emulation driver (gluebi)" if [MTD && MTD_UBI]
     default [n] if [MTD && MTD_UBI]
     depends on [MTD_UBI]
     inherited [MTD && MTD_UBI]
    }
    config MTD_UBI_DEBUG boolean {
     prompt "UBI debugging" if [MTD && SYSFS && MTD_UBI]
     depends on [SYSFS]
     depends on [MTD_UBI]
     select DEBUG_FS if [MTD && SYSFS && MTD_UBI]
     select KALLSYMS_ALL if [MTD && SYSFS && MTD_UBI]
     inherited [MTD && SYSFS && MTD_UBI]
     config MTD_UBI_DEBUG_MSG boolean {
      prompt "UBI debugging messages" if [MTD && MTD_UBI_DEBUG]
      depends on [MTD_UBI_DEBUG]
      default [n] if [MTD && MTD_UBI_DEBUG]
      inherited [MTD && MTD_UBI_DEBUG]
     }
     config MTD_UBI_DEBUG_PARANOID boolean {
      prompt "Extra self-checks" if [MTD && MTD_UBI_DEBUG]
      default [n] if [MTD && MTD_UBI_DEBUG]
      depends on [MTD_UBI_DEBUG]
      inherited [MTD && MTD_UBI_DEBUG]
     }
     config MTD_UBI_DEBUG_DISABLE_BGT boolean {
      prompt "Do not enable the UBI background thread" if [MTD && MTD_UBI_DEBUG]
      depends on [MTD_UBI_DEBUG]
      default [n] if [MTD && MTD_UBI_DEBUG]
      inherited [MTD && MTD_UBI_DEBUG]
     }
     config MTD_UBI_DEBUG_EMULATE_BITFLIPS boolean {
      prompt "Emulate flash bit-flips" if [MTD && MTD_UBI_DEBUG]
      depends on [MTD_UBI_DEBUG]
      default [n] if [MTD && MTD_UBI_DEBUG]
      inherited [MTD && MTD_UBI_DEBUG]
     }
     config MTD_UBI_DEBUG_EMULATE_WRITE_FAILURES boolean {
      prompt "Emulate flash write failures" if [MTD && MTD_UBI_DEBUG]
      depends on [MTD_UBI_DEBUG]
      default [n] if [MTD && MTD_UBI_DEBUG]
      inherited [MTD && MTD_UBI_DEBUG]
     }
     config MTD_UBI_DEBUG_EMULATE_ERASE_FAILURES boolean {
      prompt "Emulate flash erase failures" if [MTD && MTD_UBI_DEBUG]
      depends on [MTD_UBI_DEBUG]
      default [n] if [MTD && MTD_UBI_DEBUG]
      inherited [MTD && MTD_UBI_DEBUG]
     }
     menu "Additional UBI debugging messages" {
      depends on [MTD && MTD_UBI_DEBUG]
      config MTD_UBI_DEBUG_MSG_BLD boolean {
       prompt "Additional UBI initialization and build messages" if [MTD && MTD_UBI_DEBUG]
       default [n] if [MTD && MTD_UBI_DEBUG]
       depends on [MTD_UBI_DEBUG]
       inherited [MTD && MTD_UBI_DEBUG]
      }
      config MTD_UBI_DEBUG_MSG_EBA boolean {
       prompt "Eraseblock association unit messages" if [MTD && MTD_UBI_DEBUG]
       default [n] if [MTD && MTD_UBI_DEBUG]
       depends on [MTD_UBI_DEBUG]
       inherited [MTD && MTD_UBI_DEBUG]
      }
      config MTD_UBI_DEBUG_MSG_WL boolean {
       prompt "Wear-leveling unit messages" if [MTD && MTD_UBI_DEBUG]
       default [n] if [MTD && MTD_UBI_DEBUG]
       depends on [MTD_UBI_DEBUG]
       inherited [MTD && MTD_UBI_DEBUG]
      }
      config MTD_UBI_DEBUG_MSG_IO boolean {
       prompt "Input/output unit messages" if [MTD && MTD_UBI_DEBUG]
       default [n] if [MTD && MTD_UBI_DEBUG]
       depends on [MTD_UBI_DEBUG]
       inherited [MTD && MTD_UBI_DEBUG]
      }
     }
    }
   }
  }
 }
}
menuconfig PARPORT tristate {
 prompt "Parallel port support" if [HAS_IOMEM]
 depends on [HAS_IOMEM]
 inherited [HAS_IOMEM]
 if [PARPORT] {
  config PARPORT_PC tristate {
   prompt "PC-style hardware" if [PARPORT && (!SPARC64 || PCI) && !SPARC32 && !M32R && !FRV && (!M68K || ISA) && !MN10300 && !AVR32 && !BLACKFIN]
   depends on [(!SPARC64 || PCI) && !SPARC32 && !M32R && !FRV && (!M68K || ISA) && !MN10300 && !AVR32 && !BLACKFIN]
   inherited [PARPORT && (!SPARC64 || PCI) && !SPARC32 && !M32R && !FRV && (!M68K || ISA) && !MN10300 && !AVR32 && !BLACKFIN]
   config PARPORT_SERIAL tristate {
    prompt "Multi-IO cards (parallel and serial)" if [PARPORT && SERIAL_8250_PCI && PARPORT_PC && PCI]
    depends on [SERIAL_8250_PCI && PARPORT_PC && PCI]
    inherited [PARPORT && SERIAL_8250_PCI && PARPORT_PC && PCI]
   }
   config PARPORT_PC_FIFO boolean {
    prompt "Use FIFO/DMA if available (EXPERIMENTAL)" if [PARPORT && PARPORT_PC && EXPERIMENTAL]
    depends on [PARPORT_PC && EXPERIMENTAL]
    inherited [PARPORT && PARPORT_PC && EXPERIMENTAL]
   }
   config PARPORT_PC_SUPERIO boolean {
    prompt "SuperIO chipset support (EXPERIMENTAL)" if [PARPORT && PARPORT_PC && EXPERIMENTAL]
    depends on [PARPORT_PC && EXPERIMENTAL]
    inherited [PARPORT && PARPORT_PC && EXPERIMENTAL]
   }
   config PARPORT_PC_PCMCIA tristate {
    prompt "Support for PCMCIA management for PC-style ports" if [PARPORT && PCMCIA && PARPORT_PC]
    depends on [PCMCIA && PARPORT_PC]
    inherited [PARPORT && PCMCIA && PARPORT_PC]
   }
  }
  config PARPORT_IP32 tristate {
   prompt "SGI IP32 builtin port (EXPERIMENTAL)" if [PARPORT && SGI_IP32 && EXPERIMENTAL]
   depends on [SGI_IP32 && EXPERIMENTAL]
   select PARPORT_NOT_PC if [PARPORT && SGI_IP32 && EXPERIMENTAL]
   inherited [PARPORT && SGI_IP32 && EXPERIMENTAL]
  }
  config PARPORT_AMIGA tristate {
   prompt "Amiga builtin port" if [PARPORT && AMIGA]
   depends on [AMIGA]
   select PARPORT_NOT_PC if [PARPORT && AMIGA]
   inherited [PARPORT && AMIGA]
  }
  config PARPORT_MFC3 tristate {
   prompt "Multiface III parallel port" if [PARPORT && ZORRO]
   depends on [ZORRO]
   select PARPORT_NOT_PC if [PARPORT && ZORRO]
   inherited [PARPORT && ZORRO]
  }
  config PARPORT_ATARI tristate {
   prompt "Atari hardware" if [PARPORT && ATARI]
   depends on [ATARI]
   select PARPORT_NOT_PC if [PARPORT && ATARI]
   inherited [PARPORT && ATARI]
  }
  config PARPORT_GSC tristate {
   default [GSC] if [PARPORT]
   select PARPORT_NOT_PC if [PARPORT]
   inherited [PARPORT]
  }
  config PARPORT_SUNBPP tristate {
   prompt "Sparc hardware (EXPERIMENTAL)" if [PARPORT && SBUS && EXPERIMENTAL]
   depends on [SBUS && EXPERIMENTAL]
   select PARPORT_NOT_PC if [PARPORT && SBUS && EXPERIMENTAL]
   inherited [PARPORT && SBUS && EXPERIMENTAL]
  }
  config PARPORT_AX88796 tristate {
   prompt "AX88796 Parallel Port" if [PARPORT]
   select PARPORT_NOT_PC if [PARPORT]
   inherited [PARPORT]
  }
  config PARPORT_1284 boolean {
   prompt "IEEE 1284 transfer modes" if [PARPORT]
   inherited [PARPORT]
  }
  config PARPORT_NOT_PC boolean {
   inherited [PARPORT]
  }
 }
}
menuconfig PNP boolean {
 prompt "Plug and Play support" if [HAS_IOMEM && (ISA || ACPI)]
 depends on [HAS_IOMEM]
 depends on [ISA || ACPI]
 inherited [HAS_IOMEM && (ISA || ACPI)]
 config PNP_DEBUG_MESSAGES boolean {
  default [y] if [PNP]
  prompt "PNP debugging messages" if [PNP]
  depends on [PNP]
  inherited [PNP]
 }
 if [PNP] {
  config ISAPNP boolean {
   prompt "ISA Plug and Play support" if [PNP && ISA]
   depends on [ISA]
   inherited [PNP && ISA]
  }
  config PNPBIOS boolean {
   prompt "Plug and Play BIOS support (EXPERIMENTAL)" if [PNP && ISA && X86 && EXPERIMENTAL]
   depends on [ISA && X86 && EXPERIMENTAL]
   default [n] if [PNP && ISA && X86 && EXPERIMENTAL]
   inherited [PNP && ISA && X86 && EXPERIMENTAL]
   config PNPBIOS_PROC_FS boolean {
    prompt "Plug and Play BIOS /proc interface" if [PNP && PNPBIOS && PROC_FS]
    depends on [PNPBIOS && PROC_FS]
    inherited [PNP && PNPBIOS && PROC_FS]
   }
  }
  config PNPACPI boolean {
   default [PNP && ACPI] if [PNP]
   inherited [PNP]
  }
 }
}
menuconfig BLK_DEV boolean {
 prompt "Block devices" if [BLOCK]
 depends on [BLOCK]
 default [y] if [BLOCK]
 inherited [BLOCK]
 if [BLK_DEV] {
  config BLK_DEV_FD tristate {
   prompt "Normal floppy disk support" if [BLK_DEV && ARCH_MAY_HAVE_PC_FDC]
   depends on [ARCH_MAY_HAVE_PC_FDC]
   inherited [BLK_DEV && ARCH_MAY_HAVE_PC_FDC]
  }
  config AMIGA_FLOPPY tristate {
   prompt "Amiga floppy support" if [BLK_DEV && AMIGA]
   depends on [AMIGA]
   inherited [BLK_DEV && AMIGA]
  }
  config ATARI_FLOPPY tristate {
   prompt "Atari floppy support" if [BLK_DEV && ATARI]
   depends on [ATARI]
   inherited [BLK_DEV && ATARI]
  }
  config MAC_FLOPPY tristate {
   prompt "Support for PowerMac floppy" if [BLK_DEV && PPC_PMAC && !PPC_PMAC64]
   depends on [PPC_PMAC && !PPC_PMAC64]
   inherited [BLK_DEV && PPC_PMAC && !PPC_PMAC64]
  }
  config BLK_DEV_SWIM tristate {
   prompt "Support for SWIM Macintosh floppy" if [BLK_DEV && M68K && MAC]
   depends on [M68K && MAC]
   inherited [BLK_DEV && M68K && MAC]
  }
  config AMIGA_Z2RAM tristate {
   prompt "Amiga Zorro II ramdisk support" if [BLK_DEV && ZORRO]
   depends on [ZORRO]
   inherited [BLK_DEV && ZORRO]
  }
  config BLK_DEV_XD tristate {
   prompt "XT hard disk support" if [BLK_DEV && ISA && ISA_DMA_API]
   depends on [ISA && ISA_DMA_API]
   select CHECK_SIGNATURE if [BLK_DEV && ISA && ISA_DMA_API]
   inherited [BLK_DEV && ISA && ISA_DMA_API]
  }
  config PARIDE tristate {
   prompt "Parallel port IDE device support" if [BLK_DEV && PARPORT_PC]
   depends on [PARPORT_PC]
   inherited [BLK_DEV && PARPORT_PC]
  }
  config GDROM tristate {
   prompt "SEGA Dreamcast GD-ROM drive" if [BLK_DEV && SH_DREAMCAST]
   depends on [SH_DREAMCAST]
   inherited [BLK_DEV && SH_DREAMCAST]
  }
  config PARIDE_PD tristate {
   prompt "Parallel port IDE disks" if [BLK_DEV && PARIDE]
   depends on [PARIDE]
   inherited [BLK_DEV && PARIDE]
  }
  config PARIDE_PCD tristate {
   prompt "Parallel port ATAPI CD-ROMs" if [BLK_DEV && PARIDE]
   depends on [PARIDE]
   inherited [BLK_DEV && PARIDE]
  }
  config PARIDE_PF tristate {
   prompt "Parallel port ATAPI disks" if [BLK_DEV && PARIDE]
   depends on [PARIDE]
   inherited [BLK_DEV && PARIDE]
  }
  config PARIDE_PT tristate {
   prompt "Parallel port ATAPI tapes" if [BLK_DEV && PARIDE]
   depends on [PARIDE]
   inherited [BLK_DEV && PARIDE]
  }
  config PARIDE_PG tristate {
   prompt "Parallel port generic ATAPI devices" if [BLK_DEV && PARIDE]
   depends on [PARIDE]
   inherited [BLK_DEV && PARIDE]
  }
  config PARIDE_ATEN tristate {
   prompt "ATEN EH-100 protocol" if [BLK_DEV && PARIDE]
   depends on [PARIDE]
   inherited [BLK_DEV && PARIDE]
  }
  config PARIDE_BPCK tristate {
   prompt "MicroSolutions backpack (Series 5) protocol" if [BLK_DEV && PARIDE]
   depends on [PARIDE]
   inherited [BLK_DEV && PARIDE]
  }
  config PARIDE_BPCK6 tristate {
   prompt "MicroSolutions backpack (Series 6) protocol" if [BLK_DEV && PARIDE && !64BIT]
   depends on [PARIDE && !64BIT]
   inherited [BLK_DEV && PARIDE && !64BIT]
  }
  config PARIDE_COMM tristate {
   prompt "DataStor Commuter protocol" if [BLK_DEV && PARIDE]
   depends on [PARIDE]
   inherited [BLK_DEV && PARIDE]
  }
  config PARIDE_DSTR tristate {
   prompt "DataStor EP-2000 protocol" if [BLK_DEV && PARIDE]
   depends on [PARIDE]
   inherited [BLK_DEV && PARIDE]
  }
  config PARIDE_FIT2 tristate {
   prompt "FIT TD-2000 protocol" if [BLK_DEV && PARIDE]
   depends on [PARIDE]
   inherited [BLK_DEV && PARIDE]
  }
  config PARIDE_FIT3 tristate {
   prompt "FIT TD-3000 protocol" if [BLK_DEV && PARIDE]
   depends on [PARIDE]
   inherited [BLK_DEV && PARIDE]
  }
  config PARIDE_EPAT tristate {
   prompt "Shuttle EPAT/EPEZ protocol" if [BLK_DEV && PARIDE]
   depends on [PARIDE]
   inherited [BLK_DEV && PARIDE]
   config PARIDE_EPATC8 boolean {
    prompt "Support c7/c8 chips (EXPERIMENTAL)" if [BLK_DEV && PARIDE_EPAT && EXPERIMENTAL]
    depends on [PARIDE_EPAT && EXPERIMENTAL]
    inherited [BLK_DEV && PARIDE_EPAT && EXPERIMENTAL]
   }
  }
  config PARIDE_EPIA tristate {
   prompt "Shuttle EPIA protocol" if [BLK_DEV && PARIDE]
   depends on [PARIDE]
   inherited [BLK_DEV && PARIDE]
  }
  config PARIDE_FRIQ tristate {
   prompt "Freecom IQ ASIC-2 protocol" if [BLK_DEV && PARIDE]
   depends on [PARIDE]
   inherited [BLK_DEV && PARIDE]
  }
  config PARIDE_FRPW tristate {
   prompt "FreeCom power protocol" if [BLK_DEV && PARIDE]
   depends on [PARIDE]
   inherited [BLK_DEV && PARIDE]
  }
  config PARIDE_KBIC tristate {
   prompt "KingByte KBIC-951A/971A protocols" if [BLK_DEV && PARIDE]
   depends on [PARIDE]
   inherited [BLK_DEV && PARIDE]
  }
  config PARIDE_KTTI tristate {
   prompt "KT PHd protocol" if [BLK_DEV && PARIDE]
   depends on [PARIDE]
   inherited [BLK_DEV && PARIDE]
  }
  config PARIDE_ON20 tristate {
   prompt "OnSpec 90c20 protocol" if [BLK_DEV && PARIDE]
   depends on [PARIDE]
   inherited [BLK_DEV && PARIDE]
  }
  config PARIDE_ON26 tristate {
   prompt "OnSpec 90c26 protocol" if [BLK_DEV && PARIDE]
   depends on [PARIDE]
   inherited [BLK_DEV && PARIDE]
  }
  config BLK_CPQ_DA tristate {
   prompt "Compaq SMART2 support" if [BLK_DEV && PCI && VIRT_TO_BUS]
   depends on [PCI && VIRT_TO_BUS]
   inherited [BLK_DEV && PCI && VIRT_TO_BUS]
  }
  config BLK_CPQ_CISS_DA tristate {
   prompt "Compaq Smart Array 5xxx support" if [BLK_DEV && PCI]
   depends on [PCI]
   inherited [BLK_DEV && PCI]
   config CISS_SCSI_TAPE boolean {
    prompt "SCSI tape drive support for Smart Array 5xxx" if [BLK_DEV && BLK_CPQ_CISS_DA && PROC_FS && (SCSI="y" || SCSI="BLK_CPQ_CISS_DA")]
    depends on [BLK_CPQ_CISS_DA && PROC_FS]
    depends on [SCSI="y" || SCSI="BLK_CPQ_CISS_DA"]
    inherited [BLK_DEV && BLK_CPQ_CISS_DA && PROC_FS && (SCSI="y" || SCSI="BLK_CPQ_CISS_DA")]
   }
  }
  config BLK_DEV_DAC960 tristate {
   prompt "Mylex DAC960/DAC1100 PCI RAID Controller support" if [BLK_DEV && PCI]
   depends on [PCI]
   inherited [BLK_DEV && PCI]
  }
  config BLK_DEV_UMEM tristate {
   prompt "Micro Memory MM5415 Battery Backed RAM support (EXPERIMENTAL)" if [BLK_DEV && PCI && EXPERIMENTAL]
   depends on [PCI && EXPERIMENTAL]
   inherited [BLK_DEV && PCI && EXPERIMENTAL]
  }
  config BLK_DEV_UBD boolean {
   prompt "Virtual block device" if [BLK_DEV && UML]
   depends on [UML]
   inherited [BLK_DEV && UML]
   config BLK_DEV_UBD_SYNC boolean {
    prompt "Always do synchronous disk IO for UBD" if [BLK_DEV && BLK_DEV_UBD]
    depends on [BLK_DEV_UBD]
    inherited [BLK_DEV && BLK_DEV_UBD]
   }
  }
  config BLK_DEV_COW_COMMON boolean {
   default [BLK_DEV_UBD] if [BLK_DEV]
   inherited [BLK_DEV]
  }
  config BLK_DEV_LOOP tristate {
   prompt "Loopback device support" if [BLK_DEV]
   inherited [BLK_DEV]
   config BLK_DEV_CRYPTOLOOP tristate {
    prompt "Cryptoloop Support" if [BLK_DEV && BLK_DEV_LOOP]
    select CRYPTO if [BLK_DEV && BLK_DEV_LOOP]
    select CRYPTO_CBC if [BLK_DEV && BLK_DEV_LOOP]
    depends on [BLK_DEV_LOOP]
    inherited [BLK_DEV && BLK_DEV_LOOP]
   }
  }
  config BLK_DEV_DRBD tristate {
   prompt "DRBD Distributed Replicated Block Device support" if [BLK_DEV && PROC_FS && INET && CONNECTOR]
   depends on [PROC_FS && INET && CONNECTOR]
   select LRU_CACHE if [BLK_DEV && PROC_FS && INET && CONNECTOR]
   default [n] if [BLK_DEV && PROC_FS && INET && CONNECTOR]
   inherited [BLK_DEV && PROC_FS && INET && CONNECTOR]
   config DRBD_FAULT_INJECTION boolean {
    prompt "DRBD fault injection" if [BLK_DEV && BLK_DEV_DRBD]
    depends on [BLK_DEV_DRBD]
    inherited [BLK_DEV && BLK_DEV_DRBD]
   }
  }
  config BLK_DEV_NBD tristate {
   prompt "Network block device support" if [BLK_DEV && NET]
   depends on [NET]
   inherited [BLK_DEV && NET]
  }
  config BLK_DEV_OSD tristate {
   prompt "OSD object-as-blkdev support" if [BLK_DEV && SCSI_OSD_ULD]
   depends on [SCSI_OSD_ULD]
   inherited [BLK_DEV && SCSI_OSD_ULD]
  }
  config BLK_DEV_SX8 tristate {
   prompt "Promise SATA SX8 support" if [BLK_DEV && PCI]
   depends on [PCI]
   inherited [BLK_DEV && PCI]
  }
  config BLK_DEV_UB tristate {
   prompt "Low Performance USB Block driver" if [BLK_DEV && USB]
   depends on [USB]
   inherited [BLK_DEV && USB]
  }
  config BLK_DEV_RAM tristate {
   prompt "RAM block device support" if [BLK_DEV]
   inherited [BLK_DEV]
   config BLK_DEV_RAM_COUNT integer {
    prompt "Default number of RAM disks" if [BLK_DEV && BLK_DEV_RAM]
    default [16] if [BLK_DEV && BLK_DEV_RAM]
    depends on [BLK_DEV_RAM]
    inherited [BLK_DEV && BLK_DEV_RAM]
   }
   config BLK_DEV_RAM_SIZE integer {
    prompt "Default RAM disk size (kbytes)" if [BLK_DEV && BLK_DEV_RAM]
    depends on [BLK_DEV_RAM]
    default [4096] if [BLK_DEV && BLK_DEV_RAM]
    inherited [BLK_DEV && BLK_DEV_RAM]
   }
   config BLK_DEV_XIP boolean {
    prompt "Support XIP filesystems on RAM block device" if [BLK_DEV && BLK_DEV_RAM]
    depends on [BLK_DEV_RAM]
    default [n] if [BLK_DEV && BLK_DEV_RAM]
    inherited [BLK_DEV && BLK_DEV_RAM]
   }
  }
  config CDROM_PKTCDVD tristate {
   prompt "Packet writing on CD/DVD media" if [BLK_DEV && !UML]
   depends on [!UML]
   inherited [BLK_DEV && !UML]
   config CDROM_PKTCDVD_BUFFERS integer {
    prompt "Free buffers for data gathering" if [BLK_DEV && CDROM_PKTCDVD]
    depends on [CDROM_PKTCDVD]
    default [8] if [BLK_DEV && CDROM_PKTCDVD]
    inherited [BLK_DEV && CDROM_PKTCDVD]
   }
   config CDROM_PKTCDVD_WCACHE boolean {
    prompt "Enable write caching (EXPERIMENTAL)" if [BLK_DEV && CDROM_PKTCDVD && EXPERIMENTAL]
    depends on [CDROM_PKTCDVD && EXPERIMENTAL]
    inherited [BLK_DEV && CDROM_PKTCDVD && EXPERIMENTAL]
   }
  }
  config ATA_OVER_ETH tristate {
   prompt "ATA over Ethernet support" if [BLK_DEV && NET]
   depends on [NET]
   inherited [BLK_DEV && NET]
  }
  config MG_DISK tristate {
   prompt "mGine mflash, gflash support" if [BLK_DEV && ARM && GPIOLIB]
   depends on [ARM && GPIOLIB]
   inherited [BLK_DEV && ARM && GPIOLIB]
   config MG_DISK_RES integer {
    prompt "Size of reserved area before MBR" if [BLK_DEV && MG_DISK]
    depends on [MG_DISK]
    default [0] if [BLK_DEV && MG_DISK]
    inherited [BLK_DEV && MG_DISK]
   }
  }
  config SUNVDC tristate {
   prompt "Sun Virtual Disk Client support" if [BLK_DEV && SUN_LDOMS]
   depends on [SUN_LDOMS]
   inherited [BLK_DEV && SUN_LDOMS]
  }
  config BLK_DEV_XPRAM tristate {
   prompt "XPRAM disk support" if [BLK_DEV && S390 && BLOCK]
   depends on [S390 && BLOCK]
   inherited [BLK_DEV && S390 && BLOCK]
  }
  config DCSSBLK tristate {
   prompt "DCSSBLK support" if [BLK_DEV && S390 && BLOCK]
   depends on [S390 && BLOCK]
   inherited [BLK_DEV && S390 && BLOCK]
  }
  config DASD tristate {
   prompt "Support for DASD devices" if [BLK_DEV && CCW && BLOCK]
   depends on [CCW && BLOCK]
   select IOSCHED_DEADLINE if [BLK_DEV && CCW && BLOCK]
   inherited [BLK_DEV && CCW && BLOCK]
   config DASD_PROFILE boolean {
    prompt "Profiling support for dasd devices" if [BLK_DEV && DASD]
    depends on [DASD]
    inherited [BLK_DEV && DASD]
   }
   config DASD_ECKD tristate {
    prompt "Support for ECKD Disks" if [BLK_DEV && DASD]
    depends on [DASD]
    inherited [BLK_DEV && DASD]
   }
   config DASD_FBA tristate {
    prompt "Support for FBA  Disks" if [BLK_DEV && DASD]
    depends on [DASD]
    inherited [BLK_DEV && DASD]
   }
   config DASD_DIAG tristate {
    prompt "Support for DIAG access to Disks" if [BLK_DEV && DASD]
    depends on [DASD]
    inherited [BLK_DEV && DASD]
   }
   config DASD_EER boolean {
    prompt "Extended error reporting (EER)" if [BLK_DEV && DASD]
    depends on [DASD]
    inherited [BLK_DEV && DASD]
   }
  }
  config XILINX_SYSACE tristate {
   prompt "Xilinx SystemACE support" if [BLK_DEV && (4xx || MICROBLAZE)]
   depends on [4xx || MICROBLAZE]
   inherited [BLK_DEV && (4xx || MICROBLAZE)]
  }
  config XEN_BLKDEV_FRONTEND tristate {
   prompt "Xen virtual block device support" if [BLK_DEV && XEN]
   depends on [XEN]
   default [y] if [BLK_DEV && XEN]
   inherited [BLK_DEV && XEN]
  }
  config VIRTIO_BLK tristate {
   prompt "Virtio block driver (EXPERIMENTAL)" if [BLK_DEV && EXPERIMENTAL && VIRTIO]
   depends on [EXPERIMENTAL && VIRTIO]
   inherited [BLK_DEV && EXPERIMENTAL && VIRTIO]
  }
  config BLK_DEV_HD boolean {
   prompt "Very old hard disk (MFM/RLL/IDE) driver" if [BLK_DEV && HAVE_IDE && (!ARM || ARCH_RPC || ARCH_SHARK || BROKEN)]
   depends on [HAVE_IDE]
   depends on [!ARM || ARCH_RPC || ARCH_SHARK || BROKEN]
   inherited [BLK_DEV && HAVE_IDE && (!ARM || ARCH_RPC || ARCH_SHARK || BROKEN)]
  }
 }
}
config HAVE_IDE boolean {
}
menuconfig IDE tristate {
 prompt "ATA/ATAPI/MFM/RLL support (DEPRECATED)" if [HAVE_IDE && BLOCK]
 depends on [HAVE_IDE]
 depends on [BLOCK]
 inherited [HAVE_IDE && BLOCK]
 if [IDE] {
  config IDE_XFER_MODE boolean {
   inherited [IDE]
  }
  config IDE_TIMINGS boolean {
   select IDE_XFER_MODE if [IDE]
   inherited [IDE]
  }
  config IDE_ATAPI boolean {
   inherited [IDE]
  }
  config IDE_LEGACY boolean {
   inherited [IDE]
  }
  config BLK_DEV_IDE_SATA boolean {
   prompt "Support for SATA (deprecated; conflicts with libata SATA driver)" if [IDE]
   default [n] if [IDE]
   inherited [IDE]
  }
  config IDE_GD tristate {
   prompt "generic ATA/ATAPI disk support" if [IDE]
   default [y] if [IDE]
   inherited [IDE]
   config IDE_GD_ATA boolean {
    prompt "ATA disk support" if [IDE && IDE_GD]
    depends on [IDE_GD]
    default [y] if [IDE && IDE_GD]
    inherited [IDE && IDE_GD]
   }
   config IDE_GD_ATAPI boolean {
    prompt "ATAPI floppy support" if [IDE && IDE_GD]
    depends on [IDE_GD]
    select IDE_ATAPI if [IDE && IDE_GD]
    inherited [IDE && IDE_GD]
   }
  }
  config BLK_DEV_IDECS tristate {
   prompt "PCMCIA IDE support" if [IDE && PCMCIA]
   depends on [PCMCIA]
   inherited [IDE && PCMCIA]
  }
  config BLK_DEV_DELKIN tristate {
   prompt "Cardbus IDE support (Delkin/ASKA/Workbit)" if [IDE && CARDBUS && PCI]
   depends on [CARDBUS && PCI]
   inherited [IDE && CARDBUS && PCI]
  }
  config BLK_DEV_IDECD tristate {
   prompt "Include IDE/ATAPI CDROM support" if [IDE]
   select IDE_ATAPI if [IDE]
   inherited [IDE]
   config BLK_DEV_IDECD_VERBOSE_ERRORS boolean {
    prompt "Verbose error logging for IDE/ATAPI CDROM driver" if [IDE && BLK_DEV_IDECD && EMBEDDED]
    depends on [BLK_DEV_IDECD]
    default [y] if [IDE && BLK_DEV_IDECD]
    inherited [IDE && BLK_DEV_IDECD]
   }
  }
  config BLK_DEV_IDETAPE tristate {
   prompt "Include IDE/ATAPI TAPE support" if [IDE]
   select IDE_ATAPI if [IDE]
   inherited [IDE]
  }
  config BLK_DEV_IDEACPI boolean {
   prompt "IDE ACPI support" if [IDE && ACPI]
   depends on [ACPI]
   inherited [IDE && ACPI]
  }
  config IDE_TASK_IOCTL boolean {
   prompt "IDE Taskfile Access" if [IDE]
   inherited [IDE]
  }
  config IDE_PROC_FS boolean {
   prompt "legacy /proc/ide/ support" if [IDE && PROC_FS]
   depends on [IDE && PROC_FS]
   default [y] if [IDE && PROC_FS]
   inherited [IDE && PROC_FS]
  }
  config IDE_GENERIC tristate {
   prompt "generic/default IDE chipset support" if [IDE && (ALPHA || X86 || IA64 || M32R || MIPS || ARCH_RPC || ARCH_SHARK)]
   depends on [ALPHA || X86 || IA64 || M32R || MIPS || ARCH_RPC || ARCH_SHARK]
   default [ARM && (ARCH_RPC || ARCH_SHARK)] if [IDE && (ALPHA || X86 || IA64 || M32R || MIPS || ARCH_RPC || ARCH_SHARK)]
   inherited [IDE && (ALPHA || X86 || IA64 || M32R || MIPS || ARCH_RPC || ARCH_SHARK)]
  }
  config BLK_DEV_PLATFORM tristate {
   prompt "Platform driver for IDE interfaces" if [IDE]
   inherited [IDE]
  }
  config BLK_DEV_CMD640 tristate {
   prompt "CMD640 chipset bugfix/support" if [IDE && X86]
   depends on [X86]
   select IDE_TIMINGS if [IDE && X86]
   inherited [IDE && X86]
   config BLK_DEV_CMD640_ENHANCED boolean {
    prompt "CMD640 enhanced support" if [IDE && BLK_DEV_CMD640]
    depends on [BLK_DEV_CMD640]
    inherited [IDE && BLK_DEV_CMD640]
   }
  }
  config BLK_DEV_IDEPNP tristate {
   prompt "PNP EIDE support" if [IDE && PNP]
   depends on [PNP]
   inherited [IDE && PNP]
  }
  config BLK_DEV_IDEDMA_SFF boolean {
   inherited [IDE]
  }
  if [IDE && PCI] {
   config BLK_DEV_IDEPCI boolean {
    inherited [IDE && PCI]
   }
   config IDEPCI_PCIBUS_ORDER boolean {
    prompt "Probe IDE PCI devices in the PCI bus order (DEPRECATED)" if [PCI && IDE="y" && BLK_DEV_IDEPCI]
    depends on [IDE="y" && BLK_DEV_IDEPCI]
    default [y] if [PCI && IDE="y" && BLK_DEV_IDEPCI]
    inherited [PCI && IDE="y" && BLK_DEV_IDEPCI]
   }
   config BLK_DEV_OFFBOARD boolean {
    prompt "Boot off-board chipsets first support (DEPRECATED)" if [IDE && PCI && BLK_DEV_IDEPCI && (BLK_DEV_AEC62XX || BLK_DEV_GENERIC || BLK_DEV_HPT366 || BLK_DEV_PDC202XX_NEW || BLK_DEV_PDC202XX_OLD || BLK_DEV_TC86C001)]
    depends on [BLK_DEV_IDEPCI && (BLK_DEV_AEC62XX || BLK_DEV_GENERIC || BLK_DEV_HPT366 || BLK_DEV_PDC202XX_NEW || BLK_DEV_PDC202XX_OLD || BLK_DEV_TC86C001)]
    inherited [IDE && PCI && BLK_DEV_IDEPCI && (BLK_DEV_AEC62XX || BLK_DEV_GENERIC || BLK_DEV_HPT366 || BLK_DEV_PDC202XX_NEW || BLK_DEV_PDC202XX_OLD || BLK_DEV_TC86C001)]
   }
   config BLK_DEV_GENERIC tristate {
    prompt "Generic PCI IDE Chipset Support" if [IDE && PCI]
    select BLK_DEV_IDEPCI if [IDE && PCI]
    inherited [IDE && PCI]
   }
   config BLK_DEV_OPTI621 tristate {
    prompt "OPTi 82C621 chipset enhanced support (EXPERIMENTAL)" if [IDE && PCI && EXPERIMENTAL]
    depends on [EXPERIMENTAL]
    select BLK_DEV_IDEPCI if [IDE && PCI && EXPERIMENTAL]
    inherited [IDE && PCI && EXPERIMENTAL]
   }
   config BLK_DEV_RZ1000 tristate {
    prompt "RZ1000 chipset bugfix/support" if [IDE && PCI && X86]
    depends on [X86]
    select BLK_DEV_IDEPCI if [IDE && PCI && X86]
    inherited [IDE && PCI && X86]
   }
   config BLK_DEV_IDEDMA_PCI boolean {
    select BLK_DEV_IDEPCI if [IDE && PCI]
    select BLK_DEV_IDEDMA_SFF if [IDE && PCI]
    inherited [IDE && PCI]
   }
   config BLK_DEV_AEC62XX tristate {
    prompt "AEC62XX chipset support" if [IDE && PCI]
    select BLK_DEV_IDEDMA_PCI if [IDE && PCI]
    inherited [IDE && PCI]
   }
   config BLK_DEV_ALI15X3 tristate {
    prompt "ALI M15x3 chipset support" if [IDE && PCI]
    select IDE_TIMINGS if [IDE && PCI]
    select BLK_DEV_IDEDMA_PCI if [IDE && PCI]
    inherited [IDE && PCI]
   }
   config BLK_DEV_AMD74XX tristate {
    prompt "AMD and nVidia IDE support" if [IDE && PCI && !ARM]
    depends on [!ARM]
    select IDE_TIMINGS if [IDE && PCI && !ARM]
    select BLK_DEV_IDEDMA_PCI if [IDE && PCI && !ARM]
    inherited [IDE && PCI && !ARM]
   }
   config BLK_DEV_ATIIXP tristate {
    prompt "ATI IXP chipset IDE support" if [IDE && PCI && X86]
    depends on [X86]
    select BLK_DEV_IDEDMA_PCI if [IDE && PCI && X86]
    inherited [IDE && PCI && X86]
   }
   config BLK_DEV_CMD64X tristate {
    prompt "CMD64{3|6|8|9} chipset support" if [IDE && PCI]
    select IDE_TIMINGS if [IDE && PCI]
    select BLK_DEV_IDEDMA_PCI if [IDE && PCI]
    inherited [IDE && PCI]
   }
   config BLK_DEV_TRIFLEX tristate {
    prompt "Compaq Triflex IDE support" if [IDE && PCI]
    select BLK_DEV_IDEDMA_PCI if [IDE && PCI]
    inherited [IDE && PCI]
   }
   config BLK_DEV_CY82C693 tristate {
    prompt "CY82C693 chipset support" if [IDE && PCI && ALPHA]
    depends on [ALPHA]
    select IDE_TIMINGS if [IDE && PCI && ALPHA]
    select BLK_DEV_IDEDMA_PCI if [IDE && PCI && ALPHA]
    inherited [IDE && PCI && ALPHA]
   }
   config BLK_DEV_CS5520 tristate {
    prompt "Cyrix CS5510/20 MediaGX chipset support (VERY EXPERIMENTAL)" if [IDE && PCI && EXPERIMENTAL]
    depends on [EXPERIMENTAL]
    select BLK_DEV_IDEDMA_PCI if [IDE && PCI && EXPERIMENTAL]
    inherited [IDE && PCI && EXPERIMENTAL]
   }
   config BLK_DEV_CS5530 tristate {
    prompt "Cyrix/National Semiconductor CS5530 MediaGX chipset support" if [IDE && PCI]
    select BLK_DEV_IDEDMA_PCI if [IDE && PCI]
    inherited [IDE && PCI]
   }
   config BLK_DEV_CS5535 tristate {
    prompt "AMD CS5535 chipset support" if [IDE && PCI && X86 && !X86_64]
    depends on [X86 && !X86_64]
    select BLK_DEV_IDEDMA_PCI if [IDE && PCI && X86 && !X86_64]
    inherited [IDE && PCI && X86 && !X86_64]
   }
   config BLK_DEV_CS5536 tristate {
    prompt "CS5536 chipset support" if [IDE && PCI && X86_32]
    depends on [X86_32]
    select BLK_DEV_IDEDMA_PCI if [IDE && PCI && X86_32]
    inherited [IDE && PCI && X86_32]
   }
   config BLK_DEV_HPT366 tristate {
    prompt "HPT36X/37X chipset support" if [IDE && PCI]
    select BLK_DEV_IDEDMA_PCI if [IDE && PCI]
    inherited [IDE && PCI]
   }
   config BLK_DEV_JMICRON tristate {
    prompt "JMicron JMB36x support" if [IDE && PCI]
    select BLK_DEV_IDEDMA_PCI if [IDE && PCI]
    inherited [IDE && PCI]
   }
   config BLK_DEV_SC1200 tristate {
    prompt "National SCx200 chipset support" if [IDE && PCI]
    select BLK_DEV_IDEDMA_PCI if [IDE && PCI]
    inherited [IDE && PCI]
   }
   config BLK_DEV_PIIX tristate {
    prompt "Intel PIIX/ICH chipsets support" if [IDE && PCI]
    select BLK_DEV_IDEDMA_PCI if [IDE && PCI]
    inherited [IDE && PCI]
   }
   config BLK_DEV_IT8172 tristate {
    prompt "IT8172 IDE support" if [IDE && PCI]
    select BLK_DEV_IDEDMA_PCI if [IDE && PCI]
    inherited [IDE && PCI]
   }
   config BLK_DEV_IT8213 tristate {
    prompt "IT8213 IDE support" if [IDE && PCI]
    select BLK_DEV_IDEDMA_PCI if [IDE && PCI]
    inherited [IDE && PCI]
   }
   config BLK_DEV_IT821X tristate {
    prompt "IT821X IDE support" if [IDE && PCI]
    select BLK_DEV_IDEDMA_PCI if [IDE && PCI]
    inherited [IDE && PCI]
   }
   config BLK_DEV_NS87415 tristate {
    prompt "NS87415 chipset support" if [IDE && PCI]
    select BLK_DEV_IDEDMA_PCI if [IDE && PCI]
    inherited [IDE && PCI]
   }
   config BLK_DEV_PDC202XX_OLD tristate {
    prompt "PROMISE PDC202{46|62|65|67} support" if [IDE && PCI]
    select BLK_DEV_IDEDMA_PCI if [IDE && PCI]
    inherited [IDE && PCI]
   }
   config BLK_DEV_PDC202XX_NEW tristate {
    prompt "PROMISE PDC202{68|69|70|71|75|76|77} support" if [IDE && PCI]
    select BLK_DEV_IDEDMA_PCI if [IDE && PCI]
    inherited [IDE && PCI]
   }
   config BLK_DEV_SVWKS tristate {
    prompt "ServerWorks OSB4/CSB5/CSB6 chipsets support" if [IDE && PCI]
    select BLK_DEV_IDEDMA_PCI if [IDE && PCI]
    inherited [IDE && PCI]
   }
   config BLK_DEV_SGIIOC4 tristate {
    prompt "Silicon Graphics IOC4 chipset ATA/ATAPI support" if [IDE && PCI && (IA64_SGI_SN2 || IA64_GENERIC) && SGI_IOC4]
    depends on [(IA64_SGI_SN2 || IA64_GENERIC) && SGI_IOC4]
    select BLK_DEV_IDEDMA_PCI if [IDE && PCI && (IA64_SGI_SN2 || IA64_GENERIC) && SGI_IOC4]
    inherited [IDE && PCI && (IA64_SGI_SN2 || IA64_GENERIC) && SGI_IOC4]
   }
   config BLK_DEV_SIIMAGE tristate {
    prompt "Silicon Image chipset support" if [IDE && PCI]
    select BLK_DEV_IDEDMA_PCI if [IDE && PCI]
    inherited [IDE && PCI]
   }
   config BLK_DEV_SIS5513 tristate {
    prompt "SiS5513 chipset support" if [IDE && PCI && X86]
    depends on [X86]
    select BLK_DEV_IDEDMA_PCI if [IDE && PCI && X86]
    inherited [IDE && PCI && X86]
   }
   config BLK_DEV_SL82C105 tristate {
    prompt "Winbond SL82c105 support" if [IDE && PCI && (PPC || ARM)]
    depends on [PPC || ARM]
    select IDE_TIMINGS if [IDE && PCI && (PPC || ARM)]
    select BLK_DEV_IDEDMA_PCI if [IDE && PCI && (PPC || ARM)]
    inherited [IDE && PCI && (PPC || ARM)]
   }
   config BLK_DEV_SLC90E66 tristate {
    prompt "SLC90E66 chipset support" if [IDE && PCI]
    select BLK_DEV_IDEDMA_PCI if [IDE && PCI]
    inherited [IDE && PCI]
   }
   config BLK_DEV_TRM290 tristate {
    prompt "Tekram TRM290 chipset support" if [IDE && PCI]
    select BLK_DEV_IDEDMA_PCI if [IDE && PCI]
    inherited [IDE && PCI]
   }
   config BLK_DEV_VIA82CXXX tristate {
    prompt "VIA82CXXX chipset support" if [IDE && PCI]
    select IDE_TIMINGS if [IDE && PCI]
    select BLK_DEV_IDEDMA_PCI if [IDE && PCI]
    inherited [IDE && PCI]
   }
   config BLK_DEV_TC86C001 tristate {
    prompt "Toshiba TC86C001 support" if [IDE && PCI]
    select BLK_DEV_IDEDMA_PCI if [IDE && PCI]
    inherited [IDE && PCI]
   }
   config BLK_DEV_CELLEB tristate {
    prompt "Toshiba's Cell Reference Set IDE support" if [IDE && PCI && PPC_CELLEB]
    depends on [PPC_CELLEB]
    select BLK_DEV_IDEDMA_PCI if [IDE && PCI && PPC_CELLEB]
    inherited [IDE && PCI && PPC_CELLEB]
   }
  }
  config BLK_DEV_IDE_PMAC tristate {
   prompt "PowerMac on-board IDE support" if [IDE && PPC_PMAC]
   depends on [PPC_PMAC]
   select IDE_TIMINGS if [IDE && PPC_PMAC]
   select BLK_DEV_IDEDMA_PCI if [IDE && PPC_PMAC]
   inherited [IDE && PPC_PMAC]
   config BLK_DEV_IDE_PMAC_ATA100FIRST boolean {
    prompt "Probe on-board ATA/100 (Kauai) first" if [IDE && BLK_DEV_IDE_PMAC]
    depends on [BLK_DEV_IDE_PMAC]
    inherited [IDE && BLK_DEV_IDE_PMAC]
   }
  }
  config BLK_DEV_IDE_AU1XXX boolean {
   prompt "IDE for AMD Alchemy Au1200" if [IDE && SOC_AU1200]
   depends on [SOC_AU1200]
   select IDE_XFER_MODE if [IDE && SOC_AU1200]
   inherited [IDE && SOC_AU1200]
   choice boolean {
    prompt "IDE Mode for AMD Alchemy Au1200" if [IDE && SOC_AU1200 && BLK_DEV_IDE_AU1XXX]
    default [CONFIG_BLK_DEV_IDE_AU1XXX_PIO_DBDMA] if [IDE && SOC_AU1200 && BLK_DEV_IDE_AU1XXX]
    depends on [SOC_AU1200 && BLK_DEV_IDE_AU1XXX]
    config BLK_DEV_IDE_AU1XXX_PIO_DBDMA boolean {
     prompt "PIO+DbDMA IDE for AMD Alchemy Au1200" if [<choice>]
     inherited [<choice>]
    }
    config BLK_DEV_IDE_AU1XXX_MDMA2_DBDMA boolean {
     prompt "MDMA2+DbDMA IDE for AMD Alchemy Au1200" if [<choice> && SOC_AU1200 && BLK_DEV_IDE_AU1XXX]
     depends on [SOC_AU1200 && BLK_DEV_IDE_AU1XXX]
     inherited [<choice> && SOC_AU1200 && BLK_DEV_IDE_AU1XXX]
    }
   }
  }
  config BLK_DEV_IDE_TX4938 tristate {
   prompt "TX4938 internal IDE support" if [IDE && SOC_TX4938]
   depends on [SOC_TX4938]
   select IDE_TIMINGS if [IDE && SOC_TX4938]
   inherited [IDE && SOC_TX4938]
  }
  config BLK_DEV_IDE_TX4939 tristate {
   prompt "TX4939 internal IDE support" if [IDE && SOC_TX4939]
   depends on [SOC_TX4939]
   select BLK_DEV_IDEDMA_SFF if [IDE && SOC_TX4939]
   inherited [IDE && SOC_TX4939]
  }
  config BLK_DEV_IDE_AT91 tristate {
   prompt "Atmel AT91 (SAM9, CAP9, AT572D940HF) IDE support" if [IDE && ARM && ARCH_AT91 && !ARCH_AT91RM9200 && !ARCH_AT91X40]
   depends on [ARM && ARCH_AT91 && !ARCH_AT91RM9200 && !ARCH_AT91X40]
   select IDE_TIMINGS if [IDE && ARM && ARCH_AT91 && !ARCH_AT91RM9200 && !ARCH_AT91X40]
   inherited [IDE && ARM && ARCH_AT91 && !ARCH_AT91RM9200 && !ARCH_AT91X40]
  }
  config BLK_DEV_IDE_ICSIDE tristate {
   prompt "ICS IDE interface support" if [IDE && ARM && ARCH_ACORN]
   depends on [ARM && ARCH_ACORN]
   inherited [IDE && ARM && ARCH_ACORN]
   config BLK_DEV_IDEDMA_ICS boolean {
    prompt "ICS DMA support" if [IDE && BLK_DEV_IDE_ICSIDE]
    depends on [BLK_DEV_IDE_ICSIDE]
    inherited [IDE && BLK_DEV_IDE_ICSIDE]
   }
  }
  config BLK_DEV_IDE_RAPIDE tristate {
   prompt "RapIDE interface support" if [IDE && ARM && ARCH_ACORN]
   depends on [ARM && ARCH_ACORN]
   inherited [IDE && ARM && ARCH_ACORN]
  }
  config IDE_H8300 tristate {
   prompt "H8300 IDE support" if [IDE && H8300]
   depends on [H8300]
   default [y] if [IDE && H8300]
   inherited [IDE && H8300]
  }
  config BLK_DEV_GAYLE tristate {
   prompt "Amiga Gayle IDE interface support" if [IDE && AMIGA]
   depends on [AMIGA]
   inherited [IDE && AMIGA]
  }
  config BLK_DEV_BUDDHA tristate {
   prompt "Buddha/Catweasel/X-Surf IDE interface support (EXPERIMENTAL)" if [IDE && ZORRO && EXPERIMENTAL]
   depends on [ZORRO && EXPERIMENTAL]
   inherited [IDE && ZORRO && EXPERIMENTAL]
  }
  config BLK_DEV_FALCON_IDE tristate {
   prompt "Falcon IDE interface support" if [IDE && ATARI]
   depends on [ATARI]
   inherited [IDE && ATARI]
  }
  config BLK_DEV_MAC_IDE tristate {
   prompt "Macintosh Quadra/Powerbook IDE interface support" if [IDE && MAC]
   depends on [MAC]
   inherited [IDE && MAC]
  }
  config BLK_DEV_Q40IDE tristate {
   prompt "Q40/Q60 IDE interface support" if [IDE && Q40]
   depends on [Q40]
   inherited [IDE && Q40]
  }
  config BLK_DEV_PALMCHIP_BK3710 tristate {
   prompt "Palmchip bk3710 IDE controller support" if [IDE && ARCH_DAVINCI]
   depends on [ARCH_DAVINCI]
   select IDE_TIMINGS if [IDE && ARCH_DAVINCI]
   select BLK_DEV_IDEDMA_SFF if [IDE && ARCH_DAVINCI]
   inherited [IDE && ARCH_DAVINCI]
  }
  if [IDE && ISA && (ALPHA || X86 || MIPS)] {
   config BLK_DEV_4DRIVES tristate {
    prompt "Generic 4 drives/port support" if [IDE && ISA && (ALPHA || X86 || MIPS)]
    inherited [IDE && ISA && (ALPHA || X86 || MIPS)]
   }
   config BLK_DEV_ALI14XX tristate {
    prompt "ALI M14xx support" if [IDE && ISA && (ALPHA || X86 || MIPS)]
    select IDE_TIMINGS if [IDE && ISA && (ALPHA || X86 || MIPS)]
    select IDE_LEGACY if [IDE && ISA && (ALPHA || X86 || MIPS)]
    inherited [IDE && ISA && (ALPHA || X86 || MIPS)]
   }
   config BLK_DEV_DTC2278 tristate {
    prompt "DTC-2278 support" if [IDE && ISA && (ALPHA || X86 || MIPS)]
    select IDE_XFER_MODE if [IDE && ISA && (ALPHA || X86 || MIPS)]
    select IDE_LEGACY if [IDE && ISA && (ALPHA || X86 || MIPS)]
    inherited [IDE && ISA && (ALPHA || X86 || MIPS)]
   }
   config BLK_DEV_HT6560B tristate {
    prompt "Holtek HT6560B support" if [IDE && ISA && (ALPHA || X86 || MIPS)]
    select IDE_TIMINGS if [IDE && ISA && (ALPHA || X86 || MIPS)]
    select IDE_LEGACY if [IDE && ISA && (ALPHA || X86 || MIPS)]
    inherited [IDE && ISA && (ALPHA || X86 || MIPS)]
   }
   config BLK_DEV_QD65XX tristate {
    prompt "QDI QD65xx support" if [IDE && ISA && (ALPHA || X86 || MIPS)]
    select IDE_TIMINGS if [IDE && ISA && (ALPHA || X86 || MIPS)]
    select IDE_LEGACY if [IDE && ISA && (ALPHA || X86 || MIPS)]
    inherited [IDE && ISA && (ALPHA || X86 || MIPS)]
   }
   config BLK_DEV_UMC8672 tristate {
    prompt "UMC-8672 support" if [IDE && ISA && (ALPHA || X86 || MIPS)]
    select IDE_XFER_MODE if [IDE && ISA && (ALPHA || X86 || MIPS)]
    select IDE_LEGACY if [IDE && ISA && (ALPHA || X86 || MIPS)]
    inherited [IDE && ISA && (ALPHA || X86 || MIPS)]
   }
  }
  config BLK_DEV_IDEDMA boolean {
   default [BLK_DEV_IDEDMA_SFF || BLK_DEV_IDEDMA_ICS || BLK_DEV_IDE_AU1XXX_MDMA2_DBDMA] if [IDE]
   select IDE_XFER_MODE if [IDE]
   inherited [IDE]
  }
 }
}
menuconfig NETDEVICES boolean {
 default [y] if [NET && UML]
 depends on [NET]
 prompt "Network device support" if [NET]
 inherited [NET]
 if [NETDEVICES] {
  config IFB tristate {
   prompt "Intermediate Functional Block support" if [NETDEVICES && NET_CLS_ACT]
   depends on [NET_CLS_ACT]
   inherited [NETDEVICES && NET_CLS_ACT]
  }
  config DUMMY tristate {
   prompt "Dummy net driver support" if [NETDEVICES]
   inherited [NETDEVICES]
  }
  config BONDING tristate {
   prompt "Bonding driver support" if [NETDEVICES && INET && (IPV6 || IPV6="n")]
   depends on [INET]
   depends on [IPV6 || IPV6="n"]
   inherited [NETDEVICES && INET && (IPV6 || IPV6="n")]
  }
  config MACVLAN tristate {
   prompt "MAC-VLAN support (EXPERIMENTAL)" if [NETDEVICES && EXPERIMENTAL]
   depends on [EXPERIMENTAL]
   inherited [NETDEVICES && EXPERIMENTAL]
  }
  config EQUALIZER tristate {
   prompt "EQL (serial line load balancing) support" if [NETDEVICES]
   inherited [NETDEVICES]
  }
  config TUN tristate {
   prompt "Universal TUN/TAP device driver support" if [NETDEVICES]
   select CRC32 if [NETDEVICES]
   inherited [NETDEVICES]
  }
  config VETH tristate {
   prompt "Virtual ethernet pair device" if [NETDEVICES]
   inherited [NETDEVICES]
  }
  config NET_SB1000 tristate {
   prompt "General Instruments Surfboard 1000" if [NETDEVICES && PNP]
   depends on [PNP]
   inherited [NETDEVICES && PNP]
  }
  menuconfig ARCNET tristate {
   depends on [NETDEVICES && (ISA || PCI)]
   prompt "ARCnet support" if [NETDEVICES && (ISA || PCI)]
   inherited [NETDEVICES && (ISA || PCI)]
   if [NETDEVICES && ARCNET] {
    config ARCNET_1201 tristate {
     prompt "Enable standard ARCNet packet format (RFC 1201)" if [NETDEVICES && ARCNET]
     inherited [NETDEVICES && ARCNET]
    }
    config ARCNET_1051 tristate {
     prompt "Enable old ARCNet packet format (RFC 1051)" if [NETDEVICES && ARCNET]
     inherited [NETDEVICES && ARCNET]
    }
    config ARCNET_RAW tristate {
     prompt "Enable raw mode packet interface" if [NETDEVICES && ARCNET]
     inherited [NETDEVICES && ARCNET]
    }
    config ARCNET_CAP tristate {
     prompt "Enable CAP mode packet interface" if [NETDEVICES && ARCNET]
     inherited [NETDEVICES && ARCNET]
    }
    config ARCNET_COM90xx tristate {
     prompt "ARCnet COM90xx (normal) chipset driver" if [NETDEVICES && ARCNET]
     inherited [NETDEVICES && ARCNET]
    }
    config ARCNET_COM90xxIO tristate {
     prompt "ARCnet COM90xx (IO mapped) chipset driver" if [NETDEVICES && ARCNET]
     inherited [NETDEVICES && ARCNET]
    }
    config ARCNET_RIM_I tristate {
     prompt "ARCnet COM90xx (RIM I) chipset driver" if [NETDEVICES && ARCNET]
     inherited [NETDEVICES && ARCNET]
    }
    config ARCNET_COM20020 tristate {
     prompt "ARCnet COM20020 chipset driver" if [NETDEVICES && ARCNET]
     inherited [NETDEVICES && ARCNET]
     config ARCNET_COM20020_ISA tristate {
      prompt "Support for COM20020 on ISA" if [NETDEVICES && ARCNET && ARCNET_COM20020 && ISA]
      depends on [ARCNET_COM20020 && ISA]
      inherited [NETDEVICES && ARCNET && ARCNET_COM20020 && ISA]
     }
     config ARCNET_COM20020_PCI tristate {
      prompt "Support for COM20020 on PCI" if [NETDEVICES && ARCNET && ARCNET_COM20020 && PCI]
      depends on [ARCNET_COM20020 && PCI]
      inherited [NETDEVICES && ARCNET && ARCNET_COM20020 && PCI]
     }
    }
   }
  }
  menuconfig PHYLIB tristate {
   prompt "PHY Device support and infrastructure" if [NETDEVICES && !S390 && NET_ETHERNET]
   depends on [!S390]
   depends on [NET_ETHERNET]
   inherited [NETDEVICES && !S390 && NET_ETHERNET]
   if [NETDEVICES && PHYLIB] {
    config MARVELL_PHY tristate {
     prompt "Drivers for Marvell PHYs" if [NETDEVICES && PHYLIB]
     inherited [NETDEVICES && PHYLIB]
    }
    config DAVICOM_PHY tristate {
     prompt "Drivers for Davicom PHYs" if [NETDEVICES && PHYLIB]
     inherited [NETDEVICES && PHYLIB]
    }
    config QSEMI_PHY tristate {
     prompt "Drivers for Quality Semiconductor PHYs" if [NETDEVICES && PHYLIB]
     inherited [NETDEVICES && PHYLIB]
    }
    config LXT_PHY tristate {
     prompt "Drivers for the Intel LXT PHYs" if [NETDEVICES && PHYLIB]
     inherited [NETDEVICES && PHYLIB]
    }
    config CICADA_PHY tristate {
     prompt "Drivers for the Cicada PHYs" if [NETDEVICES && PHYLIB]
     inherited [NETDEVICES && PHYLIB]
    }
    config VITESSE_PHY tristate {
     prompt "Drivers for the Vitesse PHYs" if [NETDEVICES && PHYLIB]
     inherited [NETDEVICES && PHYLIB]
    }
    config SMSC_PHY tristate {
     prompt "Drivers for SMSC PHYs" if [NETDEVICES && PHYLIB]
     inherited [NETDEVICES && PHYLIB]
    }
    config BROADCOM_PHY tristate {
     prompt "Drivers for Broadcom PHYs" if [NETDEVICES && PHYLIB]
     inherited [NETDEVICES && PHYLIB]
    }
    config BCM63XX_PHY tristate {
     prompt "Drivers for Broadcom 63xx SOCs internal PHY" if [NETDEVICES && PHYLIB && BCM63XX]
     depends on [BCM63XX]
     inherited [NETDEVICES && PHYLIB && BCM63XX]
    }
    config ICPLUS_PHY tristate {
     prompt "Drivers for ICPlus PHYs" if [NETDEVICES && PHYLIB]
     inherited [NETDEVICES && PHYLIB]
    }
    config REALTEK_PHY tristate {
     prompt "Drivers for Realtek PHYs" if [NETDEVICES && PHYLIB]
     inherited [NETDEVICES && PHYLIB]
    }
    config NATIONAL_PHY tristate {
     prompt "Drivers for National Semiconductor PHYs" if [NETDEVICES && PHYLIB]
     inherited [NETDEVICES && PHYLIB]
    }
    config STE10XP tristate {
     depends on [PHYLIB]
     prompt "Driver for STMicroelectronics STe10Xp PHYs" if [NETDEVICES && PHYLIB]
     inherited [NETDEVICES && PHYLIB]
    }
    config LSI_ET1011C_PHY tristate {
     prompt "Driver for LSI ET1011C PHY" if [NETDEVICES && PHYLIB]
     inherited [NETDEVICES && PHYLIB]
    }
    config FIXED_PHY boolean {
     prompt "Driver for MDIO Bus/PHY emulation with fixed speed/link PHYs" if [NETDEVICES && PHYLIB="y"]
     depends on [PHYLIB="y"]
     inherited [NETDEVICES && PHYLIB="y"]
    }
    config MDIO_BITBANG tristate {
     prompt "Support for bitbanged MDIO buses" if [NETDEVICES && PHYLIB]
     inherited [NETDEVICES && PHYLIB]
     config MDIO_GPIO tristate {
      prompt "Support for GPIO lib-based bitbanged MDIO buses" if [NETDEVICES && PHYLIB && MDIO_BITBANG && GENERIC_GPIO]
      depends on [MDIO_BITBANG && GENERIC_GPIO]
      inherited [NETDEVICES && PHYLIB && MDIO_BITBANG && GENERIC_GPIO]
     }
    }
    config MDIO_OCTEON tristate {
     prompt "Support for MDIO buses on Octeon SOCs" if [NETDEVICES && PHYLIB && CPU_CAVIUM_OCTEON]
     depends on [CPU_CAVIUM_OCTEON]
     default [y] if [NETDEVICES && PHYLIB && CPU_CAVIUM_OCTEON]
     inherited [NETDEVICES && PHYLIB && CPU_CAVIUM_OCTEON]
    }
   }
  }
  menuconfig NET_ETHERNET boolean {
   prompt "Ethernet (10 or 100Mbit)" if [NETDEVICES && !UML]
   depends on [!UML]
   inherited [NETDEVICES && !UML]
   if [NETDEVICES && NET_ETHERNET] {
    config MII tristate {
     prompt "Generic Media Independent Interface device support" if [NETDEVICES && NET_ETHERNET]
     inherited [NETDEVICES && NET_ETHERNET]
    }
    config MACB tristate {
     prompt "Atmel MACB support" if [NETDEVICES && NET_ETHERNET && (AVR32 || ARCH_AT91SAM9260 || ARCH_AT91SAM9263 || ARCH_AT91SAM9G20 || ARCH_AT91SAM9G45 || ARCH_AT91CAP9)]
     depends on [AVR32 || ARCH_AT91SAM9260 || ARCH_AT91SAM9263 || ARCH_AT91SAM9G20 || ARCH_AT91SAM9G45 || ARCH_AT91CAP9]
     select PHYLIB if [NETDEVICES && NET_ETHERNET && (AVR32 || ARCH_AT91SAM9260 || ARCH_AT91SAM9263 || ARCH_AT91SAM9G20 || ARCH_AT91SAM9G45 || ARCH_AT91CAP9)]
     inherited [NETDEVICES && NET_ETHERNET && (AVR32 || ARCH_AT91SAM9260 || ARCH_AT91SAM9263 || ARCH_AT91SAM9G20 || ARCH_AT91SAM9G45 || ARCH_AT91CAP9)]
    }
    config ARM_AM79C961A boolean {
     prompt "ARM EBSA110 AM79C961A support" if [NETDEVICES && NET_ETHERNET && ARM && ARCH_EBSA110]
     depends on [ARM && ARCH_EBSA110]
     select CRC32 if [NETDEVICES && NET_ETHERNET && ARM && ARCH_EBSA110]
     inherited [NETDEVICES && NET_ETHERNET && ARM && ARCH_EBSA110]
    }
    config ARM_ETHER1 tristate {
     prompt "Acorn Ether1 support" if [NETDEVICES && NET_ETHERNET && ARM && ARCH_ACORN]
     depends on [ARM && ARCH_ACORN]
     inherited [NETDEVICES && NET_ETHERNET && ARM && ARCH_ACORN]
    }
    config ARM_ETHER3 tristate {
     prompt "Acorn/ANT Ether3 support" if [NETDEVICES && NET_ETHERNET && ARM && ARCH_ACORN]
     depends on [ARM && ARCH_ACORN]
     inherited [NETDEVICES && NET_ETHERNET && ARM && ARCH_ACORN]
    }
    config ARM_ETHERH tristate {
     prompt "I-cubed EtherH/ANT EtherM support" if [NETDEVICES && NET_ETHERNET && ARM && ARCH_ACORN]
     depends on [ARM && ARCH_ACORN]
     select CRC32 if [NETDEVICES && NET_ETHERNET && ARM && ARCH_ACORN]
     inherited [NETDEVICES && NET_ETHERNET && ARM && ARCH_ACORN]
    }
    config ARM_AT91_ETHER tristate {
     prompt "AT91RM9200 Ethernet support" if [NETDEVICES && NET_ETHERNET && ARM && ARCH_AT91RM9200]
     depends on [ARM && ARCH_AT91RM9200]
     select MII if [NETDEVICES && NET_ETHERNET && ARM && ARCH_AT91RM9200]
     inherited [NETDEVICES && NET_ETHERNET && ARM && ARCH_AT91RM9200]
    }
    config ARM_KS8695_ETHER tristate {
     prompt "KS8695 Ethernet support" if [NETDEVICES && NET_ETHERNET && ARM && ARCH_KS8695]
     depends on [ARM && ARCH_KS8695]
     select MII if [NETDEVICES && NET_ETHERNET && ARM && ARCH_KS8695]
     inherited [NETDEVICES && NET_ETHERNET && ARM && ARCH_KS8695]
    }
    config EP93XX_ETH tristate {
     prompt "EP93xx Ethernet support" if [NETDEVICES && NET_ETHERNET && ARM && ARCH_EP93XX]
     depends on [ARM && ARCH_EP93XX]
     select MII if [NETDEVICES && NET_ETHERNET && ARM && ARCH_EP93XX]
     inherited [NETDEVICES && NET_ETHERNET && ARM && ARCH_EP93XX]
    }
    config IXP4XX_ETH tristate {
     prompt "Intel IXP4xx Ethernet support" if [NETDEVICES && NET_ETHERNET && ARM && ARCH_IXP4XX && IXP4XX_NPE && IXP4XX_QMGR]
     depends on [ARM && ARCH_IXP4XX && IXP4XX_NPE && IXP4XX_QMGR]
     select PHYLIB if [NETDEVICES && NET_ETHERNET && ARM && ARCH_IXP4XX && IXP4XX_NPE && IXP4XX_QMGR]
     inherited [NETDEVICES && NET_ETHERNET && ARM && ARCH_IXP4XX && IXP4XX_NPE && IXP4XX_QMGR]
    }
    config W90P910_ETH tristate {
     prompt "Nuvoton w90p910 Ethernet support" if [NETDEVICES && NET_ETHERNET && ARM && ARCH_W90X900]
     depends on [ARM && ARCH_W90X900]
     select PHYLIB if [NETDEVICES && NET_ETHERNET && ARM && ARCH_W90X900]
     select MII if [NETDEVICES && NET_ETHERNET && ARM && ARCH_W90X900]
     inherited [NETDEVICES && NET_ETHERNET && ARM && ARCH_W90X900]
    }
    config AX88796 tristate {
     prompt "ASIX AX88796 NE2000 clone support" if [NETDEVICES && NET_ETHERNET && (ARM || MIPS || SUPERH)]
     depends on [ARM || MIPS || SUPERH]
     select CRC32 if [NETDEVICES && NET_ETHERNET && (ARM || MIPS || SUPERH)]
     select MII if [NETDEVICES && NET_ETHERNET && (ARM || MIPS || SUPERH)]
     inherited [NETDEVICES && NET_ETHERNET && (ARM || MIPS || SUPERH)]
     config AX88796_93CX6 boolean {
      prompt "ASIX AX88796 external 93CX6 eeprom support" if [NETDEVICES && NET_ETHERNET && AX88796]
      depends on [AX88796]
      select EEPROM_93CX6 if [NETDEVICES && NET_ETHERNET && AX88796]
      inherited [NETDEVICES && NET_ETHERNET && AX88796]
     }
    }
    config MACE tristate {
     prompt "MACE (Power Mac ethernet) support" if [NETDEVICES && NET_ETHERNET && PPC_PMAC && PPC32]
     depends on [PPC_PMAC && PPC32]
     select CRC32 if [NETDEVICES && NET_ETHERNET && PPC_PMAC && PPC32]
     inherited [NETDEVICES && NET_ETHERNET && PPC_PMAC && PPC32]
     config MACE_AAUI_PORT boolean {
      prompt "Use AAUI port instead of TP by default" if [NETDEVICES && NET_ETHERNET && MACE]
      depends on [MACE]
      inherited [NETDEVICES && NET_ETHERNET && MACE]
     }
    }
    config BMAC tristate {
     prompt "BMAC (G3 ethernet) support" if [NETDEVICES && NET_ETHERNET && PPC_PMAC && PPC32]
     depends on [PPC_PMAC && PPC32]
     select CRC32 if [NETDEVICES && NET_ETHERNET && PPC_PMAC && PPC32]
     inherited [NETDEVICES && NET_ETHERNET && PPC_PMAC && PPC32]
    }
    config ARIADNE tristate {
     prompt "Ariadne support" if [NETDEVICES && NET_ETHERNET && ZORRO]
     depends on [ZORRO]
     inherited [NETDEVICES && NET_ETHERNET && ZORRO]
    }
    config A2065 tristate {
     prompt "A2065 support" if [NETDEVICES && NET_ETHERNET && ZORRO]
     depends on [ZORRO]
     select CRC32 if [NETDEVICES && NET_ETHERNET && ZORRO]
     inherited [NETDEVICES && NET_ETHERNET && ZORRO]
    }
    config HYDRA tristate {
     prompt "Hydra support" if [NETDEVICES && NET_ETHERNET && ZORRO]
     depends on [ZORRO]
     select CRC32 if [NETDEVICES && NET_ETHERNET && ZORRO]
     inherited [NETDEVICES && NET_ETHERNET && ZORRO]
    }
    config ZORRO8390 tristate {
     prompt "Zorro NS8390-based Ethernet support" if [NETDEVICES && NET_ETHERNET && ZORRO]
     depends on [ZORRO]
     select CRC32 if [NETDEVICES && NET_ETHERNET && ZORRO]
     inherited [NETDEVICES && NET_ETHERNET && ZORRO]
    }
    config APNE tristate {
     prompt "PCMCIA NE2000 support" if [NETDEVICES && NET_ETHERNET && AMIGA_PCMCIA]
     depends on [AMIGA_PCMCIA]
     select CRC32 if [NETDEVICES && NET_ETHERNET && AMIGA_PCMCIA]
     inherited [NETDEVICES && NET_ETHERNET && AMIGA_PCMCIA]
    }
    config MAC8390 boolean {
     prompt "Macintosh NS 8390 based ethernet cards" if [NETDEVICES && NET_ETHERNET && MAC]
     depends on [MAC]
     select CRC32 if [NETDEVICES && NET_ETHERNET && MAC]
     inherited [NETDEVICES && NET_ETHERNET && MAC]
    }
    config MAC89x0 tristate {
     prompt "Macintosh CS89x0 based ethernet cards" if [NETDEVICES && NET_ETHERNET && MAC]
     depends on [MAC]
     inherited [NETDEVICES && NET_ETHERNET && MAC]
    }
    config MACSONIC tristate {
     prompt "Macintosh SONIC based ethernet (onboard, NuBus, LC, CS)" if [NETDEVICES && NET_ETHERNET && MAC]
     depends on [MAC]
     inherited [NETDEVICES && NET_ETHERNET && MAC]
    }
    config MACMACE boolean {
     prompt "Macintosh (AV) onboard MACE ethernet" if [NETDEVICES && NET_ETHERNET && MAC]
     depends on [MAC]
     select CRC32 if [NETDEVICES && NET_ETHERNET && MAC]
     inherited [NETDEVICES && NET_ETHERNET && MAC]
    }
    config MVME147_NET tristate {
     prompt "MVME147 (Lance) Ethernet support" if [NETDEVICES && NET_ETHERNET && MVME147]
     depends on [MVME147]
     select CRC32 if [NETDEVICES && NET_ETHERNET && MVME147]
     inherited [NETDEVICES && NET_ETHERNET && MVME147]
    }
    config MVME16x_NET tristate {
     prompt "MVME16x Ethernet support" if [NETDEVICES && NET_ETHERNET && MVME16x]
     depends on [MVME16x]
     inherited [NETDEVICES && NET_ETHERNET && MVME16x]
    }
    config BVME6000_NET tristate {
     prompt "BVME6000 Ethernet support" if [NETDEVICES && NET_ETHERNET && BVME6000]
     depends on [BVME6000]
     inherited [NETDEVICES && NET_ETHERNET && BVME6000]
    }
    config ATARILANCE tristate {
     prompt "Atari Lance support" if [NETDEVICES && NET_ETHERNET && ATARI]
     depends on [ATARI]
     inherited [NETDEVICES && NET_ETHERNET && ATARI]
    }
    config SUN3LANCE tristate {
     prompt "Sun3/Sun3x on-board LANCE support" if [NETDEVICES && NET_ETHERNET && (SUN3 || SUN3X)]
     depends on [SUN3 || SUN3X]
     inherited [NETDEVICES && NET_ETHERNET && (SUN3 || SUN3X)]
    }
    config SUN3_82586 boolean {
     prompt "Sun3 on-board Intel 82586 support" if [NETDEVICES && NET_ETHERNET && SUN3]
     depends on [SUN3]
     inherited [NETDEVICES && NET_ETHERNET && SUN3]
    }
    config HPLANCE boolean {
     prompt "HP on-board LANCE support" if [NETDEVICES && NET_ETHERNET && DIO]
     depends on [DIO]
     select CRC32 if [NETDEVICES && NET_ETHERNET && DIO]
     inherited [NETDEVICES && NET_ETHERNET && DIO]
    }
    config LASI_82596 tristate {
     prompt "Lasi ethernet" if [NETDEVICES && NET_ETHERNET && GSC]
     depends on [GSC]
     inherited [NETDEVICES && NET_ETHERNET && GSC]
    }
    config SNI_82596 tristate {
     prompt "SNI RM ethernet" if [NETDEVICES && NET_ETHERNET && SNI_RM]
     depends on [NET_ETHERNET && SNI_RM]
     inherited [NETDEVICES && NET_ETHERNET && SNI_RM]
    }
    config KORINA tristate {
     prompt "Korina (IDT RC32434) Ethernet support" if [NETDEVICES && NET_ETHERNET && MIKROTIK_RB532]
     depends on [NET_ETHERNET && MIKROTIK_RB532]
     inherited [NETDEVICES && NET_ETHERNET && MIKROTIK_RB532]
    }
    config MIPS_JAZZ_SONIC tristate {
     prompt "MIPS JAZZ onboard SONIC Ethernet support" if [NETDEVICES && NET_ETHERNET && MACH_JAZZ]
     depends on [MACH_JAZZ]
     inherited [NETDEVICES && NET_ETHERNET && MACH_JAZZ]
    }
    config XTENSA_XT2000_SONIC tristate {
     prompt "Xtensa XT2000 onboard SONIC Ethernet support" if [NETDEVICES && NET_ETHERNET && XTENSA_PLATFORM_XT2000]
     depends on [XTENSA_PLATFORM_XT2000]
     inherited [NETDEVICES && NET_ETHERNET && XTENSA_PLATFORM_XT2000]
    }
    config MIPS_AU1X00_ENET boolean {
     prompt "MIPS AU1000 Ethernet support" if [NETDEVICES && NET_ETHERNET && SOC_AU1X00]
     depends on [SOC_AU1X00]
     select PHYLIB if [NETDEVICES && NET_ETHERNET && SOC_AU1X00]
     select CRC32 if [NETDEVICES && NET_ETHERNET && SOC_AU1X00]
     inherited [NETDEVICES && NET_ETHERNET && SOC_AU1X00]
    }
    config SGI_IOC3_ETH boolean {
     prompt "SGI IOC3 Ethernet" if [NETDEVICES && NET_ETHERNET && PCI && SGI_IP27]
     depends on [PCI && SGI_IP27]
     select CRC32 if [NETDEVICES && NET_ETHERNET && PCI && SGI_IP27]
     select MII if [NETDEVICES && NET_ETHERNET && PCI && SGI_IP27]
     inherited [NETDEVICES && NET_ETHERNET && PCI && SGI_IP27]
    }
    config MIPS_SIM_NET tristate {
     prompt "MIPS simulator Network device" if [NETDEVICES && NET_ETHERNET && MIPS_SIM]
     depends on [MIPS_SIM]
     inherited [NETDEVICES && NET_ETHERNET && MIPS_SIM]
    }
    config SGI_O2MACE_ETH tristate {
     prompt "SGI O2 MACE Fast Ethernet support" if [NETDEVICES && NET_ETHERNET && SGI_IP32="y"]
     depends on [SGI_IP32="y"]
     inherited [NETDEVICES && NET_ETHERNET && SGI_IP32="y"]
    }
    config STNIC tristate {
     prompt "National DP83902AV  support" if [NETDEVICES && NET_ETHERNET && SUPERH]
     depends on [SUPERH]
     select CRC32 if [NETDEVICES && NET_ETHERNET && SUPERH]
     inherited [NETDEVICES && NET_ETHERNET && SUPERH]
    }
    config SH_ETH tristate {
     prompt "Renesas SuperH Ethernet support" if [NETDEVICES && NET_ETHERNET && SUPERH && (CPU_SUBTYPE_SH7710 || CPU_SUBTYPE_SH7712 || CPU_SUBTYPE_SH7763 || CPU_SUBTYPE_SH7619 || CPU_SUBTYPE_SH7724)]
     depends on [SUPERH && (CPU_SUBTYPE_SH7710 || CPU_SUBTYPE_SH7712 || CPU_SUBTYPE_SH7763 || CPU_SUBTYPE_SH7619 || CPU_SUBTYPE_SH7724)]
     select CRC32 if [NETDEVICES && NET_ETHERNET && SUPERH && (CPU_SUBTYPE_SH7710 || CPU_SUBTYPE_SH7712 || CPU_SUBTYPE_SH7763 || CPU_SUBTYPE_SH7619 || CPU_SUBTYPE_SH7724)]
     select MII if [NETDEVICES && NET_ETHERNET && SUPERH && (CPU_SUBTYPE_SH7710 || CPU_SUBTYPE_SH7712 || CPU_SUBTYPE_SH7763 || CPU_SUBTYPE_SH7619 || CPU_SUBTYPE_SH7724)]
     select MDIO_BITBANG if [NETDEVICES && NET_ETHERNET && SUPERH && (CPU_SUBTYPE_SH7710 || CPU_SUBTYPE_SH7712 || CPU_SUBTYPE_SH7763 || CPU_SUBTYPE_SH7619 || CPU_SUBTYPE_SH7724)]
     select PHYLIB if [NETDEVICES && NET_ETHERNET && SUPERH && (CPU_SUBTYPE_SH7710 || CPU_SUBTYPE_SH7712 || CPU_SUBTYPE_SH7763 || CPU_SUBTYPE_SH7619 || CPU_SUBTYPE_SH7724)]
     inherited [NETDEVICES && NET_ETHERNET && SUPERH && (CPU_SUBTYPE_SH7710 || CPU_SUBTYPE_SH7712 || CPU_SUBTYPE_SH7763 || CPU_SUBTYPE_SH7619 || CPU_SUBTYPE_SH7724)]
    }
    config SUNLANCE tristate {
     prompt "Sun LANCE support" if [NETDEVICES && NET_ETHERNET && SBUS]
     depends on [SBUS]
     select CRC32 if [NETDEVICES && NET_ETHERNET && SBUS]
     inherited [NETDEVICES && NET_ETHERNET && SBUS]
    }
    config HAPPYMEAL tristate {
     prompt "Sun Happy Meal 10/100baseT support" if [NETDEVICES && NET_ETHERNET && (SBUS || PCI)]
     depends on [SBUS || PCI]
     select CRC32 if [NETDEVICES && NET_ETHERNET && (SBUS || PCI)]
     inherited [NETDEVICES && NET_ETHERNET && (SBUS || PCI)]
    }
    config SUNBMAC tristate {
     prompt "Sun BigMAC 10/100baseT support (EXPERIMENTAL)" if [NETDEVICES && NET_ETHERNET && SBUS && EXPERIMENTAL]
     depends on [SBUS && EXPERIMENTAL]
     select CRC32 if [NETDEVICES && NET_ETHERNET && SBUS && EXPERIMENTAL]
     inherited [NETDEVICES && NET_ETHERNET && SBUS && EXPERIMENTAL]
    }
    config SUNQE tristate {
     prompt "Sun QuadEthernet support" if [NETDEVICES && NET_ETHERNET && SBUS]
     depends on [SBUS]
     select CRC32 if [NETDEVICES && NET_ETHERNET && SBUS]
     inherited [NETDEVICES && NET_ETHERNET && SBUS]
    }
    config SUNGEM tristate {
     prompt "Sun GEM support" if [NETDEVICES && NET_ETHERNET && PCI]
     depends on [PCI]
     select CRC32 if [NETDEVICES && NET_ETHERNET && PCI]
     inherited [NETDEVICES && NET_ETHERNET && PCI]
    }
    config CASSINI tristate {
     prompt "Sun Cassini support" if [NETDEVICES && NET_ETHERNET && PCI]
     depends on [PCI]
     select CRC32 if [NETDEVICES && NET_ETHERNET && PCI]
     inherited [NETDEVICES && NET_ETHERNET && PCI]
    }
    config SUNVNET tristate {
     prompt "Sun Virtual Network support" if [NETDEVICES && NET_ETHERNET && SUN_LDOMS]
     depends on [SUN_LDOMS]
     inherited [NETDEVICES && NET_ETHERNET && SUN_LDOMS]
    }
    config NET_VENDOR_3COM boolean {
     prompt "3COM cards" if [NETDEVICES && NET_ETHERNET && (ISA || EISA || MCA || PCI)]
     depends on [ISA || EISA || MCA || PCI]
     inherited [NETDEVICES && NET_ETHERNET && (ISA || EISA || MCA || PCI)]
     config EL1 tristate {
      prompt "3c501 \"EtherLink\" support" if [NETDEVICES && NET_ETHERNET && NET_VENDOR_3COM && ISA]
      depends on [NET_VENDOR_3COM && ISA]
      inherited [NETDEVICES && NET_ETHERNET && NET_VENDOR_3COM && ISA]
     }
     config EL2 tristate {
      prompt "3c503 \"EtherLink II\" support" if [NETDEVICES && NET_ETHERNET && NET_VENDOR_3COM && ISA]
      depends on [NET_VENDOR_3COM && ISA]
      select CRC32 if [NETDEVICES && NET_ETHERNET && NET_VENDOR_3COM && ISA]
      inherited [NETDEVICES && NET_ETHERNET && NET_VENDOR_3COM && ISA]
     }
     config ELPLUS tristate {
      prompt "3c505 \"EtherLink Plus\" support" if [NETDEVICES && NET_ETHERNET && NET_VENDOR_3COM && ISA && ISA_DMA_API]
      depends on [NET_VENDOR_3COM && ISA && ISA_DMA_API]
      inherited [NETDEVICES && NET_ETHERNET && NET_VENDOR_3COM && ISA && ISA_DMA_API]
     }
     config EL16 tristate {
      prompt "3c507 \"EtherLink 16\" support (EXPERIMENTAL)" if [NETDEVICES && NET_ETHERNET && NET_VENDOR_3COM && ISA && EXPERIMENTAL]
      depends on [NET_VENDOR_3COM && ISA && EXPERIMENTAL]
      inherited [NETDEVICES && NET_ETHERNET && NET_VENDOR_3COM && ISA && EXPERIMENTAL]
     }
     config EL3 tristate {
      prompt "3c509/3c529 (MCA)/3c579 \"EtherLink III\" support" if [NETDEVICES && NET_ETHERNET && NET_VENDOR_3COM && (ISA || EISA || MCA)]
      depends on [NET_VENDOR_3COM && (ISA || EISA || MCA)]
      inherited [NETDEVICES && NET_ETHERNET && NET_VENDOR_3COM && (ISA || EISA || MCA)]
     }
     config 3C515 tristate {
      prompt "3c515 ISA \"Fast EtherLink\"" if [NETDEVICES && NET_ETHERNET && NET_VENDOR_3COM && (ISA || EISA) && ISA_DMA_API]
      depends on [NET_VENDOR_3COM && (ISA || EISA) && ISA_DMA_API]
      inherited [NETDEVICES && NET_ETHERNET && NET_VENDOR_3COM && (ISA || EISA) && ISA_DMA_API]
     }
     config ELMC tristate {
      prompt "3c523 \"EtherLink/MC\" support" if [NETDEVICES && NET_ETHERNET && NET_VENDOR_3COM && MCA_LEGACY]
      depends on [NET_VENDOR_3COM && MCA_LEGACY]
      inherited [NETDEVICES && NET_ETHERNET && NET_VENDOR_3COM && MCA_LEGACY]
     }
     config ELMC_II tristate {
      prompt "3c527 \"EtherLink/MC 32\" support (EXPERIMENTAL)" if [NETDEVICES && NET_ETHERNET && NET_VENDOR_3COM && MCA && MCA_LEGACY]
      depends on [NET_VENDOR_3COM && MCA && MCA_LEGACY]
      inherited [NETDEVICES && NET_ETHERNET && NET_VENDOR_3COM && MCA && MCA_LEGACY]
     }
     config VORTEX tristate {
      prompt "3c590/3c900 series (592/595/597) \"Vortex/Boomerang\" support" if [NETDEVICES && NET_ETHERNET && NET_VENDOR_3COM && (PCI || EISA)]
      depends on [NET_VENDOR_3COM && (PCI || EISA)]
      select MII if [NETDEVICES && NET_ETHERNET && NET_VENDOR_3COM && (PCI || EISA)]
      inherited [NETDEVICES && NET_ETHERNET && NET_VENDOR_3COM && (PCI || EISA)]
     }
     config TYPHOON tristate {
      prompt "3cr990 series \"Typhoon\" support" if [NETDEVICES && NET_ETHERNET && NET_VENDOR_3COM && PCI]
      depends on [NET_VENDOR_3COM && PCI]
      select CRC32 if [NETDEVICES && NET_ETHERNET && NET_VENDOR_3COM && PCI]
      inherited [NETDEVICES && NET_ETHERNET && NET_VENDOR_3COM && PCI]
     }
    }
    config LANCE tristate {
     prompt "AMD LANCE and PCnet (AT1500 and NE2100) support" if [NETDEVICES && NET_ETHERNET && ISA && ISA_DMA_API]
     depends on [ISA && ISA_DMA_API]
     inherited [NETDEVICES && NET_ETHERNET && ISA && ISA_DMA_API]
    }
    config NET_VENDOR_SMC boolean {
     prompt "Western Digital/SMC cards" if [NETDEVICES && NET_ETHERNET && (ISA || MCA || EISA || MAC)]
     depends on [ISA || MCA || EISA || MAC]
     inherited [NETDEVICES && NET_ETHERNET && (ISA || MCA || EISA || MAC)]
     config WD80x3 tristate {
      prompt "WD80*3 support" if [NETDEVICES && NET_ETHERNET && NET_VENDOR_SMC && ISA]
      depends on [NET_VENDOR_SMC && ISA]
      select CRC32 if [NETDEVICES && NET_ETHERNET && NET_VENDOR_SMC && ISA]
      inherited [NETDEVICES && NET_ETHERNET && NET_VENDOR_SMC && ISA]
     }
     config ULTRAMCA tristate {
      prompt "SMC Ultra MCA support" if [NETDEVICES && NET_ETHERNET && NET_VENDOR_SMC && MCA]
      depends on [NET_VENDOR_SMC && MCA]
      select CRC32 if [NETDEVICES && NET_ETHERNET && NET_VENDOR_SMC && MCA]
      inherited [NETDEVICES && NET_ETHERNET && NET_VENDOR_SMC && MCA]
     }
     config ULTRA tristate {
      prompt "SMC Ultra support" if [NETDEVICES && NET_ETHERNET && NET_VENDOR_SMC && ISA]
      depends on [NET_VENDOR_SMC && ISA]
      select CRC32 if [NETDEVICES && NET_ETHERNET && NET_VENDOR_SMC && ISA]
      inherited [NETDEVICES && NET_ETHERNET && NET_VENDOR_SMC && ISA]
     }
     config ULTRA32 tristate {
      prompt "SMC Ultra32 EISA support" if [NETDEVICES && NET_ETHERNET && NET_VENDOR_SMC && EISA]
      depends on [NET_VENDOR_SMC && EISA]
      select CRC32 if [NETDEVICES && NET_ETHERNET && NET_VENDOR_SMC && EISA]
      inherited [NETDEVICES && NET_ETHERNET && NET_VENDOR_SMC && EISA]
     }
    }
    config BFIN_MAC tristate {
     prompt "Blackfin on-chip MAC support" if [NETDEVICES && NET_ETHERNET && (BF516 || BF518 || BF526 || BF527 || BF536 || BF537)]
     depends on [NET_ETHERNET && (BF516 || BF518 || BF526 || BF527 || BF536 || BF537)]
     select CRC32 if [NETDEVICES && NET_ETHERNET && (BF516 || BF518 || BF526 || BF527 || BF536 || BF537)]
     select MII if [NETDEVICES && NET_ETHERNET && (BF516 || BF518 || BF526 || BF527 || BF536 || BF537)]
     select PHYLIB if [NETDEVICES && NET_ETHERNET && (BF516 || BF518 || BF526 || BF527 || BF536 || BF537)]
     select BFIN_MAC_USE_L1 if [NETDEVICES && NET_ETHERNET && (BF516 || BF518 || BF526 || BF527 || BF536 || BF537) && DMA_UNCACHED_NONE]
     inherited [NETDEVICES && NET_ETHERNET && (BF516 || BF518 || BF526 || BF527 || BF536 || BF537)]
     config BFIN_MAC_USE_L1 boolean {
      prompt "Use L1 memory for rx/tx packets" if [NETDEVICES && NET_ETHERNET && BFIN_MAC && (BF527 || BF537)]
      depends on [BFIN_MAC && (BF527 || BF537)]
      default [y] if [NETDEVICES && NET_ETHERNET && BFIN_MAC && (BF527 || BF537)]
      inherited [NETDEVICES && NET_ETHERNET && BFIN_MAC && (BF527 || BF537)]
     }
     config BFIN_TX_DESC_NUM integer {
      prompt "Number of transmit buffer packets" if [NETDEVICES && NET_ETHERNET && BFIN_MAC]
      depends on [BFIN_MAC]
      range [6 10] if [NETDEVICES && NET_ETHERNET && BFIN_MAC && BFIN_MAC_USE_L1]
      range [10 100] if [NETDEVICES && NET_ETHERNET && BFIN_MAC]
      default [10] if [NETDEVICES && NET_ETHERNET && BFIN_MAC]
      inherited [NETDEVICES && NET_ETHERNET && BFIN_MAC]
     }
     config BFIN_RX_DESC_NUM integer {
      prompt "Number of receive buffer packets" if [NETDEVICES && NET_ETHERNET && BFIN_MAC]
      depends on [BFIN_MAC]
      range [20 100] if [NETDEVICES && NET_ETHERNET && BFIN_MAC && BFIN_MAC_USE_L1]
      range [20 800] if [NETDEVICES && NET_ETHERNET && BFIN_MAC]
      default [20] if [NETDEVICES && NET_ETHERNET && BFIN_MAC]
      inherited [NETDEVICES && NET_ETHERNET && BFIN_MAC]
     }
     config BFIN_MAC_RMII boolean {
      prompt "RMII PHY Interface (EXPERIMENTAL)" if [NETDEVICES && NET_ETHERNET && BFIN_MAC && EXPERIMENTAL]
      depends on [BFIN_MAC && EXPERIMENTAL]
      default [y] if [NETDEVICES && NET_ETHERNET && BFIN_MAC && EXPERIMENTAL && BFIN527_EZKIT]
      default [n] if [NETDEVICES && NET_ETHERNET && BFIN_MAC && EXPERIMENTAL && BFIN537_STAMP]
      inherited [NETDEVICES && NET_ETHERNET && BFIN_MAC && EXPERIMENTAL]
     }
    }
    config SMC9194 tristate {
     prompt "SMC 9194 support" if [NETDEVICES && NET_ETHERNET && NET_VENDOR_SMC && (ISA || MAC && BROKEN)]
     depends on [NET_VENDOR_SMC && (ISA || MAC && BROKEN)]
     select CRC32 if [NETDEVICES && NET_ETHERNET && NET_VENDOR_SMC && (ISA || MAC && BROKEN)]
     inherited [NETDEVICES && NET_ETHERNET && NET_VENDOR_SMC && (ISA || MAC && BROKEN)]
    }
    config SMC91X tristate {
     prompt "SMC 91C9x/91C1xxx support" if [NETDEVICES && NET_ETHERNET && (ARM || REDWOOD_5 || REDWOOD_6 || M32R || SUPERH || MIPS || BLACKFIN || MN10300)]
     select CRC32 if [NETDEVICES && NET_ETHERNET && (ARM || REDWOOD_5 || REDWOOD_6 || M32R || SUPERH || MIPS || BLACKFIN || MN10300)]
     select MII if [NETDEVICES && NET_ETHERNET && (ARM || REDWOOD_5 || REDWOOD_6 || M32R || SUPERH || MIPS || BLACKFIN || MN10300)]
     depends on [ARM || REDWOOD_5 || REDWOOD_6 || M32R || SUPERH || MIPS || BLACKFIN || MN10300]
     inherited [NETDEVICES && NET_ETHERNET && (ARM || REDWOOD_5 || REDWOOD_6 || M32R || SUPERH || MIPS || BLACKFIN || MN10300)]
    }
    config NET_NETX tristate {
     prompt "NetX Ethernet support" if [NETDEVICES && NET_ETHERNET && ARCH_NETX]
     select MII if [NETDEVICES && NET_ETHERNET && ARCH_NETX]
     depends on [ARCH_NETX]
     inherited [NETDEVICES && NET_ETHERNET && ARCH_NETX]
    }
    config TI_DAVINCI_EMAC tristate {
     prompt "TI DaVinci EMAC Support" if [NETDEVICES && NET_ETHERNET && ARM && ARCH_DAVINCI]
     depends on [ARM && ARCH_DAVINCI]
     select PHYLIB if [NETDEVICES && NET_ETHERNET && ARM && ARCH_DAVINCI]
     inherited [NETDEVICES && NET_ETHERNET && ARM && ARCH_DAVINCI]
    }
    config DM9000 tristate {
     prompt "DM9000 support" if [NETDEVICES && NET_ETHERNET && (ARM || BLACKFIN || MIPS)]
     depends on [ARM || BLACKFIN || MIPS]
     select CRC32 if [NETDEVICES && NET_ETHERNET && (ARM || BLACKFIN || MIPS)]
     select MII if [NETDEVICES && NET_ETHERNET && (ARM || BLACKFIN || MIPS)]
     inherited [NETDEVICES && NET_ETHERNET && (ARM || BLACKFIN || MIPS)]
     config DM9000_DEBUGLEVEL integer {
      prompt "DM9000 maximum debug level" if [NETDEVICES && NET_ETHERNET && DM9000]
      depends on [DM9000]
      default [4] if [NETDEVICES && NET_ETHERNET && DM9000]
      inherited [NETDEVICES && NET_ETHERNET && DM9000]
     }
     config DM9000_FORCE_SIMPLE_PHY_POLL boolean {
      prompt "Force simple NSR based PHY polling" if [NETDEVICES && NET_ETHERNET && DM9000]
      depends on [DM9000]
      inherited [NETDEVICES && NET_ETHERNET && DM9000]
     }
    }
    config ENC28J60 tristate {
     prompt "ENC28J60 support" if [NETDEVICES && EXPERIMENTAL && SPI && NET_ETHERNET]
     depends on [EXPERIMENTAL && SPI && NET_ETHERNET]
     select CRC32 if [NETDEVICES && EXPERIMENTAL && SPI && NET_ETHERNET]
     inherited [NETDEVICES && EXPERIMENTAL && SPI && NET_ETHERNET]
     config ENC28J60_WRITEVERIFY boolean {
      prompt "Enable write verify" if [NETDEVICES && NET_ETHERNET && ENC28J60]
      depends on [ENC28J60]
      inherited [NETDEVICES && NET_ETHERNET && ENC28J60]
     }
    }
    config ETHOC tristate {
     prompt "OpenCores 10/100 Mbps Ethernet MAC support" if [NETDEVICES && NET_ETHERNET && HAS_IOMEM && HAS_DMA]
     depends on [NET_ETHERNET && HAS_IOMEM && HAS_DMA]
     select MII if [NETDEVICES && NET_ETHERNET && HAS_IOMEM && HAS_DMA]
     select PHYLIB if [NETDEVICES && NET_ETHERNET && HAS_IOMEM && HAS_DMA]
     select CRC32 if [NETDEVICES && NET_ETHERNET && HAS_IOMEM && HAS_DMA]
     select BITREVERSE if [NETDEVICES && NET_ETHERNET && HAS_IOMEM && HAS_DMA]
     inherited [NETDEVICES && NET_ETHERNET && HAS_IOMEM && HAS_DMA]
    }
    config SMC911X tristate {
     prompt "SMSC LAN911[5678] support" if [NETDEVICES && NET_ETHERNET && (ARM || SUPERH)]
     select CRC32 if [NETDEVICES && NET_ETHERNET && (ARM || SUPERH)]
     select MII if [NETDEVICES && NET_ETHERNET && (ARM || SUPERH)]
     depends on [ARM || SUPERH]
     inherited [NETDEVICES && NET_ETHERNET && (ARM || SUPERH)]
    }
    config SMSC911X tristate {
     prompt "SMSC LAN911x/LAN921x families embedded ethernet support" if [NETDEVICES && NET_ETHERNET && (ARM || SUPERH || BLACKFIN || MIPS)]
     depends on [ARM || SUPERH || BLACKFIN || MIPS]
     select CRC32 if [NETDEVICES && NET_ETHERNET && (ARM || SUPERH || BLACKFIN || MIPS)]
     select MII if [NETDEVICES && NET_ETHERNET && (ARM || SUPERH || BLACKFIN || MIPS)]
     select PHYLIB if [NETDEVICES && NET_ETHERNET && (ARM || SUPERH || BLACKFIN || MIPS)]
     inherited [NETDEVICES && NET_ETHERNET && (ARM || SUPERH || BLACKFIN || MIPS)]
    }
    config NET_VENDOR_RACAL boolean {
     prompt "Racal-Interlan (Micom) NI cards" if [NETDEVICES && NET_ETHERNET && ISA]
     depends on [ISA]
     inherited [NETDEVICES && NET_ETHERNET && ISA]
     config NI5010 tristate {
      prompt "NI5010 support (EXPERIMENTAL)" if [NETDEVICES && NET_ETHERNET && NET_VENDOR_RACAL && ISA && EXPERIMENTAL && BROKEN_ON_SMP]
      depends on [NET_VENDOR_RACAL && ISA && EXPERIMENTAL && BROKEN_ON_SMP]
      inherited [NETDEVICES && NET_ETHERNET && NET_VENDOR_RACAL && ISA && EXPERIMENTAL && BROKEN_ON_SMP]
     }
     config NI52 tristate {
      prompt "NI5210 support" if [NETDEVICES && NET_ETHERNET && NET_VENDOR_RACAL && ISA]
      depends on [NET_VENDOR_RACAL && ISA]
      inherited [NETDEVICES && NET_ETHERNET && NET_VENDOR_RACAL && ISA]
     }
     config NI65 tristate {
      prompt "NI6510 support" if [NETDEVICES && NET_ETHERNET && NET_VENDOR_RACAL && ISA && ISA_DMA_API]
      depends on [NET_VENDOR_RACAL && ISA && ISA_DMA_API]
      inherited [NETDEVICES && NET_ETHERNET && NET_VENDOR_RACAL && ISA && ISA_DMA_API]
     }
    }
    config DNET tristate {
     prompt "Dave ethernet support (DNET)" if [NETDEVICES && NET_ETHERNET && HAS_IOMEM]
     depends on [NET_ETHERNET && HAS_IOMEM]
     select PHYLIB if [NETDEVICES && NET_ETHERNET && HAS_IOMEM]
     inherited [NETDEVICES && NET_ETHERNET && HAS_IOMEM]
    }
    menuconfig NET_TULIP boolean {
     prompt "\"Tulip\" family network device support" if [NETDEVICES && NET_ETHERNET && (PCI || EISA || CARDBUS)]
     depends on [PCI || EISA || CARDBUS]
     inherited [NETDEVICES && NET_ETHERNET && (PCI || EISA || CARDBUS)]
     if [NETDEVICES && NET_ETHERNET && NET_TULIP] {
      config DE2104X tristate {
       prompt "Early DECchip Tulip (dc2104x) PCI support (EXPERIMENTAL)" if [NETDEVICES && NET_ETHERNET && NET_TULIP && PCI && EXPERIMENTAL]
       depends on [PCI && EXPERIMENTAL]
       select CRC32 if [NETDEVICES && NET_ETHERNET && NET_TULIP && PCI && EXPERIMENTAL]
       inherited [NETDEVICES && NET_ETHERNET && NET_TULIP && PCI && EXPERIMENTAL]
       config DE2104X_DSL integer {
        prompt "Descriptor Skip Length in 32 bit longwords" if [NETDEVICES && NET_ETHERNET && NET_TULIP && DE2104X]
        depends on [DE2104X]
        range [0 31] if [NETDEVICES && NET_ETHERNET && NET_TULIP && DE2104X]
        default [0] if [NETDEVICES && NET_ETHERNET && NET_TULIP && DE2104X]
        inherited [NETDEVICES && NET_ETHERNET && NET_TULIP && DE2104X]
       }
      }
      config TULIP tristate {
       prompt "DECchip Tulip (dc2114x) PCI support" if [NETDEVICES && NET_ETHERNET && NET_TULIP && PCI]
       depends on [PCI]
       select CRC32 if [NETDEVICES && NET_ETHERNET && NET_TULIP && PCI]
       inherited [NETDEVICES && NET_ETHERNET && NET_TULIP && PCI]
       config TULIP_MWI boolean {
        prompt "New bus configuration (EXPERIMENTAL)" if [NETDEVICES && NET_ETHERNET && NET_TULIP && TULIP && EXPERIMENTAL]
        depends on [TULIP && EXPERIMENTAL]
        inherited [NETDEVICES && NET_ETHERNET && NET_TULIP && TULIP && EXPERIMENTAL]
       }
       config TULIP_MMIO boolean {
        prompt "Use PCI shared mem for NIC registers" if [NETDEVICES && NET_ETHERNET && NET_TULIP && TULIP]
        depends on [TULIP]
        inherited [NETDEVICES && NET_ETHERNET && NET_TULIP && TULIP]
       }
       config TULIP_NAPI boolean {
        prompt "Use RX polling (NAPI)" if [NETDEVICES && NET_ETHERNET && NET_TULIP && TULIP]
        depends on [TULIP]
        inherited [NETDEVICES && NET_ETHERNET && NET_TULIP && TULIP]
        config TULIP_NAPI_HW_MITIGATION boolean {
         prompt "Use Interrupt Mitigation" if [NETDEVICES && NET_ETHERNET && NET_TULIP && TULIP_NAPI]
         depends on [TULIP_NAPI]
         inherited [NETDEVICES && NET_ETHERNET && NET_TULIP && TULIP_NAPI]
        }
       }
       config TULIP_DM910X boolean {
        default [y] if [NETDEVICES && NET_ETHERNET && NET_TULIP && TULIP && SPARC]
        depends on [TULIP && SPARC]
        inherited [NETDEVICES && NET_ETHERNET && NET_TULIP && TULIP && SPARC]
       }
      }
      config DE4X5 tristate {
       prompt "Generic DECchip & DIGITAL EtherWORKS PCI/EISA" if [NETDEVICES && NET_ETHERNET && NET_TULIP && (PCI || EISA)]
       depends on [PCI || EISA]
       select CRC32 if [NETDEVICES && NET_ETHERNET && NET_TULIP && (PCI || EISA)]
       inherited [NETDEVICES && NET_ETHERNET && NET_TULIP && (PCI || EISA)]
      }
      config WINBOND_840 tristate {
       prompt "Winbond W89c840 Ethernet support" if [NETDEVICES && NET_ETHERNET && NET_TULIP && PCI]
       depends on [PCI]
       select CRC32 if [NETDEVICES && NET_ETHERNET && NET_TULIP && PCI]
       select MII if [NETDEVICES && NET_ETHERNET && NET_TULIP && PCI]
       inherited [NETDEVICES && NET_ETHERNET && NET_TULIP && PCI]
      }
      config DM9102 tristate {
       prompt "Davicom DM910x/DM980x support" if [NETDEVICES && NET_ETHERNET && NET_TULIP && PCI]
       depends on [PCI]
       select CRC32 if [NETDEVICES && NET_ETHERNET && NET_TULIP && PCI]
       inherited [NETDEVICES && NET_ETHERNET && NET_TULIP && PCI]
      }
      config ULI526X tristate {
       prompt "ULi M526x controller support" if [NETDEVICES && NET_ETHERNET && NET_TULIP && PCI]
       depends on [PCI]
       select CRC32 if [NETDEVICES && NET_ETHERNET && NET_TULIP && PCI]
       inherited [NETDEVICES && NET_ETHERNET && NET_TULIP && PCI]
      }
      config PCMCIA_XIRCOM tristate {
       prompt "Xircom CardBus support" if [NETDEVICES && NET_ETHERNET && NET_TULIP && CARDBUS]
       depends on [CARDBUS]
       inherited [NETDEVICES && NET_ETHERNET && NET_TULIP && CARDBUS]
      }
     }
    }
    config AT1700 tristate {
     prompt "AT1700/1720 support (EXPERIMENTAL)" if [NETDEVICES && NET_ETHERNET && (ISA || MCA_LEGACY) && EXPERIMENTAL]
     depends on [(ISA || MCA_LEGACY) && EXPERIMENTAL]
     select CRC32 if [NETDEVICES && NET_ETHERNET && (ISA || MCA_LEGACY) && EXPERIMENTAL]
     inherited [NETDEVICES && NET_ETHERNET && (ISA || MCA_LEGACY) && EXPERIMENTAL]
    }
    config DEPCA tristate {
     prompt "DEPCA, DE10x, DE200, DE201, DE202, DE422 support" if [NETDEVICES && NET_ETHERNET && (ISA || EISA || MCA)]
     depends on [ISA || EISA || MCA]
     select CRC32 if [NETDEVICES && NET_ETHERNET && (ISA || EISA || MCA)]
     inherited [NETDEVICES && NET_ETHERNET && (ISA || EISA || MCA)]
    }
    config HP100 tristate {
     prompt "HP 10/100VG PCLAN (ISA, EISA, PCI) support" if [NETDEVICES && NET_ETHERNET && (ISA || EISA || PCI)]
     depends on [ISA || EISA || PCI]
     inherited [NETDEVICES && NET_ETHERNET && (ISA || EISA || PCI)]
    }
    config NET_ISA boolean {
     prompt "Other ISA cards" if [NETDEVICES && NET_ETHERNET && ISA]
     depends on [ISA]
     inherited [NETDEVICES && NET_ETHERNET && ISA]
     config E2100 tristate {
      prompt "Cabletron E21xx support" if [NETDEVICES && NET_ETHERNET && NET_ISA]
      depends on [NET_ISA]
      select CRC32 if [NETDEVICES && NET_ETHERNET && NET_ISA]
      inherited [NETDEVICES && NET_ETHERNET && NET_ISA]
     }
     config EWRK3 tristate {
      prompt "EtherWORKS 3 (DE203, DE204, DE205) support" if [NETDEVICES && NET_ETHERNET && NET_ISA]
      depends on [NET_ISA]
      select CRC32 if [NETDEVICES && NET_ETHERNET && NET_ISA]
      inherited [NETDEVICES && NET_ETHERNET && NET_ISA]
     }
     config EEXPRESS tristate {
      prompt "EtherExpress 16 support" if [NETDEVICES && NET_ETHERNET && NET_ISA]
      depends on [NET_ISA]
      inherited [NETDEVICES && NET_ETHERNET && NET_ISA]
     }
     config EEXPRESS_PRO tristate {
      prompt "EtherExpressPro support/EtherExpress 10 (i82595) support" if [NETDEVICES && NET_ETHERNET && NET_ISA]
      depends on [NET_ISA]
      inherited [NETDEVICES && NET_ETHERNET && NET_ISA]
     }
     config HPLAN_PLUS tristate {
      prompt "HP PCLAN+ (27247B and 27252A) support" if [NETDEVICES && NET_ETHERNET && NET_ISA]
      depends on [NET_ISA]
      select CRC32 if [NETDEVICES && NET_ETHERNET && NET_ISA]
      inherited [NETDEVICES && NET_ETHERNET && NET_ISA]
     }
     config HPLAN tristate {
      prompt "HP PCLAN (27245 and other 27xxx series) support" if [NETDEVICES && NET_ETHERNET && NET_ISA]
      depends on [NET_ISA]
      select CRC32 if [NETDEVICES && NET_ETHERNET && NET_ISA]
      inherited [NETDEVICES && NET_ETHERNET && NET_ISA]
     }
     config LP486E tristate {
      prompt "LP486E on board Ethernet" if [NETDEVICES && NET_ETHERNET && NET_ISA]
      depends on [NET_ISA]
      inherited [NETDEVICES && NET_ETHERNET && NET_ISA]
     }
     config ETH16I tristate {
      prompt "ICL EtherTeam 16i/32 support" if [NETDEVICES && NET_ETHERNET && NET_ISA]
      depends on [NET_ISA]
      inherited [NETDEVICES && NET_ETHERNET && NET_ISA]
     }
    }
    config NE2000 tristate {
     prompt "NE2000/NE1000 support" if [NETDEVICES && NET_ETHERNET && (NET_ISA || Q40 && m && <choice> || M32R || MACH_TX49XX)]
     depends on [NET_ISA || Q40 && m || M32R || MACH_TX49XX]
     select CRC32 if [NETDEVICES && NET_ETHERNET && (NET_ISA || Q40 && m && <choice> || M32R || MACH_TX49XX)]
     inherited [NETDEVICES && NET_ETHERNET && (NET_ISA || Q40 && m && <choice> || M32R || MACH_TX49XX)]
    }
    config ZNET tristate {
     prompt "Zenith Z-Note support (EXPERIMENTAL)" if [NETDEVICES && NET_ETHERNET && NET_ISA && EXPERIMENTAL && ISA_DMA_API]
     depends on [NET_ISA && EXPERIMENTAL && ISA_DMA_API]
     inherited [NETDEVICES && NET_ETHERNET && NET_ISA && EXPERIMENTAL && ISA_DMA_API]
    }
    config SEEQ8005 tristate {
     prompt "SEEQ8005 support (EXPERIMENTAL)" if [NETDEVICES && NET_ETHERNET && NET_ISA && EXPERIMENTAL]
     depends on [NET_ISA && EXPERIMENTAL]
     inherited [NETDEVICES && NET_ETHERNET && NET_ISA && EXPERIMENTAL]
    }
    config NE2_MCA tristate {
     prompt "NE/2 (ne2000 MCA version) support" if [NETDEVICES && NET_ETHERNET && MCA_LEGACY]
     depends on [MCA_LEGACY]
     select CRC32 if [NETDEVICES && NET_ETHERNET && MCA_LEGACY]
     inherited [NETDEVICES && NET_ETHERNET && MCA_LEGACY]
    }
    config IBMLANA tristate {
     prompt "IBM LAN Adapter/A support" if [NETDEVICES && NET_ETHERNET && MCA]
     depends on [MCA]
     inherited [NETDEVICES && NET_ETHERNET && MCA]
    }
    config IBMVETH tristate {
     prompt "IBM LAN Virtual Ethernet support" if [NETDEVICES && NET_ETHERNET && PPC_PSERIES]
     depends on [PPC_PSERIES]
     inherited [NETDEVICES && NET_ETHERNET && PPC_PSERIES]
    }
    config IBM_NEW_EMAC tristate {
     prompt "IBM EMAC Ethernet support" if [NETDEVICES && NET_ETHERNET && PPC_DCR]
     depends on [PPC_DCR]
     select CRC32 if [NETDEVICES && NET_ETHERNET && PPC_DCR]
     inherited [NETDEVICES && NET_ETHERNET && PPC_DCR]
     config IBM_NEW_EMAC_RXB integer {
      prompt "Number of receive buffers" if [NETDEVICES && NET_ETHERNET && IBM_NEW_EMAC]
      depends on [IBM_NEW_EMAC]
      default [128] if [NETDEVICES && NET_ETHERNET && IBM_NEW_EMAC]
      inherited [NETDEVICES && NET_ETHERNET && IBM_NEW_EMAC]
     }
     config IBM_NEW_EMAC_TXB integer {
      prompt "Number of transmit buffers" if [NETDEVICES && NET_ETHERNET && IBM_NEW_EMAC]
      depends on [IBM_NEW_EMAC]
      default [64] if [NETDEVICES && NET_ETHERNET && IBM_NEW_EMAC]
      inherited [NETDEVICES && NET_ETHERNET && IBM_NEW_EMAC]
     }
     config IBM_NEW_EMAC_POLL_WEIGHT integer {
      prompt "MAL NAPI polling weight" if [NETDEVICES && NET_ETHERNET && IBM_NEW_EMAC]
      depends on [IBM_NEW_EMAC]
      default [32] if [NETDEVICES && NET_ETHERNET && IBM_NEW_EMAC]
      inherited [NETDEVICES && NET_ETHERNET && IBM_NEW_EMAC]
     }
     config IBM_NEW_EMAC_RX_COPY_THRESHOLD integer {
      prompt "RX skb copy threshold (bytes)" if [NETDEVICES && NET_ETHERNET && IBM_NEW_EMAC]
      depends on [IBM_NEW_EMAC]
      default [256] if [NETDEVICES && NET_ETHERNET && IBM_NEW_EMAC]
      inherited [NETDEVICES && NET_ETHERNET && IBM_NEW_EMAC]
     }
     config IBM_NEW_EMAC_RX_SKB_HEADROOM integer {
      prompt "Additional RX skb headroom (bytes)" if [NETDEVICES && NET_ETHERNET && IBM_NEW_EMAC]
      depends on [IBM_NEW_EMAC]
      default [0] if [NETDEVICES && NET_ETHERNET && IBM_NEW_EMAC]
      inherited [NETDEVICES && NET_ETHERNET && IBM_NEW_EMAC]
     }
     config IBM_NEW_EMAC_DEBUG boolean {
      prompt "Debugging" if [NETDEVICES && NET_ETHERNET && IBM_NEW_EMAC]
      depends on [IBM_NEW_EMAC]
      default [n] if [NETDEVICES && NET_ETHERNET && IBM_NEW_EMAC]
      inherited [NETDEVICES && NET_ETHERNET && IBM_NEW_EMAC]
     }
    }
    config IBM_NEW_EMAC_ZMII boolean {
     default [n] if [NETDEVICES && NET_ETHERNET]
     inherited [NETDEVICES && NET_ETHERNET]
    }
    config IBM_NEW_EMAC_RGMII boolean {
     default [n] if [NETDEVICES && NET_ETHERNET]
     inherited [NETDEVICES && NET_ETHERNET]
    }
    config IBM_NEW_EMAC_TAH boolean {
     default [n] if [NETDEVICES && NET_ETHERNET]
     inherited [NETDEVICES && NET_ETHERNET]
    }
    config IBM_NEW_EMAC_EMAC4 boolean {
     default [n] if [NETDEVICES && NET_ETHERNET]
     inherited [NETDEVICES && NET_ETHERNET]
    }
    config IBM_NEW_EMAC_NO_FLOW_CTRL boolean {
     default [n] if [NETDEVICES && NET_ETHERNET]
     inherited [NETDEVICES && NET_ETHERNET]
    }
    config IBM_NEW_EMAC_MAL_CLR_ICINTSTAT boolean {
     default [n] if [NETDEVICES && NET_ETHERNET]
     inherited [NETDEVICES && NET_ETHERNET]
    }
    config IBM_NEW_EMAC_MAL_COMMON_ERR boolean {
     default [n] if [NETDEVICES && NET_ETHERNET]
     inherited [NETDEVICES && NET_ETHERNET]
    }
    config NET_PCI boolean {
     prompt "EISA, VLB, PCI and on board controllers" if [NETDEVICES && NET_ETHERNET && (ISA || EISA || PCI)]
     depends on [ISA || EISA || PCI]
     inherited [NETDEVICES && NET_ETHERNET && (ISA || EISA || PCI)]
     config PCNET32 tristate {
      prompt "AMD PCnet32 PCI support" if [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
      depends on [NET_PCI && PCI]
      select CRC32 if [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
      select MII if [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
      inherited [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
     }
     config AMD8111_ETH tristate {
      prompt "AMD 8111 (new PCI lance) support" if [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
      depends on [NET_PCI && PCI]
      select CRC32 if [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
      select MII if [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
      inherited [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
     }
     config ADAPTEC_STARFIRE tristate {
      prompt "Adaptec Starfire/DuraLAN support" if [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
      depends on [NET_PCI && PCI]
      select CRC32 if [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
      select MII if [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
      inherited [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
     }
     config AC3200 tristate {
      prompt "Ansel Communications EISA 3200 support (EXPERIMENTAL)" if [NETDEVICES && NET_ETHERNET && NET_PCI && (ISA || EISA) && EXPERIMENTAL]
      depends on [NET_PCI && (ISA || EISA) && EXPERIMENTAL]
      select CRC32 if [NETDEVICES && NET_ETHERNET && NET_PCI && (ISA || EISA) && EXPERIMENTAL]
      inherited [NETDEVICES && NET_ETHERNET && NET_PCI && (ISA || EISA) && EXPERIMENTAL]
     }
     config APRICOT tristate {
      prompt "Apricot Xen-II on board Ethernet" if [NETDEVICES && NET_ETHERNET && NET_PCI && ISA]
      depends on [NET_PCI && ISA]
      inherited [NETDEVICES && NET_ETHERNET && NET_PCI && ISA]
     }
    }
    config B44 tristate {
     prompt "Broadcom 440x/47xx ethernet support" if [NETDEVICES && NET_ETHERNET && SSB_POSSIBLE && HAS_DMA]
     depends on [SSB_POSSIBLE && HAS_DMA]
     select SSB if [NETDEVICES && NET_ETHERNET && SSB_POSSIBLE && HAS_DMA]
     select MII if [NETDEVICES && NET_ETHERNET && SSB_POSSIBLE && HAS_DMA]
     inherited [NETDEVICES && NET_ETHERNET && SSB_POSSIBLE && HAS_DMA]
     config B44_PCI_AUTOSELECT boolean {
      depends on [B44 && SSB_PCIHOST_POSSIBLE]
      select SSB_PCIHOST if [NETDEVICES && NET_ETHERNET && B44 && SSB_PCIHOST_POSSIBLE]
      default [y] if [NETDEVICES && NET_ETHERNET && B44 && SSB_PCIHOST_POSSIBLE]
      inherited [NETDEVICES && NET_ETHERNET && B44 && SSB_PCIHOST_POSSIBLE]
     }
     config B44_PCICORE_AUTOSELECT boolean {
      depends on [B44 && SSB_DRIVER_PCICORE_POSSIBLE]
      select SSB_DRIVER_PCICORE if [NETDEVICES && NET_ETHERNET && B44 && SSB_DRIVER_PCICORE_POSSIBLE]
      default [y] if [NETDEVICES && NET_ETHERNET && B44 && SSB_DRIVER_PCICORE_POSSIBLE]
      inherited [NETDEVICES && NET_ETHERNET && B44 && SSB_DRIVER_PCICORE_POSSIBLE]
     }
     config B44_PCI boolean {
      depends on [B44_PCI_AUTOSELECT && B44_PCICORE_AUTOSELECT]
      default [y] if [NETDEVICES && NET_ETHERNET && B44_PCI_AUTOSELECT && B44_PCICORE_AUTOSELECT]
      inherited [NETDEVICES && NET_ETHERNET && B44_PCI_AUTOSELECT && B44_PCICORE_AUTOSELECT]
     }
    }
    config FORCEDETH tristate {
     prompt "nForce Ethernet support" if [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
     depends on [NET_PCI && PCI]
     inherited [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
     config FORCEDETH_NAPI boolean {
      prompt "Use Rx Polling (NAPI) (EXPERIMENTAL)" if [NETDEVICES && NET_ETHERNET && FORCEDETH && EXPERIMENTAL]
      depends on [FORCEDETH && EXPERIMENTAL]
      inherited [NETDEVICES && NET_ETHERNET && FORCEDETH && EXPERIMENTAL]
     }
    }
    config CS89x0 tristate {
     prompt "CS89x0 support" if [NETDEVICES && NET_ETHERNET && (ISA || EISA || MACH_IXDP2351 || ARCH_IXDP2X01 || ARCH_PNX010X || MACH_MX31ADS)]
     depends on [NET_ETHERNET && (ISA || EISA || MACH_IXDP2351 || ARCH_IXDP2X01 || ARCH_PNX010X || MACH_MX31ADS)]
     inherited [NETDEVICES && NET_ETHERNET && (ISA || EISA || MACH_IXDP2351 || ARCH_IXDP2X01 || ARCH_PNX010X || MACH_MX31ADS)]
     config CS89x0_NONISA_IRQ boolean {
      default [y] if [NETDEVICES && NET_ETHERNET && CS89x0 && (MACH_IXDP2351 || ARCH_IXDP2X01 || ARCH_PNX010X || MACH_MX31ADS)]
      depends on [CS89x0]
      depends on [MACH_IXDP2351 || ARCH_IXDP2X01 || ARCH_PNX010X || MACH_MX31ADS]
      inherited [NETDEVICES && NET_ETHERNET && CS89x0 && (MACH_IXDP2351 || ARCH_IXDP2X01 || ARCH_PNX010X || MACH_MX31ADS)]
     }
    }
    config TC35815 tristate {
     prompt "TOSHIBA TC35815 Ethernet support" if [NETDEVICES && NET_ETHERNET && NET_PCI && PCI && MIPS]
     depends on [NET_PCI && PCI && MIPS]
     select PHYLIB if [NETDEVICES && NET_ETHERNET && NET_PCI && PCI && MIPS]
     inherited [NETDEVICES && NET_ETHERNET && NET_PCI && PCI && MIPS]
    }
    config E100 tristate {
     prompt "Intel(R) PRO/100+ support" if [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
     depends on [NET_PCI && PCI]
     select MII if [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
     inherited [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
    }
    config LNE390 tristate {
     prompt "Mylex EISA LNE390A/B support (EXPERIMENTAL)" if [NETDEVICES && NET_ETHERNET && NET_PCI && EISA && EXPERIMENTAL]
     depends on [NET_PCI && EISA && EXPERIMENTAL]
     select CRC32 if [NETDEVICES && NET_ETHERNET && NET_PCI && EISA && EXPERIMENTAL]
     inherited [NETDEVICES && NET_ETHERNET && NET_PCI && EISA && EXPERIMENTAL]
    }
    config FEALNX tristate {
     prompt "Myson MTD-8xx PCI Ethernet support" if [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
     depends on [NET_PCI && PCI]
     select CRC32 if [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
     select MII if [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
     inherited [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
    }
    config NATSEMI tristate {
     prompt "National Semiconductor DP8381x series PCI Ethernet support" if [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
     depends on [NET_PCI && PCI]
     select CRC32 if [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
     inherited [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
    }
    config NE2K_PCI tristate {
     prompt "PCI NE2000 and clones support (see help)" if [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
     depends on [NET_PCI && PCI]
     select CRC32 if [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
     inherited [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
    }
    config NE3210 tristate {
     prompt "Novell/Eagle/Microdyne NE3210 EISA support (EXPERIMENTAL)" if [NETDEVICES && NET_ETHERNET && NET_PCI && EISA && EXPERIMENTAL]
     depends on [NET_PCI && EISA && EXPERIMENTAL]
     select CRC32 if [NETDEVICES && NET_ETHERNET && NET_PCI && EISA && EXPERIMENTAL]
     inherited [NETDEVICES && NET_ETHERNET && NET_PCI && EISA && EXPERIMENTAL]
    }
    config ES3210 tristate {
     prompt "Racal-Interlan EISA ES3210 support (EXPERIMENTAL)" if [NETDEVICES && NET_ETHERNET && NET_PCI && EISA && EXPERIMENTAL]
     depends on [NET_PCI && EISA && EXPERIMENTAL]
     select CRC32 if [NETDEVICES && NET_ETHERNET && NET_PCI && EISA && EXPERIMENTAL]
     inherited [NETDEVICES && NET_ETHERNET && NET_PCI && EISA && EXPERIMENTAL]
    }
    config 8139CP tristate {
     prompt "RealTek RTL-8139 C+ PCI Fast Ethernet Adapter support (EXPERIMENTAL)" if [NETDEVICES && NET_ETHERNET && NET_PCI && PCI && EXPERIMENTAL]
     depends on [NET_PCI && PCI && EXPERIMENTAL]
     select CRC32 if [NETDEVICES && NET_ETHERNET && NET_PCI && PCI && EXPERIMENTAL]
     select MII if [NETDEVICES && NET_ETHERNET && NET_PCI && PCI && EXPERIMENTAL]
     inherited [NETDEVICES && NET_ETHERNET && NET_PCI && PCI && EXPERIMENTAL]
    }
    config 8139TOO tristate {
     prompt "RealTek RTL-8129/8130/8139 PCI Fast Ethernet Adapter support" if [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
     depends on [NET_PCI && PCI]
     select CRC32 if [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
     select MII if [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
     inherited [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
     config 8139TOO_PIO boolean {
      prompt "Use PIO instead of MMIO" if [NETDEVICES && NET_ETHERNET && 8139TOO]
      default [y] if [NETDEVICES && NET_ETHERNET && 8139TOO]
      depends on [8139TOO]
      inherited [NETDEVICES && NET_ETHERNET && 8139TOO]
     }
     config 8139TOO_TUNE_TWISTER boolean {
      prompt "Support for uncommon RTL-8139 rev. K (automatic channel equalization)" if [NETDEVICES && NET_ETHERNET && 8139TOO]
      depends on [8139TOO]
      inherited [NETDEVICES && NET_ETHERNET && 8139TOO]
     }
     config 8139TOO_8129 boolean {
      prompt "Support for older RTL-8129/8130 boards" if [NETDEVICES && NET_ETHERNET && 8139TOO]
      depends on [8139TOO]
      inherited [NETDEVICES && NET_ETHERNET && 8139TOO]
     }
     config 8139_OLD_RX_RESET boolean {
      prompt "Use older RX-reset method" if [NETDEVICES && NET_ETHERNET && 8139TOO]
      depends on [8139TOO]
      inherited [NETDEVICES && NET_ETHERNET && 8139TOO]
     }
    }
    config R6040 tristate {
     prompt "RDC R6040 Fast Ethernet Adapter support" if [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
     depends on [NET_PCI && PCI]
     select CRC32 if [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
     select MII if [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
     inherited [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
    }
    config SIS900 tristate {
     prompt "SiS 900/7016 PCI Fast Ethernet Adapter support" if [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
     depends on [NET_PCI && PCI]
     select CRC32 if [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
     select MII if [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
     inherited [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
    }
    config EPIC100 tristate {
     prompt "SMC EtherPower II" if [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
     depends on [NET_PCI && PCI]
     select CRC32 if [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
     select MII if [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
     inherited [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
    }
    config SMSC9420 tristate {
     prompt "SMSC LAN9420 PCI ethernet adapter support" if [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
     depends on [NET_PCI && PCI]
     select CRC32 if [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
     select PHYLIB if [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
     select SMSC_PHY if [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
     inherited [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
    }
    config SUNDANCE tristate {
     prompt "Sundance Alta support" if [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
     depends on [NET_PCI && PCI]
     select CRC32 if [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
     select MII if [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
     inherited [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
     config SUNDANCE_MMIO boolean {
      prompt "Use MMIO instead of PIO" if [NETDEVICES && NET_ETHERNET && SUNDANCE]
      depends on [SUNDANCE]
      inherited [NETDEVICES && NET_ETHERNET && SUNDANCE]
     }
    }
    config TLAN tristate {
     prompt "TI ThunderLAN support" if [NETDEVICES && NET_ETHERNET && NET_PCI && (PCI || EISA)]
     depends on [NET_PCI && (PCI || EISA)]
     inherited [NETDEVICES && NET_ETHERNET && NET_PCI && (PCI || EISA)]
    }
    config KS8842 tristate {
     prompt "Micrel KSZ8842" if [NETDEVICES && NET_ETHERNET && HAS_IOMEM]
     depends on [HAS_IOMEM]
     inherited [NETDEVICES && NET_ETHERNET && HAS_IOMEM]
    }
    config KS8851 tristate {
     prompt "Micrel KS8851 SPI" if [NETDEVICES && NET_ETHERNET && SPI]
     depends on [SPI]
     select MII if [NETDEVICES && NET_ETHERNET && SPI]
     select CRC32 if [NETDEVICES && NET_ETHERNET && SPI]
     inherited [NETDEVICES && NET_ETHERNET && SPI]
    }
    config KS8851_MLL tristate {
     prompt "Micrel KS8851 MLL" if [NETDEVICES && NET_ETHERNET && HAS_IOMEM]
     depends on [HAS_IOMEM]
     select MII if [NETDEVICES && NET_ETHERNET && HAS_IOMEM]
     inherited [NETDEVICES && NET_ETHERNET && HAS_IOMEM]
    }
    config VIA_RHINE tristate {
     prompt "VIA Rhine support" if [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
     depends on [NET_PCI && PCI]
     select CRC32 if [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
     select MII if [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
     inherited [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
     config VIA_RHINE_MMIO boolean {
      prompt "Use MMIO instead of PIO" if [NETDEVICES && NET_ETHERNET && VIA_RHINE]
      depends on [VIA_RHINE]
      inherited [NETDEVICES && NET_ETHERNET && VIA_RHINE]
     }
    }
    config SC92031 tristate {
     prompt "Silan SC92031 PCI Fast Ethernet Adapter driver (EXPERIMENTAL)" if [NETDEVICES && NET_ETHERNET && NET_PCI && PCI && EXPERIMENTAL]
     depends on [NET_PCI && PCI && EXPERIMENTAL]
     select CRC32 if [NETDEVICES && NET_ETHERNET && NET_PCI && PCI && EXPERIMENTAL]
     inherited [NETDEVICES && NET_ETHERNET && NET_PCI && PCI && EXPERIMENTAL]
    }
    config CPMAC tristate {
     prompt "TI AR7 CPMAC Ethernet support (EXPERIMENTAL)" if [NETDEVICES && NET_ETHERNET && EXPERIMENTAL && AR7]
     depends on [NET_ETHERNET && EXPERIMENTAL && AR7]
     select PHYLIB if [NETDEVICES && NET_ETHERNET && EXPERIMENTAL && AR7]
     inherited [NETDEVICES && NET_ETHERNET && EXPERIMENTAL && AR7]
    }
    config NET_POCKET boolean {
     prompt "Pocket and portable adapters" if [NETDEVICES && NET_ETHERNET && PARPORT]
     depends on [PARPORT]
     inherited [NETDEVICES && NET_ETHERNET && PARPORT]
     config ATP tristate {
      prompt "AT-LAN-TEC/RealTek pocket adapter support" if [NETDEVICES && NET_ETHERNET && NET_POCKET && PARPORT && X86]
      depends on [NET_POCKET && PARPORT && X86]
      select CRC32 if [NETDEVICES && NET_ETHERNET && NET_POCKET && PARPORT && X86]
      inherited [NETDEVICES && NET_ETHERNET && NET_POCKET && PARPORT && X86]
     }
     config DE600 tristate {
      prompt "D-Link DE600 pocket adapter support" if [NETDEVICES && NET_ETHERNET && NET_POCKET && PARPORT]
      depends on [NET_POCKET && PARPORT]
      inherited [NETDEVICES && NET_ETHERNET && NET_POCKET && PARPORT]
     }
     config DE620 tristate {
      prompt "D-Link DE620 pocket adapter support" if [NETDEVICES && NET_ETHERNET && NET_POCKET && PARPORT]
      depends on [NET_POCKET && PARPORT]
      inherited [NETDEVICES && NET_ETHERNET && NET_POCKET && PARPORT]
     }
    }
    config SGISEEQ tristate {
     prompt "SGI Seeq ethernet controller support" if [NETDEVICES && NET_ETHERNET && SGI_HAS_SEEQ]
     depends on [SGI_HAS_SEEQ]
     inherited [NETDEVICES && NET_ETHERNET && SGI_HAS_SEEQ]
    }
    config DECLANCE tristate {
     prompt "DEC LANCE ethernet controller support" if [NETDEVICES && NET_ETHERNET && MACH_DECSTATION]
     depends on [MACH_DECSTATION]
     select CRC32 if [NETDEVICES && NET_ETHERNET && MACH_DECSTATION]
     inherited [NETDEVICES && NET_ETHERNET && MACH_DECSTATION]
    }
    config 68360_ENET boolean {
     prompt "Motorola 68360 ethernet controller" if [NETDEVICES && NET_ETHERNET && M68360]
     depends on [M68360]
     inherited [NETDEVICES && NET_ETHERNET && M68360]
    }
    config FEC boolean {
     prompt "FEC ethernet controller (of ColdFire and some i.MX CPUs)" if [NETDEVICES && NET_ETHERNET && (M523x || M527x || M5272 || M528x || M520x || M532x || MACH_MX27 || ARCH_MX35 || ARCH_MX25)]
     depends on [M523x || M527x || M5272 || M528x || M520x || M532x || MACH_MX27 || ARCH_MX35 || ARCH_MX25]
     inherited [NETDEVICES && NET_ETHERNET && (M523x || M527x || M5272 || M528x || M520x || M532x || MACH_MX27 || ARCH_MX35 || ARCH_MX25)]
     config FEC2 boolean {
      prompt "Second FEC ethernet controller (on some ColdFire CPUs)" if [NETDEVICES && NET_ETHERNET && FEC]
      depends on [FEC]
      inherited [NETDEVICES && NET_ETHERNET && FEC]
     }
    }
    config FEC_MPC52xx tristate {
     prompt "MPC52xx FEC driver" if [NETDEVICES && NET_ETHERNET && PPC_MPC52xx && PPC_BESTCOMM]
     depends on [PPC_MPC52xx && PPC_BESTCOMM]
     select CRC32 if [NETDEVICES && NET_ETHERNET && PPC_MPC52xx && PPC_BESTCOMM]
     select PHYLIB if [NETDEVICES && NET_ETHERNET && PPC_MPC52xx && PPC_BESTCOMM]
     select PPC_BESTCOMM_FEC if [NETDEVICES && NET_ETHERNET && PPC_MPC52xx && PPC_BESTCOMM]
     inherited [NETDEVICES && NET_ETHERNET && PPC_MPC52xx && PPC_BESTCOMM]
     config FEC_MPC52xx_MDIO boolean {
      prompt "MPC52xx FEC MDIO bus driver" if [NETDEVICES && NET_ETHERNET && FEC_MPC52xx]
      depends on [FEC_MPC52xx]
      default [y] if [NETDEVICES && NET_ETHERNET && FEC_MPC52xx]
      inherited [NETDEVICES && NET_ETHERNET && FEC_MPC52xx]
     }
    }
    config NE_H8300 tristate {
     prompt "NE2000 compatible support for H8/300" if [NETDEVICES && NET_ETHERNET && H8300]
     depends on [H8300]
     inherited [NETDEVICES && NET_ETHERNET && H8300]
    }
    config ATL2 tristate {
     prompt "Atheros L2 Fast Ethernet support" if [NETDEVICES && NET_ETHERNET && PCI]
     depends on [PCI]
     select CRC32 if [NETDEVICES && NET_ETHERNET && PCI]
     select MII if [NETDEVICES && NET_ETHERNET && PCI]
     inherited [NETDEVICES && NET_ETHERNET && PCI]
    }
    config XILINX_EMACLITE tristate {
     prompt "Xilinx 10/100 Ethernet Lite support" if [NETDEVICES && NET_ETHERNET && (PPC32 || MICROBLAZE)]
     depends on [PPC32 || MICROBLAZE]
     inherited [NETDEVICES && NET_ETHERNET && (PPC32 || MICROBLAZE)]
    }
    config BCM63XX_ENET tristate {
     prompt "Broadcom 63xx internal mac support" if [NETDEVICES && NET_ETHERNET && BCM63XX]
     depends on [BCM63XX]
     select MII if [NETDEVICES && NET_ETHERNET && BCM63XX]
     select PHYLIB if [NETDEVICES && NET_ETHERNET && BCM63XX]
     inherited [NETDEVICES && NET_ETHERNET && BCM63XX]
    }
    config FS_ENET tristate {
     prompt "Freescale Ethernet Driver" if [NETDEVICES && NET_ETHERNET && (CPM1 || CPM2)]
     depends on [CPM1 || CPM2]
     select MII if [NETDEVICES && NET_ETHERNET && (CPM1 || CPM2)]
     select PHYLIB if [NETDEVICES && NET_ETHERNET && (CPM1 || CPM2)]
     inherited [NETDEVICES && NET_ETHERNET && (CPM1 || CPM2)]
     config FS_ENET_HAS_SCC boolean {
      prompt "Chip has an SCC usable for ethernet" if [NETDEVICES && NET_ETHERNET && FS_ENET && (CPM1 || CPM2)]
      depends on [FS_ENET && (CPM1 || CPM2)]
      default [y] if [NETDEVICES && NET_ETHERNET && FS_ENET && (CPM1 || CPM2)]
      inherited [NETDEVICES && NET_ETHERNET && FS_ENET && (CPM1 || CPM2)]
     }
     config FS_ENET_HAS_FCC boolean {
      prompt "Chip has an FCC usable for ethernet" if [NETDEVICES && NET_ETHERNET && FS_ENET && CPM2]
      depends on [FS_ENET && CPM2]
      default [y] if [NETDEVICES && NET_ETHERNET && FS_ENET && CPM2]
      inherited [NETDEVICES && NET_ETHERNET && FS_ENET && CPM2]
     }
     config FS_ENET_HAS_FEC boolean {
      prompt "Chip has an FEC usable for ethernet" if [NETDEVICES && NET_ETHERNET && FS_ENET && CPM1]
      depends on [FS_ENET && CPM1]
      select FS_ENET_MDIO_FEC if [NETDEVICES && NET_ETHERNET && FS_ENET && CPM1]
      default [y] if [NETDEVICES && NET_ETHERNET && FS_ENET && CPM1]
      inherited [NETDEVICES && NET_ETHERNET && FS_ENET && CPM1]
     }
     config FS_ENET_MDIO_FEC tristate {
      prompt "MDIO driver for FEC" if [NETDEVICES && NET_ETHERNET && FS_ENET && CPM1]
      depends on [FS_ENET && CPM1]
      inherited [NETDEVICES && NET_ETHERNET && FS_ENET && CPM1]
     }
     config FS_ENET_MDIO_FCC tristate {
      prompt "MDIO driver for FCC" if [NETDEVICES && NET_ETHERNET && FS_ENET && CPM2]
      depends on [FS_ENET && CPM2]
      select MDIO_BITBANG if [NETDEVICES && NET_ETHERNET && FS_ENET && CPM2]
      inherited [NETDEVICES && NET_ETHERNET && FS_ENET && CPM2]
     }
    }
    config OCTEON_MGMT_ETHERNET tristate {
     prompt "Octeon Management port ethernet driver (CN5XXX, CN6XXX)" if [NETDEVICES && NET_ETHERNET && CPU_CAVIUM_OCTEON]
     depends on [CPU_CAVIUM_OCTEON]
     select PHYLIB if [NETDEVICES && NET_ETHERNET && CPU_CAVIUM_OCTEON]
     select MDIO_OCTEON if [NETDEVICES && NET_ETHERNET && CPU_CAVIUM_OCTEON]
     default [y] if [NETDEVICES && NET_ETHERNET && CPU_CAVIUM_OCTEON]
     inherited [NETDEVICES && NET_ETHERNET && CPU_CAVIUM_OCTEON]
    }
   }
  }
  menuconfig NETDEV_1000 boolean {
   prompt "Ethernet (1000 Mbit)" if [NETDEVICES && !UML]
   depends on [!UML]
   default [y] if [NETDEVICES && !UML]
   inherited [NETDEVICES && !UML]
   if [NETDEVICES && NETDEV_1000] {
    config ACENIC tristate {
     prompt "Alteon AceNIC/3Com 3C985/NetGear GA620 Gigabit support" if [NETDEVICES && NETDEV_1000 && PCI]
     depends on [PCI]
     inherited [NETDEVICES && NETDEV_1000 && PCI]
     config ACENIC_OMIT_TIGON_I boolean {
      prompt "Omit support for old Tigon I based AceNICs" if [NETDEVICES && NETDEV_1000 && ACENIC]
      depends on [ACENIC]
      inherited [NETDEVICES && NETDEV_1000 && ACENIC]
     }
    }
    config DL2K tristate {
     prompt "DL2000/TC902x-based Gigabit Ethernet support" if [NETDEVICES && NETDEV_1000 && PCI]
     depends on [PCI]
     select CRC32 if [NETDEVICES && NETDEV_1000 && PCI]
     inherited [NETDEVICES && NETDEV_1000 && PCI]
    }
    config E1000 tristate {
     prompt "Intel(R) PRO/1000 Gigabit Ethernet support" if [NETDEVICES && NETDEV_1000 && PCI]
     depends on [PCI]
     inherited [NETDEVICES && NETDEV_1000 && PCI]
    }
    config E1000E tristate {
     prompt "Intel(R) PRO/1000 PCI-Express Gigabit Ethernet support" if [NETDEVICES && NETDEV_1000 && PCI && (!SPARC32 || BROKEN)]
     depends on [PCI && (!SPARC32 || BROKEN)]
     inherited [NETDEVICES && NETDEV_1000 && PCI && (!SPARC32 || BROKEN)]
    }
    config IP1000 tristate {
     prompt "IP1000 Gigabit Ethernet support" if [NETDEVICES && NETDEV_1000 && PCI && EXPERIMENTAL]
     depends on [PCI && EXPERIMENTAL]
     select MII if [NETDEVICES && NETDEV_1000 && PCI && EXPERIMENTAL]
     inherited [NETDEVICES && NETDEV_1000 && PCI && EXPERIMENTAL]
    }
    config IGB tristate {
     prompt "Intel(R) 82575/82576 PCI-Express Gigabit Ethernet support" if [NETDEVICES && NETDEV_1000 && PCI]
     depends on [PCI]
     inherited [NETDEVICES && NETDEV_1000 && PCI]
     config IGB_DCA boolean {
      prompt "Direct Cache Access (DCA) Support" if [NETDEVICES && NETDEV_1000 && IGB && DCA && (IGB!="y" || DCA!="m")]
      default [y] if [NETDEVICES && NETDEV_1000 && IGB && DCA && (IGB!="y" || DCA!="m")]
      depends on [IGB && DCA && !(IGB="y" && DCA="m")]
      inherited [NETDEVICES && NETDEV_1000 && IGB && DCA && (IGB!="y" || DCA!="m")]
     }
    }
    config IGBVF tristate {
     prompt "Intel(R) 82576 Virtual Function Ethernet support" if [NETDEVICES && NETDEV_1000 && PCI]
     depends on [PCI]
     inherited [NETDEVICES && NETDEV_1000 && PCI]
    }
    config ENP2611_MSF_NET tristate {
     prompt "Radisys ENP2611 MSF network interface support" if [NETDEVICES && NETDEV_1000 && ARCH_ENP2611]
     depends on [ARCH_ENP2611]
     inherited [NETDEVICES && NETDEV_1000 && ARCH_ENP2611]
    }
    config MYRI_SBUS tristate {
     prompt "MyriCOM Gigabit Ethernet support" if [NETDEVICES && NETDEV_1000 && SBUS]
     depends on [SBUS]
     inherited [NETDEVICES && NETDEV_1000 && SBUS]
    }
    config NS83820 tristate {
     prompt "National Semiconductor DP83820 support" if [NETDEVICES && NETDEV_1000 && PCI]
     depends on [PCI]
     inherited [NETDEVICES && NETDEV_1000 && PCI]
    }
    config HAMACHI tristate {
     prompt "Packet Engines Hamachi GNIC-II support" if [NETDEVICES && NETDEV_1000 && PCI]
     depends on [PCI]
     select MII if [NETDEVICES && NETDEV_1000 && PCI]
     inherited [NETDEVICES && NETDEV_1000 && PCI]
    }
    config YELLOWFIN tristate {
     prompt "Packet Engines Yellowfin Gigabit-NIC support (EXPERIMENTAL)" if [NETDEVICES && NETDEV_1000 && PCI && EXPERIMENTAL]
     depends on [PCI && EXPERIMENTAL]
     select CRC32 if [NETDEVICES && NETDEV_1000 && PCI && EXPERIMENTAL]
     inherited [NETDEVICES && NETDEV_1000 && PCI && EXPERIMENTAL]
    }
    config R8169 tristate {
     prompt "Realtek 8169 gigabit ethernet support" if [NETDEVICES && NETDEV_1000 && PCI]
     depends on [PCI]
     select CRC32 if [NETDEVICES && NETDEV_1000 && PCI]
     select MII if [NETDEVICES && NETDEV_1000 && PCI]
     inherited [NETDEVICES && NETDEV_1000 && PCI]
     config R8169_VLAN boolean {
      prompt "VLAN support" if [NETDEVICES && NETDEV_1000 && R8169 && VLAN_8021Q]
      depends on [R8169 && VLAN_8021Q]
      inherited [NETDEVICES && NETDEV_1000 && R8169 && VLAN_8021Q]
     }
    }
    config SB1250_MAC tristate {
     prompt "SB1250 Gigabit Ethernet support" if [NETDEVICES && NETDEV_1000 && SIBYTE_SB1xxx_SOC]
     depends on [SIBYTE_SB1xxx_SOC]
     select PHYLIB if [NETDEVICES && NETDEV_1000 && SIBYTE_SB1xxx_SOC]
     inherited [NETDEVICES && NETDEV_1000 && SIBYTE_SB1xxx_SOC]
    }
    config SIS190 tristate {
     prompt "SiS190/SiS191 gigabit ethernet support" if [NETDEVICES && NETDEV_1000 && PCI]
     depends on [PCI]
     select CRC32 if [NETDEVICES && NETDEV_1000 && PCI]
     select MII if [NETDEVICES && NETDEV_1000 && PCI]
     inherited [NETDEVICES && NETDEV_1000 && PCI]
    }
    config SKGE tristate {
     prompt "New SysKonnect GigaEthernet support" if [NETDEVICES && NETDEV_1000 && PCI]
     depends on [PCI]
     select CRC32 if [NETDEVICES && NETDEV_1000 && PCI]
     inherited [NETDEVICES && NETDEV_1000 && PCI]
     config SKGE_DEBUG boolean {
      prompt "Debugging interface" if [NETDEVICES && NETDEV_1000 && SKGE && DEBUG_FS]
      depends on [SKGE && DEBUG_FS]
      inherited [NETDEVICES && NETDEV_1000 && SKGE && DEBUG_FS]
     }
    }
    config SKY2 tristate {
     prompt "SysKonnect Yukon2 support" if [NETDEVICES && NETDEV_1000 && PCI]
     depends on [PCI]
     select CRC32 if [NETDEVICES && NETDEV_1000 && PCI]
     inherited [NETDEVICES && NETDEV_1000 && PCI]
     config SKY2_DEBUG boolean {
      prompt "Debugging interface" if [NETDEVICES && NETDEV_1000 && SKY2 && DEBUG_FS]
      depends on [SKY2 && DEBUG_FS]
      inherited [NETDEVICES && NETDEV_1000 && SKY2 && DEBUG_FS]
     }
    }
    config VIA_VELOCITY tristate {
     prompt "VIA Velocity support" if [NETDEVICES && NETDEV_1000 && PCI]
     depends on [PCI]
     select CRC32 if [NETDEVICES && NETDEV_1000 && PCI]
     select CRC_CCITT if [NETDEVICES && NETDEV_1000 && PCI]
     select MII if [NETDEVICES && NETDEV_1000 && PCI]
     inherited [NETDEVICES && NETDEV_1000 && PCI]
    }
    config TIGON3 tristate {
     prompt "Broadcom Tigon3 support" if [NETDEVICES && NETDEV_1000 && PCI]
     depends on [PCI]
     select PHYLIB if [NETDEVICES && NETDEV_1000 && PCI]
     inherited [NETDEVICES && NETDEV_1000 && PCI]
    }
    config BNX2 tristate {
     prompt "Broadcom NetXtremeII support" if [NETDEVICES && NETDEV_1000 && PCI]
     depends on [PCI]
     select CRC32 if [NETDEVICES && NETDEV_1000 && PCI]
     select FW_LOADER if [NETDEVICES && NETDEV_1000 && PCI]
     inherited [NETDEVICES && NETDEV_1000 && PCI]
    }
    config CNIC tristate {
     prompt "Broadcom CNIC support" if [NETDEVICES && NETDEV_1000 && PCI]
     depends on [PCI]
     select BNX2 if [NETDEVICES && NETDEV_1000 && PCI]
     select UIO if [NETDEVICES && NETDEV_1000 && PCI]
     inherited [NETDEVICES && NETDEV_1000 && PCI]
    }
    config SPIDER_NET tristate {
     prompt "Spider Gigabit Ethernet driver" if [NETDEVICES && NETDEV_1000 && PCI && (PPC_IBM_CELL_BLADE || PPC_CELLEB)]
     depends on [PCI && (PPC_IBM_CELL_BLADE || PPC_CELLEB)]
     select FW_LOADER if [NETDEVICES && NETDEV_1000 && PCI && (PPC_IBM_CELL_BLADE || PPC_CELLEB)]
     inherited [NETDEVICES && NETDEV_1000 && PCI && (PPC_IBM_CELL_BLADE || PPC_CELLEB)]
    }
    config TSI108_ETH tristate {
     prompt "Tundra TSI108 gigabit Ethernet support" if [NETDEVICES && NETDEV_1000 && TSI108_BRIDGE]
     depends on [TSI108_BRIDGE]
     inherited [NETDEVICES && NETDEV_1000 && TSI108_BRIDGE]
    }
    config GELIC_NET tristate {
     prompt "PS3 Gigabit Ethernet driver" if [NETDEVICES && NETDEV_1000 && PPC_PS3]
     depends on [PPC_PS3]
     select PS3_SYS_MANAGER if [NETDEVICES && NETDEV_1000 && PPC_PS3]
     inherited [NETDEVICES && NETDEV_1000 && PPC_PS3]
     config GELIC_WIRELESS boolean {
      prompt "PS3 Wireless support" if [NETDEVICES && NETDEV_1000 && WLAN && GELIC_NET]
      depends on [WLAN]
      depends on [GELIC_NET]
      select WIRELESS_EXT if [NETDEVICES && NETDEV_1000 && WLAN && GELIC_NET]
      inherited [NETDEVICES && NETDEV_1000 && WLAN && GELIC_NET]
      config GELIC_WIRELESS_OLD_PSK_INTERFACE boolean {
       prompt "PS3 Wireless private PSK interface (OBSOLETE)" if [NETDEVICES && NETDEV_1000 && GELIC_WIRELESS]
       depends on [GELIC_WIRELESS]
       select WEXT_PRIV if [NETDEVICES && NETDEV_1000 && GELIC_WIRELESS]
       inherited [NETDEVICES && NETDEV_1000 && GELIC_WIRELESS]
      }
     }
    }
    config FSL_PQ_MDIO tristate {
     prompt "Freescale PQ MDIO" if [NETDEVICES && NETDEV_1000 && FSL_SOC]
     depends on [FSL_SOC]
     select PHYLIB if [NETDEVICES && NETDEV_1000 && FSL_SOC]
     inherited [NETDEVICES && NETDEV_1000 && FSL_SOC]
    }
    config GIANFAR tristate {
     prompt "Gianfar Ethernet" if [NETDEVICES && NETDEV_1000 && FSL_SOC]
     depends on [FSL_SOC]
     select FSL_PQ_MDIO if [NETDEVICES && NETDEV_1000 && FSL_SOC]
     select PHYLIB if [NETDEVICES && NETDEV_1000 && FSL_SOC]
     select CRC32 if [NETDEVICES && NETDEV_1000 && FSL_SOC]
     inherited [NETDEVICES && NETDEV_1000 && FSL_SOC]
    }
    config UCC_GETH tristate {
     prompt "Freescale QE Gigabit Ethernet" if [NETDEVICES && NETDEV_1000 && QUICC_ENGINE]
     depends on [QUICC_ENGINE]
     select FSL_PQ_MDIO if [NETDEVICES && NETDEV_1000 && QUICC_ENGINE]
     select PHYLIB if [NETDEVICES && NETDEV_1000 && QUICC_ENGINE]
     inherited [NETDEVICES && NETDEV_1000 && QUICC_ENGINE]
     config UGETH_TX_ON_DEMAND boolean {
      prompt "Transmit on Demand support" if [NETDEVICES && NETDEV_1000 && UCC_GETH]
      depends on [UCC_GETH]
      inherited [NETDEVICES && NETDEV_1000 && UCC_GETH]
     }
    }
    config MV643XX_ETH tristate {
     prompt "Marvell Discovery (643XX) and Orion ethernet support" if [NETDEVICES && NETDEV_1000 && (MV64X60 || PPC32 || PLAT_ORION)]
     depends on [MV64X60 || PPC32 || PLAT_ORION]
     select INET_LRO if [NETDEVICES && NETDEV_1000 && (MV64X60 || PPC32 || PLAT_ORION)]
     select PHYLIB if [NETDEVICES && NETDEV_1000 && (MV64X60 || PPC32 || PLAT_ORION)]
     inherited [NETDEVICES && NETDEV_1000 && (MV64X60 || PPC32 || PLAT_ORION)]
    }
    config XILINX_LL_TEMAC tristate {
     prompt "Xilinx LL TEMAC (LocalLink Tri-mode Ethernet MAC) driver" if [NETDEVICES && NETDEV_1000 && PPC_DCR_NATIVE]
     select PHYLIB if [NETDEVICES && NETDEV_1000 && PPC_DCR_NATIVE]
     depends on [PPC_DCR_NATIVE]
     inherited [NETDEVICES && NETDEV_1000 && PPC_DCR_NATIVE]
    }
    config QLA3XXX tristate {
     prompt "QLogic QLA3XXX Network Driver Support" if [NETDEVICES && NETDEV_1000 && PCI]
     depends on [PCI]
     inherited [NETDEVICES && NETDEV_1000 && PCI]
    }
    config ATL1 tristate {
     prompt "Atheros/Attansic L1 Gigabit Ethernet support" if [NETDEVICES && NETDEV_1000 && PCI]
     depends on [PCI]
     select CRC32 if [NETDEVICES && NETDEV_1000 && PCI]
     select MII if [NETDEVICES && NETDEV_1000 && PCI]
     inherited [NETDEVICES && NETDEV_1000 && PCI]
    }
    config ATL1E tristate {
     prompt "Atheros L1E Gigabit Ethernet support (EXPERIMENTAL)" if [NETDEVICES && NETDEV_1000 && PCI && EXPERIMENTAL]
     depends on [PCI && EXPERIMENTAL]
     select CRC32 if [NETDEVICES && NETDEV_1000 && PCI && EXPERIMENTAL]
     select MII if [NETDEVICES && NETDEV_1000 && PCI && EXPERIMENTAL]
     inherited [NETDEVICES && NETDEV_1000 && PCI && EXPERIMENTAL]
    }
    config ATL1C tristate {
     prompt "Atheros L1C Gigabit Ethernet support (EXPERIMENTAL)" if [NETDEVICES && NETDEV_1000 && PCI && EXPERIMENTAL]
     depends on [PCI && EXPERIMENTAL]
     select CRC32 if [NETDEVICES && NETDEV_1000 && PCI && EXPERIMENTAL]
     select MII if [NETDEVICES && NETDEV_1000 && PCI && EXPERIMENTAL]
     inherited [NETDEVICES && NETDEV_1000 && PCI && EXPERIMENTAL]
    }
    config JME tristate {
     prompt "JMicron(R) PCI-Express Gigabit Ethernet support" if [NETDEVICES && NETDEV_1000 && PCI]
     depends on [PCI]
     select CRC32 if [NETDEVICES && NETDEV_1000 && PCI]
     select MII if [NETDEVICES && NETDEV_1000 && PCI]
     inherited [NETDEVICES && NETDEV_1000 && PCI]
    }
    config S6GMAC tristate {
     prompt "S6105 GMAC ethernet support" if [NETDEVICES && NETDEV_1000 && XTENSA_VARIANT_S6000]
     depends on [XTENSA_VARIANT_S6000]
     select PHYLIB if [NETDEVICES && NETDEV_1000 && XTENSA_VARIANT_S6000]
     inherited [NETDEVICES && NETDEV_1000 && XTENSA_VARIANT_S6000]
    }
    config STMMAC_ETH tristate {
     prompt "STMicroelectronics 10/100/1000 Ethernet driver" if [NETDEV_1000 && NETDEVICES && CPU_SUBTYPE_ST40]
     select MII if [NETDEV_1000 && NETDEVICES && CPU_SUBTYPE_ST40]
     select PHYLIB if [NETDEV_1000 && NETDEVICES && CPU_SUBTYPE_ST40]
     depends on [NETDEVICES && CPU_SUBTYPE_ST40]
     inherited [NETDEV_1000 && NETDEVICES && CPU_SUBTYPE_ST40]
     if [NETDEVICES && NETDEV_1000 && STMMAC_ETH] {
      config STMMAC_DA boolean {
       prompt "STMMAC DMA arbitration scheme" if [NETDEVICES && NETDEV_1000 && STMMAC_ETH]
       default [n] if [NETDEVICES && NETDEV_1000 && STMMAC_ETH]
       inherited [NETDEVICES && NETDEV_1000 && STMMAC_ETH]
      }
      config STMMAC_DUAL_MAC boolean {
       prompt "STMMAC: dual mac support (EXPERIMENTAL)" if [NETDEVICES && NETDEV_1000 && EXPERIMENTAL && STMMAC_ETH && !STMMAC_TIMER]
       default [n] if [NETDEVICES && NETDEV_1000 && EXPERIMENTAL && STMMAC_ETH && !STMMAC_TIMER]
       depends on [EXPERIMENTAL && STMMAC_ETH && !STMMAC_TIMER]
       inherited [NETDEVICES && NETDEV_1000 && EXPERIMENTAL && STMMAC_ETH && !STMMAC_TIMER]
      }
      config STMMAC_TIMER boolean {
       prompt "STMMAC Timer optimisation" if [NETDEVICES && NETDEV_1000 && STMMAC_ETH]
       default [n] if [NETDEVICES && NETDEV_1000 && STMMAC_ETH]
       inherited [NETDEVICES && NETDEV_1000 && STMMAC_ETH]
       choice boolean {
        prompt "Select Timer device" if [NETDEVICES && NETDEV_1000 && STMMAC_ETH && STMMAC_TIMER]
        depends on [STMMAC_TIMER]
        config STMMAC_TMU_TIMER boolean {
         prompt "TMU channel 2" if [<choice> && CPU_SH4]
         depends on [CPU_SH4]
         inherited [<choice> && CPU_SH4]
        }
        config STMMAC_RTC_TIMER boolean {
         prompt "Real time clock" if [<choice> && RTC_CLASS]
         depends on [RTC_CLASS]
         inherited [<choice> && RTC_CLASS]
        }
       }
      }
     }
    }
   }
  }
  menuconfig NETDEV_10000 boolean {
   prompt "Ethernet (10000 Mbit)" if [NETDEVICES && !UML]
   depends on [!UML]
   default [y] if [NETDEVICES && !UML]
   inherited [NETDEVICES && !UML]
   if [NETDEVICES && NETDEV_10000] {
    config MDIO tristate {
     inherited [NETDEVICES && NETDEV_10000]
    }
    config CHELSIO_T1 tristate {
     prompt "Chelsio 10Gb Ethernet support" if [NETDEVICES && NETDEV_10000 && PCI]
     depends on [PCI]
     select CRC32 if [NETDEVICES && NETDEV_10000 && PCI]
     select MDIO if [NETDEVICES && NETDEV_10000 && PCI]
     inherited [NETDEVICES && NETDEV_10000 && PCI]
     config CHELSIO_T1_1G boolean {
      prompt "Chelsio gigabit Ethernet support" if [NETDEVICES && NETDEV_10000 && CHELSIO_T1]
      depends on [CHELSIO_T1]
      inherited [NETDEVICES && NETDEV_10000 && CHELSIO_T1]
     }
    }
    config CHELSIO_T3_DEPENDS tristate {
     depends on [PCI && INET]
     default [y] if [NETDEVICES && NETDEV_10000 && PCI && INET]
     inherited [NETDEVICES && NETDEV_10000 && PCI && INET]
    }
    config CHELSIO_T3 tristate {
     prompt "Chelsio Communications T3 10Gb Ethernet support" if [NETDEVICES && NETDEV_10000 && CHELSIO_T3_DEPENDS]
     depends on [CHELSIO_T3_DEPENDS]
     select FW_LOADER if [NETDEVICES && NETDEV_10000 && CHELSIO_T3_DEPENDS]
     select MDIO if [NETDEVICES && NETDEV_10000 && CHELSIO_T3_DEPENDS]
     inherited [NETDEVICES && NETDEV_10000 && CHELSIO_T3_DEPENDS]
    }
    config EHEA tristate {
     prompt "eHEA Ethernet support" if [NETDEVICES && NETDEV_10000 && IBMEBUS && INET && SPARSEMEM]
     depends on [IBMEBUS && INET && SPARSEMEM]
     select INET_LRO if [NETDEVICES && NETDEV_10000 && IBMEBUS && INET && SPARSEMEM]
     inherited [NETDEVICES && NETDEV_10000 && IBMEBUS && INET && SPARSEMEM]
    }
    config ENIC tristate {
     prompt "Cisco 10G Ethernet NIC support" if [NETDEVICES && NETDEV_10000 && PCI && INET]
     depends on [PCI && INET]
     select INET_LRO if [NETDEVICES && NETDEV_10000 && PCI && INET]
     inherited [NETDEVICES && NETDEV_10000 && PCI && INET]
    }
    config IXGBE tristate {
     prompt "Intel(R) 10GbE PCI Express adapters support" if [NETDEVICES && NETDEV_10000 && PCI && INET]
     depends on [PCI && INET]
     select MDIO if [NETDEVICES && NETDEV_10000 && PCI && INET]
     inherited [NETDEVICES && NETDEV_10000 && PCI && INET]
     config IXGBE_DCA boolean {
      prompt "Direct Cache Access (DCA) Support" if [NETDEVICES && NETDEV_10000 && IXGBE && DCA && (IXGBE!="y" || DCA!="m")]
      default [y] if [NETDEVICES && NETDEV_10000 && IXGBE && DCA && (IXGBE!="y" || DCA!="m")]
      depends on [IXGBE && DCA && !(IXGBE="y" && DCA="m")]
      inherited [NETDEVICES && NETDEV_10000 && IXGBE && DCA && (IXGBE!="y" || DCA!="m")]
     }
     config IXGBE_DCB boolean {
      prompt "Data Center Bridging (DCB) Support" if [NETDEVICES && NETDEV_10000 && IXGBE && DCB]
      default [n] if [NETDEVICES && NETDEV_10000 && IXGBE && DCB]
      depends on [IXGBE && DCB]
      inherited [NETDEVICES && NETDEV_10000 && IXGBE && DCB]
     }
    }
    config IXGB tristate {
     prompt "Intel(R) PRO/10GbE support" if [NETDEVICES && NETDEV_10000 && PCI]
     depends on [PCI]
     inherited [NETDEVICES && NETDEV_10000 && PCI]
    }
    config S2IO tristate {
     prompt "S2IO 10Gbe XFrame NIC" if [NETDEVICES && NETDEV_10000 && PCI]
     depends on [PCI]
     inherited [NETDEVICES && NETDEV_10000 && PCI]
    }
    config VXGE tristate {
     prompt "Neterion X3100 Series 10GbE PCIe Server Adapter" if [NETDEVICES && NETDEV_10000 && PCI && INET]
     depends on [PCI && INET]
     inherited [NETDEVICES && NETDEV_10000 && PCI && INET]
     config VXGE_DEBUG_TRACE_ALL boolean {
      prompt "Enabling All Debug trace statments in driver" if [NETDEVICES && NETDEV_10000 && VXGE]
      default [n] if [NETDEVICES && NETDEV_10000 && VXGE]
      depends on [VXGE]
      inherited [NETDEVICES && NETDEV_10000 && VXGE]
     }
    }
    config MYRI10GE tristate {
     prompt "Myricom Myri-10G Ethernet support" if [NETDEVICES && NETDEV_10000 && PCI && INET]
     depends on [PCI && INET]
     select FW_LOADER if [NETDEVICES && NETDEV_10000 && PCI && INET]
     select CRC32 if [NETDEVICES && NETDEV_10000 && PCI && INET]
     select INET_LRO if [NETDEVICES && NETDEV_10000 && PCI && INET]
     inherited [NETDEVICES && NETDEV_10000 && PCI && INET]
     config MYRI10GE_DCA boolean {
      prompt "Direct Cache Access (DCA) Support" if [NETDEVICES && NETDEV_10000 && MYRI10GE && DCA && (MYRI10GE!="y" || DCA!="m")]
      default [y] if [NETDEVICES && NETDEV_10000 && MYRI10GE && DCA && (MYRI10GE!="y" || DCA!="m")]
      depends on [MYRI10GE && DCA && !(MYRI10GE="y" && DCA="m")]
      inherited [NETDEVICES && NETDEV_10000 && MYRI10GE && DCA && (MYRI10GE!="y" || DCA!="m")]
     }
    }
    config NETXEN_NIC tristate {
     prompt "NetXen Multi port (1/10) Gigabit Ethernet NIC" if [NETDEVICES && NETDEV_10000 && PCI]
     depends on [PCI]
     inherited [NETDEVICES && NETDEV_10000 && PCI]
    }
    config NIU tristate {
     prompt "Sun Neptune 10Gbit Ethernet support" if [NETDEVICES && NETDEV_10000 && PCI]
     depends on [PCI]
     select CRC32 if [NETDEVICES && NETDEV_10000 && PCI]
     inherited [NETDEVICES && NETDEV_10000 && PCI]
    }
    config PASEMI_MAC tristate {
     prompt "PA Semi 1/10Gbit MAC" if [NETDEVICES && NETDEV_10000 && PPC_PASEMI && PCI]
     depends on [PPC_PASEMI && PCI]
     select PHYLIB if [NETDEVICES && NETDEV_10000 && PPC_PASEMI && PCI]
     select INET_LRO if [NETDEVICES && NETDEV_10000 && PPC_PASEMI && PCI]
     inherited [NETDEVICES && NETDEV_10000 && PPC_PASEMI && PCI]
    }
    config MLX4_EN tristate {
     prompt "Mellanox Technologies 10Gbit Ethernet support" if [NETDEVICES && NETDEV_10000 && PCI && INET]
     depends on [PCI && INET]
     select MLX4_CORE if [NETDEVICES && NETDEV_10000 && PCI && INET]
     select INET_LRO if [NETDEVICES && NETDEV_10000 && PCI && INET]
     inherited [NETDEVICES && NETDEV_10000 && PCI && INET]
    }
    config MLX4_CORE tristate {
     depends on [PCI]
     default [n] if [NETDEVICES && NETDEV_10000 && PCI]
     inherited [NETDEVICES && NETDEV_10000 && PCI]
    }
    config MLX4_DEBUG boolean {
     prompt "Verbose debugging output" if [NETDEVICES && NETDEV_10000 && MLX4_CORE && EMBEDDED]
     depends on [MLX4_CORE]
     default [y] if [NETDEVICES && NETDEV_10000 && MLX4_CORE]
     inherited [NETDEVICES && NETDEV_10000 && MLX4_CORE]
    }
    config TEHUTI tristate {
     prompt "Tehuti Networks 10G Ethernet" if [NETDEVICES && NETDEV_10000 && PCI]
     depends on [PCI]
     inherited [NETDEVICES && NETDEV_10000 && PCI]
    }
    config BNX2X tristate {
     prompt "Broadcom NetXtremeII 10Gb support" if [NETDEVICES && NETDEV_10000 && PCI]
     depends on [PCI]
     select FW_LOADER if [NETDEVICES && NETDEV_10000 && PCI]
     select ZLIB_INFLATE if [NETDEVICES && NETDEV_10000 && PCI]
     select LIBCRC32C if [NETDEVICES && NETDEV_10000 && PCI]
     select MDIO if [NETDEVICES && NETDEV_10000 && PCI]
     inherited [NETDEVICES && NETDEV_10000 && PCI]
    }
    config QLGE tristate {
     prompt "QLogic QLGE 10Gb Ethernet Driver Support" if [NETDEVICES && NETDEV_10000 && PCI]
     depends on [PCI]
     inherited [NETDEVICES && NETDEV_10000 && PCI]
    }
    config SFC tristate {
     prompt "Solarflare Solarstorm SFC4000/SFC9000-family support" if [NETDEVICES && NETDEV_10000 && PCI && INET]
     depends on [PCI && INET]
     select MDIO if [NETDEVICES && NETDEV_10000 && PCI && INET]
     select CRC32 if [NETDEVICES && NETDEV_10000 && PCI && INET]
     select I2C if [NETDEVICES && NETDEV_10000 && PCI && INET]
     select I2C_ALGOBIT if [NETDEVICES && NETDEV_10000 && PCI && INET]
     inherited [NETDEVICES && NETDEV_10000 && PCI && INET]
     config SFC_MTD boolean {
      prompt "Solarflare Solarstorm SFC4000/SFC9000-family MTD support" if [NETDEVICES && NETDEV_10000 && SFC && MTD && (SFC!="y" || MTD!="m")]
      depends on [SFC && MTD && !(SFC="y" && MTD="m")]
      default [y] if [NETDEVICES && NETDEV_10000 && SFC && MTD && (SFC!="y" || MTD!="m")]
      inherited [NETDEVICES && NETDEV_10000 && SFC && MTD && (SFC!="y" || MTD!="m")]
     }
    }
    config BE2NET tristate {
     prompt "ServerEngines' 10Gbps NIC - BladeEngine 2" if [NETDEVICES && NETDEV_10000 && PCI && INET]
     depends on [PCI && INET]
     inherited [NETDEVICES && NETDEV_10000 && PCI && INET]
    }
   }
  }
  menuconfig TR tristate {
   prompt "Token Ring driver support" if [NETDEVICES && !UML && (PCI || ISA || MCA || CCW)]
   depends on [NETDEVICES && !UML]
   depends on [PCI || ISA || MCA || CCW]
   select LLC if [NETDEVICES && !UML && (PCI || ISA || MCA || CCW)]
   inherited [NETDEVICES && !UML && (PCI || ISA || MCA || CCW)]
   if [NETDEVICES && TR] {
    config IBMTR tristate {
     prompt "IBM Tropic chipset based adapter support" if [NETDEVICES && TR && (ISA || MCA)]
     depends on [ISA || MCA]
     inherited [NETDEVICES && TR && (ISA || MCA)]
    }
    config IBMOL tristate {
     prompt "IBM Olympic chipset PCI adapter support" if [NETDEVICES && TR && PCI]
     depends on [PCI]
     inherited [NETDEVICES && TR && PCI]
    }
    config IBMLS tristate {
     prompt "IBM Lanstreamer chipset PCI adapter support" if [NETDEVICES && TR && PCI && !64BIT]
     depends on [PCI && !64BIT]
     inherited [NETDEVICES && TR && PCI && !64BIT]
    }
    config 3C359 tristate {
     prompt "3Com 3C359 Token Link Velocity XL adapter support" if [NETDEVICES && TR && PCI]
     depends on [PCI]
     inherited [NETDEVICES && TR && PCI]
    }
    config TMS380TR tristate {
     prompt "Generic TMS380 Token Ring ISA/PCI adapter support" if [NETDEVICES && TR && (PCI || ISA && ISA_DMA_API || MCA)]
     depends on [PCI || ISA && ISA_DMA_API || MCA]
     select FW_LOADER if [NETDEVICES && TR && (PCI || ISA && ISA_DMA_API || MCA)]
     inherited [NETDEVICES && TR && (PCI || ISA && ISA_DMA_API || MCA)]
     config TMSPCI tristate {
      prompt "Generic TMS380 PCI support" if [NETDEVICES && TR && TMS380TR && PCI]
      depends on [TMS380TR && PCI]
      inherited [NETDEVICES && TR && TMS380TR && PCI]
     }
     config SKISA tristate {
      prompt "SysKonnect TR4/16 ISA support" if [NETDEVICES && TR && TMS380TR && ISA]
      depends on [TMS380TR && ISA]
      inherited [NETDEVICES && TR && TMS380TR && ISA]
     }
     config PROTEON tristate {
      prompt "Proteon ISA support" if [NETDEVICES && TR && TMS380TR && ISA]
      depends on [TMS380TR && ISA]
      inherited [NETDEVICES && TR && TMS380TR && ISA]
     }
     config ABYSS tristate {
      prompt "Madge Smart 16/4 PCI Mk2 support" if [NETDEVICES && TR && TMS380TR && PCI]
      depends on [TMS380TR && PCI]
      inherited [NETDEVICES && TR && TMS380TR && PCI]
     }
     config MADGEMC tristate {
      prompt "Madge Smart 16/4 Ringnode MicroChannel" if [NETDEVICES && TR && TMS380TR && MCA]
      depends on [TMS380TR && MCA]
      inherited [NETDEVICES && TR && TMS380TR && MCA]
     }
    }
    config SMCTR tristate {
     prompt "SMC ISA/MCA adapter support" if [NETDEVICES && TR && (ISA || MCA_LEGACY) && (BROKEN || !64BIT)]
     depends on [(ISA || MCA_LEGACY) && (BROKEN || !64BIT)]
     inherited [NETDEVICES && TR && (ISA || MCA_LEGACY) && (BROKEN || !64BIT)]
    }
   }
  }
  menuconfig WLAN boolean {
   prompt "Wireless LAN" if [NETDEVICES && !S390]
   depends on [!S390]
   select WIRELESS if [NETDEVICES && !S390]
   default [y] if [NETDEVICES && !S390]
   inherited [NETDEVICES && !S390]
   if [NETDEVICES && WLAN] {
    config PCMCIA_RAYCS tristate {
     prompt "Aviator/Raytheon 2.4GHz wireless support" if [NETDEVICES && WLAN && PCMCIA]
     depends on [PCMCIA]
     select WIRELESS_EXT if [NETDEVICES && WLAN && PCMCIA]
     select WEXT_SPY if [NETDEVICES && WLAN && PCMCIA]
     select WEXT_PRIV if [NETDEVICES && WLAN && PCMCIA]
     inherited [NETDEVICES && WLAN && PCMCIA]
    }
    config LIBERTAS_THINFIRM tristate {
     prompt "Marvell 8xxx Libertas WLAN driver support with thin firmware" if [NETDEVICES && WLAN && MAC80211]
     depends on [MAC80211]
     select FW_LOADER if [NETDEVICES && WLAN && MAC80211]
     inherited [NETDEVICES && WLAN && MAC80211]
     config LIBERTAS_THINFIRM_USB tristate {
      prompt "Marvell Libertas 8388 USB 802.11b/g cards with thin firmware" if [NETDEVICES && WLAN && LIBERTAS_THINFIRM && USB]
      depends on [LIBERTAS_THINFIRM && USB]
      inherited [NETDEVICES && WLAN && LIBERTAS_THINFIRM && USB]
     }
    }
    config AIRO tristate {
     prompt "Cisco/Aironet 34X/35X/4500/4800 ISA and PCI cards" if [NETDEVICES && WLAN && ISA_DMA_API && (PCI || BROKEN)]
     depends on [ISA_DMA_API && (PCI || BROKEN)]
     select WIRELESS_EXT if [NETDEVICES && WLAN && ISA_DMA_API && (PCI || BROKEN)]
     select CRYPTO if [NETDEVICES && WLAN && ISA_DMA_API && (PCI || BROKEN)]
     select WEXT_SPY if [NETDEVICES && WLAN && ISA_DMA_API && (PCI || BROKEN)]
     select WEXT_PRIV if [NETDEVICES && WLAN && ISA_DMA_API && (PCI || BROKEN)]
     inherited [NETDEVICES && WLAN && ISA_DMA_API && (PCI || BROKEN)]
    }
    config ATMEL tristate {
     prompt "Atmel at76c50x chipset  802.11b support" if [NETDEVICES && WLAN && (PCI || PCMCIA)]
     depends on [PCI || PCMCIA]
     select WIRELESS_EXT if [NETDEVICES && WLAN && (PCI || PCMCIA)]
     select WEXT_PRIV if [NETDEVICES && WLAN && (PCI || PCMCIA)]
     select FW_LOADER if [NETDEVICES && WLAN && (PCI || PCMCIA)]
     select CRC32 if [NETDEVICES && WLAN && (PCI || PCMCIA)]
     inherited [NETDEVICES && WLAN && (PCI || PCMCIA)]
     config PCI_ATMEL tristate {
      prompt "Atmel at76c506 PCI cards" if [NETDEVICES && WLAN && ATMEL && PCI]
      depends on [ATMEL && PCI]
      inherited [NETDEVICES && WLAN && ATMEL && PCI]
     }
     config PCMCIA_ATMEL tristate {
      prompt "Atmel at76c502/at76c504 PCMCIA cards" if [NETDEVICES && WLAN && ATMEL && PCMCIA]
      depends on [ATMEL && PCMCIA]
      select WIRELESS_EXT if [NETDEVICES && WLAN && ATMEL && PCMCIA]
      select FW_LOADER if [NETDEVICES && WLAN && ATMEL && PCMCIA]
      select CRC32 if [NETDEVICES && WLAN && ATMEL && PCMCIA]
      inherited [NETDEVICES && WLAN && ATMEL && PCMCIA]
     }
    }
    config AT76C50X_USB tristate {
     prompt "Atmel at76c503/at76c505/at76c505a USB cards" if [NETDEVICES && WLAN && MAC80211 && USB]
     depends on [MAC80211 && USB]
     select FW_LOADER if [NETDEVICES && WLAN && MAC80211 && USB]
     inherited [NETDEVICES && WLAN && MAC80211 && USB]
    }
    config AIRO_CS tristate {
     prompt "Cisco/Aironet 34X/35X/4500/4800 PCMCIA cards" if [NETDEVICES && WLAN && PCMCIA && (BROKEN || !M32R)]
     depends on [PCMCIA && (BROKEN || !M32R)]
     select WIRELESS_EXT if [NETDEVICES && WLAN && PCMCIA && (BROKEN || !M32R)]
     select WEXT_SPY if [NETDEVICES && WLAN && PCMCIA && (BROKEN || !M32R)]
     select CRYPTO if [NETDEVICES && WLAN && PCMCIA && (BROKEN || !M32R)]
     select CRYPTO_AES if [NETDEVICES && WLAN && PCMCIA && (BROKEN || !M32R)]
     inherited [NETDEVICES && WLAN && PCMCIA && (BROKEN || !M32R)]
    }
    config PCMCIA_WL3501 tristate {
     prompt "Planet WL3501 PCMCIA cards" if [NETDEVICES && WLAN && EXPERIMENTAL && PCMCIA]
     depends on [EXPERIMENTAL && PCMCIA]
     select WIRELESS_EXT if [NETDEVICES && WLAN && EXPERIMENTAL && PCMCIA]
     select WEXT_SPY if [NETDEVICES && WLAN && EXPERIMENTAL && PCMCIA]
     inherited [NETDEVICES && WLAN && EXPERIMENTAL && PCMCIA]
    }
    config PRISM54 tristate {
     prompt "Intersil Prism GT/Duette/Indigo PCI/Cardbus (DEPRECATED)" if [NETDEVICES && WLAN && PCI && EXPERIMENTAL]
     depends on [PCI && EXPERIMENTAL]
     select WIRELESS_EXT if [NETDEVICES && WLAN && PCI && EXPERIMENTAL]
     select WEXT_SPY if [NETDEVICES && WLAN && PCI && EXPERIMENTAL]
     select WEXT_PRIV if [NETDEVICES && WLAN && PCI && EXPERIMENTAL]
     select FW_LOADER if [NETDEVICES && WLAN && PCI && EXPERIMENTAL]
     inherited [NETDEVICES && WLAN && PCI && EXPERIMENTAL]
    }
    config USB_ZD1201 tristate {
     prompt "USB ZD1201 based Wireless device support" if [NETDEVICES && WLAN && USB]
     depends on [USB]
     select WIRELESS_EXT if [NETDEVICES && WLAN && USB]
     select WEXT_PRIV if [NETDEVICES && WLAN && USB]
     select FW_LOADER if [NETDEVICES && WLAN && USB]
     inherited [NETDEVICES && WLAN && USB]
    }
    config USB_NET_RNDIS_WLAN tristate {
     prompt "Wireless RNDIS USB support" if [NETDEVICES && WLAN && USB && EXPERIMENTAL && CFG80211]
     depends on [USB && EXPERIMENTAL]
     depends on [CFG80211]
     select USB_USBNET if [NETDEVICES && WLAN && USB && EXPERIMENTAL && CFG80211]
     select USB_NET_CDCETHER if [NETDEVICES && WLAN && USB && EXPERIMENTAL && CFG80211]
     select USB_NET_RNDIS_HOST if [NETDEVICES && WLAN && USB && EXPERIMENTAL && CFG80211]
     inherited [NETDEVICES && WLAN && USB && EXPERIMENTAL && CFG80211]
    }
    config RTL8180 tristate {
     prompt "Realtek 8180/8185 PCI support" if [NETDEVICES && WLAN && MAC80211 && PCI && EXPERIMENTAL]
     depends on [MAC80211 && PCI && EXPERIMENTAL]
     select EEPROM_93CX6 if [NETDEVICES && WLAN && MAC80211 && PCI && EXPERIMENTAL]
     inherited [NETDEVICES && WLAN && MAC80211 && PCI && EXPERIMENTAL]
    }
    config RTL8187 tristate {
     prompt "Realtek 8187 and 8187B USB support" if [NETDEVICES && WLAN && MAC80211 && USB]
     depends on [MAC80211 && USB]
     select EEPROM_93CX6 if [NETDEVICES && WLAN && MAC80211 && USB]
     inherited [NETDEVICES && WLAN && MAC80211 && USB]
     config RTL8187_LEDS boolean {
      depends on [RTL8187 && MAC80211_LEDS && (LEDS_CLASS="y" || LEDS_CLASS="RTL8187")]
      default [y] if [NETDEVICES && WLAN && RTL8187 && MAC80211_LEDS && (LEDS_CLASS="y" || LEDS_CLASS="RTL8187")]
      inherited [NETDEVICES && WLAN && RTL8187 && MAC80211_LEDS && (LEDS_CLASS="y" || LEDS_CLASS="RTL8187")]
     }
    }
    config ADM8211 tristate {
     prompt "ADMtek ADM8211 support" if [NETDEVICES && WLAN && MAC80211 && PCI && EXPERIMENTAL]
     depends on [MAC80211 && PCI && EXPERIMENTAL]
     select CRC32 if [NETDEVICES && WLAN && MAC80211 && PCI && EXPERIMENTAL]
     select EEPROM_93CX6 if [NETDEVICES && WLAN && MAC80211 && PCI && EXPERIMENTAL]
     inherited [NETDEVICES && WLAN && MAC80211 && PCI && EXPERIMENTAL]
    }
    config MAC80211_HWSIM tristate {
     prompt "Simulated radio testing tool for mac80211" if [NETDEVICES && WLAN && MAC80211]
     depends on [MAC80211]
     inherited [NETDEVICES && WLAN && MAC80211]
    }
    config MWL8K tristate {
     prompt "Marvell 88W8xxx PCI/PCIe Wireless support" if [NETDEVICES && WLAN && MAC80211 && PCI && EXPERIMENTAL]
     depends on [MAC80211 && PCI && EXPERIMENTAL]
     inherited [NETDEVICES && WLAN && MAC80211 && PCI && EXPERIMENTAL]
    }
    menuconfig ATH_COMMON tristate {
     prompt "Atheros Wireless Cards" if [NETDEVICES && WLAN && CFG80211]
     depends on [CFG80211]
     inherited [NETDEVICES && WLAN && CFG80211]
     if [NETDEVICES && WLAN && ATH_COMMON] {
      config ATH_DEBUG boolean {
       prompt "Atheros wireless debugging" if [NETDEVICES && WLAN && ATH_COMMON]
       inherited [NETDEVICES && WLAN && ATH_COMMON]
      }
      config ATH5K tristate {
       prompt "Atheros 5xxx wireless cards support" if [NETDEVICES && WLAN && ATH_COMMON && PCI && MAC80211]
       depends on [PCI && MAC80211]
       select MAC80211_LEDS if [NETDEVICES && WLAN && ATH_COMMON && PCI && MAC80211]
       select LEDS_CLASS if [NETDEVICES && WLAN && ATH_COMMON && PCI && MAC80211]
       select NEW_LEDS if [NETDEVICES && WLAN && ATH_COMMON && PCI && MAC80211]
       inherited [NETDEVICES && WLAN && ATH_COMMON && PCI && MAC80211]
       config ATH5K_DEBUG boolean {
        prompt "Atheros 5xxx debugging" if [NETDEVICES && WLAN && ATH_COMMON && ATH5K]
        depends on [ATH5K]
        inherited [NETDEVICES && WLAN && ATH_COMMON && ATH5K]
       }
      }
      config ATH9K_HW tristate {
       inherited [NETDEVICES && WLAN && ATH_COMMON]
      }
      config ATH9K_COMMON tristate {
       inherited [NETDEVICES && WLAN && ATH_COMMON]
      }
      config ATH9K tristate {
       prompt "Atheros 802.11n wireless cards support" if [NETDEVICES && WLAN && ATH_COMMON && PCI && MAC80211]
       depends on [PCI && MAC80211]
       select ATH9K_HW if [NETDEVICES && WLAN && ATH_COMMON && PCI && MAC80211]
       select MAC80211_LEDS if [NETDEVICES && WLAN && ATH_COMMON && PCI && MAC80211]
       select LEDS_CLASS if [NETDEVICES && WLAN && ATH_COMMON && PCI && MAC80211]
       select NEW_LEDS if [NETDEVICES && WLAN && ATH_COMMON && PCI && MAC80211]
       select ATH9K_COMMON if [NETDEVICES && WLAN && ATH_COMMON && PCI && MAC80211]
       inherited [NETDEVICES && WLAN && ATH_COMMON && PCI && MAC80211]
       config ATH9K_DEBUGFS boolean {
        prompt "Atheros ath9k debugging" if [NETDEVICES && WLAN && ATH_COMMON && ATH9K && DEBUG_FS]
        depends on [ATH9K && DEBUG_FS]
        inherited [NETDEVICES && WLAN && ATH_COMMON && ATH9K && DEBUG_FS]
       }
      }
      config AR9170_USB tristate {
       prompt "Atheros AR9170 802.11n USB support" if [NETDEVICES && WLAN && ATH_COMMON && USB && MAC80211]
       depends on [USB && MAC80211]
       select FW_LOADER if [NETDEVICES && WLAN && ATH_COMMON && USB && MAC80211]
       inherited [NETDEVICES && WLAN && ATH_COMMON && USB && MAC80211]
       config AR9170_LEDS boolean {
        depends on [AR9170_USB && MAC80211_LEDS && (LEDS_CLASS="y" || LEDS_CLASS="AR9170_USB")]
        default [y] if [NETDEVICES && WLAN && ATH_COMMON && AR9170_USB && MAC80211_LEDS && (LEDS_CLASS="y" || LEDS_CLASS="AR9170_USB")]
        inherited [NETDEVICES && WLAN && ATH_COMMON && AR9170_USB && MAC80211_LEDS && (LEDS_CLASS="y" || LEDS_CLASS="AR9170_USB")]
       }
      }
     }
    }
    config B43 tristate {
     prompt "Broadcom 43xx wireless support (mac80211 stack)" if [NETDEVICES && WLAN && SSB_POSSIBLE && MAC80211 && HAS_DMA]
     depends on [SSB_POSSIBLE && MAC80211 && HAS_DMA]
     select SSB if [NETDEVICES && WLAN && SSB_POSSIBLE && MAC80211 && HAS_DMA]
     select FW_LOADER if [NETDEVICES && WLAN && SSB_POSSIBLE && MAC80211 && HAS_DMA]
     inherited [NETDEVICES && WLAN && SSB_POSSIBLE && MAC80211 && HAS_DMA]
     config B43_PCI_AUTOSELECT boolean {
      depends on [B43 && SSB_PCIHOST_POSSIBLE]
      select SSB_PCIHOST if [NETDEVICES && WLAN && B43 && SSB_PCIHOST_POSSIBLE]
      select SSB_B43_PCI_BRIDGE if [NETDEVICES && WLAN && B43 && SSB_PCIHOST_POSSIBLE]
      default [y] if [NETDEVICES && WLAN && B43 && SSB_PCIHOST_POSSIBLE]
      inherited [NETDEVICES && WLAN && B43 && SSB_PCIHOST_POSSIBLE]
     }
     config B43_PCICORE_AUTOSELECT boolean {
      depends on [B43 && SSB_DRIVER_PCICORE_POSSIBLE]
      select SSB_DRIVER_PCICORE if [NETDEVICES && WLAN && B43 && SSB_DRIVER_PCICORE_POSSIBLE]
      default [y] if [NETDEVICES && WLAN && B43 && SSB_DRIVER_PCICORE_POSSIBLE]
      inherited [NETDEVICES && WLAN && B43 && SSB_DRIVER_PCICORE_POSSIBLE]
     }
     config B43_PCMCIA boolean {
      prompt "Broadcom 43xx PCMCIA device support" if [NETDEVICES && WLAN && B43 && SSB_PCMCIAHOST_POSSIBLE]
      depends on [B43 && SSB_PCMCIAHOST_POSSIBLE]
      select SSB_PCMCIAHOST if [NETDEVICES && WLAN && B43 && SSB_PCMCIAHOST_POSSIBLE]
      inherited [NETDEVICES && WLAN && B43 && SSB_PCMCIAHOST_POSSIBLE]
     }
     config B43_SDIO boolean {
      prompt "Broadcom 43xx SDIO device support (EXPERIMENTAL)" if [NETDEVICES && WLAN && B43 && SSB_SDIOHOST_POSSIBLE && EXPERIMENTAL]
      depends on [B43 && SSB_SDIOHOST_POSSIBLE && EXPERIMENTAL]
      select SSB_SDIOHOST if [NETDEVICES && WLAN && B43 && SSB_SDIOHOST_POSSIBLE && EXPERIMENTAL]
      inherited [NETDEVICES && WLAN && B43 && SSB_SDIOHOST_POSSIBLE && EXPERIMENTAL]
     }
     config B43_PIO boolean {
      depends on [B43]
      select SSB_BLOCKIO if [NETDEVICES && WLAN && B43]
      default [y] if [NETDEVICES && WLAN && B43]
      inherited [NETDEVICES && WLAN && B43]
     }
     config B43_NPHY boolean {
      prompt "Pre IEEE 802.11n support (BROKEN)" if [NETDEVICES && WLAN && B43 && EXPERIMENTAL && BROKEN]
      depends on [B43 && EXPERIMENTAL && BROKEN]
      inherited [NETDEVICES && WLAN && B43 && EXPERIMENTAL && BROKEN]
     }
     config B43_PHY_LP boolean {
      prompt "Support for low-power (LP-PHY) devices (EXPERIMENTAL)" if [NETDEVICES && WLAN && B43 && EXPERIMENTAL]
      depends on [B43 && EXPERIMENTAL]
      default [y] if [NETDEVICES && WLAN && B43 && EXPERIMENTAL]
      inherited [NETDEVICES && WLAN && B43 && EXPERIMENTAL]
     }
     config B43_LEDS boolean {
      depends on [B43 && MAC80211_LEDS && (LEDS_CLASS="y" || LEDS_CLASS="B43")]
      default [y] if [NETDEVICES && WLAN && B43 && MAC80211_LEDS && (LEDS_CLASS="y" || LEDS_CLASS="B43")]
      inherited [NETDEVICES && WLAN && B43 && MAC80211_LEDS && (LEDS_CLASS="y" || LEDS_CLASS="B43")]
     }
     config B43_HWRNG boolean {
      depends on [B43 && (HW_RANDOM="y" || HW_RANDOM="B43")]
      default [y] if [NETDEVICES && WLAN && B43 && (HW_RANDOM="y" || HW_RANDOM="B43")]
      inherited [NETDEVICES && WLAN && B43 && (HW_RANDOM="y" || HW_RANDOM="B43")]
     }
     config B43_DEBUG boolean {
      prompt "Broadcom 43xx debugging" if [NETDEVICES && WLAN && B43]
      depends on [B43]
      inherited [NETDEVICES && WLAN && B43]
      config B43_FORCE_PIO boolean {
       prompt "Force usage of PIO instead of DMA" if [NETDEVICES && WLAN && B43 && B43_DEBUG]
       depends on [B43 && B43_DEBUG]
       inherited [NETDEVICES && WLAN && B43 && B43_DEBUG]
      }
     }
    }
    config B43LEGACY tristate {
     prompt "Broadcom 43xx-legacy wireless support (mac80211 stack)" if [NETDEVICES && WLAN && SSB_POSSIBLE && MAC80211 && HAS_DMA]
     depends on [SSB_POSSIBLE && MAC80211 && HAS_DMA]
     select SSB if [NETDEVICES && WLAN && SSB_POSSIBLE && MAC80211 && HAS_DMA]
     select FW_LOADER if [NETDEVICES && WLAN && SSB_POSSIBLE && MAC80211 && HAS_DMA]
     inherited [NETDEVICES && WLAN && SSB_POSSIBLE && MAC80211 && HAS_DMA]
     config B43LEGACY_PCI_AUTOSELECT boolean {
      depends on [B43LEGACY && SSB_PCIHOST_POSSIBLE]
      select SSB_PCIHOST if [NETDEVICES && WLAN && B43LEGACY && SSB_PCIHOST_POSSIBLE]
      select SSB_B43_PCI_BRIDGE if [NETDEVICES && WLAN && B43LEGACY && SSB_PCIHOST_POSSIBLE]
      default [y] if [NETDEVICES && WLAN && B43LEGACY && SSB_PCIHOST_POSSIBLE]
      inherited [NETDEVICES && WLAN && B43LEGACY && SSB_PCIHOST_POSSIBLE]
     }
     config B43LEGACY_PCICORE_AUTOSELECT boolean {
      depends on [B43LEGACY && SSB_DRIVER_PCICORE_POSSIBLE]
      select SSB_DRIVER_PCICORE if [NETDEVICES && WLAN && B43LEGACY && SSB_DRIVER_PCICORE_POSSIBLE]
      default [y] if [NETDEVICES && WLAN && B43LEGACY && SSB_DRIVER_PCICORE_POSSIBLE]
      inherited [NETDEVICES && WLAN && B43LEGACY && SSB_DRIVER_PCICORE_POSSIBLE]
     }
     config B43LEGACY_LEDS boolean {
      depends on [B43LEGACY && MAC80211_LEDS && (LEDS_CLASS="y" || LEDS_CLASS="B43LEGACY")]
      default [y] if [NETDEVICES && WLAN && B43LEGACY && MAC80211_LEDS && (LEDS_CLASS="y" || LEDS_CLASS="B43LEGACY")]
      inherited [NETDEVICES && WLAN && B43LEGACY && MAC80211_LEDS && (LEDS_CLASS="y" || LEDS_CLASS="B43LEGACY")]
     }
     config B43LEGACY_HWRNG boolean {
      depends on [B43LEGACY && (HW_RANDOM="y" || HW_RANDOM="B43LEGACY")]
      default [y] if [NETDEVICES && WLAN && B43LEGACY && (HW_RANDOM="y" || HW_RANDOM="B43LEGACY")]
      inherited [NETDEVICES && WLAN && B43LEGACY && (HW_RANDOM="y" || HW_RANDOM="B43LEGACY")]
     }
     config B43LEGACY_DEBUG boolean {
      prompt "Broadcom 43xx-legacy debugging" if [NETDEVICES && WLAN && B43LEGACY]
      depends on [B43LEGACY]
      default [y] if [NETDEVICES && WLAN && B43LEGACY]
      inherited [NETDEVICES && WLAN && B43LEGACY]
     }
     config B43LEGACY_DMA boolean {
      depends on [B43LEGACY]
      inherited [NETDEVICES && WLAN && B43LEGACY]
     }
     config B43LEGACY_PIO boolean {
      depends on [B43LEGACY]
      inherited [NETDEVICES && WLAN && B43LEGACY]
     }
     choice boolean {
      prompt "Broadcom 43xx-legacy data transfer mode" if [NETDEVICES && WLAN && B43LEGACY]
      depends on [B43LEGACY]
      default [B43LEGACY_DMA_AND_PIO_MODE] if [NETDEVICES && WLAN && B43LEGACY]
      config B43LEGACY_DMA_AND_PIO_MODE boolean {
       prompt "DMA + PIO" if [<choice>]
       select B43LEGACY_DMA if [<choice>]
       select B43LEGACY_PIO if [<choice>]
       inherited [<choice>]
      }
      config B43LEGACY_DMA_MODE boolean {
       prompt "DMA (Direct Memory Access) only" if [<choice>]
       select B43LEGACY_DMA if [<choice>]
       inherited [<choice>]
      }
      config B43LEGACY_PIO_MODE boolean {
       prompt "PIO (Programmed I/O) only" if [<choice>]
       select B43LEGACY_PIO if [<choice>]
       inherited [<choice>]
      }
     }
    }
    config HOSTAP tristate {
     prompt "IEEE 802.11 for Host AP (Prism2/2.5/3 and WEP/TKIP/CCMP)" if [NETDEVICES && WLAN]
     select WIRELESS_EXT if [NETDEVICES && WLAN]
     select WEXT_SPY if [NETDEVICES && WLAN]
     select WEXT_PRIV if [NETDEVICES && WLAN]
     select CRYPTO if [NETDEVICES && WLAN]
     select CRYPTO_ARC4 if [NETDEVICES && WLAN]
     select CRYPTO_ECB if [NETDEVICES && WLAN]
     select CRYPTO_AES if [NETDEVICES && WLAN]
     select CRYPTO_MICHAEL_MIC if [NETDEVICES && WLAN]
     select CRYPTO_ECB if [NETDEVICES && WLAN]
     select CRC32 if [NETDEVICES && WLAN]
     select LIB80211 if [NETDEVICES && WLAN]
     select LIB80211_CRYPT_WEP if [NETDEVICES && WLAN]
     select LIB80211_CRYPT_TKIP if [NETDEVICES && WLAN]
     select LIB80211_CRYPT_CCMP if [NETDEVICES && WLAN]
     inherited [NETDEVICES && WLAN]
     config HOSTAP_FIRMWARE boolean {
      prompt "Support downloading firmware images with Host AP driver" if [NETDEVICES && WLAN && HOSTAP]
      depends on [HOSTAP]
      inherited [NETDEVICES && WLAN && HOSTAP]
      config HOSTAP_FIRMWARE_NVRAM boolean {
       prompt "Support for non-volatile firmware download" if [NETDEVICES && WLAN && HOSTAP_FIRMWARE]
       depends on [HOSTAP_FIRMWARE]
       inherited [NETDEVICES && WLAN && HOSTAP_FIRMWARE]
      }
     }
     config HOSTAP_PLX tristate {
      prompt "Host AP driver for Prism2/2.5/3 in PLX9052 PCI adaptors" if [NETDEVICES && WLAN && PCI && HOSTAP]
      depends on [PCI && HOSTAP]
      inherited [NETDEVICES && WLAN && PCI && HOSTAP]
     }
     config HOSTAP_PCI tristate {
      prompt "Host AP driver for Prism2.5 PCI adaptors" if [NETDEVICES && WLAN && PCI && HOSTAP]
      depends on [PCI && HOSTAP]
      inherited [NETDEVICES && WLAN && PCI && HOSTAP]
     }
     config HOSTAP_CS tristate {
      prompt "Host AP driver for Prism2/2.5/3 PC Cards" if [NETDEVICES && WLAN && PCMCIA && HOSTAP]
      depends on [PCMCIA && HOSTAP]
      inherited [NETDEVICES && WLAN && PCMCIA && HOSTAP]
     }
    }
    config IPW2100 tristate {
     prompt "Intel PRO/Wireless 2100 Network Connection" if [NETDEVICES && WLAN && PCI && CFG80211]
     depends on [PCI && CFG80211]
     select WIRELESS_EXT if [NETDEVICES && WLAN && PCI && CFG80211]
     select WEXT_SPY if [NETDEVICES && WLAN && PCI && CFG80211]
     select WEXT_PRIV if [NETDEVICES && WLAN && PCI && CFG80211]
     select FW_LOADER if [NETDEVICES && WLAN && PCI && CFG80211]
     select LIB80211 if [NETDEVICES && WLAN && PCI && CFG80211]
     select LIBIPW if [NETDEVICES && WLAN && PCI && CFG80211]
     inherited [NETDEVICES && WLAN && PCI && CFG80211]
     config IPW2100_MONITOR boolean {
      prompt "Enable promiscuous mode" if [NETDEVICES && WLAN && IPW2100]
      depends on [IPW2100]
      inherited [NETDEVICES && WLAN && IPW2100]
     }
     config IPW2100_DEBUG boolean {
      prompt "Enable full debugging output in IPW2100 module." if [NETDEVICES && WLAN && IPW2100]
      depends on [IPW2100]
      inherited [NETDEVICES && WLAN && IPW2100]
     }
    }
    config IPW2200 tristate {
     prompt "Intel PRO/Wireless 2200BG and 2915ABG Network Connection" if [NETDEVICES && WLAN && PCI && CFG80211 && CFG80211_WEXT]
     depends on [PCI && CFG80211 && CFG80211_WEXT]
     select WIRELESS_EXT if [NETDEVICES && WLAN && PCI && CFG80211 && CFG80211_WEXT]
     select WEXT_SPY if [NETDEVICES && WLAN && PCI && CFG80211 && CFG80211_WEXT]
     select WEXT_PRIV if [NETDEVICES && WLAN && PCI && CFG80211 && CFG80211_WEXT]
     select FW_LOADER if [NETDEVICES && WLAN && PCI && CFG80211 && CFG80211_WEXT]
     select LIB80211 if [NETDEVICES && WLAN && PCI && CFG80211 && CFG80211_WEXT]
     select LIBIPW if [NETDEVICES && WLAN && PCI && CFG80211 && CFG80211_WEXT]
     inherited [NETDEVICES && WLAN && PCI && CFG80211 && CFG80211_WEXT]
     config IPW2200_MONITOR boolean {
      prompt "Enable promiscuous mode" if [NETDEVICES && WLAN && IPW2200]
      depends on [IPW2200]
      inherited [NETDEVICES && WLAN && IPW2200]
      config IPW2200_RADIOTAP boolean {
       prompt "Enable radiotap format 802.11 raw packet support" if [NETDEVICES && WLAN && IPW2200_MONITOR]
       depends on [IPW2200_MONITOR]
       inherited [NETDEVICES && WLAN && IPW2200_MONITOR]
      }
      config IPW2200_PROMISCUOUS boolean {
       prompt "Enable creation of a RF radiotap promiscuous interface" if [NETDEVICES && WLAN && IPW2200_MONITOR]
       depends on [IPW2200_MONITOR]
       select IPW2200_RADIOTAP if [NETDEVICES && WLAN && IPW2200_MONITOR]
       inherited [NETDEVICES && WLAN && IPW2200_MONITOR]
      }
     }
     config IPW2200_QOS boolean {
      prompt "Enable QoS support" if [NETDEVICES && WLAN && IPW2200 && EXPERIMENTAL]
      depends on [IPW2200 && EXPERIMENTAL]
      inherited [NETDEVICES && WLAN && IPW2200 && EXPERIMENTAL]
     }
     config IPW2200_DEBUG boolean {
      prompt "Enable full debugging output in IPW2200 module." if [NETDEVICES && WLAN && IPW2200]
      depends on [IPW2200]
      inherited [NETDEVICES && WLAN && IPW2200]
     }
    }
    config LIBIPW tristate {
     depends on [PCI && CFG80211]
     select WIRELESS_EXT if [NETDEVICES && WLAN && PCI && CFG80211]
     select WEXT_SPY if [NETDEVICES && WLAN && PCI && CFG80211]
     select CRYPTO if [NETDEVICES && WLAN && PCI && CFG80211]
     select CRYPTO_ARC4 if [NETDEVICES && WLAN && PCI && CFG80211]
     select CRYPTO_ECB if [NETDEVICES && WLAN && PCI && CFG80211]
     select CRYPTO_AES if [NETDEVICES && WLAN && PCI && CFG80211]
     select CRYPTO_MICHAEL_MIC if [NETDEVICES && WLAN && PCI && CFG80211]
     select CRYPTO_ECB if [NETDEVICES && WLAN && PCI && CFG80211]
     select CRC32 if [NETDEVICES && WLAN && PCI && CFG80211]
     select LIB80211 if [NETDEVICES && WLAN && PCI && CFG80211]
     select LIB80211_CRYPT_WEP if [NETDEVICES && WLAN && PCI && CFG80211]
     select LIB80211_CRYPT_TKIP if [NETDEVICES && WLAN && PCI && CFG80211]
     select LIB80211_CRYPT_CCMP if [NETDEVICES && WLAN && PCI && CFG80211]
     inherited [NETDEVICES && WLAN && PCI && CFG80211]
    }
    config LIBIPW_DEBUG boolean {
     prompt "Full debugging output for the LIBIPW component" if [NETDEVICES && WLAN && LIBIPW]
     depends on [LIBIPW]
     inherited [NETDEVICES && WLAN && LIBIPW]
    }
    config IWLWIFI tristate {
     prompt "Intel Wireless Wifi" if [NETDEVICES && WLAN && PCI && MAC80211 && EXPERIMENTAL]
     depends on [PCI && MAC80211 && EXPERIMENTAL]
     select FW_LOADER if [NETDEVICES && WLAN && PCI && MAC80211 && EXPERIMENTAL]
     inherited [NETDEVICES && WLAN && PCI && MAC80211 && EXPERIMENTAL]
     config IWLWIFI_SPECTRUM_MEASUREMENT boolean {
      prompt "Enable Spectrum Measurement in iwlagn driver" if [NETDEVICES && WLAN && IWLWIFI]
      depends on [IWLWIFI]
      inherited [NETDEVICES && WLAN && IWLWIFI]
     }
     config IWLWIFI_DEBUG boolean {
      prompt "Enable full debugging output in iwlagn and iwl3945 drivers" if [NETDEVICES && WLAN && IWLWIFI]
      depends on [IWLWIFI]
      inherited [NETDEVICES && WLAN && IWLWIFI]
      config IWLWIFI_DEBUGFS boolean {
       prompt "iwlagn debugfs support" if [NETDEVICES && WLAN && IWLWIFI && IWLWIFI_DEBUG && MAC80211_DEBUGFS]
       depends on [IWLWIFI && IWLWIFI_DEBUG && MAC80211_DEBUGFS]
       inherited [NETDEVICES && WLAN && IWLWIFI && IWLWIFI_DEBUG && MAC80211_DEBUGFS]
      }
     }
     config IWLWIFI_DEVICE_TRACING boolean {
      prompt "iwlwifi device access tracing" if [NETDEVICES && WLAN && IWLWIFI && EVENT_TRACING]
      depends on [IWLWIFI]
      depends on [EVENT_TRACING]
      inherited [NETDEVICES && WLAN && IWLWIFI && EVENT_TRACING]
     }
     config IWLAGN tristate {
      prompt "Intel Wireless WiFi Next Gen AGN (iwlagn)" if [NETDEVICES && WLAN && IWLWIFI]
      depends on [IWLWIFI]
      inherited [NETDEVICES && WLAN && IWLWIFI]
      config IWL4965 boolean {
       prompt "Intel Wireless WiFi 4965AGN" if [NETDEVICES && WLAN && IWLAGN]
       depends on [IWLAGN]
       inherited [NETDEVICES && WLAN && IWLAGN]
      }
      config IWL5000 boolean {
       prompt "Intel Wireless WiFi 5000AGN; Intel WiFi Link 1000, 6000, and 6050 Series" if [NETDEVICES && WLAN && IWLAGN]
       depends on [IWLAGN]
       inherited [NETDEVICES && WLAN && IWLAGN]
      }
     }
     config IWL3945 tristate {
      prompt "Intel PRO/Wireless 3945ABG/BG Network Connection (iwl3945)" if [NETDEVICES && WLAN && IWLWIFI]
      depends on [IWLWIFI]
      inherited [NETDEVICES && WLAN && IWLWIFI]
      config IWL3945_SPECTRUM_MEASUREMENT boolean {
       prompt "Enable Spectrum Measurement in iwl3945 driver" if [NETDEVICES && WLAN && IWL3945]
       depends on [IWL3945]
       inherited [NETDEVICES && WLAN && IWL3945]
      }
     }
    }
    config IWM tristate {
     prompt "Intel Wireless Multicomm 3200 WiFi driver" if [NETDEVICES && WLAN && MMC && EXPERIMENTAL && CFG80211]
     depends on [MMC && EXPERIMENTAL]
     depends on [CFG80211]
     select FW_LOADER if [NETDEVICES && WLAN && MMC && EXPERIMENTAL && CFG80211]
     select IWMC3200TOP if [NETDEVICES && WLAN && MMC && EXPERIMENTAL && CFG80211]
     inherited [NETDEVICES && WLAN && MMC && EXPERIMENTAL && CFG80211]
     config IWM_DEBUG boolean {
      prompt "Enable full debugging output in iwmc3200wifi" if [NETDEVICES && WLAN && IWM && DEBUG_FS]
      depends on [IWM && DEBUG_FS]
      inherited [NETDEVICES && WLAN && IWM && DEBUG_FS]
     }
    }
    config LIBERTAS tristate {
     prompt "Marvell 8xxx Libertas WLAN driver support" if [NETDEVICES && WLAN && CFG80211]
     depends on [CFG80211]
     select WIRELESS_EXT if [NETDEVICES && WLAN && CFG80211]
     select WEXT_SPY if [NETDEVICES && WLAN && CFG80211]
     select LIB80211 if [NETDEVICES && WLAN && CFG80211]
     select FW_LOADER if [NETDEVICES && WLAN && CFG80211]
     inherited [NETDEVICES && WLAN && CFG80211]
     config LIBERTAS_USB tristate {
      prompt "Marvell Libertas 8388 USB 802.11b/g cards" if [NETDEVICES && WLAN && LIBERTAS && USB]
      depends on [LIBERTAS && USB]
      inherited [NETDEVICES && WLAN && LIBERTAS && USB]
     }
     config LIBERTAS_CS tristate {
      prompt "Marvell Libertas 8385 CompactFlash 802.11b/g cards" if [NETDEVICES && WLAN && LIBERTAS && PCMCIA]
      depends on [LIBERTAS && PCMCIA]
      inherited [NETDEVICES && WLAN && LIBERTAS && PCMCIA]
     }
     config LIBERTAS_SDIO tristate {
      prompt "Marvell Libertas 8385/8686/8688 SDIO 802.11b/g cards" if [NETDEVICES && WLAN && LIBERTAS && MMC]
      depends on [LIBERTAS && MMC]
      inherited [NETDEVICES && WLAN && LIBERTAS && MMC]
     }
     config LIBERTAS_SPI tristate {
      prompt "Marvell Libertas 8686 SPI 802.11b/g cards" if [NETDEVICES && WLAN && LIBERTAS && SPI]
      depends on [LIBERTAS && SPI]
      inherited [NETDEVICES && WLAN && LIBERTAS && SPI]
     }
     config LIBERTAS_DEBUG boolean {
      prompt "Enable full debugging output in the Libertas module." if [NETDEVICES && WLAN && LIBERTAS]
      depends on [LIBERTAS]
      inherited [NETDEVICES && WLAN && LIBERTAS]
     }
    }
    config HERMES tristate {
     prompt "Hermes chipset 802.11b support (Orinoco/Prism2/Symbol)" if [NETDEVICES && WLAN && (PPC_PMAC || PCI || PCMCIA) && CFG80211 && CFG80211_WEXT]
     depends on [PPC_PMAC || PCI || PCMCIA]
     depends on [CFG80211 && CFG80211_WEXT]
     select WIRELESS_EXT if [NETDEVICES && WLAN && (PPC_PMAC || PCI || PCMCIA) && CFG80211 && CFG80211_WEXT]
     select WEXT_SPY if [NETDEVICES && WLAN && (PPC_PMAC || PCI || PCMCIA) && CFG80211 && CFG80211_WEXT]
     select WEXT_PRIV if [NETDEVICES && WLAN && (PPC_PMAC || PCI || PCMCIA) && CFG80211 && CFG80211_WEXT]
     select FW_LOADER if [NETDEVICES && WLAN && (PPC_PMAC || PCI || PCMCIA) && CFG80211 && CFG80211_WEXT]
     select CRYPTO if [NETDEVICES && WLAN && (PPC_PMAC || PCI || PCMCIA) && CFG80211 && CFG80211_WEXT]
     select CRYPTO_MICHAEL_MIC if [NETDEVICES && WLAN && (PPC_PMAC || PCI || PCMCIA) && CFG80211 && CFG80211_WEXT]
     inherited [NETDEVICES && WLAN && (PPC_PMAC || PCI || PCMCIA) && CFG80211 && CFG80211_WEXT]
     config HERMES_CACHE_FW_ON_INIT boolean {
      prompt "Cache Hermes firmware on driver initialisation" if [NETDEVICES && WLAN && HERMES]
      depends on [HERMES]
      default [y] if [NETDEVICES && WLAN && HERMES]
      inherited [NETDEVICES && WLAN && HERMES]
     }
     config APPLE_AIRPORT tristate {
      prompt "Apple Airport support (built-in)" if [NETDEVICES && WLAN && PPC_PMAC && HERMES]
      depends on [PPC_PMAC && HERMES]
      inherited [NETDEVICES && WLAN && PPC_PMAC && HERMES]
     }
     config PLX_HERMES tristate {
      prompt "Hermes in PLX9052 based PCI adaptor support (Netgear MA301 etc.)" if [NETDEVICES && WLAN && PCI && HERMES]
      depends on [PCI && HERMES]
      inherited [NETDEVICES && WLAN && PCI && HERMES]
     }
     config TMD_HERMES tristate {
      prompt "Hermes in TMD7160 based PCI adaptor support" if [NETDEVICES && WLAN && PCI && HERMES]
      depends on [PCI && HERMES]
      inherited [NETDEVICES && WLAN && PCI && HERMES]
     }
     config NORTEL_HERMES tristate {
      prompt "Nortel emobility PCI adaptor support" if [NETDEVICES && WLAN && PCI && HERMES]
      depends on [PCI && HERMES]
      inherited [NETDEVICES && WLAN && PCI && HERMES]
     }
     config PCI_HERMES tristate {
      prompt "Prism 2.5 PCI 802.11b adaptor support" if [NETDEVICES && WLAN && PCI && HERMES]
      depends on [PCI && HERMES]
      inherited [NETDEVICES && WLAN && PCI && HERMES]
     }
     config PCMCIA_HERMES tristate {
      prompt "Hermes PCMCIA card support" if [NETDEVICES && WLAN && PCMCIA && HERMES]
      depends on [PCMCIA && HERMES]
      inherited [NETDEVICES && WLAN && PCMCIA && HERMES]
     }
     config PCMCIA_SPECTRUM tristate {
      prompt "Symbol Spectrum24 Trilogy PCMCIA card support" if [NETDEVICES && WLAN && PCMCIA && HERMES]
      depends on [PCMCIA && HERMES]
      inherited [NETDEVICES && WLAN && PCMCIA && HERMES]
     }
    }
    config P54_COMMON tristate {
     prompt "Softmac Prism54 support" if [NETDEVICES && WLAN && MAC80211 && EXPERIMENTAL]
     depends on [MAC80211 && EXPERIMENTAL]
     select FW_LOADER if [NETDEVICES && WLAN && MAC80211 && EXPERIMENTAL]
     inherited [NETDEVICES && WLAN && MAC80211 && EXPERIMENTAL]
     config P54_USB tristate {
      prompt "Prism54 USB support" if [NETDEVICES && WLAN && P54_COMMON && USB]
      depends on [P54_COMMON && USB]
      select CRC32 if [NETDEVICES && WLAN && P54_COMMON && USB]
      inherited [NETDEVICES && WLAN && P54_COMMON && USB]
     }
     config P54_PCI tristate {
      prompt "Prism54 PCI support" if [NETDEVICES && WLAN && P54_COMMON && PCI]
      depends on [P54_COMMON && PCI]
      inherited [NETDEVICES && WLAN && P54_COMMON && PCI]
     }
     config P54_SPI tristate {
      prompt "Prism54 SPI (stlc45xx) support" if [NETDEVICES && WLAN && P54_COMMON && SPI_MASTER && GENERIC_HARDIRQS]
      depends on [P54_COMMON && SPI_MASTER && GENERIC_HARDIRQS]
      inherited [NETDEVICES && WLAN && P54_COMMON && SPI_MASTER && GENERIC_HARDIRQS]
     }
     config P54_LEDS boolean {
      depends on [P54_COMMON && MAC80211_LEDS && (LEDS_CLASS="y" || LEDS_CLASS="P54_COMMON")]
      default [y] if [NETDEVICES && WLAN && P54_COMMON && MAC80211_LEDS && (LEDS_CLASS="y" || LEDS_CLASS="P54_COMMON")]
      inherited [NETDEVICES && WLAN && P54_COMMON && MAC80211_LEDS && (LEDS_CLASS="y" || LEDS_CLASS="P54_COMMON")]
     }
    }
    menuconfig RT2X00 tristate {
     prompt "Ralink driver support" if [NETDEVICES && WLAN && MAC80211]
     depends on [MAC80211]
     inherited [NETDEVICES && WLAN && MAC80211]
     if [NETDEVICES && WLAN && RT2X00] {
      config RT2400PCI tristate {
       prompt "Ralink rt2400 (PCI/PCMCIA) support" if [NETDEVICES && WLAN && RT2X00 && PCI]
       depends on [PCI]
       select RT2X00_LIB_PCI if [NETDEVICES && WLAN && RT2X00 && PCI]
       select EEPROM_93CX6 if [NETDEVICES && WLAN && RT2X00 && PCI]
       inherited [NETDEVICES && WLAN && RT2X00 && PCI]
      }
      config RT2500PCI tristate {
       prompt "Ralink rt2500 (PCI/PCMCIA) support" if [NETDEVICES && WLAN && RT2X00 && PCI]
       depends on [PCI]
       select RT2X00_LIB_PCI if [NETDEVICES && WLAN && RT2X00 && PCI]
       select EEPROM_93CX6 if [NETDEVICES && WLAN && RT2X00 && PCI]
       inherited [NETDEVICES && WLAN && RT2X00 && PCI]
      }
      config RT61PCI tristate {
       prompt "Ralink rt2501/rt61 (PCI/PCMCIA) support" if [NETDEVICES && WLAN && RT2X00 && PCI]
       depends on [PCI]
       select RT2X00_LIB_PCI if [NETDEVICES && WLAN && RT2X00 && PCI]
       select RT2X00_LIB_FIRMWARE if [NETDEVICES && WLAN && RT2X00 && PCI]
       select RT2X00_LIB_CRYPTO if [NETDEVICES && WLAN && RT2X00 && PCI]
       select CRC_ITU_T if [NETDEVICES && WLAN && RT2X00 && PCI]
       select EEPROM_93CX6 if [NETDEVICES && WLAN && RT2X00 && PCI]
       inherited [NETDEVICES && WLAN && RT2X00 && PCI]
      }
      config RT2800PCI_PCI tristate {
       depends on [PCI]
       default [y] if [NETDEVICES && WLAN && RT2X00 && PCI]
       inherited [NETDEVICES && WLAN && RT2X00 && PCI]
      }
      config RT2800PCI_SOC tristate {
       depends on [RALINK_RT288X || RALINK_RT305X]
       default [y] if [NETDEVICES && WLAN && RT2X00 && (RALINK_RT288X || RALINK_RT305X)]
       inherited [NETDEVICES && WLAN && RT2X00 && (RALINK_RT288X || RALINK_RT305X)]
      }
      config RT2800PCI tristate {
       prompt "Ralink rt2800 (PCI/PCMCIA) support (VERY EXPERIMENTAL)" if [NETDEVICES && WLAN && RT2X00 && (RT2800PCI_PCI || RT2800PCI_SOC) && EXPERIMENTAL]
       depends on [(RT2800PCI_PCI || RT2800PCI_SOC) && EXPERIMENTAL]
       select RT2800_LIB if [NETDEVICES && WLAN && RT2X00 && (RT2800PCI_PCI || RT2800PCI_SOC) && EXPERIMENTAL]
       select RT2X00_LIB_PCI if [NETDEVICES && WLAN && RT2X00 && (RT2800PCI_PCI || RT2800PCI_SOC) && EXPERIMENTAL && RT2800PCI_PCI]
       select RT2X00_LIB_SOC if [NETDEVICES && WLAN && RT2X00 && (RT2800PCI_PCI || RT2800PCI_SOC) && EXPERIMENTAL && RT2800PCI_SOC]
       select RT2X00_LIB_HT if [NETDEVICES && WLAN && RT2X00 && (RT2800PCI_PCI || RT2800PCI_SOC) && EXPERIMENTAL]
       select RT2X00_LIB_FIRMWARE if [NETDEVICES && WLAN && RT2X00 && (RT2800PCI_PCI || RT2800PCI_SOC) && EXPERIMENTAL]
       select RT2X00_LIB_CRYPTO if [NETDEVICES && WLAN && RT2X00 && (RT2800PCI_PCI || RT2800PCI_SOC) && EXPERIMENTAL]
       select CRC_CCITT if [NETDEVICES && WLAN && RT2X00 && (RT2800PCI_PCI || RT2800PCI_SOC) && EXPERIMENTAL]
       select EEPROM_93CX6 if [NETDEVICES && WLAN && RT2X00 && (RT2800PCI_PCI || RT2800PCI_SOC) && EXPERIMENTAL]
       inherited [NETDEVICES && WLAN && RT2X00 && (RT2800PCI_PCI || RT2800PCI_SOC) && EXPERIMENTAL]
      }
      config RT2500USB tristate {
       prompt "Ralink rt2500 (USB) support" if [NETDEVICES && WLAN && RT2X00 && USB]
       depends on [USB]
       select RT2X00_LIB_USB if [NETDEVICES && WLAN && RT2X00 && USB]
       select RT2X00_LIB_CRYPTO if [NETDEVICES && WLAN && RT2X00 && USB]
       inherited [NETDEVICES && WLAN && RT2X00 && USB]
      }
      config RT73USB tristate {
       prompt "Ralink rt2501/rt73 (USB) support" if [NETDEVICES && WLAN && RT2X00 && USB]
       depends on [USB]
       select RT2X00_LIB_USB if [NETDEVICES && WLAN && RT2X00 && USB]
       select RT2X00_LIB_FIRMWARE if [NETDEVICES && WLAN && RT2X00 && USB]
       select RT2X00_LIB_CRYPTO if [NETDEVICES && WLAN && RT2X00 && USB]
       select CRC_ITU_T if [NETDEVICES && WLAN && RT2X00 && USB]
       inherited [NETDEVICES && WLAN && RT2X00 && USB]
      }
      config RT2800USB tristate {
       prompt "Ralink rt2800 (USB) support (EXPERIMENTAL)" if [NETDEVICES && WLAN && RT2X00 && USB && EXPERIMENTAL]
       depends on [USB && EXPERIMENTAL]
       select RT2800_LIB if [NETDEVICES && WLAN && RT2X00 && USB && EXPERIMENTAL]
       select RT2X00_LIB_USB if [NETDEVICES && WLAN && RT2X00 && USB && EXPERIMENTAL]
       select RT2X00_LIB_HT if [NETDEVICES && WLAN && RT2X00 && USB && EXPERIMENTAL]
       select RT2X00_LIB_FIRMWARE if [NETDEVICES && WLAN && RT2X00 && USB && EXPERIMENTAL]
       select RT2X00_LIB_CRYPTO if [NETDEVICES && WLAN && RT2X00 && USB && EXPERIMENTAL]
       select CRC_CCITT if [NETDEVICES && WLAN && RT2X00 && USB && EXPERIMENTAL]
       inherited [NETDEVICES && WLAN && RT2X00 && USB && EXPERIMENTAL]
      }
      config RT2800_LIB tristate {
       inherited [NETDEVICES && WLAN && RT2X00]
      }
      config RT2X00_LIB_PCI tristate {
       select RT2X00_LIB if [NETDEVICES && WLAN && RT2X00]
       inherited [NETDEVICES && WLAN && RT2X00]
      }
      config RT2X00_LIB_SOC tristate {
       select RT2X00_LIB if [NETDEVICES && WLAN && RT2X00]
       inherited [NETDEVICES && WLAN && RT2X00]
      }
      config RT2X00_LIB_USB tristate {
       select RT2X00_LIB if [NETDEVICES && WLAN && RT2X00]
       inherited [NETDEVICES && WLAN && RT2X00]
      }
      config RT2X00_LIB tristate {
       inherited [NETDEVICES && WLAN && RT2X00]
      }
      config RT2X00_LIB_HT boolean {
       inherited [NETDEVICES && WLAN && RT2X00]
      }
      config RT2X00_LIB_FIRMWARE boolean {
       select FW_LOADER if [NETDEVICES && WLAN && RT2X00]
       inherited [NETDEVICES && WLAN && RT2X00]
      }
      config RT2X00_LIB_CRYPTO boolean {
       inherited [NETDEVICES && WLAN && RT2X00]
      }
      config RT2X00_LIB_LEDS boolean {
       default [y] if [NETDEVICES && WLAN && RT2X00 && (RT2X00_LIB="y" && LEDS_CLASS="y" || RT2X00_LIB="m" && LEDS_CLASS!="n")]
       inherited [NETDEVICES && WLAN && RT2X00]
      }
      config RT2X00_LIB_DEBUGFS boolean {
       prompt "Ralink debugfs support" if [NETDEVICES && WLAN && RT2X00 && RT2X00_LIB && MAC80211_DEBUGFS]
       depends on [RT2X00_LIB && MAC80211_DEBUGFS]
       inherited [NETDEVICES && WLAN && RT2X00 && RT2X00_LIB && MAC80211_DEBUGFS]
      }
      config RT2X00_DEBUG boolean {
       prompt "Ralink debug output" if [NETDEVICES && WLAN && RT2X00 && RT2X00_LIB]
       depends on [RT2X00_LIB]
       inherited [NETDEVICES && WLAN && RT2X00 && RT2X00_LIB]
      }
     }
    }
    menuconfig WL12XX tristate {
     prompt "TI wl12xx driver support" if [NETDEVICES && WLAN && MAC80211 && EXPERIMENTAL]
     depends on [MAC80211 && EXPERIMENTAL]
     inherited [NETDEVICES && WLAN && MAC80211 && EXPERIMENTAL]
     config WL1251 tristate {
      prompt "TI wl1251 support" if [NETDEVICES && WLAN && WL12XX && GENERIC_HARDIRQS]
      depends on [WL12XX && GENERIC_HARDIRQS]
      select FW_LOADER if [NETDEVICES && WLAN && WL12XX && GENERIC_HARDIRQS]
      select CRC7 if [NETDEVICES && WLAN && WL12XX && GENERIC_HARDIRQS]
      inherited [NETDEVICES && WLAN && WL12XX && GENERIC_HARDIRQS]
      config WL1251_SPI tristate {
       prompt "TI wl1251 SPI support" if [NETDEVICES && WLAN && WL1251 && SPI_MASTER]
       depends on [WL1251 && SPI_MASTER]
       inherited [NETDEVICES && WLAN && WL1251 && SPI_MASTER]
      }
      config WL1251_SDIO tristate {
       prompt "TI wl1251 SDIO support" if [NETDEVICES && WLAN && WL1251 && MMC]
       depends on [WL1251 && MMC]
       inherited [NETDEVICES && WLAN && WL1251 && MMC]
      }
     }
     config WL1271 tristate {
      prompt "TI wl1271 support" if [NETDEVICES && WLAN && WL12XX && SPI_MASTER && GENERIC_HARDIRQS && INET]
      depends on [WL12XX && SPI_MASTER && GENERIC_HARDIRQS]
      depends on [INET]
      select FW_LOADER if [NETDEVICES && WLAN && WL12XX && SPI_MASTER && GENERIC_HARDIRQS && INET]
      select CRC7 if [NETDEVICES && WLAN && WL12XX && SPI_MASTER && GENERIC_HARDIRQS && INET]
      inherited [NETDEVICES && WLAN && WL12XX && SPI_MASTER && GENERIC_HARDIRQS && INET]
     }
    }
    config ZD1211RW tristate {
     prompt "ZyDAS ZD1211/ZD1211B USB-wireless support" if [NETDEVICES && WLAN && USB && MAC80211 && EXPERIMENTAL]
     depends on [USB && MAC80211 && EXPERIMENTAL]
     select FW_LOADER if [NETDEVICES && WLAN && USB && MAC80211 && EXPERIMENTAL]
     inherited [NETDEVICES && WLAN && USB && MAC80211 && EXPERIMENTAL]
     config ZD1211RW_DEBUG boolean {
      prompt "ZyDAS ZD1211 debugging" if [NETDEVICES && WLAN && ZD1211RW]
      depends on [ZD1211RW]
      inherited [NETDEVICES && WLAN && ZD1211RW]
     }
    }
   }
  }
  if [NETDEVICES && WIMAX] {
   menu "WiMAX Wireless Broadband devices" {
    depends on [NETDEVICES && WIMAX]
    config WIMAX_I2400M tristate {
     depends on [WIMAX]
     select FW_LOADER if [NETDEVICES && WIMAX]
     inherited [NETDEVICES && WIMAX]
    }
    config WIMAX_I2400M_USB tristate {
     prompt "Intel Wireless WiMAX Connection 2400 over USB (including 5x50)" if [NETDEVICES && WIMAX && USB]
     depends on [WIMAX && USB]
     select WIMAX_I2400M if [NETDEVICES && WIMAX && USB]
     inherited [NETDEVICES && WIMAX && USB]
    }
    config WIMAX_I2400M_SDIO tristate {
     prompt "Intel Wireless WiMAX Connection 2400 over SDIO" if [NETDEVICES && WIMAX && MMC]
     depends on [WIMAX && MMC]
     select WIMAX_I2400M if [NETDEVICES && WIMAX && MMC]
     inherited [NETDEVICES && WIMAX && MMC]
     config WIMAX_IWMC3200_SDIO boolean {
      prompt "Intel Wireless Multicom WiMAX Connection 3200 over SDIO" if [NETDEVICES && WIMAX && WIMAX_I2400M_SDIO]
      depends on [WIMAX_I2400M_SDIO]
      select IWMC3200TOP if [NETDEVICES && WIMAX && WIMAX_I2400M_SDIO]
      inherited [NETDEVICES && WIMAX && WIMAX_I2400M_SDIO]
     }
    }
    config WIMAX_I2400M_DEBUG_LEVEL integer {
     prompt "WiMAX i2400m debug level" if [NETDEVICES && WIMAX && WIMAX_I2400M]
     depends on [WIMAX_I2400M]
     default [8] if [NETDEVICES && WIMAX && WIMAX_I2400M]
     inherited [NETDEVICES && WIMAX && WIMAX_I2400M]
    }
   }
  }
  menu "USB Network Adapters" {
   depends on [NETDEVICES && USB && NET]
   config USB_CATC tristate {
    prompt "USB CATC NetMate-based Ethernet device support (EXPERIMENTAL)" if [NETDEVICES && USB && NET && EXPERIMENTAL]
    depends on [EXPERIMENTAL]
    select CRC32 if [NETDEVICES && USB && NET && EXPERIMENTAL]
    inherited [NETDEVICES && USB && NET && EXPERIMENTAL]
   }
   config USB_KAWETH tristate {
    prompt "USB KLSI KL5USB101-based ethernet device support" if [NETDEVICES && USB && NET]
    inherited [NETDEVICES && USB && NET]
   }
   config USB_PEGASUS tristate {
    prompt "USB Pegasus/Pegasus-II based ethernet device support" if [NETDEVICES && USB && NET]
    select MII if [NETDEVICES && USB && NET]
    inherited [NETDEVICES && USB && NET]
   }
   config USB_RTL8150 tristate {
    prompt "USB RTL8150 based ethernet device support (EXPERIMENTAL)" if [NETDEVICES && USB && NET && EXPERIMENTAL]
    depends on [EXPERIMENTAL]
    select MII if [NETDEVICES && USB && NET && EXPERIMENTAL]
    inherited [NETDEVICES && USB && NET && EXPERIMENTAL]
   }
   config USB_USBNET tristate {
    prompt "Multi-purpose USB Networking Framework" if [NETDEVICES && USB && NET]
    select MII if [NETDEVICES && USB && NET]
    inherited [NETDEVICES && USB && NET]
    config USB_NET_AX8817X tristate {
     prompt "ASIX AX88xxx Based USB 2.0 Ethernet Adapters" if [NETDEVICES && USB && NET && USB_USBNET]
     depends on [USB_USBNET]
     select CRC32 if [NETDEVICES && USB && NET && USB_USBNET]
     default [y] if [NETDEVICES && USB && NET && USB_USBNET]
     inherited [NETDEVICES && USB && NET && USB_USBNET]
    }
    config USB_NET_CDCETHER tristate {
     prompt "CDC Ethernet support (smart devices such as cable modems)" if [NETDEVICES && USB && NET && USB_USBNET]
     depends on [USB_USBNET]
     default [y] if [NETDEVICES && USB && NET && USB_USBNET]
     inherited [NETDEVICES && USB && NET && USB_USBNET]
    }
    config USB_NET_CDC_EEM tristate {
     prompt "CDC EEM support" if [NETDEVICES && USB && NET && USB_USBNET && EXPERIMENTAL]
     depends on [USB_USBNET && EXPERIMENTAL]
     inherited [NETDEVICES && USB && NET && USB_USBNET && EXPERIMENTAL]
    }
    config USB_NET_DM9601 tristate {
     prompt "Davicom DM9601 based USB 1.1 10/100 ethernet devices" if [NETDEVICES && USB && NET && USB_USBNET]
     depends on [USB_USBNET]
     select CRC32 if [NETDEVICES && USB && NET && USB_USBNET]
     inherited [NETDEVICES && USB && NET && USB_USBNET]
    }
    config USB_NET_SMSC95XX tristate {
     prompt "SMSC LAN95XX based USB 2.0 10/100 ethernet devices" if [NETDEVICES && USB && NET && USB_USBNET]
     depends on [USB_USBNET]
     select CRC32 if [NETDEVICES && USB && NET && USB_USBNET]
     inherited [NETDEVICES && USB && NET && USB_USBNET]
    }
    config USB_NET_GL620A tristate {
     prompt "GeneSys GL620USB-A based cables" if [NETDEVICES && USB && NET && USB_USBNET]
     depends on [USB_USBNET]
     inherited [NETDEVICES && USB && NET && USB_USBNET]
    }
    config USB_NET_NET1080 tristate {
     prompt "NetChip 1080 based cables (Laplink, ...)" if [NETDEVICES && USB && NET && USB_USBNET]
     default [y] if [NETDEVICES && USB && NET && USB_USBNET]
     depends on [USB_USBNET]
     inherited [NETDEVICES && USB && NET && USB_USBNET]
    }
    config USB_NET_PLUSB tristate {
     prompt "Prolific PL-2301/2302 based cables" if [NETDEVICES && USB && NET && USB_USBNET && EXPERIMENTAL]
     depends on [USB_USBNET && EXPERIMENTAL]
     inherited [NETDEVICES && USB && NET && USB_USBNET && EXPERIMENTAL]
    }
    config USB_NET_MCS7830 tristate {
     prompt "MosChip MCS7830 based Ethernet adapters" if [NETDEVICES && USB && NET && USB_USBNET]
     depends on [USB_USBNET]
     inherited [NETDEVICES && USB && NET && USB_USBNET]
    }
    config USB_NET_RNDIS_HOST tristate {
     prompt "Host for RNDIS and ActiveSync devices (EXPERIMENTAL)" if [NETDEVICES && USB && NET && USB_USBNET && EXPERIMENTAL]
     depends on [USB_USBNET && EXPERIMENTAL]
     select USB_NET_CDCETHER if [NETDEVICES && USB && NET && USB_USBNET && EXPERIMENTAL]
     inherited [NETDEVICES && USB && NET && USB_USBNET && EXPERIMENTAL]
    }
    config USB_NET_CDC_SUBSET tristate {
     prompt "Simple USB Network Links (CDC Ethernet subset)" if [NETDEVICES && USB && NET && USB_USBNET]
     depends on [USB_USBNET]
     default [y] if [NETDEVICES && USB && NET && USB_USBNET]
     inherited [NETDEVICES && USB && NET && USB_USBNET]
     config USB_ALI_M5632 boolean {
      prompt "ALi M5632 based 'USB 2.0 Data Link' cables" if [NETDEVICES && USB && NET && USB_NET_CDC_SUBSET]
      depends on [USB_NET_CDC_SUBSET]
      inherited [NETDEVICES && USB && NET && USB_NET_CDC_SUBSET]
     }
     config USB_AN2720 boolean {
      prompt "AnchorChips 2720 based cables (Xircom PGUNET, ...)" if [NETDEVICES && USB && NET && USB_NET_CDC_SUBSET]
      depends on [USB_NET_CDC_SUBSET]
      inherited [NETDEVICES && USB && NET && USB_NET_CDC_SUBSET]
     }
     config USB_BELKIN boolean {
      prompt "eTEK based host-to-host cables (Advance, Belkin, ...)" if [NETDEVICES && USB && NET && USB_NET_CDC_SUBSET]
      depends on [USB_NET_CDC_SUBSET]
      default [y] if [NETDEVICES && USB && NET && USB_NET_CDC_SUBSET]
      inherited [NETDEVICES && USB && NET && USB_NET_CDC_SUBSET]
     }
     config USB_ARMLINUX boolean {
      prompt "Embedded ARM Linux links (iPaq, ...)" if [NETDEVICES && USB && NET && USB_NET_CDC_SUBSET]
      depends on [USB_NET_CDC_SUBSET]
      default [y] if [NETDEVICES && USB && NET && USB_NET_CDC_SUBSET]
      inherited [NETDEVICES && USB && NET && USB_NET_CDC_SUBSET]
     }
     config USB_EPSON2888 boolean {
      prompt "Epson 2888 based firmware (DEVELOPMENT)" if [NETDEVICES && USB && NET && USB_NET_CDC_SUBSET]
      depends on [USB_NET_CDC_SUBSET]
      inherited [NETDEVICES && USB && NET && USB_NET_CDC_SUBSET]
     }
     config USB_KC2190 boolean {
      prompt "KT Technology KC2190 based cables (InstaNet)" if [NETDEVICES && USB && NET && USB_NET_CDC_SUBSET && EXPERIMENTAL]
      depends on [USB_NET_CDC_SUBSET && EXPERIMENTAL]
      inherited [NETDEVICES && USB && NET && USB_NET_CDC_SUBSET && EXPERIMENTAL]
     }
    }
    config USB_NET_ZAURUS tristate {
     prompt "Sharp Zaurus (stock ROMs) and compatible" if [NETDEVICES && USB && NET && USB_USBNET]
     depends on [USB_USBNET]
     select USB_NET_CDCETHER if [NETDEVICES && USB && NET && USB_USBNET]
     select CRC32 if [NETDEVICES && USB && NET && USB_USBNET]
     default [y] if [NETDEVICES && USB && NET && USB_USBNET]
     inherited [NETDEVICES && USB && NET && USB_USBNET]
    }
   }
   config USB_HSO tristate {
    prompt "Option USB High Speed Mobile Devices" if [NETDEVICES && NET && USB && RFKILL]
    depends on [USB && RFKILL]
    default [n] if [NETDEVICES && NET && USB && RFKILL]
    inherited [NETDEVICES && NET && USB && RFKILL]
   }
   config USB_NET_INT51X1 tristate {
    prompt "Intellon PLC based usb adapter" if [NETDEVICES && USB && NET && USB_USBNET]
    depends on [USB_USBNET]
    inherited [NETDEVICES && USB && NET && USB_USBNET]
   }
   config USB_CDC_PHONET tristate {
    prompt "CDC Phonet support" if [NETDEVICES && USB && NET && PHONET]
    depends on [PHONET]
    inherited [NETDEVICES && USB && NET && PHONET]
   }
  }
  menuconfig NET_PCMCIA boolean {
   prompt "PCMCIA network device support" if [NETDEVICES && PCMCIA]
   depends on [PCMCIA]
   inherited [NETDEVICES && PCMCIA]
   if [NETDEVICES && NET_PCMCIA && PCMCIA] {
    config PCMCIA_3C589 tristate {
     prompt "3Com 3c589 PCMCIA support" if [NETDEVICES && NET_PCMCIA && PCMCIA]
     inherited [NETDEVICES && NET_PCMCIA && PCMCIA]
    }
    config PCMCIA_3C574 tristate {
     prompt "3Com 3c574 PCMCIA support" if [NETDEVICES && NET_PCMCIA && PCMCIA]
     inherited [NETDEVICES && NET_PCMCIA && PCMCIA]
    }
    config PCMCIA_FMVJ18X tristate {
     prompt "Fujitsu FMV-J18x PCMCIA support" if [NETDEVICES && NET_PCMCIA && PCMCIA]
     select CRC32 if [NETDEVICES && NET_PCMCIA && PCMCIA]
     inherited [NETDEVICES && NET_PCMCIA && PCMCIA]
    }
    config PCMCIA_PCNET tristate {
     prompt "NE2000 compatible PCMCIA support" if [NETDEVICES && NET_PCMCIA && PCMCIA]
     select CRC32 if [NETDEVICES && NET_PCMCIA && PCMCIA]
     inherited [NETDEVICES && NET_PCMCIA && PCMCIA]
    }
    config PCMCIA_NMCLAN tristate {
     prompt "New Media PCMCIA support" if [NETDEVICES && NET_PCMCIA && PCMCIA]
     inherited [NETDEVICES && NET_PCMCIA && PCMCIA]
    }
    config PCMCIA_SMC91C92 tristate {
     prompt "SMC 91Cxx PCMCIA support" if [NETDEVICES && NET_PCMCIA && PCMCIA]
     select CRC32 if [NETDEVICES && NET_PCMCIA && PCMCIA]
     select MII if [NETDEVICES && NET_PCMCIA && PCMCIA]
     inherited [NETDEVICES && NET_PCMCIA && PCMCIA]
    }
    config PCMCIA_XIRC2PS tristate {
     prompt "Xircom 16-bit PCMCIA support" if [NETDEVICES && NET_PCMCIA && PCMCIA]
     inherited [NETDEVICES && NET_PCMCIA && PCMCIA]
    }
    config PCMCIA_AXNET tristate {
     prompt "Asix AX88190 PCMCIA support" if [NETDEVICES && NET_PCMCIA && PCMCIA]
     inherited [NETDEVICES && NET_PCMCIA && PCMCIA]
    }
    config ARCNET_COM20020_CS tristate {
     prompt "COM20020 ARCnet PCMCIA support" if [NETDEVICES && NET_PCMCIA && PCMCIA && ARCNET_COM20020]
     depends on [ARCNET_COM20020]
     inherited [NETDEVICES && NET_PCMCIA && PCMCIA && ARCNET_COM20020]
    }
    config PCMCIA_IBMTR tristate {
     prompt "IBM PCMCIA tokenring adapter support" if [NETDEVICES && NET_PCMCIA && PCMCIA && IBMTR!="y" && TR]
     depends on [IBMTR!="y" && TR]
     inherited [NETDEVICES && NET_PCMCIA && PCMCIA && IBMTR!="y" && TR]
    }
   }
  }
  menuconfig WAN boolean {
   prompt "Wan interfaces support" if [NETDEVICES]
   inherited [NETDEVICES]
   if [NETDEVICES && WAN] {
    config HOSTESS_SV11 tristate {
     prompt "Comtrol Hostess SV-11 support" if [NETDEVICES && WAN && ISA && m && <choice> && ISA_DMA_API && INET && HDLC]
     depends on [ISA && m && ISA_DMA_API && INET && HDLC]
     inherited [NETDEVICES && WAN && ISA && m && <choice> && ISA_DMA_API && INET && HDLC]
    }
    config COSA tristate {
     prompt "COSA/SRP sync serial boards support" if [NETDEVICES && WAN && ISA && m && <choice> && ISA_DMA_API && HDLC]
     depends on [ISA && m && ISA_DMA_API && HDLC]
     inherited [NETDEVICES && WAN && ISA && m && <choice> && ISA_DMA_API && HDLC]
    }
    config LANMEDIA tristate {
     prompt "LanMedia Corp. SSI/V.35, T1/E1, HSSI, T3 boards" if [NETDEVICES && WAN && PCI && VIRT_TO_BUS && HDLC]
     depends on [PCI && VIRT_TO_BUS && HDLC]
     inherited [NETDEVICES && WAN && PCI && VIRT_TO_BUS && HDLC]
    }
    config SEALEVEL_4021 tristate {
     prompt "Sealevel Systems 4021 support" if [NETDEVICES && WAN && ISA && m && <choice> && ISA_DMA_API && INET && HDLC]
     depends on [ISA && m && ISA_DMA_API && INET && HDLC]
     inherited [NETDEVICES && WAN && ISA && m && <choice> && ISA_DMA_API && INET && HDLC]
    }
    config HDLC tristate {
     prompt "Generic HDLC layer" if [NETDEVICES && WAN]
     inherited [NETDEVICES && WAN]
     config HDLC_RAW tristate {
      prompt "Raw HDLC support" if [NETDEVICES && WAN && HDLC]
      depends on [HDLC]
      inherited [NETDEVICES && WAN && HDLC]
     }
     config HDLC_RAW_ETH tristate {
      prompt "Raw HDLC Ethernet device support" if [NETDEVICES && WAN && HDLC]
      depends on [HDLC]
      inherited [NETDEVICES && WAN && HDLC]
     }
     config HDLC_CISCO tristate {
      prompt "Cisco HDLC support" if [NETDEVICES && WAN && HDLC]
      depends on [HDLC]
      inherited [NETDEVICES && WAN && HDLC]
     }
     config HDLC_FR tristate {
      prompt "Frame Relay support" if [NETDEVICES && WAN && HDLC]
      depends on [HDLC]
      inherited [NETDEVICES && WAN && HDLC]
     }
     config HDLC_PPP tristate {
      prompt "Synchronous Point-to-Point Protocol (PPP) support" if [NETDEVICES && WAN && HDLC]
      depends on [HDLC]
      inherited [NETDEVICES && WAN && HDLC]
     }
     config HDLC_X25 tristate {
      prompt "X.25 protocol support" if [NETDEVICES && WAN && HDLC && (LAPB="m" && HDLC="m" || LAPB="y")]
      depends on [HDLC && (LAPB="m" && HDLC="m" || LAPB="y")]
      inherited [NETDEVICES && WAN && HDLC && (LAPB="m" && HDLC="m" || LAPB="y")]
     }
     config PCI200SYN tristate {
      prompt "Goramo PCI200SYN support" if [NETDEVICES && WAN && HDLC && PCI]
      depends on [HDLC && PCI]
      inherited [NETDEVICES && WAN && HDLC && PCI]
     }
     config WANXL tristate {
      prompt "SBE Inc. wanXL support" if [NETDEVICES && WAN && HDLC && PCI]
      depends on [HDLC && PCI]
      inherited [NETDEVICES && WAN && HDLC && PCI]
      config WANXL_BUILD_FIRMWARE boolean {
       prompt "rebuild wanXL firmware" if [NETDEVICES && WAN && WANXL && !PREVENT_FIRMWARE_BUILD]
       depends on [WANXL && !PREVENT_FIRMWARE_BUILD]
       inherited [NETDEVICES && WAN && WANXL && !PREVENT_FIRMWARE_BUILD]
      }
     }
     config PC300 tristate {
      prompt "Cyclades-PC300 support (RS-232/V.35, X.21, T1/E1 boards)" if [NETDEVICES && WAN && HDLC && PCI && BROKEN]
      depends on [HDLC && PCI && BROKEN]
      inherited [NETDEVICES && WAN && HDLC && PCI && BROKEN]
      config PC300_MLPPP boolean {
       prompt "Cyclades-PC300 MLPPP support" if [NETDEVICES && WAN && PC300 && PPP_MULTILINK && PPP_SYNC_TTY && HDLC_PPP]
       depends on [PC300 && PPP_MULTILINK && PPP_SYNC_TTY && HDLC_PPP]
       inherited [NETDEVICES && WAN && PC300 && PPP_MULTILINK && PPP_SYNC_TTY && HDLC_PPP]
      }
     }
     config PC300TOO tristate {
      prompt "Cyclades PC300 RSV/X21 alternative support" if [NETDEVICES && WAN && HDLC && PCI]
      depends on [HDLC && PCI]
      inherited [NETDEVICES && WAN && HDLC && PCI]
     }
     config N2 tristate {
      prompt "SDL RISCom/N2 support" if [NETDEVICES && WAN && HDLC && ISA]
      depends on [HDLC && ISA]
      inherited [NETDEVICES && WAN && HDLC && ISA]
     }
     config C101 tristate {
      prompt "Moxa C101 support" if [NETDEVICES && WAN && HDLC && ISA]
      depends on [HDLC && ISA]
      inherited [NETDEVICES && WAN && HDLC && ISA]
     }
     config FARSYNC tristate {
      prompt "FarSync T-Series support" if [NETDEVICES && WAN && HDLC && PCI]
      depends on [HDLC && PCI]
      inherited [NETDEVICES && WAN && HDLC && PCI]
     }
     config DSCC4 tristate {
      prompt "Etinc PCISYNC serial board support" if [NETDEVICES && WAN && HDLC && PCI && m && <choice>]
      depends on [HDLC && PCI && m]
      inherited [NETDEVICES && WAN && HDLC && PCI && m && <choice>]
      config DSCC4_PCISYNC boolean {
       prompt "Etinc PCISYNC features" if [NETDEVICES && WAN && DSCC4]
       depends on [DSCC4]
       inherited [NETDEVICES && WAN && DSCC4]
      }
      config DSCC4_PCI_RST boolean {
       prompt "Hard reset support" if [NETDEVICES && WAN && DSCC4]
       depends on [DSCC4]
       inherited [NETDEVICES && WAN && DSCC4]
      }
     }
     config IXP4XX_HSS tristate {
      prompt "Intel IXP4xx HSS (synchronous serial port) support" if [NETDEVICES && WAN && HDLC && ARM && ARCH_IXP4XX && IXP4XX_NPE && IXP4XX_QMGR]
      depends on [HDLC && ARM && ARCH_IXP4XX && IXP4XX_NPE && IXP4XX_QMGR]
      inherited [NETDEVICES && WAN && HDLC && ARM && ARCH_IXP4XX && IXP4XX_NPE && IXP4XX_QMGR]
     }
    }
    config DLCI tristate {
     prompt "Frame Relay DLCI support" if [NETDEVICES && WAN]
     inherited [NETDEVICES && WAN]
     config DLCI_MAX integer {
      prompt "Max DLCI per device" if [NETDEVICES && WAN && DLCI]
      depends on [DLCI]
      default [8] if [NETDEVICES && WAN && DLCI]
      inherited [NETDEVICES && WAN && DLCI]
     }
     config SDLA tristate {
      prompt "SDLA (Sangoma S502/S508) support" if [NETDEVICES && WAN && DLCI && ISA]
      depends on [DLCI && ISA]
      inherited [NETDEVICES && WAN && DLCI && ISA]
     }
    }
    config WAN_ROUTER_DRIVERS tristate {
     prompt "WAN router drivers" if [NETDEVICES && WAN && WAN_ROUTER]
     depends on [WAN_ROUTER]
     inherited [NETDEVICES && WAN && WAN_ROUTER]
     config CYCLADES_SYNC tristate {
      prompt "Cyclom 2X(tm) cards (EXPERIMENTAL)" if [NETDEVICES && WAN && WAN_ROUTER_DRIVERS && (PCI || ISA)]
      depends on [WAN_ROUTER_DRIVERS && (PCI || ISA)]
      inherited [NETDEVICES && WAN && WAN_ROUTER_DRIVERS && (PCI || ISA)]
      config CYCLOMX_X25 boolean {
       prompt "Cyclom 2X X.25 support (EXPERIMENTAL)" if [NETDEVICES && WAN && CYCLADES_SYNC]
       depends on [CYCLADES_SYNC]
       inherited [NETDEVICES && WAN && CYCLADES_SYNC]
      }
     }
    }
    config LAPBETHER tristate {
     prompt "LAPB over Ethernet driver (EXPERIMENTAL)" if [NETDEVICES && WAN && LAPB && X25]
     depends on [LAPB && X25]
     inherited [NETDEVICES && WAN && LAPB && X25]
    }
    config X25_ASY tristate {
     prompt "X.25 async driver (EXPERIMENTAL)" if [NETDEVICES && WAN && LAPB && X25]
     depends on [LAPB && X25]
     inherited [NETDEVICES && WAN && LAPB && X25]
    }
    config SBNI tristate {
     prompt "Granch SBNI12 Leased Line adapter support" if [NETDEVICES && WAN && X86]
     depends on [X86]
     inherited [NETDEVICES && WAN && X86]
     config SBNI_MULTILINE boolean {
      prompt "Multiple line feature support" if [NETDEVICES && WAN && SBNI]
      depends on [SBNI]
      inherited [NETDEVICES && WAN && SBNI]
     }
    }
   }
  }
  menuconfig ATM_DRIVERS boolean {
   prompt "ATM drivers" if [NETDEVICES && ATM]
   depends on [NETDEVICES && ATM]
   default [y] if [NETDEVICES && ATM]
   inherited [NETDEVICES && ATM]
   if [ATM_DRIVERS && NETDEVICES && ATM] {
    config ATM_DUMMY tristate {
     prompt "Dummy ATM driver" if [ATM_DRIVERS && NETDEVICES && ATM]
     inherited [ATM_DRIVERS && NETDEVICES && ATM]
    }
    config ATM_TCP tristate {
     prompt "ATM over TCP" if [ATM_DRIVERS && NETDEVICES && ATM && INET]
     depends on [INET]
     inherited [ATM_DRIVERS && NETDEVICES && ATM && INET]
    }
    config ATM_LANAI tristate {
     prompt "Efficient Networks Speedstream 3010" if [ATM_DRIVERS && NETDEVICES && PCI && ATM]
     depends on [PCI && ATM]
     inherited [ATM_DRIVERS && NETDEVICES && PCI && ATM]
    }
    config ATM_ENI tristate {
     prompt "Efficient Networks ENI155P" if [ATM_DRIVERS && NETDEVICES && ATM && PCI]
     depends on [PCI]
     inherited [ATM_DRIVERS && NETDEVICES && ATM && PCI]
     config ATM_ENI_DEBUG boolean {
      prompt "Enable extended debugging" if [ATM_DRIVERS && NETDEVICES && ATM && ATM_ENI]
      depends on [ATM_ENI]
      inherited [ATM_DRIVERS && NETDEVICES && ATM && ATM_ENI]
     }
     config ATM_ENI_TUNE_BURST boolean {
      prompt "Fine-tune burst settings" if [ATM_DRIVERS && NETDEVICES && ATM && ATM_ENI]
      depends on [ATM_ENI]
      inherited [ATM_DRIVERS && NETDEVICES && ATM && ATM_ENI]
      config ATM_ENI_BURST_TX_16W boolean {
       prompt "Enable 16W TX bursts (discouraged)" if [ATM_DRIVERS && NETDEVICES && ATM && ATM_ENI_TUNE_BURST]
       depends on [ATM_ENI_TUNE_BURST]
       inherited [ATM_DRIVERS && NETDEVICES && ATM && ATM_ENI_TUNE_BURST]
      }
      config ATM_ENI_BURST_TX_8W boolean {
       prompt "Enable 8W TX bursts (recommended)" if [ATM_DRIVERS && NETDEVICES && ATM && ATM_ENI_TUNE_BURST]
       depends on [ATM_ENI_TUNE_BURST]
       inherited [ATM_DRIVERS && NETDEVICES && ATM && ATM_ENI_TUNE_BURST]
      }
      config ATM_ENI_BURST_TX_4W boolean {
       prompt "Enable 4W TX bursts (optional)" if [ATM_DRIVERS && NETDEVICES && ATM && ATM_ENI_TUNE_BURST]
       depends on [ATM_ENI_TUNE_BURST]
       inherited [ATM_DRIVERS && NETDEVICES && ATM && ATM_ENI_TUNE_BURST]
      }
      config ATM_ENI_BURST_TX_2W boolean {
       prompt "Enable 2W TX bursts (optional)" if [ATM_DRIVERS && NETDEVICES && ATM && ATM_ENI_TUNE_BURST]
       depends on [ATM_ENI_TUNE_BURST]
       inherited [ATM_DRIVERS && NETDEVICES && ATM && ATM_ENI_TUNE_BURST]
      }
      config ATM_ENI_BURST_RX_16W boolean {
       prompt "Enable 16W RX bursts (discouraged)" if [ATM_DRIVERS && NETDEVICES && ATM && ATM_ENI_TUNE_BURST]
       depends on [ATM_ENI_TUNE_BURST]
       inherited [ATM_DRIVERS && NETDEVICES && ATM && ATM_ENI_TUNE_BURST]
      }
      config ATM_ENI_BURST_RX_8W boolean {
       prompt "Enable 8W RX bursts (discouraged)" if [ATM_DRIVERS && NETDEVICES && ATM && ATM_ENI_TUNE_BURST]
       depends on [ATM_ENI_TUNE_BURST]
       inherited [ATM_DRIVERS && NETDEVICES && ATM && ATM_ENI_TUNE_BURST]
      }
      config ATM_ENI_BURST_RX_4W boolean {
       prompt "Enable 4W RX bursts (recommended)" if [ATM_DRIVERS && NETDEVICES && ATM && ATM_ENI_TUNE_BURST]
       depends on [ATM_ENI_TUNE_BURST]
       inherited [ATM_DRIVERS && NETDEVICES && ATM && ATM_ENI_TUNE_BURST]
      }
      config ATM_ENI_BURST_RX_2W boolean {
       prompt "Enable 2W RX bursts (optional)" if [ATM_DRIVERS && NETDEVICES && ATM && ATM_ENI_TUNE_BURST]
       depends on [ATM_ENI_TUNE_BURST]
       inherited [ATM_DRIVERS && NETDEVICES && ATM && ATM_ENI_TUNE_BURST]
      }
     }
    }
    config ATM_FIRESTREAM tristate {
     prompt "Fujitsu FireStream (FS50/FS155) " if [ATM_DRIVERS && NETDEVICES && ATM && PCI && VIRT_TO_BUS]
     depends on [PCI && VIRT_TO_BUS]
     inherited [ATM_DRIVERS && NETDEVICES && ATM && PCI && VIRT_TO_BUS]
    }
    config ATM_ZATM tristate {
     prompt "ZeitNet ZN1221/ZN1225" if [ATM_DRIVERS && NETDEVICES && ATM && PCI && VIRT_TO_BUS]
     depends on [PCI && VIRT_TO_BUS]
     inherited [ATM_DRIVERS && NETDEVICES && ATM && PCI && VIRT_TO_BUS]
     config ATM_ZATM_DEBUG boolean {
      prompt "Enable extended debugging" if [ATM_DRIVERS && NETDEVICES && ATM && ATM_ZATM]
      depends on [ATM_ZATM]
      inherited [ATM_DRIVERS && NETDEVICES && ATM && ATM_ZATM]
     }
    }
    config ATM_NICSTAR tristate {
     prompt "IDT 77201 (NICStAR) (ForeRunnerLE)" if [ATM_DRIVERS && NETDEVICES && ATM && PCI && !64BIT && VIRT_TO_BUS]
     depends on [PCI && !64BIT && VIRT_TO_BUS]
     inherited [ATM_DRIVERS && NETDEVICES && ATM && PCI && !64BIT && VIRT_TO_BUS]
     config ATM_NICSTAR_USE_SUNI boolean {
      prompt "Use suni PHY driver (155Mbps)" if [ATM_DRIVERS && NETDEVICES && ATM && ATM_NICSTAR]
      depends on [ATM_NICSTAR]
      inherited [ATM_DRIVERS && NETDEVICES && ATM && ATM_NICSTAR]
     }
     config ATM_NICSTAR_USE_IDT77105 boolean {
      prompt "Use IDT77015 PHY driver (25Mbps)" if [ATM_DRIVERS && NETDEVICES && ATM && ATM_NICSTAR]
      depends on [ATM_NICSTAR]
      inherited [ATM_DRIVERS && NETDEVICES && ATM && ATM_NICSTAR]
     }
    }
    config ATM_IDT77252 tristate {
     prompt "IDT 77252 (NICStAR II)" if [ATM_DRIVERS && NETDEVICES && ATM && PCI]
     depends on [PCI]
     inherited [ATM_DRIVERS && NETDEVICES && ATM && PCI]
     config ATM_IDT77252_DEBUG boolean {
      prompt "Enable debugging messages" if [ATM_DRIVERS && NETDEVICES && ATM && ATM_IDT77252]
      depends on [ATM_IDT77252]
      inherited [ATM_DRIVERS && NETDEVICES && ATM && ATM_IDT77252]
     }
     config ATM_IDT77252_RCV_ALL boolean {
      prompt "Receive ALL cells in raw queue" if [ATM_DRIVERS && NETDEVICES && ATM && ATM_IDT77252]
      depends on [ATM_IDT77252]
      inherited [ATM_DRIVERS && NETDEVICES && ATM && ATM_IDT77252]
     }
     config ATM_IDT77252_USE_SUNI boolean {
      depends on [ATM_IDT77252]
      default [y] if [ATM_DRIVERS && NETDEVICES && ATM && ATM_IDT77252]
      inherited [ATM_DRIVERS && NETDEVICES && ATM && ATM_IDT77252]
     }
    }
    config ATM_AMBASSADOR tristate {
     prompt "Madge Ambassador (Collage PCI 155 Server)" if [ATM_DRIVERS && NETDEVICES && ATM && PCI && VIRT_TO_BUS]
     depends on [PCI && VIRT_TO_BUS]
     select BITREVERSE if [ATM_DRIVERS && NETDEVICES && ATM && PCI && VIRT_TO_BUS]
     inherited [ATM_DRIVERS && NETDEVICES && ATM && PCI && VIRT_TO_BUS]
     config ATM_AMBASSADOR_DEBUG boolean {
      prompt "Enable debugging messages" if [ATM_DRIVERS && NETDEVICES && ATM && ATM_AMBASSADOR]
      depends on [ATM_AMBASSADOR]
      inherited [ATM_DRIVERS && NETDEVICES && ATM && ATM_AMBASSADOR]
     }
    }
    config ATM_HORIZON tristate {
     prompt "Madge Horizon [Ultra] (Collage PCI 25 and Collage PCI 155 Client)" if [ATM_DRIVERS && NETDEVICES && ATM && PCI && VIRT_TO_BUS]
     depends on [PCI && VIRT_TO_BUS]
     inherited [ATM_DRIVERS && NETDEVICES && ATM && PCI && VIRT_TO_BUS]
     config ATM_HORIZON_DEBUG boolean {
      prompt "Enable debugging messages" if [ATM_DRIVERS && NETDEVICES && ATM && ATM_HORIZON]
      depends on [ATM_HORIZON]
      inherited [ATM_DRIVERS && NETDEVICES && ATM && ATM_HORIZON]
     }
    }
    config ATM_IA tristate {
     prompt "Interphase ATM PCI x575/x525/x531" if [ATM_DRIVERS && NETDEVICES && ATM && PCI]
     depends on [PCI]
     inherited [ATM_DRIVERS && NETDEVICES && ATM && PCI]
     config ATM_IA_DEBUG boolean {
      prompt "Enable debugging messages" if [ATM_DRIVERS && NETDEVICES && ATM && ATM_IA]
      depends on [ATM_IA]
      inherited [ATM_DRIVERS && NETDEVICES && ATM && ATM_IA]
     }
    }
    config ATM_FORE200E tristate {
     prompt "FORE Systems 200E-series" if [ATM_DRIVERS && NETDEVICES && ATM && (PCI || SBUS)]
     depends on [PCI || SBUS]
     select FW_LOADER if [ATM_DRIVERS && NETDEVICES && ATM && (PCI || SBUS)]
     inherited [ATM_DRIVERS && NETDEVICES && ATM && (PCI || SBUS)]
     config ATM_FORE200E_USE_TASKLET boolean {
      prompt "Defer interrupt work to a tasklet" if [ATM_DRIVERS && NETDEVICES && ATM && ATM_FORE200E]
      depends on [ATM_FORE200E]
      default [n] if [ATM_DRIVERS && NETDEVICES && ATM && ATM_FORE200E]
      inherited [ATM_DRIVERS && NETDEVICES && ATM && ATM_FORE200E]
     }
     config ATM_FORE200E_TX_RETRY integer {
      prompt "Maximum number of tx retries" if [ATM_DRIVERS && NETDEVICES && ATM && ATM_FORE200E]
      depends on [ATM_FORE200E]
      default [16] if [ATM_DRIVERS && NETDEVICES && ATM && ATM_FORE200E]
      inherited [ATM_DRIVERS && NETDEVICES && ATM && ATM_FORE200E]
     }
     config ATM_FORE200E_DEBUG integer {
      prompt "Debugging level (0-3)" if [ATM_DRIVERS && NETDEVICES && ATM && ATM_FORE200E]
      depends on [ATM_FORE200E]
      default [0] if [ATM_DRIVERS && NETDEVICES && ATM && ATM_FORE200E]
      inherited [ATM_DRIVERS && NETDEVICES && ATM && ATM_FORE200E]
     }
    }
    config ATM_HE tristate {
     prompt "ForeRunner HE Series" if [ATM_DRIVERS && NETDEVICES && ATM && PCI]
     depends on [PCI]
     inherited [ATM_DRIVERS && NETDEVICES && ATM && PCI]
     config ATM_HE_USE_SUNI boolean {
      prompt "Use S/UNI PHY driver" if [ATM_DRIVERS && NETDEVICES && ATM && ATM_HE]
      depends on [ATM_HE]
      inherited [ATM_DRIVERS && NETDEVICES && ATM && ATM_HE]
     }
    }
    config ATM_SOLOS tristate {
     prompt "Solos ADSL2+ PCI Multiport card driver" if [ATM_DRIVERS && NETDEVICES && ATM && PCI]
     depends on [PCI]
     inherited [ATM_DRIVERS && NETDEVICES && ATM && PCI]
    }
   }
  }
  menuconfig IEEE802154_DRIVERS tristate {
   prompt "IEEE 802.15.4 drivers" if [NETDEVICES && IEEE802154]
   depends on [NETDEVICES && IEEE802154]
   default [y] if [NETDEVICES && IEEE802154]
   inherited [NETDEVICES && IEEE802154]
   config IEEE802154_FAKEHARD tristate {
    prompt "Fake LR-WPAN driver with several interconnected devices" if [NETDEVICES && IEEE802154_DRIVERS]
    depends on [IEEE802154_DRIVERS]
    inherited [NETDEVICES && IEEE802154_DRIVERS]
   }
  }
  menu "S/390 network device drivers" {
   depends on [NETDEVICES && S390]
   config LCS tristate {
    prompt "Lan Channel Station Interface" if [S390 && CCW && NETDEVICES && (NET_ETHERNET || TR || FDDI)]
    depends on [CCW && NETDEVICES && (NET_ETHERNET || TR || FDDI)]
    inherited [S390 && CCW && NETDEVICES && (NET_ETHERNET || TR || FDDI)]
   }
   config CTCM tristate {
    prompt "CTC and MPC SNA device support" if [S390 && CCW && NETDEVICES]
    depends on [CCW && NETDEVICES]
    inherited [S390 && CCW && NETDEVICES]
   }
   config NETIUCV tristate {
    prompt "IUCV network device support (VM only)" if [S390 && IUCV && NETDEVICES]
    depends on [IUCV && NETDEVICES]
    inherited [S390 && IUCV && NETDEVICES]
   }
   config SMSGIUCV tristate {
    prompt "IUCV special message support (VM only)" if [NETDEVICES && S390 && IUCV]
    depends on [IUCV]
    inherited [NETDEVICES && S390 && IUCV]
   }
   config CLAW tristate {
    prompt "CLAW device support" if [S390 && CCW && NETDEVICES]
    depends on [CCW && NETDEVICES]
    inherited [S390 && CCW && NETDEVICES]
   }
   config QETH tristate {
    prompt "Gigabit Ethernet device support" if [S390 && CCW && NETDEVICES && IP_MULTICAST && QDIO]
    depends on [CCW && NETDEVICES && IP_MULTICAST && QDIO]
    inherited [S390 && CCW && NETDEVICES && IP_MULTICAST && QDIO]
    config QETH_L2 tristate {
     prompt "qeth layer 2 device support" if [NETDEVICES && S390 && QETH]
     depends on [QETH]
     inherited [NETDEVICES && S390 && QETH]
    }
    config QETH_L3 tristate {
     prompt "qeth layer 3 device support" if [NETDEVICES && S390 && QETH]
     depends on [QETH]
     inherited [NETDEVICES && S390 && QETH]
    }
   }
   config QETH_IPV6 boolean {
    depends on [QETH_L3="IPV6" || QETH_L3 && IPV6="y"]
    default [y] if [NETDEVICES && S390 && (QETH_L3="IPV6" || QETH_L3 && IPV6="y")]
    inherited [NETDEVICES && S390 && (QETH_L3="IPV6" || QETH_L3 && IPV6="y")]
   }
   config CCWGROUP tristate {
    default [LCS || CTCM || QETH] if [NETDEVICES && S390]
    inherited [NETDEVICES && S390]
   }
  }
  config XEN_NETDEV_FRONTEND tristate {
   prompt "Xen network device frontend driver" if [NETDEVICES && XEN]
   depends on [XEN]
   default [y] if [NETDEVICES && XEN]
   inherited [NETDEVICES && XEN]
  }
  config ISERIES_VETH tristate {
   prompt "iSeries Virtual Ethernet driver support" if [NETDEVICES && PPC_ISERIES]
   depends on [PPC_ISERIES]
   inherited [NETDEVICES && PPC_ISERIES]
  }
  config RIONET tristate {
   prompt "RapidIO Ethernet over messaging driver support" if [NETDEVICES && RAPIDIO]
   depends on [RAPIDIO]
   inherited [NETDEVICES && RAPIDIO]
   config RIONET_TX_SIZE integer {
    prompt "Number of outbound queue entries" if [NETDEVICES && RIONET]
    depends on [RIONET]
    default [128] if [NETDEVICES && RIONET]
    inherited [NETDEVICES && RIONET]
   }
   config RIONET_RX_SIZE integer {
    prompt "Number of inbound queue entries" if [NETDEVICES && RIONET]
    depends on [RIONET]
    default [128] if [NETDEVICES && RIONET]
    inherited [NETDEVICES && RIONET]
   }
  }
  config FDDI tristate {
   prompt "FDDI driver support" if [NETDEVICES && (PCI || EISA || TC)]
   depends on [PCI || EISA || TC]
   inherited [NETDEVICES && (PCI || EISA || TC)]
   config DEFXX tristate {
    prompt "Digital DEFTA/DEFEA/DEFPA adapter support" if [NETDEVICES && FDDI && (PCI || EISA || TC)]
    depends on [FDDI && (PCI || EISA || TC)]
    inherited [NETDEVICES && FDDI && (PCI || EISA || TC)]
    config DEFXX_MMIO boolean {
     prompt "Use MMIO instead of PIO" if [NETDEVICES && DEFXX && (PCI || EISA)]
     depends on [DEFXX]
     default [n] if [NETDEVICES && DEFXX && (PCI || EISA)]
     default [y] if [NETDEVICES && DEFXX]
     inherited [NETDEVICES && DEFXX]
    }
   }
   config SKFP tristate {
    prompt "SysKonnect FDDI PCI support" if [NETDEVICES && FDDI && PCI]
    depends on [FDDI && PCI]
    select BITREVERSE if [NETDEVICES && FDDI && PCI]
    inherited [NETDEVICES && FDDI && PCI]
   }
  }
  config HIPPI boolean {
   prompt "HIPPI driver support (EXPERIMENTAL)" if [NETDEVICES && EXPERIMENTAL && INET && PCI]
   depends on [EXPERIMENTAL && INET && PCI]
   inherited [NETDEVICES && EXPERIMENTAL && INET && PCI]
   config ROADRUNNER tristate {
    prompt "Essential RoadRunner HIPPI PCI adapter support (EXPERIMENTAL)" if [NETDEVICES && HIPPI && PCI]
    depends on [HIPPI && PCI]
    inherited [NETDEVICES && HIPPI && PCI]
    config ROADRUNNER_LARGE_RINGS boolean {
     prompt "Use large TX/RX rings (EXPERIMENTAL)" if [NETDEVICES && ROADRUNNER]
     depends on [ROADRUNNER]
     inherited [NETDEVICES && ROADRUNNER]
    }
   }
  }
  config PLIP tristate {
   prompt "PLIP (parallel port) support" if [NETDEVICES && PARPORT]
   depends on [PARPORT]
   inherited [NETDEVICES && PARPORT]
  }
  config PPP tristate {
   prompt "PPP (point-to-point protocol) support" if [NETDEVICES]
   select SLHC if [NETDEVICES]
   inherited [NETDEVICES]
   config PPP_MULTILINK boolean {
    prompt "PPP multilink support (EXPERIMENTAL)" if [NETDEVICES && PPP && EXPERIMENTAL]
    depends on [PPP && EXPERIMENTAL]
    inherited [NETDEVICES && PPP && EXPERIMENTAL]
   }
   config PPP_FILTER boolean {
    prompt "PPP filtering" if [NETDEVICES && PPP]
    depends on [PPP]
    inherited [NETDEVICES && PPP]
   }
   config PPP_ASYNC tristate {
    prompt "PPP support for async serial ports" if [NETDEVICES && PPP]
    depends on [PPP]
    select CRC_CCITT if [NETDEVICES && PPP]
    inherited [NETDEVICES && PPP]
   }
   config PPP_SYNC_TTY tristate {
    prompt "PPP support for sync tty ports" if [NETDEVICES && PPP]
    depends on [PPP]
    inherited [NETDEVICES && PPP]
   }
   config PPP_DEFLATE tristate {
    prompt "PPP Deflate compression" if [NETDEVICES && PPP]
    depends on [PPP]
    select ZLIB_INFLATE if [NETDEVICES && PPP]
    select ZLIB_DEFLATE if [NETDEVICES && PPP]
    inherited [NETDEVICES && PPP]
   }
   config PPP_BSDCOMP tristate {
    prompt "PPP BSD-Compress compression" if [NETDEVICES && PPP]
    depends on [PPP]
    inherited [NETDEVICES && PPP]
   }
   config PPP_MPPE tristate {
    prompt "PPP MPPE compression (encryption) (EXPERIMENTAL)" if [NETDEVICES && PPP && EXPERIMENTAL]
    depends on [PPP && EXPERIMENTAL]
    select CRYPTO if [NETDEVICES && PPP && EXPERIMENTAL]
    select CRYPTO_SHA1 if [NETDEVICES && PPP && EXPERIMENTAL]
    select CRYPTO_ARC4 if [NETDEVICES && PPP && EXPERIMENTAL]
    select CRYPTO_ECB if [NETDEVICES && PPP && EXPERIMENTAL]
    inherited [NETDEVICES && PPP && EXPERIMENTAL]
   }
   config PPPOE tristate {
    prompt "PPP over Ethernet (EXPERIMENTAL)" if [NETDEVICES && EXPERIMENTAL && PPP]
    depends on [EXPERIMENTAL && PPP]
    inherited [NETDEVICES && EXPERIMENTAL && PPP]
   }
   config PPPOATM tristate {
    prompt "PPP over ATM" if [NETDEVICES && ATM && PPP]
    depends on [ATM && PPP]
    inherited [NETDEVICES && ATM && PPP]
   }
   config PPPOL2TP tristate {
    prompt "PPP over L2TP (EXPERIMENTAL)" if [NETDEVICES && EXPERIMENTAL && PPP && INET]
    depends on [EXPERIMENTAL && PPP && INET]
    inherited [NETDEVICES && EXPERIMENTAL && PPP && INET]
   }
  }
  config SLIP tristate {
   prompt "SLIP (serial line) support" if [NETDEVICES]
   inherited [NETDEVICES]
   config SLIP_COMPRESSED boolean {
    prompt "CSLIP compressed headers" if [NETDEVICES && SLIP]
    depends on [SLIP]
    select SLHC if [NETDEVICES && SLIP]
    inherited [NETDEVICES && SLIP]
   }
  }
  config SLHC tristate {
   inherited [NETDEVICES]
  }
  config SLIP_SMART boolean {
   prompt "Keepalive and linefill" if [NETDEVICES && SLIP]
   depends on [SLIP]
   inherited [NETDEVICES && SLIP]
  }
  config SLIP_MODE_SLIP6 boolean {
   prompt "Six bit SLIP encapsulation" if [NETDEVICES && SLIP]
   depends on [SLIP]
   inherited [NETDEVICES && SLIP]
  }
  config NET_FC boolean {
   prompt "Fibre Channel driver support" if [NETDEVICES && SCSI && PCI]
   depends on [SCSI && PCI]
   inherited [NETDEVICES && SCSI && PCI]
  }
  config NETCONSOLE tristate {
   prompt "Network console logging support (EXPERIMENTAL)" if [NETDEVICES && EXPERIMENTAL]
   depends on [EXPERIMENTAL]
   inherited [NETDEVICES && EXPERIMENTAL]
   config NETCONSOLE_DYNAMIC boolean {
    prompt "Dynamic reconfiguration of logging targets (EXPERIMENTAL)" if [NETDEVICES && NETCONSOLE && SYSFS && EXPERIMENTAL]
    depends on [NETCONSOLE && SYSFS && EXPERIMENTAL]
    select CONFIGFS_FS if [NETDEVICES && NETCONSOLE && SYSFS && EXPERIMENTAL]
    inherited [NETDEVICES && NETCONSOLE && SYSFS && EXPERIMENTAL]
   }
  }
  config NETPOLL boolean {
   default [NETCONSOLE] if [NETDEVICES]
   inherited [NETDEVICES]
  }
  config NETPOLL_TRAP boolean {
   prompt "Netpoll traffic trapping" if [NETDEVICES && NETPOLL]
   default [n] if [NETDEVICES && NETPOLL]
   depends on [NETPOLL]
   inherited [NETDEVICES && NETPOLL]
  }
  config NET_POLL_CONTROLLER boolean {
   default [NETPOLL] if [NETDEVICES]
   inherited [NETDEVICES]
  }
  config VIRTIO_NET tristate {
   prompt "Virtio network driver (EXPERIMENTAL)" if [NETDEVICES && EXPERIMENTAL && VIRTIO]
   depends on [EXPERIMENTAL && VIRTIO]
   inherited [NETDEVICES && EXPERIMENTAL && VIRTIO]
  }
  config VMXNET3 tristate {
   prompt "VMware VMXNET3 ethernet driver" if [NETDEVICES && PCI && INET]
   depends on [PCI && INET]
   inherited [NETDEVICES && PCI && INET]
  }
 }
}
menuconfig I2C tristate {
 prompt "I2C support" if [HAS_IOMEM]
 depends on [HAS_IOMEM]
 select RT_MUTEXES if [HAS_IOMEM]
 inherited [HAS_IOMEM]
 if [I2C] {
  config I2C_BOARDINFO boolean {
   default [y] if [I2C]
   inherited [I2C]
  }
  config I2C_COMPAT boolean {
   prompt "Enable compatibility bits for old user-space" if [I2C]
   default [y] if [I2C]
   inherited [I2C]
  }
  config I2C_CHARDEV tristate {
   prompt "I2C device interface" if [I2C]
   inherited [I2C]
  }
  config I2C_HELPER_AUTO boolean {
   prompt "Autoselect pertinent helper modules" if [I2C]
   default [y] if [I2C]
   inherited [I2C]
   menu "I2C Algorithms" {
    depends on [I2C && !I2C_HELPER_AUTO]
    config I2C_ALGOBIT tristate {
     prompt "I2C bit-banging interfaces" if [I2C && !I2C_HELPER_AUTO]
     inherited [I2C && !I2C_HELPER_AUTO]
    }
    config I2C_ALGOPCF tristate {
     prompt "I2C PCF 8584 interfaces" if [I2C && !I2C_HELPER_AUTO]
     inherited [I2C && !I2C_HELPER_AUTO]
    }
    config I2C_ALGOPCA tristate {
     prompt "I2C PCA 9564 interfaces" if [I2C && !I2C_HELPER_AUTO]
     inherited [I2C && !I2C_HELPER_AUTO]
    }
   }
  }
  menu "I2C Hardware Bus support" {
   depends on [I2C]
   config I2C_ALI1535 tristate {
    prompt "ALI 1535" if [I2C && PCI]
    depends on [PCI]
    inherited [I2C && PCI]
   }
   config I2C_ALI1563 tristate {
    prompt "ALI 1563" if [I2C && PCI && EXPERIMENTAL]
    depends on [PCI && EXPERIMENTAL]
    inherited [I2C && PCI && EXPERIMENTAL]
   }
   config I2C_ALI15X3 tristate {
    prompt "ALI 15x3" if [I2C && PCI]
    depends on [PCI]
    inherited [I2C && PCI]
   }
   config I2C_AMD756 tristate {
    prompt "AMD 756/766/768/8111 and nVidia nForce" if [I2C && PCI]
    depends on [PCI]
    inherited [I2C && PCI]
    config I2C_AMD756_S4882 tristate {
     prompt "SMBus multiplexing on the Tyan S4882" if [I2C && I2C_AMD756 && X86 && EXPERIMENTAL]
     depends on [I2C_AMD756 && X86 && EXPERIMENTAL]
     inherited [I2C && I2C_AMD756 && X86 && EXPERIMENTAL]
    }
   }
   config I2C_AMD8111 tristate {
    prompt "AMD 8111" if [I2C && PCI]
    depends on [PCI]
    inherited [I2C && PCI]
   }
   config I2C_I801 tristate {
    prompt "Intel 82801 (ICH/PCH)" if [I2C && PCI]
    depends on [PCI]
    inherited [I2C && PCI]
   }
   config I2C_ISCH tristate {
    prompt "Intel SCH SMBus 1.0" if [I2C && PCI]
    depends on [PCI]
    inherited [I2C && PCI]
   }
   config I2C_PIIX4 tristate {
    prompt "Intel PIIX4 and compatible (ATI/AMD/Serverworks/Broadcom/SMSC)" if [I2C && PCI]
    depends on [PCI]
    inherited [I2C && PCI]
   }
   config I2C_NFORCE2 tristate {
    prompt "Nvidia nForce2, nForce3 and nForce4" if [I2C && PCI]
    depends on [PCI]
    inherited [I2C && PCI]
    config I2C_NFORCE2_S4985 tristate {
     prompt "SMBus multiplexing on the Tyan S4985" if [I2C && I2C_NFORCE2 && X86 && EXPERIMENTAL]
     depends on [I2C_NFORCE2 && X86 && EXPERIMENTAL]
     inherited [I2C && I2C_NFORCE2 && X86 && EXPERIMENTAL]
    }
   }
   config I2C_SIS5595 tristate {
    prompt "SiS 5595" if [I2C && PCI]
    depends on [PCI]
    inherited [I2C && PCI]
   }
   config I2C_SIS630 tristate {
    prompt "SiS 630/730" if [I2C && PCI]
    depends on [PCI]
    inherited [I2C && PCI]
   }
   config I2C_SIS96X tristate {
    prompt "SiS 96x" if [I2C && PCI]
    depends on [PCI]
    inherited [I2C && PCI]
   }
   config I2C_VIA tristate {
    prompt "VIA VT82C586B" if [I2C && PCI && EXPERIMENTAL]
    depends on [PCI && EXPERIMENTAL]
    select I2C_ALGOBIT if [I2C && PCI && EXPERIMENTAL]
    inherited [I2C && PCI && EXPERIMENTAL]
   }
   config I2C_VIAPRO tristate {
    prompt "VIA VT82C596/82C686/82xx and CX700/VX8xx" if [I2C && PCI]
    depends on [PCI]
    inherited [I2C && PCI]
   }
   if [I2C && ACPI] {
    config I2C_SCMI tristate {
     prompt "SMBus Control Method Interface" if [I2C && ACPI]
     inherited [I2C && ACPI]
    }
   }
   config I2C_HYDRA tristate {
    prompt "CHRP Apple Hydra Mac I/O I2C interface" if [I2C && PCI && PPC_CHRP && EXPERIMENTAL]
    depends on [PCI && PPC_CHRP && EXPERIMENTAL]
    select I2C_ALGOBIT if [I2C && PCI && PPC_CHRP && EXPERIMENTAL]
    inherited [I2C && PCI && PPC_CHRP && EXPERIMENTAL]
   }
   config I2C_POWERMAC tristate {
    prompt "Powermac I2C interface" if [I2C && PPC_PMAC]
    depends on [PPC_PMAC]
    default [y] if [I2C && PPC_PMAC]
    inherited [I2C && PPC_PMAC]
   }
   config I2C_AT91 tristate {
    prompt "Atmel AT91 I2C Two-Wire interface (TWI)" if [I2C && ARCH_AT91 && EXPERIMENTAL && BROKEN]
    depends on [ARCH_AT91 && EXPERIMENTAL && BROKEN]
    inherited [I2C && ARCH_AT91 && EXPERIMENTAL && BROKEN]
   }
   config I2C_AU1550 tristate {
    prompt "Au1550/Au1200 SMBus interface" if [I2C && (SOC_AU1550 || SOC_AU1200)]
    depends on [SOC_AU1550 || SOC_AU1200]
    inherited [I2C && (SOC_AU1550 || SOC_AU1200)]
   }
   config I2C_BLACKFIN_TWI tristate {
    prompt "Blackfin TWI I2C support" if [I2C && BLACKFIN && !BF561 && !BF531 && !BF532 && !BF533]
    depends on [BLACKFIN]
    depends on [!BF561 && !BF531 && !BF532 && !BF533]
    inherited [I2C && BLACKFIN && !BF561 && !BF531 && !BF532 && !BF533]
    config I2C_BLACKFIN_TWI_CLK_KHZ integer {
     prompt "Blackfin TWI I2C clock (kHz)" if [I2C && I2C_BLACKFIN_TWI]
     depends on [I2C_BLACKFIN_TWI]
     range [21 400] if [I2C && I2C_BLACKFIN_TWI]
     default [50] if [I2C && I2C_BLACKFIN_TWI]
     inherited [I2C && I2C_BLACKFIN_TWI]
    }
   }
   config I2C_CPM tristate {
    prompt "Freescale CPM1 or CPM2 (MPC8xx/826x)" if [I2C && (CPM1 || CPM2) && OF_I2C]
    depends on [(CPM1 || CPM2) && OF_I2C]
    inherited [I2C && (CPM1 || CPM2) && OF_I2C]
   }
   config I2C_DAVINCI tristate {
    prompt "DaVinci I2C driver" if [I2C && ARCH_DAVINCI]
    depends on [ARCH_DAVINCI]
    inherited [I2C && ARCH_DAVINCI]
   }
   config I2C_DESIGNWARE tristate {
    prompt "Synopsys DesignWare" if [I2C && HAVE_CLK]
    depends on [HAVE_CLK]
    inherited [I2C && HAVE_CLK]
   }
   config I2C_GPIO tristate {
    prompt "GPIO-based bitbanging I2C" if [I2C && GENERIC_GPIO]
    depends on [GENERIC_GPIO]
    select I2C_ALGOBIT if [I2C && GENERIC_GPIO]
    inherited [I2C && GENERIC_GPIO]
   }
   config I2C_HIGHLANDER tristate {
    prompt "Highlander FPGA SMBus interface" if [I2C && SH_HIGHLANDER]
    depends on [SH_HIGHLANDER]
    inherited [I2C && SH_HIGHLANDER]
   }
   config I2C_IBM_IIC tristate {
    prompt "IBM PPC 4xx on-chip I2C interface" if [I2C && 4xx]
    depends on [4xx]
    inherited [I2C && 4xx]
   }
   config I2C_IMX tristate {
    prompt "IMX I2C interface" if [I2C && ARCH_MXC]
    depends on [ARCH_MXC]
    inherited [I2C && ARCH_MXC]
   }
   config I2C_IOP3XX tristate {
    prompt "Intel IOPx3xx and IXP4xx on-chip I2C interface" if [I2C && (ARCH_IOP32X || ARCH_IOP33X || ARCH_IXP4XX || ARCH_IOP13XX)]
    depends on [ARCH_IOP32X || ARCH_IOP33X || ARCH_IXP4XX || ARCH_IOP13XX]
    inherited [I2C && (ARCH_IOP32X || ARCH_IOP33X || ARCH_IXP4XX || ARCH_IOP13XX)]
   }
   config I2C_IXP2000 tristate {
    prompt "IXP2000 GPIO-Based I2C Interface (DEPRECATED)" if [I2C && ARCH_IXP2000]
    depends on [ARCH_IXP2000]
    select I2C_ALGOBIT if [I2C && ARCH_IXP2000]
    inherited [I2C && ARCH_IXP2000]
   }
   config I2C_MPC tristate {
    prompt "MPC107/824x/85xx/52xx/86xx" if [I2C && PPC32]
    depends on [PPC32]
    inherited [I2C && PPC32]
   }
   config I2C_MV64XXX tristate {
    prompt "Marvell mv64xxx I2C Controller" if [I2C && (MV64X60 || PLAT_ORION) && EXPERIMENTAL]
    depends on [(MV64X60 || PLAT_ORION) && EXPERIMENTAL]
    inherited [I2C && (MV64X60 || PLAT_ORION) && EXPERIMENTAL]
   }
   config I2C_OCORES tristate {
    prompt "OpenCores I2C Controller" if [I2C && EXPERIMENTAL]
    depends on [EXPERIMENTAL]
    inherited [I2C && EXPERIMENTAL]
   }
   config I2C_OMAP tristate {
    prompt "OMAP I2C adapter" if [I2C && ARCH_OMAP]
    depends on [ARCH_OMAP]
    default [y] if [I2C && ARCH_OMAP && (MACH_OMAP_H3 || MACH_OMAP_OSK)]
    inherited [I2C && ARCH_OMAP]
   }
   config I2C_PASEMI tristate {
    prompt "PA Semi SMBus interface" if [I2C && PPC_PASEMI && PCI]
    depends on [PPC_PASEMI && PCI]
    inherited [I2C && PPC_PASEMI && PCI]
   }
   config I2C_PNX tristate {
    prompt "I2C bus support for Philips PNX targets" if [I2C && ARCH_PNX4008]
    depends on [ARCH_PNX4008]
    inherited [I2C && ARCH_PNX4008]
   }
   config I2C_PXA tristate {
    prompt "Intel PXA2XX I2C adapter" if [I2C && (ARCH_PXA || ARCH_MMP)]
    depends on [ARCH_PXA || ARCH_MMP]
    inherited [I2C && (ARCH_PXA || ARCH_MMP)]
    config I2C_PXA_SLAVE boolean {
     prompt "Intel PXA2XX I2C Slave comms support" if [I2C && I2C_PXA]
     depends on [I2C_PXA]
     inherited [I2C && I2C_PXA]
    }
   }
   config I2C_S3C2410 tristate {
    prompt "S3C2410 I2C Driver" if [I2C && (ARCH_S3C2410 || ARCH_S3C64XX)]
    depends on [ARCH_S3C2410 || ARCH_S3C64XX]
    inherited [I2C && (ARCH_S3C2410 || ARCH_S3C64XX)]
   }
   config I2C_S6000 tristate {
    prompt "S6000 I2C support" if [I2C && XTENSA_VARIANT_S6000]
    depends on [XTENSA_VARIANT_S6000]
    inherited [I2C && XTENSA_VARIANT_S6000]
   }
   config I2C_SH7760 tristate {
    prompt "Renesas SH7760 I2C Controller" if [I2C && CPU_SUBTYPE_SH7760]
    depends on [CPU_SUBTYPE_SH7760]
    inherited [I2C && CPU_SUBTYPE_SH7760]
   }
   config I2C_SH_MOBILE tristate {
    prompt "SuperH Mobile I2C Controller" if [I2C && SUPERH]
    depends on [SUPERH]
    inherited [I2C && SUPERH]
   }
   config I2C_SIMTEC tristate {
    prompt "Simtec Generic I2C interface" if [I2C]
    select I2C_ALGOBIT if [I2C]
    inherited [I2C]
   }
   config I2C_STU300 tristate {
    prompt "ST Microelectronics DDC I2C interface" if [I2C && MACH_U300]
    depends on [MACH_U300]
    default [y] if [I2C && MACH_U300]
    inherited [I2C && MACH_U300]
   }
   config I2C_VERSATILE tristate {
    prompt "ARM Versatile/Realview I2C bus support" if [I2C && (ARCH_VERSATILE || ARCH_REALVIEW)]
    depends on [ARCH_VERSATILE || ARCH_REALVIEW]
    select I2C_ALGOBIT if [I2C && (ARCH_VERSATILE || ARCH_REALVIEW)]
    inherited [I2C && (ARCH_VERSATILE || ARCH_REALVIEW)]
   }
   config I2C_PARPORT tristate {
    prompt "Parallel port adapter" if [I2C && PARPORT]
    depends on [PARPORT]
    select I2C_ALGOBIT if [I2C && PARPORT]
    inherited [I2C && PARPORT]
   }
   config I2C_PARPORT_LIGHT tristate {
    prompt "Parallel port adapter (light)" if [I2C]
    select I2C_ALGOBIT if [I2C]
    inherited [I2C]
   }
   config I2C_TAOS_EVM tristate {
    prompt "TAOS evaluation module" if [I2C && EXPERIMENTAL]
    depends on [EXPERIMENTAL]
    select SERIO if [I2C && EXPERIMENTAL]
    select SERIO_SERPORT if [I2C && EXPERIMENTAL]
    default [n] if [I2C && EXPERIMENTAL]
    inherited [I2C && EXPERIMENTAL]
   }
   config I2C_TINY_USB tristate {
    prompt "Tiny-USB adapter" if [I2C && USB]
    depends on [USB]
    inherited [I2C && USB]
   }
   config I2C_ACORN tristate {
    prompt "Acorn IOC/IOMD I2C bus support" if [I2C && ARCH_ACORN]
    depends on [ARCH_ACORN]
    default [y] if [I2C && ARCH_ACORN]
    select I2C_ALGOBIT if [I2C && ARCH_ACORN]
    inherited [I2C && ARCH_ACORN]
   }
   config I2C_ELEKTOR tristate {
    prompt "Elektor ISA card" if [I2C && ISA && BROKEN_ON_SMP]
    depends on [ISA && BROKEN_ON_SMP]
    select I2C_ALGOPCF if [I2C && ISA && BROKEN_ON_SMP]
    inherited [I2C && ISA && BROKEN_ON_SMP]
   }
   config I2C_PCA_ISA tristate {
    prompt "PCA9564/PCA9665 on an ISA bus" if [I2C && ISA]
    depends on [ISA]
    select I2C_ALGOPCA if [I2C && ISA]
    default [n] if [I2C && ISA]
    inherited [I2C && ISA]
   }
   config I2C_PCA_PLATFORM tristate {
    prompt "PCA9564/PCA9665 as platform device" if [I2C]
    select I2C_ALGOPCA if [I2C]
    default [n] if [I2C]
    inherited [I2C]
   }
   config I2C_PMCMSP tristate {
    prompt "PMC MSP I2C TWI Controller" if [I2C && PMC_MSP]
    depends on [PMC_MSP]
    inherited [I2C && PMC_MSP]
   }
   config I2C_SIBYTE tristate {
    prompt "SiByte SMBus interface" if [I2C && SIBYTE_SB1xxx_SOC]
    depends on [SIBYTE_SB1xxx_SOC]
    inherited [I2C && SIBYTE_SB1xxx_SOC]
   }
   config I2C_STUB tristate {
    prompt "I2C/SMBus Test Stub" if [I2C && EXPERIMENTAL && m && <choice>]
    depends on [EXPERIMENTAL && m]
    default [n] if [I2C && EXPERIMENTAL && m && <choice>]
    inherited [I2C && EXPERIMENTAL && m && <choice>]
   }
   config SCx200_I2C tristate {
    prompt "NatSemi SCx200 I2C using GPIO pins (DEPRECATED)" if [I2C && SCx200_GPIO]
    depends on [SCx200_GPIO]
    select I2C_ALGOBIT if [I2C && SCx200_GPIO]
    inherited [I2C && SCx200_GPIO]
    config SCx200_I2C_SCL integer {
     prompt "GPIO pin used for SCL" if [I2C && SCx200_I2C]
     depends on [SCx200_I2C]
     default [12] if [I2C && SCx200_I2C]
     inherited [I2C && SCx200_I2C]
    }
    config SCx200_I2C_SDA integer {
     prompt "GPIO pin used for SDA" if [I2C && SCx200_I2C]
     depends on [SCx200_I2C]
     default [13] if [I2C && SCx200_I2C]
     inherited [I2C && SCx200_I2C]
    }
   }
   config SCx200_ACB tristate {
    prompt "Geode ACCESS.bus support" if [I2C && X86_32 && PCI]
    depends on [X86_32 && PCI]
    inherited [I2C && X86_32 && PCI]
   }
  }
  menu "Miscellaneous I2C Chip support" {
   depends on [I2C]
   config SENSORS_TSL2550 tristate {
    prompt "Taos TSL2550 ambient light sensor" if [I2C && EXPERIMENTAL]
    depends on [EXPERIMENTAL]
    inherited [I2C && EXPERIMENTAL]
   }
  }
  config I2C_DEBUG_CORE boolean {
   prompt "I2C Core debugging messages" if [I2C]
   inherited [I2C]
  }
  config I2C_DEBUG_ALGO boolean {
   prompt "I2C Algorithm debugging messages" if [I2C]
   inherited [I2C]
  }
  config I2C_DEBUG_BUS boolean {
   prompt "I2C Bus debugging messages" if [I2C]
   inherited [I2C]
  }
  config I2C_DEBUG_CHIP boolean {
   prompt "I2C Chip debugging messages" if [I2C]
   inherited [I2C]
  }
 }
}
config RTC_LIB tristate {
}
menuconfig RTC_CLASS tristate {
 prompt "Real Time Clock" if [!S390]
 default [n] if [!S390]
 depends on [!S390]
 select RTC_LIB if [!S390]
 inherited [!S390]
 if [RTC_CLASS] {
  config RTC_HCTOSYS boolean {
   prompt "Set system time from RTC on startup and resume" if [RTC_CLASS="y"]
   depends on [RTC_CLASS="y"]
   default [y] if [RTC_CLASS="y"]
   inherited [RTC_CLASS="y"]
   config RTC_HCTOSYS_DEVICE string {
    prompt "RTC used to set the system time" if [RTC_CLASS && RTC_HCTOSYS]
    depends on [RTC_HCTOSYS="y"]
    default ["rtc0"] if [RTC_CLASS && RTC_HCTOSYS]
    inherited [RTC_CLASS && RTC_HCTOSYS]
   }
  }
  config RTC_DEBUG boolean {
   prompt "RTC debug support" if [RTC_CLASS="y"]
   depends on [RTC_CLASS="y"]
   inherited [RTC_CLASS="y"]
  }
  config RTC_INTF_SYSFS boolean {
   prompt "/sys/class/rtc/rtcN (sysfs)" if [RTC_CLASS && SYSFS]
   depends on [SYSFS]
   default [RTC_CLASS] if [RTC_CLASS && SYSFS]
   inherited [RTC_CLASS && SYSFS]
  }
  config RTC_INTF_PROC boolean {
   prompt "/proc/driver/rtc (procfs for rtc0)" if [RTC_CLASS && PROC_FS]
   depends on [PROC_FS]
   default [RTC_CLASS] if [RTC_CLASS && PROC_FS]
   inherited [RTC_CLASS && PROC_FS]
  }
  config RTC_INTF_DEV boolean {
   prompt "/dev/rtcN (character devices)" if [RTC_CLASS]
   default [RTC_CLASS] if [RTC_CLASS]
   inherited [RTC_CLASS]
   config RTC_INTF_DEV_UIE_EMUL boolean {
    prompt "RTC UIE emulation on dev interface" if [RTC_CLASS && RTC_INTF_DEV]
    depends on [RTC_INTF_DEV]
    inherited [RTC_CLASS && RTC_INTF_DEV]
   }
  }
  config RTC_DRV_TEST tristate {
   prompt "Test driver/device" if [RTC_CLASS]
   inherited [RTC_CLASS]
  }
  if [RTC_CLASS && I2C] {
   config RTC_DRV_DS1307 tristate {
    prompt "Dallas/Maxim DS1307/37/38/39/40, ST M41T00, EPSON RX-8025" if [RTC_CLASS && I2C]
    inherited [RTC_CLASS && I2C]
   }
   config RTC_DRV_DS1374 tristate {
    prompt "Dallas/Maxim DS1374" if [RTC_CLASS && I2C]
    depends on [RTC_CLASS && I2C]
    inherited [RTC_CLASS && I2C]
   }
   config RTC_DRV_DS1672 tristate {
    prompt "Dallas/Maxim DS1672" if [RTC_CLASS && I2C]
    inherited [RTC_CLASS && I2C]
   }
   config RTC_DRV_MAX6900 tristate {
    prompt "Maxim MAX6900" if [RTC_CLASS && I2C]
    inherited [RTC_CLASS && I2C]
   }
   config RTC_DRV_RS5C372 tristate {
    prompt "Ricoh R2025S/D, RS5C372A/B, RV5C386, RV5C387A" if [RTC_CLASS && I2C]
    inherited [RTC_CLASS && I2C]
   }
   config RTC_DRV_ISL1208 tristate {
    prompt "Intersil ISL1208" if [RTC_CLASS && I2C]
    inherited [RTC_CLASS && I2C]
   }
   config RTC_DRV_X1205 tristate {
    prompt "Xicor/Intersil X1205" if [RTC_CLASS && I2C]
    inherited [RTC_CLASS && I2C]
   }
   config RTC_DRV_PCF8563 tristate {
    prompt "Philips PCF8563/Epson RTC8564" if [RTC_CLASS && I2C]
    inherited [RTC_CLASS && I2C]
   }
   config RTC_DRV_PCF8583 tristate {
    prompt "Philips PCF8583" if [RTC_CLASS && I2C]
    inherited [RTC_CLASS && I2C]
   }
   config RTC_DRV_M41T80 tristate {
    prompt "ST M41T62/65/M41T80/81/82/83/84/85/87" if [RTC_CLASS && I2C]
    inherited [RTC_CLASS && I2C]
    config RTC_DRV_M41T80_WDT boolean {
     prompt "ST M41T65/M41T80 series RTC watchdog timer" if [RTC_CLASS && I2C && RTC_DRV_M41T80]
     depends on [RTC_DRV_M41T80]
     inherited [RTC_CLASS && I2C && RTC_DRV_M41T80]
    }
   }
   config RTC_DRV_BQ32K tristate {
    prompt "TI BQ32000" if [RTC_CLASS && I2C]
    inherited [RTC_CLASS && I2C]
   }
   config RTC_DRV_DM355EVM tristate {
    prompt "TI DaVinci DM355 EVM RTC" if [RTC_CLASS && I2C && MFD_DM355EVM_MSP]
    depends on [MFD_DM355EVM_MSP]
    inherited [RTC_CLASS && I2C && MFD_DM355EVM_MSP]
   }
   config RTC_DRV_TWL92330 boolean {
    prompt "TI TWL92330/Menelaus" if [RTC_CLASS && I2C && MENELAUS]
    depends on [MENELAUS]
    inherited [RTC_CLASS && I2C && MENELAUS]
   }
   config RTC_DRV_TWL4030 tristate {
    prompt "TI TWL4030/TWL5030/TWL6030/TPS659x0" if [I2C && RTC_CLASS && TWL4030_CORE]
    depends on [RTC_CLASS && TWL4030_CORE]
    inherited [I2C && RTC_CLASS && TWL4030_CORE]
   }
   config RTC_DRV_S35390A tristate {
    prompt "Seiko Instruments S-35390A" if [RTC_CLASS && I2C]
    select BITREVERSE if [RTC_CLASS && I2C]
    inherited [RTC_CLASS && I2C]
   }
   config RTC_DRV_FM3130 tristate {
    prompt "Ramtron FM3130" if [RTC_CLASS && I2C]
    inherited [RTC_CLASS && I2C]
   }
   config RTC_DRV_RX8581 tristate {
    prompt "Epson RX-8581" if [RTC_CLASS && I2C]
    inherited [RTC_CLASS && I2C]
   }
   config RTC_DRV_RX8025 tristate {
    prompt "Epson RX-8025SA/NB" if [RTC_CLASS && I2C]
    inherited [RTC_CLASS && I2C]
   }
  }
  if [RTC_CLASS && SPI_MASTER] {
   config RTC_DRV_M41T94 tristate {
    prompt "ST M41T94" if [RTC_CLASS && SPI_MASTER]
    inherited [RTC_CLASS && SPI_MASTER]
   }
   config RTC_DRV_DS1305 tristate {
    prompt "Dallas/Maxim DS1305/DS1306" if [RTC_CLASS && SPI_MASTER]
    inherited [RTC_CLASS && SPI_MASTER]
   }
   config RTC_DRV_DS1390 tristate {
    prompt "Dallas/Maxim DS1390/93/94" if [RTC_CLASS && SPI_MASTER]
    inherited [RTC_CLASS && SPI_MASTER]
   }
   config RTC_DRV_MAX6902 tristate {
    prompt "Maxim MAX6902" if [RTC_CLASS && SPI_MASTER]
    inherited [RTC_CLASS && SPI_MASTER]
   }
   config RTC_DRV_R9701 tristate {
    prompt "Epson RTC-9701JE" if [RTC_CLASS && SPI_MASTER]
    inherited [RTC_CLASS && SPI_MASTER]
   }
   config RTC_DRV_RS5C348 tristate {
    prompt "Ricoh RS5C348A/B" if [RTC_CLASS && SPI_MASTER]
    inherited [RTC_CLASS && SPI_MASTER]
   }
   config RTC_DRV_DS3234 tristate {
    prompt "Maxim/Dallas DS3234" if [RTC_CLASS && SPI_MASTER]
    inherited [RTC_CLASS && SPI_MASTER]
   }
   config RTC_DRV_PCF2123 tristate {
    prompt "NXP PCF2123" if [RTC_CLASS && SPI_MASTER]
    inherited [RTC_CLASS && SPI_MASTER]
   }
  }
  config RTC_DRV_CMOS tristate {
   prompt "PC-style 'CMOS'" if [RTC_CLASS && (X86 || ALPHA || ARM || M32R || ATARI || PPC || MIPS || SPARC64)]
   depends on [X86 || ALPHA || ARM || M32R || ATARI || PPC || MIPS || SPARC64]
   default [y] if [RTC_CLASS && (X86 || ALPHA || ARM || M32R || ATARI || PPC || MIPS || SPARC64) && X86]
   inherited [RTC_CLASS && (X86 || ALPHA || ARM || M32R || ATARI || PPC || MIPS || SPARC64)]
  }
  config RTC_DRV_DS1216 tristate {
   prompt "Dallas DS1216" if [RTC_CLASS && SNI_RM]
   depends on [SNI_RM]
   inherited [RTC_CLASS && SNI_RM]
  }
  config RTC_DRV_DS1286 tristate {
   prompt "Dallas DS1286" if [RTC_CLASS]
   inherited [RTC_CLASS]
  }
  config RTC_DRV_DS1302 tristate {
   prompt "Dallas DS1302" if [RTC_CLASS && SH_SECUREEDGE5410]
   depends on [SH_SECUREEDGE5410]
   inherited [RTC_CLASS && SH_SECUREEDGE5410]
  }
  config RTC_DRV_DS1511 tristate {
   prompt "Dallas DS1511" if [RTC_CLASS]
   depends on [RTC_CLASS]
   inherited [RTC_CLASS]
  }
  config RTC_DRV_DS1553 tristate {
   prompt "Maxim/Dallas DS1553" if [RTC_CLASS]
   inherited [RTC_CLASS]
  }
  config RTC_DRV_DS1742 tristate {
   prompt "Maxim/Dallas DS1742/1743" if [RTC_CLASS]
   inherited [RTC_CLASS]
  }
  config RTC_DRV_EFI tristate {
   prompt "EFI RTC" if [RTC_CLASS && IA64]
   depends on [IA64]
   inherited [RTC_CLASS && IA64]
  }
  config RTC_DRV_STK17TA8 tristate {
   prompt "Simtek STK17TA8" if [RTC_CLASS]
   depends on [RTC_CLASS]
   inherited [RTC_CLASS]
  }
  config RTC_DRV_M48T86 tristate {
   prompt "ST M48T86/Dallas DS12887" if [RTC_CLASS]
   inherited [RTC_CLASS]
  }
  config RTC_DRV_M48T35 tristate {
   prompt "ST M48T35" if [RTC_CLASS]
   inherited [RTC_CLASS]
  }
  config RTC_DRV_M48T59 tristate {
   prompt "ST M48T59/M48T08/M48T02" if [RTC_CLASS]
   inherited [RTC_CLASS]
  }
  config RTC_DRV_MSM6242 tristate {
   prompt "Oki MSM6242" if [RTC_CLASS]
   inherited [RTC_CLASS]
  }
  config RTC_MXC tristate {
   prompt "Freescale MXC Real Time Clock" if [ARCH_MXC && RTC_CLASS]
   depends on [ARCH_MXC]
   depends on [RTC_CLASS]
   inherited [ARCH_MXC && RTC_CLASS]
  }
  config RTC_DRV_BQ4802 tristate {
   prompt "TI BQ4802" if [RTC_CLASS]
   inherited [RTC_CLASS]
  }
  config RTC_DRV_RP5C01 tristate {
   prompt "Ricoh RP5C01" if [RTC_CLASS]
   inherited [RTC_CLASS]
  }
  config RTC_DRV_V3020 tristate {
   prompt "EM Microelectronic V3020" if [RTC_CLASS]
   inherited [RTC_CLASS]
  }
  config RTC_DRV_WM831X tristate {
   prompt "Wolfson Microelectronics WM831x RTC" if [RTC_CLASS && MFD_WM831X]
   depends on [MFD_WM831X]
   inherited [RTC_CLASS && MFD_WM831X]
  }
  config RTC_DRV_WM8350 tristate {
   prompt "Wolfson Microelectronics WM8350 RTC" if [RTC_CLASS && MFD_WM8350]
   depends on [MFD_WM8350]
   inherited [RTC_CLASS && MFD_WM8350]
  }
  config RTC_DRV_PCF50633 tristate {
   depends on [MFD_PCF50633]
   prompt "NXP PCF50633 RTC" if [RTC_CLASS && MFD_PCF50633]
   inherited [RTC_CLASS && MFD_PCF50633]
  }
  config RTC_DRV_AB3100 tristate {
   prompt "ST-Ericsson AB3100 RTC" if [RTC_CLASS && AB3100_CORE]
   depends on [AB3100_CORE]
   default [y] if [RTC_CLASS && AB3100_CORE]
   inherited [RTC_CLASS && AB3100_CORE]
  }
  config RTC_DRV_NUC900 tristate {
   prompt "NUC910/NUC920 RTC driver" if [RTC_CLASS && ARCH_W90X900]
   depends on [RTC_CLASS && ARCH_W90X900]
   inherited [RTC_CLASS && ARCH_W90X900]
  }
  config RTC_DRV_OMAP tristate {
   prompt "TI OMAP1" if [RTC_CLASS && (ARCH_OMAP15XX || ARCH_OMAP16XX || ARCH_OMAP730 || ARCH_DAVINCI_DA8XX)]
   depends on [ARCH_OMAP15XX || ARCH_OMAP16XX || ARCH_OMAP730 || ARCH_DAVINCI_DA8XX]
   inherited [RTC_CLASS && (ARCH_OMAP15XX || ARCH_OMAP16XX || ARCH_OMAP730 || ARCH_DAVINCI_DA8XX)]
  }
  config RTC_DRV_S3C tristate {
   prompt "Samsung S3C series SoC RTC" if [RTC_CLASS && ARCH_S3C2410]
   depends on [ARCH_S3C2410]
   inherited [RTC_CLASS && ARCH_S3C2410]
  }
  config RTC_DRV_EP93XX tristate {
   prompt "Cirrus Logic EP93XX" if [RTC_CLASS && ARCH_EP93XX]
   depends on [ARCH_EP93XX]
   inherited [RTC_CLASS && ARCH_EP93XX]
  }
  config RTC_DRV_SA1100 tristate {
   prompt "SA11x0/PXA2xx" if [RTC_CLASS && (ARCH_SA1100 || ARCH_PXA)]
   depends on [ARCH_SA1100 || ARCH_PXA]
   inherited [RTC_CLASS && (ARCH_SA1100 || ARCH_PXA)]
  }
  config RTC_DRV_SH tristate {
   prompt "SuperH On-Chip RTC" if [RTC_CLASS && SUPERH && HAVE_CLK]
   depends on [RTC_CLASS && SUPERH && HAVE_CLK]
   inherited [RTC_CLASS && SUPERH && HAVE_CLK]
  }
  config RTC_DRV_VR41XX tristate {
   prompt "NEC VR41XX" if [RTC_CLASS && CPU_VR41XX]
   depends on [CPU_VR41XX]
   inherited [RTC_CLASS && CPU_VR41XX]
  }
  config RTC_DRV_PL030 tristate {
   prompt "ARM AMBA PL030 RTC" if [RTC_CLASS && ARM_AMBA]
   depends on [ARM_AMBA]
   inherited [RTC_CLASS && ARM_AMBA]
  }
  config RTC_DRV_PL031 tristate {
   prompt "ARM AMBA PL031 RTC" if [RTC_CLASS && ARM_AMBA]
   depends on [ARM_AMBA]
   inherited [RTC_CLASS && ARM_AMBA]
  }
  config RTC_DRV_AT32AP700X tristate {
   prompt "AT32AP700X series RTC" if [RTC_CLASS && PLATFORM_AT32AP]
   depends on [PLATFORM_AT32AP]
   inherited [RTC_CLASS && PLATFORM_AT32AP]
  }
  config RTC_DRV_AT91RM9200 tristate {
   prompt "AT91RM9200 or AT91SAM9RL" if [RTC_CLASS && (ARCH_AT91RM9200 || ARCH_AT91SAM9RL)]
   depends on [ARCH_AT91RM9200 || ARCH_AT91SAM9RL]
   inherited [RTC_CLASS && (ARCH_AT91RM9200 || ARCH_AT91SAM9RL)]
  }
  config RTC_DRV_AT91SAM9 tristate {
   prompt "AT91SAM9x/AT91CAP9" if [RTC_CLASS && ARCH_AT91 && !ARCH_AT91RM9200 && !ARCH_AT91X40]
   depends on [ARCH_AT91 && !(ARCH_AT91RM9200 || ARCH_AT91X40)]
   inherited [RTC_CLASS && ARCH_AT91 && !ARCH_AT91RM9200 && !ARCH_AT91X40]
   config RTC_DRV_AT91SAM9_RTT integer {
    range [0 1] if [RTC_CLASS && RTC_DRV_AT91SAM9]
    default [0] if [RTC_CLASS && RTC_DRV_AT91SAM9]
    prompt "RTT module Number" if [RTC_CLASS && RTC_DRV_AT91SAM9 && ARCH_AT91SAM9263]
    depends on [RTC_DRV_AT91SAM9]
    inherited [RTC_CLASS && RTC_DRV_AT91SAM9]
   }
   config RTC_DRV_AT91SAM9_GPBR integer {
    range [0 3] if [RTC_CLASS && RTC_DRV_AT91SAM9 && !ARCH_AT91SAM9263]
    range [0 15] if [RTC_CLASS && RTC_DRV_AT91SAM9 && ARCH_AT91SAM9263]
    default [0] if [RTC_CLASS && RTC_DRV_AT91SAM9]
    prompt "Backup Register Number" if [RTC_CLASS && RTC_DRV_AT91SAM9]
    depends on [RTC_DRV_AT91SAM9]
    inherited [RTC_CLASS && RTC_DRV_AT91SAM9]
   }
  }
  config RTC_DRV_AU1XXX tristate {
   prompt "Au1xxx Counter0 RTC support" if [RTC_CLASS && SOC_AU1X00]
   depends on [SOC_AU1X00]
   inherited [RTC_CLASS && SOC_AU1X00]
  }
  config RTC_DRV_BFIN tristate {
   prompt "Blackfin On-Chip RTC" if [RTC_CLASS && BLACKFIN && !BF561]
   depends on [BLACKFIN && !BF561]
   inherited [RTC_CLASS && BLACKFIN && !BF561]
  }
  config RTC_DRV_RS5C313 tristate {
   prompt "Ricoh RS5C313" if [RTC_CLASS && SH_LANDISK]
   depends on [SH_LANDISK]
   inherited [RTC_CLASS && SH_LANDISK]
  }
  config RTC_DRV_GENERIC tristate {
   prompt "Generic RTC support" if [RTC_CLASS && (PARISC || M68K || PPC || SUPERH32)]
   depends on [PARISC || M68K || PPC || SUPERH32]
   inherited [RTC_CLASS && (PARISC || M68K || PPC || SUPERH32)]
  }
  config RTC_DRV_PXA tristate {
   prompt "PXA27x/PXA3xx" if [RTC_CLASS && ARCH_PXA]
   depends on [ARCH_PXA]
   inherited [RTC_CLASS && ARCH_PXA]
  }
  config RTC_DRV_SUN4V boolean {
   prompt "SUN4V Hypervisor RTC" if [RTC_CLASS && SPARC64]
   depends on [SPARC64]
   inherited [RTC_CLASS && SPARC64]
  }
  config RTC_DRV_STARFIRE boolean {
   prompt "Starfire RTC" if [RTC_CLASS && SPARC64]
   depends on [SPARC64]
   inherited [RTC_CLASS && SPARC64]
  }
  config RTC_DRV_TX4939 tristate {
   prompt "TX4939 SoC" if [RTC_CLASS && SOC_TX4939]
   depends on [SOC_TX4939]
   inherited [RTC_CLASS && SOC_TX4939]
  }
  config RTC_DRV_MV tristate {
   prompt "Marvell SoC RTC" if [RTC_CLASS && (ARCH_KIRKWOOD || ARCH_DOVE)]
   depends on [ARCH_KIRKWOOD || ARCH_DOVE]
   inherited [RTC_CLASS && (ARCH_KIRKWOOD || ARCH_DOVE)]
  }
  config RTC_DRV_PS3 tristate {
   prompt "PS3 RTC" if [RTC_CLASS && PPC_PS3]
   depends on [PPC_PS3]
   inherited [RTC_CLASS && PPC_PS3]
  }
  config RTC_DRV_COH901331 tristate {
   prompt "ST-Ericsson COH 901 331 RTC" if [RTC_CLASS && ARCH_U300]
   depends on [ARCH_U300]
   inherited [RTC_CLASS && ARCH_U300]
  }
  config RTC_DRV_STMP tristate {
   prompt "Freescale STMP3xxx RTC" if [RTC_CLASS && ARCH_STMP3XXX]
   depends on [ARCH_STMP3XXX]
   inherited [RTC_CLASS && ARCH_STMP3XXX]
  }
  config RTC_DRV_PCAP tristate {
   prompt "PCAP RTC" if [RTC_CLASS && EZX_PCAP]
   depends on [EZX_PCAP]
   inherited [RTC_CLASS && EZX_PCAP]
  }
  config RTC_DRV_MC13783 tristate {
   depends on [MFD_MC13783]
   prompt "Freescale MC13783 RTC" if [RTC_CLASS && MFD_MC13783]
   inherited [RTC_CLASS && MFD_MC13783]
  }
 }
}
menu "Input device support" {
 depends on [!S390]
 config INPUT tristate {
  prompt "Generic input layer (needed for keyboard, mouse, ...)" if [!S390 && EMBEDDED]
  default [y] if [!S390]
  inherited [!S390]
  if [!S390 && INPUT] {
   config INPUT_FF_MEMLESS tristate {
    prompt "Support for memoryless force-feedback devices" if [!S390 && INPUT]
    inherited [!S390 && INPUT]
   }
   config INPUT_POLLDEV tristate {
    prompt "Polled input device skeleton" if [!S390 && INPUT]
    inherited [!S390 && INPUT]
   }
   config INPUT_SPARSEKMAP tristate {
    prompt "Sparse keymap support library" if [!S390 && INPUT]
    inherited [!S390 && INPUT]
   }
   config INPUT_MOUSEDEV tristate {
    prompt "Mouse interface" if [!S390 && INPUT && EMBEDDED]
    default [y] if [!S390 && INPUT]
    inherited [!S390 && INPUT]
    config INPUT_MOUSEDEV_PSAUX boolean {
     prompt "Provide legacy /dev/psaux device" if [!S390 && INPUT && INPUT_MOUSEDEV]
     default [y] if [!S390 && INPUT && INPUT_MOUSEDEV]
     depends on [INPUT_MOUSEDEV]
     inherited [!S390 && INPUT && INPUT_MOUSEDEV]
    }
    config INPUT_MOUSEDEV_SCREEN_X integer {
     prompt "Horizontal screen resolution" if [!S390 && INPUT && INPUT_MOUSEDEV]
     depends on [INPUT_MOUSEDEV]
     default [1024] if [!S390 && INPUT && INPUT_MOUSEDEV]
     inherited [!S390 && INPUT && INPUT_MOUSEDEV]
    }
    config INPUT_MOUSEDEV_SCREEN_Y integer {
     prompt "Vertical screen resolution" if [!S390 && INPUT && INPUT_MOUSEDEV]
     depends on [INPUT_MOUSEDEV]
     default [768] if [!S390 && INPUT && INPUT_MOUSEDEV]
     inherited [!S390 && INPUT && INPUT_MOUSEDEV]
    }
   }
   config INPUT_JOYDEV tristate {
    prompt "Joystick interface" if [!S390 && INPUT]
    inherited [!S390 && INPUT]
   }
   config INPUT_EVDEV tristate {
    prompt "Event interface" if [!S390 && INPUT]
    inherited [!S390 && INPUT]
   }
   config INPUT_EVBUG tristate {
    prompt "Event debugging" if [!S390 && INPUT]
    inherited [!S390 && INPUT]
   }
   config INPUT_APMPOWER tristate {
    prompt "Input Power Event -> APM Bridge" if [!S390 && INPUT && APM_EMULATION && EMBEDDED]
    depends on [INPUT && APM_EMULATION]
    inherited [!S390 && INPUT && APM_EMULATION]
   }
   config XEN_KBDDEV_FRONTEND tristate {
    prompt "Xen virtual keyboard and mouse support" if [!S390 && INPUT && XEN_FBDEV_FRONTEND]
    depends on [XEN_FBDEV_FRONTEND]
    default [y] if [!S390 && INPUT && XEN_FBDEV_FRONTEND]
    select XEN_XENBUS_FRONTEND if [!S390 && INPUT && XEN_FBDEV_FRONTEND]
    inherited [!S390 && INPUT && XEN_FBDEV_FRONTEND]
   }
   menuconfig INPUT_KEYBOARD boolean {
    prompt "Keyboards" if [!S390 && INPUT && (EMBEDDED || !X86)]
    default [y] if [!S390 && INPUT]
    inherited [!S390 && INPUT]
    if [!S390 && INPUT && INPUT_KEYBOARD] {
     config KEYBOARD_AAED2000 tristate {
      prompt "AAED-2000 keyboard" if [!S390 && INPUT && INPUT_KEYBOARD && MACH_AAED2000]
      depends on [MACH_AAED2000]
      select INPUT_POLLDEV if [!S390 && INPUT && INPUT_KEYBOARD && MACH_AAED2000]
      default [y] if [!S390 && INPUT && INPUT_KEYBOARD && MACH_AAED2000]
      inherited [!S390 && INPUT && INPUT_KEYBOARD && MACH_AAED2000]
     }
     config KEYBOARD_ADP5520 tristate {
      prompt "Keypad Support for ADP5520 PMIC" if [!S390 && INPUT && INPUT_KEYBOARD && PMIC_ADP5520]
      depends on [PMIC_ADP5520]
      inherited [!S390 && INPUT && INPUT_KEYBOARD && PMIC_ADP5520]
     }
     config KEYBOARD_ADP5588 tristate {
      prompt "ADP5588 I2C QWERTY Keypad and IO Expander" if [!S390 && INPUT && INPUT_KEYBOARD && I2C]
      depends on [I2C]
      inherited [!S390 && INPUT && INPUT_KEYBOARD && I2C]
     }
     config KEYBOARD_AMIGA tristate {
      prompt "Amiga keyboard" if [!S390 && INPUT && INPUT_KEYBOARD && AMIGA]
      depends on [AMIGA]
      inherited [!S390 && INPUT && INPUT_KEYBOARD && AMIGA]
     }
     config ATARI_KBD_CORE boolean {
      inherited [!S390 && INPUT && INPUT_KEYBOARD]
     }
     config KEYBOARD_ATARI tristate {
      prompt "Atari keyboard" if [!S390 && INPUT && INPUT_KEYBOARD && ATARI]
      depends on [ATARI]
      select ATARI_KBD_CORE if [!S390 && INPUT && INPUT_KEYBOARD && ATARI]
      inherited [!S390 && INPUT && INPUT_KEYBOARD && ATARI]
     }
     config KEYBOARD_ATKBD tristate {
      prompt "AT keyboard" if [!S390 && INPUT && INPUT_KEYBOARD && (EMBEDDED || !X86)]
      default [y] if [!S390 && INPUT && INPUT_KEYBOARD]
      select SERIO if [!S390 && INPUT && INPUT_KEYBOARD]
      select SERIO_LIBPS2 if [!S390 && INPUT && INPUT_KEYBOARD]
      select SERIO_I8042 if [!S390 && INPUT && INPUT_KEYBOARD && X86]
      select SERIO_GSCPS2 if [!S390 && INPUT && INPUT_KEYBOARD && GSC]
      inherited [!S390 && INPUT && INPUT_KEYBOARD]
      config KEYBOARD_ATKBD_HP_KEYCODES boolean {
       prompt "Use HP keyboard scancodes" if [!S390 && INPUT && INPUT_KEYBOARD && PARISC && KEYBOARD_ATKBD]
       depends on [PARISC && KEYBOARD_ATKBD]
       default [y] if [!S390 && INPUT && INPUT_KEYBOARD && PARISC && KEYBOARD_ATKBD]
       inherited [!S390 && INPUT && INPUT_KEYBOARD && PARISC && KEYBOARD_ATKBD]
       config KEYBOARD_ATKBD_RDI_KEYCODES boolean {
        prompt "Use PrecisionBook keyboard scancodes" if [!S390 && INPUT && INPUT_KEYBOARD && KEYBOARD_ATKBD_HP_KEYCODES]
        depends on [KEYBOARD_ATKBD_HP_KEYCODES]
        default [n] if [!S390 && INPUT && INPUT_KEYBOARD && KEYBOARD_ATKBD_HP_KEYCODES]
        inherited [!S390 && INPUT && INPUT_KEYBOARD && KEYBOARD_ATKBD_HP_KEYCODES]
       }
      }
     }
     config QT2160 tristate {
      prompt "Atmel AT42QT2160 Touch Sensor Chip" if [!S390 && INPUT && INPUT_KEYBOARD && I2C && EXPERIMENTAL]
      depends on [I2C && EXPERIMENTAL]
      inherited [!S390 && INPUT && INPUT_KEYBOARD && I2C && EXPERIMENTAL]
     }
     config KEYBOARD_BFIN tristate {
      prompt "Blackfin BF54x keypad support" if [!S390 && INPUT && INPUT_KEYBOARD && BF54x && !BF544]
      depends on [BF54x && !BF544]
      inherited [!S390 && INPUT && INPUT_KEYBOARD && BF54x && !BF544]
     }
     config KEYBOARD_CORGI tristate {
      prompt "Corgi keyboard" if [!S390 && INPUT && INPUT_KEYBOARD && PXA_SHARPSL]
      depends on [PXA_SHARPSL]
      default [y] if [!S390 && INPUT && INPUT_KEYBOARD && PXA_SHARPSL]
      inherited [!S390 && INPUT && INPUT_KEYBOARD && PXA_SHARPSL]
     }
     config KEYBOARD_LKKBD tristate {
      prompt "DECstation/VAXstation LK201/LK401 keyboard" if [!S390 && INPUT && INPUT_KEYBOARD]
      select SERIO if [!S390 && INPUT && INPUT_KEYBOARD]
      inherited [!S390 && INPUT && INPUT_KEYBOARD]
     }
     config KEYBOARD_EP93XX tristate {
      prompt "EP93xx Matrix Keypad support" if [!S390 && INPUT && INPUT_KEYBOARD && ARCH_EP93XX]
      depends on [ARCH_EP93XX]
      inherited [!S390 && INPUT && INPUT_KEYBOARD && ARCH_EP93XX]
     }
     config KEYBOARD_GPIO tristate {
      prompt "GPIO Buttons" if [!S390 && INPUT && INPUT_KEYBOARD && GENERIC_GPIO]
      depends on [GENERIC_GPIO]
      inherited [!S390 && INPUT && INPUT_KEYBOARD && GENERIC_GPIO]
     }
     config KEYBOARD_MATRIX tristate {
      prompt "GPIO driven matrix keypad support" if [!S390 && INPUT && INPUT_KEYBOARD && GENERIC_GPIO]
      depends on [GENERIC_GPIO]
      inherited [!S390 && INPUT && INPUT_KEYBOARD && GENERIC_GPIO]
     }
     config KEYBOARD_HIL_OLD tristate {
      prompt "HP HIL keyboard support (simple driver)" if [!S390 && INPUT && INPUT_KEYBOARD && (GSC || HP300)]
      depends on [GSC || HP300]
      default [y] if [!S390 && INPUT && INPUT_KEYBOARD && (GSC || HP300)]
      inherited [!S390 && INPUT && INPUT_KEYBOARD && (GSC || HP300)]
     }
     config KEYBOARD_HIL tristate {
      prompt "HP HIL keyboard/pointer support" if [!S390 && INPUT && INPUT_KEYBOARD && (GSC || HP300)]
      depends on [GSC || HP300]
      default [y] if [!S390 && INPUT && INPUT_KEYBOARD && (GSC || HP300)]
      select HP_SDC if [!S390 && INPUT && INPUT_KEYBOARD && (GSC || HP300)]
      select HIL_MLC if [!S390 && INPUT && INPUT_KEYBOARD && (GSC || HP300)]
      select SERIO if [!S390 && INPUT && INPUT_KEYBOARD && (GSC || HP300)]
      inherited [!S390 && INPUT && INPUT_KEYBOARD && (GSC || HP300)]
     }
     config KEYBOARD_HP6XX tristate {
      prompt "HP Jornada 6xx keyboard" if [!S390 && INPUT && INPUT_KEYBOARD && SH_HP6XX]
      depends on [SH_HP6XX]
      select INPUT_POLLDEV if [!S390 && INPUT && INPUT_KEYBOARD && SH_HP6XX]
      inherited [!S390 && INPUT && INPUT_KEYBOARD && SH_HP6XX]
     }
     config KEYBOARD_HP7XX tristate {
      prompt "HP Jornada 7xx keyboard" if [!S390 && INPUT && INPUT_KEYBOARD && SA1100_JORNADA720_SSP && SA1100_SSP]
      depends on [SA1100_JORNADA720_SSP && SA1100_SSP]
      inherited [!S390 && INPUT && INPUT_KEYBOARD && SA1100_JORNADA720_SSP && SA1100_SSP]
     }
     config KEYBOARD_LM8323 tristate {
      prompt "LM8323 keypad chip" if [!S390 && INPUT && INPUT_KEYBOARD && I2C && LEDS_CLASS]
      depends on [I2C]
      depends on [LEDS_CLASS]
      inherited [!S390 && INPUT && INPUT_KEYBOARD && I2C && LEDS_CLASS]
     }
     config KEYBOARD_LOCOMO tristate {
      prompt "LoCoMo Keyboard Support" if [!S390 && INPUT && INPUT_KEYBOARD && SHARP_LOCOMO]
      depends on [SHARP_LOCOMO]
      inherited [!S390 && INPUT && INPUT_KEYBOARD && SHARP_LOCOMO]
     }
     config KEYBOARD_MAPLE tristate {
      prompt "Maple bus keyboard" if [!S390 && INPUT && INPUT_KEYBOARD && SH_DREAMCAST && MAPLE]
      depends on [SH_DREAMCAST && MAPLE]
      inherited [!S390 && INPUT && INPUT_KEYBOARD && SH_DREAMCAST && MAPLE]
     }
     config KEYBOARD_MAX7359 tristate {
      prompt "Maxim MAX7359 Key Switch Controller" if [!S390 && INPUT && INPUT_KEYBOARD && I2C]
      depends on [I2C]
      inherited [!S390 && INPUT && INPUT_KEYBOARD && I2C]
     }
     config KEYBOARD_NEWTON tristate {
      prompt "Newton keyboard" if [!S390 && INPUT && INPUT_KEYBOARD]
      select SERIO if [!S390 && INPUT && INPUT_KEYBOARD]
      inherited [!S390 && INPUT && INPUT_KEYBOARD]
     }
     config KEYBOARD_OPENCORES tristate {
      prompt "OpenCores Keyboard Controller" if [!S390 && INPUT && INPUT_KEYBOARD]
      inherited [!S390 && INPUT && INPUT_KEYBOARD]
     }
     config KEYBOARD_PXA27x tristate {
      prompt "PXA27x/PXA3xx keypad support" if [!S390 && INPUT && INPUT_KEYBOARD && (PXA27x || PXA3xx)]
      depends on [PXA27x || PXA3xx]
      inherited [!S390 && INPUT && INPUT_KEYBOARD && (PXA27x || PXA3xx)]
     }
     config KEYBOARD_PXA930_ROTARY tristate {
      prompt "PXA930/PXA935 Enhanced Rotary Controller Support" if [!S390 && INPUT && INPUT_KEYBOARD && (CPU_PXA930 || CPU_PXA935)]
      depends on [CPU_PXA930 || CPU_PXA935]
      inherited [!S390 && INPUT && INPUT_KEYBOARD && (CPU_PXA930 || CPU_PXA935)]
     }
     config KEYBOARD_SPITZ tristate {
      prompt "Spitz keyboard" if [!S390 && INPUT && INPUT_KEYBOARD && PXA_SHARPSL]
      depends on [PXA_SHARPSL]
      default [y] if [!S390 && INPUT && INPUT_KEYBOARD && PXA_SHARPSL]
      inherited [!S390 && INPUT && INPUT_KEYBOARD && PXA_SHARPSL]
     }
     config KEYBOARD_STOWAWAY tristate {
      prompt "Stowaway keyboard" if [!S390 && INPUT && INPUT_KEYBOARD]
      select SERIO if [!S390 && INPUT && INPUT_KEYBOARD]
      inherited [!S390 && INPUT && INPUT_KEYBOARD]
     }
     config KEYBOARD_SUNKBD tristate {
      prompt "Sun Type 4 and Type 5 keyboard" if [!S390 && INPUT && INPUT_KEYBOARD]
      select SERIO if [!S390 && INPUT && INPUT_KEYBOARD]
      inherited [!S390 && INPUT && INPUT_KEYBOARD]
     }
     config KEYBOARD_SH_KEYSC tristate {
      prompt "SuperH KEYSC keypad support" if [!S390 && INPUT && INPUT_KEYBOARD && SUPERH]
      depends on [SUPERH]
      inherited [!S390 && INPUT && INPUT_KEYBOARD && SUPERH]
     }
     config KEYBOARD_DAVINCI tristate {
      prompt "TI DaVinci Key Scan" if [!S390 && INPUT && INPUT_KEYBOARD && ARCH_DAVINCI_DM365]
      depends on [ARCH_DAVINCI_DM365]
      inherited [!S390 && INPUT && INPUT_KEYBOARD && ARCH_DAVINCI_DM365]
     }
     config KEYBOARD_OMAP tristate {
      prompt "TI OMAP keypad support" if [!S390 && INPUT && INPUT_KEYBOARD && (ARCH_OMAP1 || ARCH_OMAP2)]
      depends on [ARCH_OMAP1 || ARCH_OMAP2]
      inherited [!S390 && INPUT && INPUT_KEYBOARD && (ARCH_OMAP1 || ARCH_OMAP2)]
     }
     config KEYBOARD_TWL4030 tristate {
      prompt "TI TWL4030/TWL5030/TPS659x0 keypad support" if [!S390 && INPUT && INPUT_KEYBOARD && TWL4030_CORE]
      depends on [TWL4030_CORE]
      inherited [!S390 && INPUT && INPUT_KEYBOARD && TWL4030_CORE]
     }
     config KEYBOARD_TOSA tristate {
      prompt "Tosa keyboard" if [!S390 && INPUT && INPUT_KEYBOARD && MACH_TOSA]
      depends on [MACH_TOSA]
      default [y] if [!S390 && INPUT && INPUT_KEYBOARD && MACH_TOSA]
      inherited [!S390 && INPUT && INPUT_KEYBOARD && MACH_TOSA]
      config KEYBOARD_TOSA_USE_EXT_KEYCODES boolean {
       prompt "Tosa keyboard: use extended keycodes" if [!S390 && INPUT && INPUT_KEYBOARD && KEYBOARD_TOSA]
       depends on [KEYBOARD_TOSA]
       inherited [!S390 && INPUT && INPUT_KEYBOARD && KEYBOARD_TOSA]
      }
     }
     config KEYBOARD_XTKBD tristate {
      prompt "XT keyboard" if [!S390 && INPUT && INPUT_KEYBOARD]
      select SERIO if [!S390 && INPUT && INPUT_KEYBOARD]
      inherited [!S390 && INPUT && INPUT_KEYBOARD]
     }
     config KEYBOARD_W90P910 tristate {
      prompt "W90P910 Matrix Keypad support" if [!S390 && INPUT && INPUT_KEYBOARD && ARCH_W90X900]
      depends on [ARCH_W90X900]
      inherited [!S390 && INPUT && INPUT_KEYBOARD && ARCH_W90X900]
     }
    }
   }
   menuconfig INPUT_MOUSE boolean {
    prompt "Mice" if [!S390 && INPUT]
    default [y] if [!S390 && INPUT]
    inherited [!S390 && INPUT]
    if [!S390 && INPUT && INPUT_MOUSE] {
     config MOUSE_PS2 tristate {
      prompt "PS/2 mouse" if [!S390 && INPUT && INPUT_MOUSE]
      default [y] if [!S390 && INPUT && INPUT_MOUSE]
      select SERIO if [!S390 && INPUT && INPUT_MOUSE]
      select SERIO_LIBPS2 if [!S390 && INPUT && INPUT_MOUSE]
      select SERIO_I8042 if [!S390 && INPUT && INPUT_MOUSE && X86]
      select SERIO_GSCPS2 if [!S390 && INPUT && INPUT_MOUSE && GSC]
      inherited [!S390 && INPUT && INPUT_MOUSE]
      config MOUSE_PS2_ALPS boolean {
       prompt "ALPS PS/2 mouse protocol extension" if [!S390 && INPUT && INPUT_MOUSE && MOUSE_PS2 && EMBEDDED]
       default [y] if [!S390 && INPUT && INPUT_MOUSE && MOUSE_PS2]
       depends on [MOUSE_PS2]
       inherited [!S390 && INPUT && INPUT_MOUSE && MOUSE_PS2]
      }
      config MOUSE_PS2_LOGIPS2PP boolean {
       prompt "Logitech PS/2++ mouse protocol extension" if [!S390 && INPUT && INPUT_MOUSE && MOUSE_PS2 && EMBEDDED]
       default [y] if [!S390 && INPUT && INPUT_MOUSE && MOUSE_PS2]
       depends on [MOUSE_PS2]
       inherited [!S390 && INPUT && INPUT_MOUSE && MOUSE_PS2]
      }
      config MOUSE_PS2_SYNAPTICS boolean {
       prompt "Synaptics PS/2 mouse protocol extension" if [!S390 && INPUT && INPUT_MOUSE && MOUSE_PS2 && EMBEDDED]
       default [y] if [!S390 && INPUT && INPUT_MOUSE && MOUSE_PS2]
       depends on [MOUSE_PS2]
       inherited [!S390 && INPUT && INPUT_MOUSE && MOUSE_PS2]
      }
      config MOUSE_PS2_LIFEBOOK boolean {
       prompt "Fujitsu Lifebook PS/2 mouse protocol extension" if [!S390 && INPUT && INPUT_MOUSE && MOUSE_PS2 && X86 && DMI && EMBEDDED]
       default [y] if [!S390 && INPUT && INPUT_MOUSE && MOUSE_PS2 && X86 && DMI]
       depends on [MOUSE_PS2 && X86 && DMI]
       inherited [!S390 && INPUT && INPUT_MOUSE && MOUSE_PS2 && X86 && DMI]
      }
      config MOUSE_PS2_TRACKPOINT boolean {
       prompt "IBM Trackpoint PS/2 mouse protocol extension" if [!S390 && INPUT && INPUT_MOUSE && MOUSE_PS2 && EMBEDDED]
       default [y] if [!S390 && INPUT && INPUT_MOUSE && MOUSE_PS2]
       depends on [MOUSE_PS2]
       inherited [!S390 && INPUT && INPUT_MOUSE && MOUSE_PS2]
      }
      config MOUSE_PS2_ELANTECH boolean {
       prompt "Elantech PS/2 protocol extension" if [!S390 && INPUT && INPUT_MOUSE && MOUSE_PS2]
       depends on [MOUSE_PS2]
       inherited [!S390 && INPUT && INPUT_MOUSE && MOUSE_PS2]
      }
      config MOUSE_PS2_SENTELIC boolean {
       prompt "Sentelic Finger Sensing Pad PS/2 protocol extension" if [!S390 && INPUT && INPUT_MOUSE && MOUSE_PS2]
       depends on [MOUSE_PS2]
       inherited [!S390 && INPUT && INPUT_MOUSE && MOUSE_PS2]
      }
      config MOUSE_PS2_TOUCHKIT boolean {
       prompt "eGalax TouchKit PS/2 protocol extension" if [!S390 && INPUT && INPUT_MOUSE && MOUSE_PS2]
       depends on [MOUSE_PS2]
       inherited [!S390 && INPUT && INPUT_MOUSE && MOUSE_PS2]
      }
      config MOUSE_PS2_OLPC boolean {
       prompt "OLPC PS/2 mouse protocol extension" if [!S390 && INPUT && INPUT_MOUSE && MOUSE_PS2 && OLPC]
       depends on [MOUSE_PS2 && OLPC]
       inherited [!S390 && INPUT && INPUT_MOUSE && MOUSE_PS2 && OLPC]
      }
     }
     config MOUSE_SERIAL tristate {
      prompt "Serial mouse" if [!S390 && INPUT && INPUT_MOUSE]
      select SERIO if [!S390 && INPUT && INPUT_MOUSE]
      inherited [!S390 && INPUT && INPUT_MOUSE]
     }
     config MOUSE_APPLETOUCH tristate {
      prompt "Apple USB Touchpad support" if [!S390 && INPUT && INPUT_MOUSE && USB_ARCH_HAS_HCD]
      depends on [USB_ARCH_HAS_HCD]
      select USB if [!S390 && INPUT && INPUT_MOUSE && USB_ARCH_HAS_HCD]
      inherited [!S390 && INPUT && INPUT_MOUSE && USB_ARCH_HAS_HCD]
     }
     config MOUSE_BCM5974 tristate {
      prompt "Apple USB BCM5974 Multitouch trackpad support" if [!S390 && INPUT && INPUT_MOUSE && USB_ARCH_HAS_HCD]
      depends on [USB_ARCH_HAS_HCD]
      select USB if [!S390 && INPUT && INPUT_MOUSE && USB_ARCH_HAS_HCD]
      inherited [!S390 && INPUT && INPUT_MOUSE && USB_ARCH_HAS_HCD]
     }
     config MOUSE_INPORT tristate {
      prompt "InPort/MS/ATIXL busmouse" if [!S390 && INPUT && INPUT_MOUSE && ISA]
      depends on [ISA]
      inherited [!S390 && INPUT && INPUT_MOUSE && ISA]
      config MOUSE_ATIXL boolean {
       prompt "ATI XL variant" if [!S390 && INPUT && INPUT_MOUSE && MOUSE_INPORT]
       depends on [MOUSE_INPORT]
       inherited [!S390 && INPUT && INPUT_MOUSE && MOUSE_INPORT]
      }
     }
     config MOUSE_LOGIBM tristate {
      prompt "Logitech busmouse" if [!S390 && INPUT && INPUT_MOUSE && ISA]
      depends on [ISA]
      inherited [!S390 && INPUT && INPUT_MOUSE && ISA]
     }
     config MOUSE_PC110PAD tristate {
      prompt "IBM PC110 touchpad" if [!S390 && INPUT && INPUT_MOUSE && ISA]
      depends on [ISA]
      inherited [!S390 && INPUT && INPUT_MOUSE && ISA]
     }
     config MOUSE_AMIGA tristate {
      prompt "Amiga mouse" if [!S390 && INPUT && INPUT_MOUSE && AMIGA]
      depends on [AMIGA]
      inherited [!S390 && INPUT && INPUT_MOUSE && AMIGA]
     }
     config MOUSE_ATARI tristate {
      prompt "Atari mouse" if [!S390 && INPUT && INPUT_MOUSE && ATARI]
      depends on [ATARI]
      select ATARI_KBD_CORE if [!S390 && INPUT && INPUT_MOUSE && ATARI]
      inherited [!S390 && INPUT && INPUT_MOUSE && ATARI]
     }
     config MOUSE_RISCPC tristate {
      prompt "Acorn RiscPC mouse" if [!S390 && INPUT && INPUT_MOUSE && ARCH_ACORN]
      depends on [ARCH_ACORN]
      inherited [!S390 && INPUT && INPUT_MOUSE && ARCH_ACORN]
     }
     config MOUSE_VSXXXAA tristate {
      prompt "DEC VSXXX-AA/GA mouse and VSXXX-AB tablet" if [!S390 && INPUT && INPUT_MOUSE]
      select SERIO if [!S390 && INPUT && INPUT_MOUSE]
      inherited [!S390 && INPUT && INPUT_MOUSE]
     }
     config MOUSE_GPIO tristate {
      prompt "GPIO mouse" if [!S390 && INPUT && INPUT_MOUSE && GENERIC_GPIO]
      depends on [GENERIC_GPIO]
      select INPUT_POLLDEV if [!S390 && INPUT && INPUT_MOUSE && GENERIC_GPIO]
      inherited [!S390 && INPUT && INPUT_MOUSE && GENERIC_GPIO]
     }
     config MOUSE_PXA930_TRKBALL tristate {
      prompt "PXA930 Trackball mouse" if [!S390 && INPUT && INPUT_MOUSE && (CPU_PXA930 || CPU_PXA935)]
      depends on [CPU_PXA930 || CPU_PXA935]
      inherited [!S390 && INPUT && INPUT_MOUSE && (CPU_PXA930 || CPU_PXA935)]
     }
     config MOUSE_MAPLE tristate {
      prompt "Maple mouse (for the Dreamcast)" if [!S390 && INPUT && INPUT_MOUSE && MAPLE]
      depends on [MAPLE]
      inherited [!S390 && INPUT && INPUT_MOUSE && MAPLE]
     }
     config MOUSE_SYNAPTICS_I2C tristate {
      prompt "Synaptics I2C Touchpad support" if [!S390 && INPUT && INPUT_MOUSE && I2C]
      depends on [I2C]
      inherited [!S390 && INPUT && INPUT_MOUSE && I2C]
     }
    }
   }
   menuconfig INPUT_JOYSTICK boolean {
    prompt "Joysticks/Gamepads" if [!S390 && INPUT]
    inherited [!S390 && INPUT]
    if [!S390 && INPUT && INPUT_JOYSTICK] {
     config JOYSTICK_ANALOG tristate {
      prompt "Classic PC analog joysticks and gamepads" if [!S390 && INPUT && INPUT_JOYSTICK]
      select GAMEPORT if [!S390 && INPUT && INPUT_JOYSTICK]
      inherited [!S390 && INPUT && INPUT_JOYSTICK]
     }
     config JOYSTICK_A3D tristate {
      prompt "Assassin 3D and MadCatz Panther devices" if [!S390 && INPUT && INPUT_JOYSTICK]
      select GAMEPORT if [!S390 && INPUT && INPUT_JOYSTICK]
      inherited [!S390 && INPUT && INPUT_JOYSTICK]
     }
     config JOYSTICK_ADI tristate {
      prompt "Logitech ADI digital joysticks and gamepads" if [!S390 && INPUT && INPUT_JOYSTICK]
      select GAMEPORT if [!S390 && INPUT && INPUT_JOYSTICK]
      inherited [!S390 && INPUT && INPUT_JOYSTICK]
     }
     config JOYSTICK_COBRA tristate {
      prompt "Creative Labs Blaster Cobra gamepad" if [!S390 && INPUT && INPUT_JOYSTICK]
      select GAMEPORT if [!S390 && INPUT && INPUT_JOYSTICK]
      inherited [!S390 && INPUT && INPUT_JOYSTICK]
     }
     config JOYSTICK_GF2K tristate {
      prompt "Genius Flight2000 Digital joysticks and gamepads" if [!S390 && INPUT && INPUT_JOYSTICK]
      select GAMEPORT if [!S390 && INPUT && INPUT_JOYSTICK]
      inherited [!S390 && INPUT && INPUT_JOYSTICK]
     }
     config JOYSTICK_GRIP tristate {
      prompt "Gravis GrIP joysticks and gamepads" if [!S390 && INPUT && INPUT_JOYSTICK]
      select GAMEPORT if [!S390 && INPUT && INPUT_JOYSTICK]
      inherited [!S390 && INPUT && INPUT_JOYSTICK]
     }
     config JOYSTICK_GRIP_MP tristate {
      prompt "Gravis GrIP MultiPort" if [!S390 && INPUT && INPUT_JOYSTICK]
      select GAMEPORT if [!S390 && INPUT && INPUT_JOYSTICK]
      inherited [!S390 && INPUT && INPUT_JOYSTICK]
     }
     config JOYSTICK_GUILLEMOT tristate {
      prompt "Guillemot joysticks and gamepads" if [!S390 && INPUT && INPUT_JOYSTICK]
      select GAMEPORT if [!S390 && INPUT && INPUT_JOYSTICK]
      inherited [!S390 && INPUT && INPUT_JOYSTICK]
     }
     config JOYSTICK_INTERACT tristate {
      prompt "InterAct digital joysticks and gamepads" if [!S390 && INPUT && INPUT_JOYSTICK]
      select GAMEPORT if [!S390 && INPUT && INPUT_JOYSTICK]
      inherited [!S390 && INPUT && INPUT_JOYSTICK]
     }
     config JOYSTICK_SIDEWINDER tristate {
      prompt "Microsoft SideWinder digital joysticks and gamepads" if [!S390 && INPUT && INPUT_JOYSTICK]
      select GAMEPORT if [!S390 && INPUT && INPUT_JOYSTICK]
      inherited [!S390 && INPUT && INPUT_JOYSTICK]
     }
     config JOYSTICK_TMDC tristate {
      prompt "ThrustMaster DirectConnect joysticks and gamepads" if [!S390 && INPUT && INPUT_JOYSTICK]
      select GAMEPORT if [!S390 && INPUT && INPUT_JOYSTICK]
      inherited [!S390 && INPUT && INPUT_JOYSTICK]
     }
     config JOYSTICK_IFORCE tristate {
      prompt "I-Force devices" if [!S390 && INPUT && INPUT_JOYSTICK]
      depends on [INPUT && INPUT_JOYSTICK]
      inherited [!S390 && INPUT && INPUT_JOYSTICK]
      config JOYSTICK_IFORCE_USB boolean {
       prompt "I-Force USB joysticks and wheels" if [!S390 && INPUT && INPUT_JOYSTICK && JOYSTICK_IFORCE && (JOYSTICK_IFORCE="m" || USB="y") && USB]
       depends on [JOYSTICK_IFORCE && (JOYSTICK_IFORCE="m" || USB="y") && USB]
       inherited [!S390 && INPUT && INPUT_JOYSTICK && JOYSTICK_IFORCE && (JOYSTICK_IFORCE="m" || USB="y") && USB]
      }
      config JOYSTICK_IFORCE_232 boolean {
       prompt "I-Force Serial joysticks and wheels" if [!S390 && INPUT && INPUT_JOYSTICK && JOYSTICK_IFORCE && (JOYSTICK_IFORCE="m" || SERIO="y") && SERIO]
       depends on [JOYSTICK_IFORCE && (JOYSTICK_IFORCE="m" || SERIO="y") && SERIO]
       inherited [!S390 && INPUT && INPUT_JOYSTICK && JOYSTICK_IFORCE && (JOYSTICK_IFORCE="m" || SERIO="y") && SERIO]
      }
     }
     config JOYSTICK_WARRIOR tristate {
      prompt "Logitech WingMan Warrior joystick" if [!S390 && INPUT && INPUT_JOYSTICK]
      select SERIO if [!S390 && INPUT && INPUT_JOYSTICK]
      inherited [!S390 && INPUT && INPUT_JOYSTICK]
     }
     config JOYSTICK_MAGELLAN tristate {
      prompt "LogiCad3d Magellan/SpaceMouse 6dof controllers" if [!S390 && INPUT && INPUT_JOYSTICK]
      select SERIO if [!S390 && INPUT && INPUT_JOYSTICK]
      inherited [!S390 && INPUT && INPUT_JOYSTICK]
     }
     config JOYSTICK_SPACEORB tristate {
      prompt "SpaceTec SpaceOrb/Avenger 6dof controllers" if [!S390 && INPUT && INPUT_JOYSTICK]
      select SERIO if [!S390 && INPUT && INPUT_JOYSTICK]
      inherited [!S390 && INPUT && INPUT_JOYSTICK]
     }
     config JOYSTICK_SPACEBALL tristate {
      prompt "SpaceTec SpaceBall 6dof controllers" if [!S390 && INPUT && INPUT_JOYSTICK]
      select SERIO if [!S390 && INPUT && INPUT_JOYSTICK]
      inherited [!S390 && INPUT && INPUT_JOYSTICK]
     }
     config JOYSTICK_STINGER tristate {
      prompt "Gravis Stinger gamepad" if [!S390 && INPUT && INPUT_JOYSTICK]
      select SERIO if [!S390 && INPUT && INPUT_JOYSTICK]
      inherited [!S390 && INPUT && INPUT_JOYSTICK]
     }
     config JOYSTICK_TWIDJOY tristate {
      prompt "Twiddler as a joystick" if [!S390 && INPUT && INPUT_JOYSTICK]
      select SERIO if [!S390 && INPUT && INPUT_JOYSTICK]
      inherited [!S390 && INPUT && INPUT_JOYSTICK]
     }
     config JOYSTICK_ZHENHUA tristate {
      prompt "5-byte Zhenhua RC transmitter" if [!S390 && INPUT && INPUT_JOYSTICK]
      select SERIO if [!S390 && INPUT && INPUT_JOYSTICK]
      inherited [!S390 && INPUT && INPUT_JOYSTICK]
     }
     config JOYSTICK_DB9 tristate {
      prompt "Multisystem, Sega Genesis, Saturn joysticks and gamepads" if [!S390 && INPUT && INPUT_JOYSTICK && PARPORT]
      depends on [PARPORT]
      inherited [!S390 && INPUT && INPUT_JOYSTICK && PARPORT]
     }
     config JOYSTICK_GAMECON tristate {
      prompt "Multisystem, NES, SNES, N64, PSX joysticks and gamepads" if [!S390 && INPUT && INPUT_JOYSTICK && PARPORT]
      depends on [PARPORT]
      inherited [!S390 && INPUT && INPUT_JOYSTICK && PARPORT]
     }
     config JOYSTICK_TURBOGRAFX tristate {
      prompt "Multisystem joysticks via TurboGraFX device" if [!S390 && INPUT && INPUT_JOYSTICK && PARPORT]
      depends on [PARPORT]
      inherited [!S390 && INPUT && INPUT_JOYSTICK && PARPORT]
     }
     config JOYSTICK_AMIGA tristate {
      prompt "Amiga joysticks" if [!S390 && INPUT && INPUT_JOYSTICK && AMIGA]
      depends on [AMIGA]
      inherited [!S390 && INPUT && INPUT_JOYSTICK && AMIGA]
     }
     config JOYSTICK_JOYDUMP tristate {
      prompt "Gameport data dumper" if [!S390 && INPUT && INPUT_JOYSTICK]
      select GAMEPORT if [!S390 && INPUT && INPUT_JOYSTICK]
      inherited [!S390 && INPUT && INPUT_JOYSTICK]
     }
     config JOYSTICK_XPAD tristate {
      prompt "X-Box gamepad support" if [!S390 && INPUT && INPUT_JOYSTICK && USB_ARCH_HAS_HCD]
      depends on [USB_ARCH_HAS_HCD]
      select USB if [!S390 && INPUT && INPUT_JOYSTICK && USB_ARCH_HAS_HCD]
      inherited [!S390 && INPUT && INPUT_JOYSTICK && USB_ARCH_HAS_HCD]
      config JOYSTICK_XPAD_FF boolean {
       prompt "X-Box gamepad rumble support" if [!S390 && INPUT_JOYSTICK && JOYSTICK_XPAD && INPUT]
       depends on [JOYSTICK_XPAD && INPUT]
       select INPUT_FF_MEMLESS if [!S390 && INPUT_JOYSTICK && JOYSTICK_XPAD && INPUT]
       inherited [!S390 && INPUT_JOYSTICK && JOYSTICK_XPAD && INPUT]
      }
      config JOYSTICK_XPAD_LEDS boolean {
       prompt "LED Support for Xbox360 controller 'BigX' LED" if [!S390 && INPUT && INPUT_JOYSTICK && JOYSTICK_XPAD && (LEDS_CLASS="y" || LEDS_CLASS="JOYSTICK_XPAD")]
       depends on [JOYSTICK_XPAD && (LEDS_CLASS="y" || LEDS_CLASS="JOYSTICK_XPAD")]
       inherited [!S390 && INPUT && INPUT_JOYSTICK && JOYSTICK_XPAD && (LEDS_CLASS="y" || LEDS_CLASS="JOYSTICK_XPAD")]
      }
     }
     config JOYSTICK_WALKERA0701 tristate {
      prompt "Walkera WK-0701 RC transmitter" if [!S390 && INPUT && INPUT_JOYSTICK && HIGH_RES_TIMERS && PARPORT]
      depends on [HIGH_RES_TIMERS && PARPORT]
      inherited [!S390 && INPUT && INPUT_JOYSTICK && HIGH_RES_TIMERS && PARPORT]
     }
     config JOYSTICK_MAPLE tristate {
      prompt "Dreamcast control pad" if [!S390 && INPUT && INPUT_JOYSTICK && MAPLE]
      depends on [MAPLE]
      inherited [!S390 && INPUT && INPUT_JOYSTICK && MAPLE]
     }
    }
   }
   menuconfig INPUT_TABLET boolean {
    prompt "Tablets" if [!S390 && INPUT]
    inherited [!S390 && INPUT]
    if [!S390 && INPUT && INPUT_TABLET] {
     config TABLET_USB_ACECAD tristate {
      prompt "Acecad Flair tablet support (USB)" if [!S390 && INPUT && INPUT_TABLET && USB_ARCH_HAS_HCD]
      depends on [USB_ARCH_HAS_HCD]
      select USB if [!S390 && INPUT && INPUT_TABLET && USB_ARCH_HAS_HCD]
      inherited [!S390 && INPUT && INPUT_TABLET && USB_ARCH_HAS_HCD]
     }
     config TABLET_USB_AIPTEK tristate {
      prompt "Aiptek 6000U/8000U and Genius G_PEN tablet support (USB)" if [!S390 && INPUT && INPUT_TABLET && USB_ARCH_HAS_HCD]
      depends on [USB_ARCH_HAS_HCD]
      select USB if [!S390 && INPUT && INPUT_TABLET && USB_ARCH_HAS_HCD]
      inherited [!S390 && INPUT && INPUT_TABLET && USB_ARCH_HAS_HCD]
     }
     config TABLET_USB_GTCO tristate {
      prompt "GTCO CalComp/InterWrite USB Support" if [!S390 && INPUT_TABLET && USB && INPUT]
      depends on [USB && INPUT]
      inherited [!S390 && INPUT_TABLET && USB && INPUT]
     }
     config TABLET_USB_KBTAB tristate {
      prompt "KB Gear JamStudio tablet support (USB)" if [!S390 && INPUT && INPUT_TABLET && USB_ARCH_HAS_HCD]
      depends on [USB_ARCH_HAS_HCD]
      select USB if [!S390 && INPUT && INPUT_TABLET && USB_ARCH_HAS_HCD]
      inherited [!S390 && INPUT && INPUT_TABLET && USB_ARCH_HAS_HCD]
     }
     config TABLET_USB_WACOM tristate {
      prompt "Wacom Intuos/Graphire tablet support (USB)" if [!S390 && INPUT && INPUT_TABLET && USB_ARCH_HAS_HCD]
      depends on [USB_ARCH_HAS_HCD]
      select USB if [!S390 && INPUT && INPUT_TABLET && USB_ARCH_HAS_HCD]
      inherited [!S390 && INPUT && INPUT_TABLET && USB_ARCH_HAS_HCD]
     }
    }
   }
   menuconfig INPUT_TOUCHSCREEN boolean {
    prompt "Touchscreens" if [!S390 && INPUT]
    inherited [!S390 && INPUT]
    if [!S390 && INPUT && INPUT_TOUCHSCREEN] {
     config TOUCHSCREEN_ADS7846 tristate {
      prompt "ADS7846/TSC2046 and ADS7843 based touchscreens" if [!S390 && INPUT && INPUT_TOUCHSCREEN && SPI_MASTER && (HWMON="n" || HWMON)]
      depends on [SPI_MASTER]
      depends on [HWMON="n" || HWMON]
      inherited [!S390 && INPUT && INPUT_TOUCHSCREEN && SPI_MASTER && (HWMON="n" || HWMON)]
     }
     config TOUCHSCREEN_AD7877 tristate {
      prompt "AD7877 based touchscreens" if [!S390 && INPUT && INPUT_TOUCHSCREEN && SPI_MASTER]
      depends on [SPI_MASTER]
      inherited [!S390 && INPUT && INPUT_TOUCHSCREEN && SPI_MASTER]
     }
     config TOUCHSCREEN_AD7879_I2C tristate {
      prompt "AD7879 based touchscreens: AD7879-1 I2C Interface" if [!S390 && INPUT && INPUT_TOUCHSCREEN && I2C]
      depends on [I2C]
      select TOUCHSCREEN_AD7879 if [!S390 && INPUT && INPUT_TOUCHSCREEN && I2C]
      inherited [!S390 && INPUT && INPUT_TOUCHSCREEN && I2C]
     }
     config TOUCHSCREEN_AD7879_SPI tristate {
      prompt "AD7879 based touchscreens: AD7879 SPI Interface" if [!S390 && INPUT && INPUT_TOUCHSCREEN && SPI_MASTER && TOUCHSCREEN_AD7879_I2C="n"]
      depends on [SPI_MASTER && TOUCHSCREEN_AD7879_I2C="n"]
      select TOUCHSCREEN_AD7879 if [!S390 && INPUT && INPUT_TOUCHSCREEN && SPI_MASTER && TOUCHSCREEN_AD7879_I2C="n"]
      inherited [!S390 && INPUT && INPUT_TOUCHSCREEN && SPI_MASTER && TOUCHSCREEN_AD7879_I2C="n"]
     }
     config TOUCHSCREEN_AD7879 tristate {
      default [n] if [!S390 && INPUT && INPUT_TOUCHSCREEN]
      inherited [!S390 && INPUT && INPUT_TOUCHSCREEN]
     }
     config TOUCHSCREEN_BITSY tristate {
      prompt "Compaq iPAQ H3600 (Bitsy) touchscreen" if [!S390 && INPUT && INPUT_TOUCHSCREEN && SA1100_BITSY]
      depends on [SA1100_BITSY]
      select SERIO if [!S390 && INPUT && INPUT_TOUCHSCREEN && SA1100_BITSY]
      inherited [!S390 && INPUT && INPUT_TOUCHSCREEN && SA1100_BITSY]
     }
     config TOUCHSCREEN_CORGI tristate {
      prompt "SharpSL (Corgi and Spitz series) touchscreen driver (DEPRECATED)" if [!S390 && INPUT && INPUT_TOUCHSCREEN && PXA_SHARPSL]
      depends on [PXA_SHARPSL]
      select CORGI_SSP_DEPRECATED if [!S390 && INPUT && INPUT_TOUCHSCREEN && PXA_SHARPSL]
      default [y] if [!S390 && INPUT && INPUT_TOUCHSCREEN && PXA_SHARPSL]
      inherited [!S390 && INPUT && INPUT_TOUCHSCREEN && PXA_SHARPSL]
     }
     config TOUCHSCREEN_DA9034 tristate {
      prompt "Touchscreen support for Dialog Semiconductor DA9034" if [!S390 && INPUT && INPUT_TOUCHSCREEN && PMIC_DA903X]
      depends on [PMIC_DA903X]
      default [y] if [!S390 && INPUT && INPUT_TOUCHSCREEN && PMIC_DA903X]
      inherited [!S390 && INPUT && INPUT_TOUCHSCREEN && PMIC_DA903X]
     }
     config TOUCHSCREEN_DYNAPRO tristate {
      prompt "Dynapro serial touchscreen" if [!S390 && INPUT && INPUT_TOUCHSCREEN]
      select SERIO if [!S390 && INPUT && INPUT_TOUCHSCREEN]
      inherited [!S390 && INPUT && INPUT_TOUCHSCREEN]
     }
     config TOUCHSCREEN_EETI tristate {
      prompt "EETI touchscreen panel support" if [!S390 && INPUT && INPUT_TOUCHSCREEN && I2C]
      depends on [I2C]
      inherited [!S390 && INPUT && INPUT_TOUCHSCREEN && I2C]
     }
     config TOUCHSCREEN_FUJITSU tristate {
      prompt "Fujitsu serial touchscreen" if [!S390 && INPUT && INPUT_TOUCHSCREEN]
      select SERIO if [!S390 && INPUT && INPUT_TOUCHSCREEN]
      inherited [!S390 && INPUT && INPUT_TOUCHSCREEN]
     }
     config TOUCHSCREEN_S3C2410 tristate {
      prompt "Samsung S3C2410 touchscreen input driver" if [!S390 && INPUT && INPUT_TOUCHSCREEN && ARCH_S3C2410]
      depends on [ARCH_S3C2410]
      select S3C24XX_ADC if [!S390 && INPUT && INPUT_TOUCHSCREEN && ARCH_S3C2410]
      inherited [!S390 && INPUT && INPUT_TOUCHSCREEN && ARCH_S3C2410]
     }
     config TOUCHSCREEN_GUNZE tristate {
      prompt "Gunze AHL-51S touchscreen" if [!S390 && INPUT && INPUT_TOUCHSCREEN]
      select SERIO if [!S390 && INPUT && INPUT_TOUCHSCREEN]
      inherited [!S390 && INPUT && INPUT_TOUCHSCREEN]
     }
     config TOUCHSCREEN_ELO tristate {
      prompt "Elo serial touchscreens" if [!S390 && INPUT && INPUT_TOUCHSCREEN]
      select SERIO if [!S390 && INPUT && INPUT_TOUCHSCREEN]
      inherited [!S390 && INPUT && INPUT_TOUCHSCREEN]
     }
     config TOUCHSCREEN_WACOM_W8001 tristate {
      prompt "Wacom W8001 penabled serial touchscreen" if [!S390 && INPUT && INPUT_TOUCHSCREEN]
      select SERIO if [!S390 && INPUT && INPUT_TOUCHSCREEN]
      inherited [!S390 && INPUT && INPUT_TOUCHSCREEN]
     }
     config TOUCHSCREEN_MCS5000 tristate {
      prompt "MELFAS MCS-5000 touchscreen" if [!S390 && INPUT && INPUT_TOUCHSCREEN && I2C]
      depends on [I2C]
      inherited [!S390 && INPUT && INPUT_TOUCHSCREEN && I2C]
     }
     config TOUCHSCREEN_MTOUCH tristate {
      prompt "MicroTouch serial touchscreens" if [!S390 && INPUT && INPUT_TOUCHSCREEN]
      select SERIO if [!S390 && INPUT && INPUT_TOUCHSCREEN]
      inherited [!S390 && INPUT && INPUT_TOUCHSCREEN]
     }
     config TOUCHSCREEN_INEXIO tristate {
      prompt "iNexio serial touchscreens" if [!S390 && INPUT && INPUT_TOUCHSCREEN]
      select SERIO if [!S390 && INPUT && INPUT_TOUCHSCREEN]
      inherited [!S390 && INPUT && INPUT_TOUCHSCREEN]
     }
     config TOUCHSCREEN_MK712 tristate {
      prompt "ICS MicroClock MK712 touchscreen" if [!S390 && INPUT && INPUT_TOUCHSCREEN]
      inherited [!S390 && INPUT && INPUT_TOUCHSCREEN]
     }
     config TOUCHSCREEN_HP600 tristate {
      prompt "HP Jornada 6xx touchscreen" if [!S390 && INPUT && INPUT_TOUCHSCREEN && SH_HP6XX && SH_ADC]
      depends on [SH_HP6XX && SH_ADC]
      inherited [!S390 && INPUT && INPUT_TOUCHSCREEN && SH_HP6XX && SH_ADC]
     }
     config TOUCHSCREEN_HP7XX tristate {
      prompt "HP Jornada 7xx touchscreen" if [!S390 && INPUT && INPUT_TOUCHSCREEN && SA1100_JORNADA720_SSP]
      depends on [SA1100_JORNADA720_SSP]
      inherited [!S390 && INPUT && INPUT_TOUCHSCREEN && SA1100_JORNADA720_SSP]
     }
     config TOUCHSCREEN_HTCPEN tristate {
      prompt "HTC Shift X9500 touchscreen" if [!S390 && INPUT && INPUT_TOUCHSCREEN && ISA]
      depends on [ISA]
      inherited [!S390 && INPUT && INPUT_TOUCHSCREEN && ISA]
     }
     config TOUCHSCREEN_PENMOUNT tristate {
      prompt "Penmount serial touchscreen" if [!S390 && INPUT && INPUT_TOUCHSCREEN]
      select SERIO if [!S390 && INPUT && INPUT_TOUCHSCREEN]
      inherited [!S390 && INPUT && INPUT_TOUCHSCREEN]
     }
     config TOUCHSCREEN_MIGOR tristate {
      prompt "Renesas MIGO-R touchscreen" if [!S390 && INPUT && INPUT_TOUCHSCREEN && SH_MIGOR && I2C]
      depends on [SH_MIGOR && I2C]
      inherited [!S390 && INPUT && INPUT_TOUCHSCREEN && SH_MIGOR && I2C]
     }
     config TOUCHSCREEN_TOUCHRIGHT tristate {
      prompt "Touchright serial touchscreen" if [!S390 && INPUT && INPUT_TOUCHSCREEN]
      select SERIO if [!S390 && INPUT && INPUT_TOUCHSCREEN]
      inherited [!S390 && INPUT && INPUT_TOUCHSCREEN]
     }
     config TOUCHSCREEN_TOUCHWIN tristate {
      prompt "Touchwin serial touchscreen" if [!S390 && INPUT && INPUT_TOUCHSCREEN]
      select SERIO if [!S390 && INPUT && INPUT_TOUCHSCREEN]
      inherited [!S390 && INPUT && INPUT_TOUCHSCREEN]
     }
     config TOUCHSCREEN_ATMEL_TSADCC tristate {
      prompt "Atmel Touchscreen Interface" if [!S390 && INPUT && INPUT_TOUCHSCREEN && (ARCH_AT91SAM9RL || ARCH_AT91SAM9G45)]
      depends on [ARCH_AT91SAM9RL || ARCH_AT91SAM9G45]
      inherited [!S390 && INPUT && INPUT_TOUCHSCREEN && (ARCH_AT91SAM9RL || ARCH_AT91SAM9G45)]
     }
     config TOUCHSCREEN_UCB1400 tristate {
      prompt "Philips UCB1400 touchscreen" if [!S390 && INPUT && INPUT_TOUCHSCREEN && AC97_BUS && UCB1400_CORE]
      depends on [AC97_BUS]
      depends on [UCB1400_CORE]
      inherited [!S390 && INPUT && INPUT_TOUCHSCREEN && AC97_BUS && UCB1400_CORE]
     }
     config TOUCHSCREEN_WM97XX tristate {
      prompt "Support for WM97xx AC97 touchscreen controllers" if [!S390 && INPUT && INPUT_TOUCHSCREEN && AC97_BUS]
      depends on [AC97_BUS]
      inherited [!S390 && INPUT && INPUT_TOUCHSCREEN && AC97_BUS]
      config TOUCHSCREEN_WM9705 boolean {
       prompt "WM9705 Touchscreen interface support" if [!S390 && INPUT && INPUT_TOUCHSCREEN && TOUCHSCREEN_WM97XX]
       depends on [TOUCHSCREEN_WM97XX]
       default [y] if [!S390 && INPUT && INPUT_TOUCHSCREEN && TOUCHSCREEN_WM97XX]
       inherited [!S390 && INPUT && INPUT_TOUCHSCREEN && TOUCHSCREEN_WM97XX]
      }
      config TOUCHSCREEN_WM9712 boolean {
       prompt "WM9712 Touchscreen interface support" if [!S390 && INPUT && INPUT_TOUCHSCREEN && TOUCHSCREEN_WM97XX]
       depends on [TOUCHSCREEN_WM97XX]
       default [y] if [!S390 && INPUT && INPUT_TOUCHSCREEN && TOUCHSCREEN_WM97XX]
       inherited [!S390 && INPUT && INPUT_TOUCHSCREEN && TOUCHSCREEN_WM97XX]
      }
      config TOUCHSCREEN_WM9713 boolean {
       prompt "WM9713 Touchscreen interface support" if [!S390 && INPUT && INPUT_TOUCHSCREEN && TOUCHSCREEN_WM97XX]
       depends on [TOUCHSCREEN_WM97XX]
       default [y] if [!S390 && INPUT && INPUT_TOUCHSCREEN && TOUCHSCREEN_WM97XX]
       inherited [!S390 && INPUT && INPUT_TOUCHSCREEN && TOUCHSCREEN_WM97XX]
      }
      config TOUCHSCREEN_WM97XX_ATMEL tristate {
       prompt "WM97xx Atmel accelerated touch" if [!S390 && INPUT && INPUT_TOUCHSCREEN && TOUCHSCREEN_WM97XX && (AVR32 || ARCH_AT91)]
       depends on [TOUCHSCREEN_WM97XX && (AVR32 || ARCH_AT91)]
       inherited [!S390 && INPUT && INPUT_TOUCHSCREEN && TOUCHSCREEN_WM97XX && (AVR32 || ARCH_AT91)]
      }
      config TOUCHSCREEN_WM97XX_MAINSTONE tristate {
       prompt "WM97xx Mainstone/Palm accelerated touch" if [!S390 && INPUT && INPUT_TOUCHSCREEN && TOUCHSCREEN_WM97XX && ARCH_PXA]
       depends on [TOUCHSCREEN_WM97XX && ARCH_PXA]
       inherited [!S390 && INPUT && INPUT_TOUCHSCREEN && TOUCHSCREEN_WM97XX && ARCH_PXA]
      }
      config TOUCHSCREEN_WM97XX_ZYLONITE tristate {
       prompt "Zylonite accelerated touch" if [!S390 && INPUT && INPUT_TOUCHSCREEN && TOUCHSCREEN_WM97XX && MACH_ZYLONITE]
       depends on [TOUCHSCREEN_WM97XX && MACH_ZYLONITE]
       select TOUCHSCREEN_WM9713 if [!S390 && INPUT && INPUT_TOUCHSCREEN && TOUCHSCREEN_WM97XX && MACH_ZYLONITE]
       inherited [!S390 && INPUT && INPUT_TOUCHSCREEN && TOUCHSCREEN_WM97XX && MACH_ZYLONITE]
      }
     }
     config TOUCHSCREEN_USB_COMPOSITE tristate {
      prompt "USB Touchscreen Driver" if [!S390 && INPUT && INPUT_TOUCHSCREEN && USB_ARCH_HAS_HCD]
      depends on [USB_ARCH_HAS_HCD]
      select USB if [!S390 && INPUT && INPUT_TOUCHSCREEN && USB_ARCH_HAS_HCD]
      inherited [!S390 && INPUT && INPUT_TOUCHSCREEN && USB_ARCH_HAS_HCD]
     }
     config TOUCHSCREEN_MC13783 tristate {
      prompt "Freescale MC13783 touchscreen input driver" if [!S390 && INPUT && INPUT_TOUCHSCREEN && MFD_MC13783]
      depends on [MFD_MC13783]
      inherited [!S390 && INPUT && INPUT_TOUCHSCREEN && MFD_MC13783]
     }
     config TOUCHSCREEN_USB_EGALAX boolean {
      default [y] if [!S390 && INPUT && INPUT_TOUCHSCREEN && TOUCHSCREEN_USB_COMPOSITE]
      prompt "eGalax, eTurboTouch CT-410/510/700 device support" if [!S390 && INPUT && INPUT_TOUCHSCREEN && TOUCHSCREEN_USB_COMPOSITE && EMBEDDED]
      depends on [TOUCHSCREEN_USB_COMPOSITE]
      inherited [!S390 && INPUT && INPUT_TOUCHSCREEN && TOUCHSCREEN_USB_COMPOSITE]
     }
     config TOUCHSCREEN_USB_PANJIT boolean {
      default [y] if [!S390 && INPUT && INPUT_TOUCHSCREEN && TOUCHSCREEN_USB_COMPOSITE]
      prompt "PanJit device support" if [!S390 && INPUT && INPUT_TOUCHSCREEN && TOUCHSCREEN_USB_COMPOSITE && EMBEDDED]
      depends on [TOUCHSCREEN_USB_COMPOSITE]
      inherited [!S390 && INPUT && INPUT_TOUCHSCREEN && TOUCHSCREEN_USB_COMPOSITE]
     }
     config TOUCHSCREEN_USB_3M boolean {
      default [y] if [!S390 && INPUT && INPUT_TOUCHSCREEN && TOUCHSCREEN_USB_COMPOSITE]
      prompt "3M/Microtouch EX II series device support" if [!S390 && INPUT && INPUT_TOUCHSCREEN && TOUCHSCREEN_USB_COMPOSITE && EMBEDDED]
      depends on [TOUCHSCREEN_USB_COMPOSITE]
      inherited [!S390 && INPUT && INPUT_TOUCHSCREEN && TOUCHSCREEN_USB_COMPOSITE]
     }
     config TOUCHSCREEN_USB_ITM boolean {
      default [y] if [!S390 && INPUT && INPUT_TOUCHSCREEN && TOUCHSCREEN_USB_COMPOSITE]
      prompt "ITM device support" if [!S390 && INPUT && INPUT_TOUCHSCREEN && TOUCHSCREEN_USB_COMPOSITE && EMBEDDED]
      depends on [TOUCHSCREEN_USB_COMPOSITE]
      inherited [!S390 && INPUT && INPUT_TOUCHSCREEN && TOUCHSCREEN_USB_COMPOSITE]
     }
     config TOUCHSCREEN_USB_ETURBO boolean {
      default [y] if [!S390 && INPUT && INPUT_TOUCHSCREEN && TOUCHSCREEN_USB_COMPOSITE]
      prompt "eTurboTouch (non-eGalax compatible) device support" if [!S390 && INPUT && INPUT_TOUCHSCREEN && TOUCHSCREEN_USB_COMPOSITE && EMBEDDED]
      depends on [TOUCHSCREEN_USB_COMPOSITE]
      inherited [!S390 && INPUT && INPUT_TOUCHSCREEN && TOUCHSCREEN_USB_COMPOSITE]
     }
     config TOUCHSCREEN_USB_GUNZE boolean {
      default [y] if [!S390 && INPUT && INPUT_TOUCHSCREEN && TOUCHSCREEN_USB_COMPOSITE]
      prompt "Gunze AHL61 device support" if [!S390 && INPUT && INPUT_TOUCHSCREEN && TOUCHSCREEN_USB_COMPOSITE && EMBEDDED]
      depends on [TOUCHSCREEN_USB_COMPOSITE]
      inherited [!S390 && INPUT && INPUT_TOUCHSCREEN && TOUCHSCREEN_USB_COMPOSITE]
     }
     config TOUCHSCREEN_USB_DMC_TSC10 boolean {
      default [y] if [!S390 && INPUT && INPUT_TOUCHSCREEN && TOUCHSCREEN_USB_COMPOSITE]
      prompt "DMC TSC-10/25 device support" if [!S390 && INPUT && INPUT_TOUCHSCREEN && TOUCHSCREEN_USB_COMPOSITE && EMBEDDED]
      depends on [TOUCHSCREEN_USB_COMPOSITE]
      inherited [!S390 && INPUT && INPUT_TOUCHSCREEN && TOUCHSCREEN_USB_COMPOSITE]
     }
     config TOUCHSCREEN_USB_IRTOUCH boolean {
      default [y] if [!S390 && INPUT && INPUT_TOUCHSCREEN && TOUCHSCREEN_USB_COMPOSITE]
      prompt "IRTOUCHSYSTEMS/UNITOP device support" if [!S390 && INPUT && INPUT_TOUCHSCREEN && TOUCHSCREEN_USB_COMPOSITE && EMBEDDED]
      depends on [TOUCHSCREEN_USB_COMPOSITE]
      inherited [!S390 && INPUT && INPUT_TOUCHSCREEN && TOUCHSCREEN_USB_COMPOSITE]
     }
     config TOUCHSCREEN_USB_IDEALTEK boolean {
      default [y] if [!S390 && INPUT && INPUT_TOUCHSCREEN && TOUCHSCREEN_USB_COMPOSITE]
      prompt "IdealTEK URTC1000 device support" if [!S390 && INPUT && INPUT_TOUCHSCREEN && TOUCHSCREEN_USB_COMPOSITE && EMBEDDED]
      depends on [TOUCHSCREEN_USB_COMPOSITE]
      inherited [!S390 && INPUT && INPUT_TOUCHSCREEN && TOUCHSCREEN_USB_COMPOSITE]
     }
     config TOUCHSCREEN_USB_GENERAL_TOUCH boolean {
      default [y] if [!S390 && INPUT && INPUT_TOUCHSCREEN && TOUCHSCREEN_USB_COMPOSITE]
      prompt "GeneralTouch Touchscreen device support" if [!S390 && INPUT && INPUT_TOUCHSCREEN && TOUCHSCREEN_USB_COMPOSITE && EMBEDDED]
      depends on [TOUCHSCREEN_USB_COMPOSITE]
      inherited [!S390 && INPUT && INPUT_TOUCHSCREEN && TOUCHSCREEN_USB_COMPOSITE]
     }
     config TOUCHSCREEN_USB_GOTOP boolean {
      default [y] if [!S390 && INPUT && INPUT_TOUCHSCREEN && TOUCHSCREEN_USB_COMPOSITE]
      prompt "GoTop Super_Q2/GogoPen/PenPower tablet device support" if [!S390 && INPUT && INPUT_TOUCHSCREEN && TOUCHSCREEN_USB_COMPOSITE && EMBEDDED]
      depends on [TOUCHSCREEN_USB_COMPOSITE]
      inherited [!S390 && INPUT && INPUT_TOUCHSCREEN && TOUCHSCREEN_USB_COMPOSITE]
     }
     config TOUCHSCREEN_USB_JASTEC boolean {
      default [y] if [!S390 && INPUT && INPUT_TOUCHSCREEN && TOUCHSCREEN_USB_COMPOSITE]
      prompt "JASTEC/DigiTech DTR-02U USB touch controller device support" if [!S390 && INPUT && INPUT_TOUCHSCREEN && TOUCHSCREEN_USB_COMPOSITE && EMBEDDED]
      depends on [TOUCHSCREEN_USB_COMPOSITE]
      inherited [!S390 && INPUT && INPUT_TOUCHSCREEN && TOUCHSCREEN_USB_COMPOSITE]
     }
     config TOUCHSCREEN_USB_E2I boolean {
      default [y] if [!S390 && INPUT && INPUT_TOUCHSCREEN && TOUCHSCREEN_USB_COMPOSITE]
      prompt "e2i Touchscreen controller (e.g. from Mimo 740)" if [!S390 && INPUT && INPUT_TOUCHSCREEN && TOUCHSCREEN_USB_COMPOSITE]
      depends on [TOUCHSCREEN_USB_COMPOSITE]
      inherited [!S390 && INPUT && INPUT_TOUCHSCREEN && TOUCHSCREEN_USB_COMPOSITE]
     }
     config TOUCHSCREEN_USB_ZYTRONIC boolean {
      default [y] if [!S390 && INPUT && INPUT_TOUCHSCREEN && TOUCHSCREEN_USB_COMPOSITE]
      prompt "Zytronic controller" if [!S390 && INPUT && INPUT_TOUCHSCREEN && TOUCHSCREEN_USB_COMPOSITE && EMBEDDED]
      depends on [TOUCHSCREEN_USB_COMPOSITE]
      inherited [!S390 && INPUT && INPUT_TOUCHSCREEN && TOUCHSCREEN_USB_COMPOSITE]
     }
     config TOUCHSCREEN_USB_ETT_TC5UH boolean {
      default [y] if [!S390 && INPUT && INPUT_TOUCHSCREEN && TOUCHSCREEN_USB_COMPOSITE]
      prompt "ET&T TC5UH touchscreen controler support" if [!S390 && INPUT && INPUT_TOUCHSCREEN && TOUCHSCREEN_USB_COMPOSITE && EMBEDDED]
      depends on [TOUCHSCREEN_USB_COMPOSITE]
      inherited [!S390 && INPUT && INPUT_TOUCHSCREEN && TOUCHSCREEN_USB_COMPOSITE]
     }
     config TOUCHSCREEN_TOUCHIT213 tristate {
      prompt "Sahara TouchIT-213 touchscreen" if [!S390 && INPUT && INPUT_TOUCHSCREEN]
      select SERIO if [!S390 && INPUT && INPUT_TOUCHSCREEN]
      inherited [!S390 && INPUT && INPUT_TOUCHSCREEN]
     }
     config TOUCHSCREEN_TSC2007 tristate {
      prompt "TSC2007 based touchscreens" if [!S390 && INPUT && INPUT_TOUCHSCREEN && I2C]
      depends on [I2C]
      inherited [!S390 && INPUT && INPUT_TOUCHSCREEN && I2C]
     }
     config TOUCHSCREEN_W90X900 tristate {
      prompt "W90P910 touchscreen driver" if [!S390 && INPUT && INPUT_TOUCHSCREEN && HAVE_CLK]
      depends on [HAVE_CLK]
      inherited [!S390 && INPUT && INPUT_TOUCHSCREEN && HAVE_CLK]
     }
     config TOUCHSCREEN_PCAP tristate {
      prompt "Motorola PCAP touchscreen" if [!S390 && INPUT && INPUT_TOUCHSCREEN && EZX_PCAP]
      depends on [EZX_PCAP]
      inherited [!S390 && INPUT && INPUT_TOUCHSCREEN && EZX_PCAP]
     }
    }
   }
   menuconfig INPUT_MISC boolean {
    prompt "Miscellaneous devices" if [!S390 && INPUT]
    inherited [!S390 && INPUT]
    if [!S390 && INPUT && INPUT_MISC] {
     config INPUT_PCSPKR tristate {
      prompt "PC Speaker support" if [!S390 && INPUT && INPUT_MISC && PCSPKR_PLATFORM]
      depends on [PCSPKR_PLATFORM]
      inherited [!S390 && INPUT && INPUT_MISC && PCSPKR_PLATFORM]
     }
     config INPUT_SPARCSPKR tristate {
      prompt "SPARC Speaker support" if [!S390 && INPUT && INPUT_MISC && PCI && SPARC64]
      depends on [PCI && SPARC64]
      inherited [!S390 && INPUT && INPUT_MISC && PCI && SPARC64]
     }
     config INPUT_M68K_BEEP tristate {
      prompt "M68k Beeper support" if [!S390 && INPUT && INPUT_MISC && M68K]
      depends on [M68K]
      inherited [!S390 && INPUT && INPUT_MISC && M68K]
     }
     config INPUT_APANEL tristate {
      prompt "Fujitsu Lifebook Application Panel buttons" if [!S390 && INPUT && INPUT_MISC && X86 && I2C && LEDS_CLASS]
      depends on [X86 && I2C && LEDS_CLASS]
      select INPUT_POLLDEV if [!S390 && INPUT && INPUT_MISC && X86 && I2C && LEDS_CLASS]
      select CHECK_SIGNATURE if [!S390 && INPUT && INPUT_MISC && X86 && I2C && LEDS_CLASS]
      inherited [!S390 && INPUT && INPUT_MISC && X86 && I2C && LEDS_CLASS]
     }
     config INPUT_IXP4XX_BEEPER tristate {
      prompt "IXP4XX Beeper support" if [!S390 && INPUT && INPUT_MISC && ARCH_IXP4XX]
      depends on [ARCH_IXP4XX]
      inherited [!S390 && INPUT && INPUT_MISC && ARCH_IXP4XX]
     }
     config INPUT_COBALT_BTNS tristate {
      prompt "Cobalt button interface" if [!S390 && INPUT && INPUT_MISC && MIPS_COBALT]
      depends on [MIPS_COBALT]
      select INPUT_POLLDEV if [!S390 && INPUT && INPUT_MISC && MIPS_COBALT]
      inherited [!S390 && INPUT && INPUT_MISC && MIPS_COBALT]
     }
     config INPUT_WISTRON_BTNS tristate {
      prompt "x86 Wistron laptop button interface" if [!S390 && INPUT && INPUT_MISC && X86 && !X86_64]
      depends on [X86 && !X86_64]
      select INPUT_POLLDEV if [!S390 && INPUT && INPUT_MISC && X86 && !X86_64]
      select INPUT_SPARSEKMAP if [!S390 && INPUT && INPUT_MISC && X86 && !X86_64]
      select NEW_LEDS if [!S390 && INPUT && INPUT_MISC && X86 && !X86_64]
      select LEDS_CLASS if [!S390 && INPUT && INPUT_MISC && X86 && !X86_64]
      select CHECK_SIGNATURE if [!S390 && INPUT && INPUT_MISC && X86 && !X86_64]
      inherited [!S390 && INPUT && INPUT_MISC && X86 && !X86_64]
     }
     config INPUT_ATLAS_BTNS tristate {
      prompt "x86 Atlas button interface" if [!S390 && INPUT && INPUT_MISC && X86 && ACPI]
      depends on [X86 && ACPI]
      inherited [!S390 && INPUT && INPUT_MISC && X86 && ACPI]
     }
     config INPUT_ATI_REMOTE tristate {
      prompt "ATI / X10 USB RF remote control" if [!S390 && INPUT && INPUT_MISC && USB_ARCH_HAS_HCD]
      depends on [USB_ARCH_HAS_HCD]
      select USB if [!S390 && INPUT && INPUT_MISC && USB_ARCH_HAS_HCD]
      inherited [!S390 && INPUT && INPUT_MISC && USB_ARCH_HAS_HCD]
     }
     config INPUT_ATI_REMOTE2 tristate {
      prompt "ATI / Philips USB RF remote control" if [!S390 && INPUT && INPUT_MISC && USB_ARCH_HAS_HCD]
      depends on [USB_ARCH_HAS_HCD]
      select USB if [!S390 && INPUT && INPUT_MISC && USB_ARCH_HAS_HCD]
      inherited [!S390 && INPUT && INPUT_MISC && USB_ARCH_HAS_HCD]
     }
     config INPUT_KEYSPAN_REMOTE tristate {
      prompt "Keyspan DMR USB remote control (EXPERIMENTAL)" if [!S390 && INPUT && INPUT_MISC && EXPERIMENTAL && USB_ARCH_HAS_HCD]
      depends on [EXPERIMENTAL]
      depends on [USB_ARCH_HAS_HCD]
      select USB if [!S390 && INPUT && INPUT_MISC && EXPERIMENTAL && USB_ARCH_HAS_HCD]
      inherited [!S390 && INPUT && INPUT_MISC && EXPERIMENTAL && USB_ARCH_HAS_HCD]
     }
     config INPUT_POWERMATE tristate {
      prompt "Griffin PowerMate and Contour Jog support" if [!S390 && INPUT && INPUT_MISC && USB_ARCH_HAS_HCD]
      depends on [USB_ARCH_HAS_HCD]
      select USB if [!S390 && INPUT && INPUT_MISC && USB_ARCH_HAS_HCD]
      inherited [!S390 && INPUT && INPUT_MISC && USB_ARCH_HAS_HCD]
     }
     config INPUT_YEALINK tristate {
      prompt "Yealink usb-p1k voip phone" if [!S390 && INPUT && INPUT_MISC && EXPERIMENTAL && USB_ARCH_HAS_HCD]
      depends on [EXPERIMENTAL]
      depends on [USB_ARCH_HAS_HCD]
      select USB if [!S390 && INPUT && INPUT_MISC && EXPERIMENTAL && USB_ARCH_HAS_HCD]
      inherited [!S390 && INPUT && INPUT_MISC && EXPERIMENTAL && USB_ARCH_HAS_HCD]
     }
     config INPUT_CM109 tristate {
      prompt "C-Media CM109 USB I/O Controller" if [!S390 && INPUT && INPUT_MISC && EXPERIMENTAL && USB_ARCH_HAS_HCD]
      depends on [EXPERIMENTAL]
      depends on [USB_ARCH_HAS_HCD]
      select USB if [!S390 && INPUT && INPUT_MISC && EXPERIMENTAL && USB_ARCH_HAS_HCD]
      inherited [!S390 && INPUT && INPUT_MISC && EXPERIMENTAL && USB_ARCH_HAS_HCD]
     }
     config INPUT_TWL4030_PWRBUTTON tristate {
      prompt "TWL4030 Power button Driver" if [!S390 && INPUT && INPUT_MISC && TWL4030_CORE]
      depends on [TWL4030_CORE]
      inherited [!S390 && INPUT && INPUT_MISC && TWL4030_CORE]
     }
     config INPUT_UINPUT tristate {
      prompt "User level driver support" if [!S390 && INPUT && INPUT_MISC]
      inherited [!S390 && INPUT && INPUT_MISC]
     }
     config INPUT_SGI_BTNS tristate {
      prompt "SGI Indy/O2 volume button interface" if [!S390 && INPUT && INPUT_MISC && (SGI_IP22 || SGI_IP32)]
      depends on [SGI_IP22 || SGI_IP32]
      select INPUT_POLLDEV if [!S390 && INPUT && INPUT_MISC && (SGI_IP22 || SGI_IP32)]
      inherited [!S390 && INPUT && INPUT_MISC && (SGI_IP22 || SGI_IP32)]
     }
     config INPUT_WINBOND_CIR tristate {
      prompt "Winbond IR remote control" if [!S390 && INPUT && INPUT_MISC && X86 && PNP]
      depends on [X86 && PNP]
      select NEW_LEDS if [!S390 && INPUT && INPUT_MISC && X86 && PNP]
      select LEDS_CLASS if [!S390 && INPUT && INPUT_MISC && X86 && PNP]
      select LEDS_TRIGGERS if [!S390 && INPUT && INPUT_MISC && X86 && PNP]
      select BITREVERSE if [!S390 && INPUT && INPUT_MISC && X86 && PNP]
      inherited [!S390 && INPUT && INPUT_MISC && X86 && PNP]
     }
     config HP_SDC_RTC tristate {
      prompt "HP SDC Real Time Clock" if [!S390 && INPUT && INPUT_MISC && (GSC || HP300) && SERIO]
      depends on [(GSC || HP300) && SERIO]
      select HP_SDC if [!S390 && INPUT && INPUT_MISC && (GSC || HP300) && SERIO]
      inherited [!S390 && INPUT && INPUT_MISC && (GSC || HP300) && SERIO]
     }
     config INPUT_PCF50633_PMU tristate {
      prompt "PCF50633 PMU events" if [!S390 && INPUT && INPUT_MISC && MFD_PCF50633]
      depends on [MFD_PCF50633]
      inherited [!S390 && INPUT && INPUT_MISC && MFD_PCF50633]
     }
     config INPUT_GPIO_ROTARY_ENCODER tristate {
      prompt "Rotary encoders connected to GPIO pins" if [!S390 && INPUT && INPUT_MISC && GPIOLIB && GENERIC_GPIO]
      depends on [GPIOLIB && GENERIC_GPIO]
      inherited [!S390 && INPUT && INPUT_MISC && GPIOLIB && GENERIC_GPIO]
     }
     config INPUT_RB532_BUTTON tristate {
      prompt "Mikrotik Routerboard 532 button interface" if [!S390 && INPUT && INPUT_MISC && MIKROTIK_RB532 && GPIOLIB && GENERIC_GPIO]
      depends on [MIKROTIK_RB532]
      depends on [GPIOLIB && GENERIC_GPIO]
      select INPUT_POLLDEV if [!S390 && INPUT && INPUT_MISC && MIKROTIK_RB532 && GPIOLIB && GENERIC_GPIO]
      inherited [!S390 && INPUT && INPUT_MISC && MIKROTIK_RB532 && GPIOLIB && GENERIC_GPIO]
     }
     config INPUT_DM355EVM tristate {
      prompt "TI DaVinci DM355 EVM Keypad and IR Remote" if [!S390 && INPUT && INPUT_MISC && MFD_DM355EVM_MSP]
      depends on [MFD_DM355EVM_MSP]
      select INPUT_SPARSEKMAP if [!S390 && INPUT && INPUT_MISC && MFD_DM355EVM_MSP]
      inherited [!S390 && INPUT && INPUT_MISC && MFD_DM355EVM_MSP]
     }
     config INPUT_BFIN_ROTARY tristate {
      prompt "Blackfin Rotary support" if [!S390 && INPUT && INPUT_MISC && (BF54x || BF52x)]
      depends on [BF54x || BF52x]
      inherited [!S390 && INPUT && INPUT_MISC && (BF54x || BF52x)]
     }
     config INPUT_WM831X_ON tristate {
      prompt "WM831X ON pin" if [!S390 && INPUT && INPUT_MISC && MFD_WM831X]
      depends on [MFD_WM831X]
      inherited [!S390 && INPUT && INPUT_MISC && MFD_WM831X]
     }
     config INPUT_PCAP tristate {
      prompt "Motorola EZX PCAP misc input events" if [!S390 && INPUT && INPUT_MISC && EZX_PCAP]
      depends on [EZX_PCAP]
      inherited [!S390 && INPUT && INPUT_MISC && EZX_PCAP]
     }
    }
   }
  }
 }
 menu "Hardware I/O ports" {
  depends on [!S390]
  config SERIO tristate {
   prompt "Serial I/O support" if [!S390 && (EMBEDDED || !X86)]
   default [y] if [!S390]
   inherited [!S390]
   if [!S390 && SERIO] {
    config SERIO_I8042 tristate {
     prompt "i8042 PC Keyboard controller" if [!S390 && SERIO && !PARISC && (!ARM || ARCH_SHARK || FOOTBRIDGE_HOST) && !M68K && !BLACKFIN && (EMBEDDED || !X86)]
     default [y] if [!S390 && SERIO && !PARISC && (!ARM || ARCH_SHARK || FOOTBRIDGE_HOST) && !M68K && !BLACKFIN]
     depends on [!PARISC && (!ARM || ARCH_SHARK || FOOTBRIDGE_HOST) && !M68K && !BLACKFIN]
     inherited [!S390 && SERIO && !PARISC && (!ARM || ARCH_SHARK || FOOTBRIDGE_HOST) && !M68K && !BLACKFIN]
    }
    config SERIO_SERPORT tristate {
     prompt "Serial port line discipline" if [!S390 && SERIO]
     default [y] if [!S390 && SERIO]
     inherited [!S390 && SERIO]
    }
    config SERIO_CT82C710 tristate {
     prompt "ct82c710 Aux port controller" if [!S390 && SERIO && X86]
     depends on [X86]
     inherited [!S390 && SERIO && X86]
    }
    config SERIO_Q40KBD tristate {
     prompt "Q40 keyboard controller" if [!S390 && SERIO && Q40]
     depends on [Q40]
     inherited [!S390 && SERIO && Q40]
    }
    config SERIO_PARKBD tristate {
     prompt "Parallel port keyboard adapter" if [!S390 && SERIO && PARPORT]
     depends on [PARPORT]
     inherited [!S390 && SERIO && PARPORT]
    }
    config SERIO_RPCKBD tristate {
     prompt "Acorn RiscPC keyboard controller" if [!S390 && SERIO && ARCH_ACORN]
     depends on [ARCH_ACORN]
     default [y] if [!S390 && SERIO && ARCH_ACORN]
     inherited [!S390 && SERIO && ARCH_ACORN]
    }
    config SERIO_AT32PSIF tristate {
     prompt "AVR32 PSIF PS/2 keyboard and mouse controller" if [!S390 && SERIO && AVR32]
     depends on [AVR32]
     inherited [!S390 && SERIO && AVR32]
    }
    config SERIO_AMBAKMI tristate {
     prompt "AMBA KMI keyboard controller" if [!S390 && SERIO && ARM_AMBA]
     depends on [ARM_AMBA]
     inherited [!S390 && SERIO && ARM_AMBA]
    }
    config SERIO_SA1111 tristate {
     prompt "Intel SA1111 keyboard controller" if [!S390 && SERIO && SA1111]
     depends on [SA1111]
     inherited [!S390 && SERIO && SA1111]
    }
    config SERIO_GSCPS2 tristate {
     prompt "HP GSC PS/2 keyboard and PS/2 mouse controller" if [!S390 && SERIO && GSC]
     depends on [GSC]
     default [y] if [!S390 && SERIO && GSC]
     inherited [!S390 && SERIO && GSC]
    }
    config HP_SDC tristate {
     prompt "HP System Device Controller i8042 Support" if [!S390 && (GSC || HP300) && SERIO]
     depends on [(GSC || HP300) && SERIO]
     default [y] if [!S390 && (GSC || HP300) && SERIO]
     inherited [!S390 && (GSC || HP300) && SERIO]
     config HIL_MLC tristate {
      prompt "HIL MLC Support (needed for HIL input devices)" if [!S390 && SERIO && HP_SDC]
      depends on [HP_SDC]
      inherited [!S390 && SERIO && HP_SDC]
     }
    }
    config SERIO_PCIPS2 tristate {
     prompt "PCI PS/2 keyboard and PS/2 mouse controller" if [!S390 && SERIO && PCI]
     depends on [PCI]
     inherited [!S390 && SERIO && PCI]
    }
    config SERIO_MACEPS2 tristate {
     prompt "SGI O2 MACE PS/2 controller" if [!S390 && SERIO && SGI_IP32]
     depends on [SGI_IP32]
     inherited [!S390 && SERIO && SGI_IP32]
    }
    config SERIO_LIBPS2 tristate {
     prompt "PS/2 driver library" if [!S390 && SERIO && (SERIO_I8042 || SERIO_I8042="n") && EMBEDDED]
     depends on [SERIO_I8042 || SERIO_I8042="n"]
     inherited [!S390 && SERIO && (SERIO_I8042 || SERIO_I8042="n")]
    }
    config SERIO_RAW tristate {
     prompt "Raw access to serio ports" if [!S390 && SERIO]
     inherited [!S390 && SERIO]
    }
    config SERIO_XILINX_XPS_PS2 tristate {
     prompt "Xilinx XPS PS/2 Controller Support" if [!S390 && SERIO && (PPC || MICROBLAZE)]
     depends on [PPC || MICROBLAZE]
     inherited [!S390 && SERIO && (PPC || MICROBLAZE)]
    }
    config SERIO_ALTERA_PS2 tristate {
     prompt "Altera UP PS/2 controller" if [!S390 && SERIO]
     inherited [!S390 && SERIO]
    }
   }
  }
  config GAMEPORT tristate {
   prompt "Gameport support" if [!S390]
   inherited [!S390]
   if [!S390 && GAMEPORT] {
    config GAMEPORT_NS558 tristate {
     prompt "Classic ISA and PnP gameport support" if [!S390 && GAMEPORT]
     inherited [!S390 && GAMEPORT]
    }
    config GAMEPORT_L4 tristate {
     prompt "PDPI Lightning 4 gamecard support" if [!S390 && GAMEPORT]
     inherited [!S390 && GAMEPORT]
    }
    config GAMEPORT_EMU10K1 tristate {
     prompt "SB Live and Audigy gameport support" if [!S390 && GAMEPORT && PCI]
     depends on [PCI]
     inherited [!S390 && GAMEPORT && PCI]
    }
    config GAMEPORT_FM801 tristate {
     prompt "ForteMedia FM801 gameport support" if [!S390 && GAMEPORT && PCI]
     depends on [PCI]
     inherited [!S390 && GAMEPORT && PCI]
    }
   }
  }
 }
}
menu "Character devices" {
 config VT boolean {
  prompt "Virtual terminal" if [!S390 && EMBEDDED]
  depends on [!S390]
  select INPUT if [!S390]
  default [y] if [!S390]
  inherited [!S390]
  config CONSOLE_TRANSLATIONS boolean {
   depends on [VT]
   default [y] if [VT]
   prompt "Enable character translations in console" if [VT && EMBEDDED]
   inherited [VT]
  }
  config VT_CONSOLE boolean {
   prompt "Support for console on virtual terminal" if [VT && EMBEDDED]
   depends on [VT]
   default [y] if [VT]
   inherited [VT]
  }
  config HW_CONSOLE boolean {
   depends on [VT && !S390 && !UML]
   default [y] if [VT && !S390 && !UML]
   inherited [VT && !S390 && !UML]
  }
  config VT_HW_CONSOLE_BINDING boolean {
   prompt "Support for binding and unbinding console drivers" if [HW_CONSOLE]
   depends on [HW_CONSOLE]
   default [n] if [HW_CONSOLE]
   inherited [HW_CONSOLE]
  }
 }
 config DEVKMEM boolean {
  prompt "/dev/kmem virtual device support" if []
  default [y] if []
 }
 config BFIN_JTAG_COMM tristate {
  prompt "Blackfin JTAG Communication" if [BLACKFIN]
  depends on [BLACKFIN]
  inherited [BLACKFIN]
  config BFIN_JTAG_COMM_CONSOLE boolean {
   prompt "Console on Blackfin JTAG" if [BFIN_JTAG_COMM="y"]
   depends on [BFIN_JTAG_COMM="y"]
   inherited [BFIN_JTAG_COMM="y"]
  }
 }
 config SERIAL_NONSTANDARD boolean {
  prompt "Non-standard serial port support" if [HAS_IOMEM]
  depends on [HAS_IOMEM]
  inherited [HAS_IOMEM]
  config COMPUTONE tristate {
   prompt "Computone IntelliPort Plus serial support" if [SERIAL_NONSTANDARD && (ISA || EISA || PCI)]
   depends on [SERIAL_NONSTANDARD && (ISA || EISA || PCI)]
   inherited [SERIAL_NONSTANDARD && (ISA || EISA || PCI)]
  }
  config ROCKETPORT tristate {
   prompt "Comtrol RocketPort support" if [SERIAL_NONSTANDARD && (ISA || EISA || PCI)]
   depends on [SERIAL_NONSTANDARD && (ISA || EISA || PCI)]
   inherited [SERIAL_NONSTANDARD && (ISA || EISA || PCI)]
  }
  config CYCLADES tristate {
   prompt "Cyclades async mux support" if [SERIAL_NONSTANDARD && (PCI || ISA)]
   depends on [SERIAL_NONSTANDARD && (PCI || ISA)]
   select FW_LOADER if [SERIAL_NONSTANDARD && (PCI || ISA)]
   inherited [SERIAL_NONSTANDARD && (PCI || ISA)]
   config CYZ_INTR boolean {
    prompt "Cyclades-Z interrupt mode operation (EXPERIMENTAL)" if [EXPERIMENTAL && CYCLADES]
    depends on [EXPERIMENTAL && CYCLADES]
    inherited [EXPERIMENTAL && CYCLADES]
   }
  }
  config DIGIEPCA tristate {
   prompt "Digiboard Intelligent Async Support" if [SERIAL_NONSTANDARD && (ISA || EISA || PCI)]
   depends on [SERIAL_NONSTANDARD && (ISA || EISA || PCI)]
   inherited [SERIAL_NONSTANDARD && (ISA || EISA || PCI)]
  }
  config MOXA_INTELLIO tristate {
   prompt "Moxa Intellio support" if [SERIAL_NONSTANDARD && (ISA || EISA || PCI)]
   depends on [SERIAL_NONSTANDARD && (ISA || EISA || PCI)]
   select FW_LOADER if [SERIAL_NONSTANDARD && (ISA || EISA || PCI)]
   inherited [SERIAL_NONSTANDARD && (ISA || EISA || PCI)]
  }
  config MOXA_SMARTIO tristate {
   prompt "Moxa SmartIO support v. 2.0" if [SERIAL_NONSTANDARD && (PCI || EISA || ISA)]
   depends on [SERIAL_NONSTANDARD && (PCI || EISA || ISA)]
   inherited [SERIAL_NONSTANDARD && (PCI || EISA || ISA)]
  }
  config ISI tristate {
   prompt "Multi-Tech multiport card support (EXPERIMENTAL)" if [SERIAL_NONSTANDARD && PCI]
   depends on [SERIAL_NONSTANDARD && PCI]
   select FW_LOADER if [SERIAL_NONSTANDARD && PCI]
   inherited [SERIAL_NONSTANDARD && PCI]
  }
  config SYNCLINK tristate {
   prompt "Microgate SyncLink card support" if [SERIAL_NONSTANDARD && PCI && ISA_DMA_API]
   depends on [SERIAL_NONSTANDARD && PCI && ISA_DMA_API]
   inherited [SERIAL_NONSTANDARD && PCI && ISA_DMA_API]
  }
  config SYNCLINKMP tristate {
   prompt "SyncLink Multiport support" if [SERIAL_NONSTANDARD && PCI]
   depends on [SERIAL_NONSTANDARD && PCI]
   inherited [SERIAL_NONSTANDARD && PCI]
  }
  config SYNCLINK_GT tristate {
   prompt "SyncLink GT/AC support" if [SERIAL_NONSTANDARD && PCI]
   depends on [SERIAL_NONSTANDARD && PCI]
   inherited [SERIAL_NONSTANDARD && PCI]
  }
  config N_HDLC tristate {
   prompt "HDLC line discipline support" if [SERIAL_NONSTANDARD]
   depends on [SERIAL_NONSTANDARD]
   inherited [SERIAL_NONSTANDARD]
  }
  config RISCOM8 tristate {
   prompt "SDL RISCom/8 card support" if [SERIAL_NONSTANDARD]
   depends on [SERIAL_NONSTANDARD]
   inherited [SERIAL_NONSTANDARD]
  }
  config SPECIALIX tristate {
   prompt "Specialix IO8+ card support" if [SERIAL_NONSTANDARD]
   depends on [SERIAL_NONSTANDARD]
   inherited [SERIAL_NONSTANDARD]
  }
  config SX tristate {
   prompt "Specialix SX (and SI) card support" if [SERIAL_NONSTANDARD && (PCI || EISA || ISA) && BROKEN]
   depends on [SERIAL_NONSTANDARD && (PCI || EISA || ISA) && BROKEN]
   inherited [SERIAL_NONSTANDARD && (PCI || EISA || ISA) && BROKEN]
  }
  config RIO tristate {
   prompt "Specialix RIO system support" if [SERIAL_NONSTANDARD && BROKEN]
   depends on [SERIAL_NONSTANDARD && BROKEN]
   inherited [SERIAL_NONSTANDARD && BROKEN]
   config RIO_OLDPCI boolean {
    prompt "Support really old RIO/PCI cards" if [RIO]
    depends on [RIO]
    inherited [RIO]
   }
  }
  config STALDRV boolean {
   prompt "Stallion multiport serial support" if [SERIAL_NONSTANDARD]
   depends on [SERIAL_NONSTANDARD]
   inherited [SERIAL_NONSTANDARD]
   config STALLION tristate {
    prompt "Stallion EasyIO or EC8/32 support" if [STALDRV && (ISA || EISA || PCI)]
    depends on [STALDRV && (ISA || EISA || PCI)]
    inherited [STALDRV && (ISA || EISA || PCI)]
   }
   config ISTALLION tristate {
    prompt "Stallion EC8/64, ONboard, Brumby support" if [STALDRV && (ISA || EISA || PCI)]
    depends on [STALDRV && (ISA || EISA || PCI)]
    inherited [STALDRV && (ISA || EISA || PCI)]
   }
  }
 }
 config NOZOMI tristate {
  prompt "HSDPA Broadband Wireless Data Card - Globe Trotter" if [PCI && EXPERIMENTAL]
  depends on [PCI && EXPERIMENTAL]
  inherited [PCI && EXPERIMENTAL]
 }
 config A2232 tristate {
  prompt "Commodore A2232 serial support (EXPERIMENTAL)" if [EXPERIMENTAL && ZORRO && BROKEN]
  depends on [EXPERIMENTAL && ZORRO && BROKEN]
  inherited [EXPERIMENTAL && ZORRO && BROKEN]
 }
 config SGI_SNSC boolean {
  prompt "SGI Altix system controller communication support" if [IA64_SGI_SN2 || IA64_GENERIC]
  depends on [IA64_SGI_SN2 || IA64_GENERIC]
  inherited [IA64_SGI_SN2 || IA64_GENERIC]
 }
 config SGI_TIOCX boolean {
  prompt "SGI TIO CX driver support" if [IA64_SGI_SN2 || IA64_GENERIC]
  depends on [IA64_SGI_SN2 || IA64_GENERIC]
  inherited [IA64_SGI_SN2 || IA64_GENERIC]
  config SGI_MBCS tristate {
   prompt "SGI FPGA Core Services driver support" if [SGI_TIOCX]
   depends on [SGI_TIOCX]
   inherited [SGI_TIOCX]
  }
 }
 menu "Serial drivers" {
  depends on [HAS_IOMEM]
  config SERIAL_8250 tristate {
   prompt "8250/16550 and compatible serial support" if [HAS_IOMEM]
   select SERIAL_CORE if [HAS_IOMEM]
   inherited [HAS_IOMEM]
   config SERIAL_8250_CONSOLE boolean {
    prompt "Console on 8250/16550 and compatible serial port" if [HAS_IOMEM && SERIAL_8250="y"]
    depends on [SERIAL_8250="y"]
    select SERIAL_CORE_CONSOLE if [HAS_IOMEM && SERIAL_8250="y"]
    inherited [HAS_IOMEM && SERIAL_8250="y"]
   }
  }
  config FIX_EARLYCON_MEM boolean {
   depends on [X86]
   default [y] if [HAS_IOMEM && X86]
   inherited [HAS_IOMEM && X86]
  }
  config SERIAL_8250_GSC tristate {
   depends on [SERIAL_8250 && GSC]
   default [SERIAL_8250] if [HAS_IOMEM && SERIAL_8250 && GSC]
   inherited [HAS_IOMEM && SERIAL_8250 && GSC]
  }
  config SERIAL_8250_PCI tristate {
   prompt "8250/16550 PCI device support" if [HAS_IOMEM && SERIAL_8250 && PCI && EMBEDDED]
   depends on [SERIAL_8250 && PCI]
   default [SERIAL_8250] if [HAS_IOMEM && SERIAL_8250 && PCI]
   inherited [HAS_IOMEM && SERIAL_8250 && PCI]
  }
  config SERIAL_8250_PNP tristate {
   prompt "8250/16550 PNP device support" if [HAS_IOMEM && SERIAL_8250 && PNP && EMBEDDED]
   depends on [SERIAL_8250 && PNP]
   default [SERIAL_8250] if [HAS_IOMEM && SERIAL_8250 && PNP]
   inherited [HAS_IOMEM && SERIAL_8250 && PNP]
  }
  config SERIAL_8250_HP300 tristate {
   depends on [SERIAL_8250 && HP300]
   default [SERIAL_8250] if [HAS_IOMEM && SERIAL_8250 && HP300]
   inherited [HAS_IOMEM && SERIAL_8250 && HP300]
  }
  config SERIAL_8250_CS tristate {
   prompt "8250/16550 PCMCIA device support" if [HAS_IOMEM && PCMCIA && SERIAL_8250]
   depends on [PCMCIA && SERIAL_8250]
   inherited [HAS_IOMEM && PCMCIA && SERIAL_8250]
  }
  config SERIAL_8250_NR_UARTS integer {
   prompt "Maximum number of 8250/16550 serial ports" if [HAS_IOMEM && SERIAL_8250]
   depends on [SERIAL_8250]
   default [4] if [HAS_IOMEM && SERIAL_8250]
   inherited [HAS_IOMEM && SERIAL_8250]
  }
  config SERIAL_8250_RUNTIME_UARTS integer {
   prompt "Number of 8250/16550 serial ports to register at runtime" if [HAS_IOMEM && SERIAL_8250]
   depends on [SERIAL_8250]
   range [0 SERIAL_8250_NR_UARTS] if [HAS_IOMEM && SERIAL_8250]
   default [4] if [HAS_IOMEM && SERIAL_8250]
   inherited [HAS_IOMEM && SERIAL_8250]
  }
  config SERIAL_8250_EXTENDED boolean {
   prompt "Extended 8250/16550 serial driver options" if [HAS_IOMEM && SERIAL_8250]
   depends on [SERIAL_8250]
   inherited [HAS_IOMEM && SERIAL_8250]
   config SERIAL_8250_MANY_PORTS boolean {
    prompt "Support more than 4 legacy serial ports" if [HAS_IOMEM && SERIAL_8250_EXTENDED && !IA64]
    depends on [SERIAL_8250_EXTENDED && !IA64]
    inherited [HAS_IOMEM && SERIAL_8250_EXTENDED && !IA64]
    config SERIAL_8250_FOURPORT tristate {
     prompt "Support Fourport cards" if [HAS_IOMEM && SERIAL_8250!="n" && ISA && SERIAL_8250_MANY_PORTS]
     depends on [SERIAL_8250!="n" && ISA && SERIAL_8250_MANY_PORTS]
     inherited [HAS_IOMEM && SERIAL_8250!="n" && ISA && SERIAL_8250_MANY_PORTS]
    }
    config SERIAL_8250_ACCENT tristate {
     prompt "Support Accent cards" if [HAS_IOMEM && SERIAL_8250!="n" && ISA && SERIAL_8250_MANY_PORTS]
     depends on [SERIAL_8250!="n" && ISA && SERIAL_8250_MANY_PORTS]
     inherited [HAS_IOMEM && SERIAL_8250!="n" && ISA && SERIAL_8250_MANY_PORTS]
    }
    config SERIAL_8250_BOCA tristate {
     prompt "Support Boca cards" if [HAS_IOMEM && SERIAL_8250!="n" && ISA && SERIAL_8250_MANY_PORTS]
     depends on [SERIAL_8250!="n" && ISA && SERIAL_8250_MANY_PORTS]
     inherited [HAS_IOMEM && SERIAL_8250!="n" && ISA && SERIAL_8250_MANY_PORTS]
    }
    config SERIAL_8250_EXAR_ST16C554 tristate {
     prompt "Support Exar ST16C554/554D Quad UART" if [HAS_IOMEM && SERIAL_8250!="n" && ISA && SERIAL_8250_MANY_PORTS]
     depends on [SERIAL_8250!="n" && ISA && SERIAL_8250_MANY_PORTS]
     inherited [HAS_IOMEM && SERIAL_8250!="n" && ISA && SERIAL_8250_MANY_PORTS]
    }
    config SERIAL_8250_HUB6 tristate {
     prompt "Support Hub6 cards" if [HAS_IOMEM && SERIAL_8250!="n" && ISA && SERIAL_8250_MANY_PORTS]
     depends on [SERIAL_8250!="n" && ISA && SERIAL_8250_MANY_PORTS]
     inherited [HAS_IOMEM && SERIAL_8250!="n" && ISA && SERIAL_8250_MANY_PORTS]
    }
   }
   config SERIAL_8250_SHARE_IRQ boolean {
    prompt "Support for sharing serial interrupts" if [HAS_IOMEM && SERIAL_8250_EXTENDED]
    depends on [SERIAL_8250_EXTENDED]
    inherited [HAS_IOMEM && SERIAL_8250_EXTENDED]
   }
   config SERIAL_8250_DETECT_IRQ boolean {
    prompt "Autodetect IRQ on standard ports (unsafe)" if [HAS_IOMEM && SERIAL_8250_EXTENDED]
    depends on [SERIAL_8250_EXTENDED]
    inherited [HAS_IOMEM && SERIAL_8250_EXTENDED]
   }
   config SERIAL_8250_RSA boolean {
    prompt "Support RSA serial ports" if [HAS_IOMEM && SERIAL_8250_EXTENDED]
    depends on [SERIAL_8250_EXTENDED]
    inherited [HAS_IOMEM && SERIAL_8250_EXTENDED]
   }
  }
  config SERIAL_8250_MCA tristate {
   prompt "Support 8250-type ports on MCA buses" if [HAS_IOMEM && SERIAL_8250!="n" && MCA]
   depends on [SERIAL_8250!="n" && MCA]
   inherited [HAS_IOMEM && SERIAL_8250!="n" && MCA]
  }
  config SERIAL_8250_ACORN tristate {
   prompt "Acorn expansion card serial port support" if [HAS_IOMEM && ARCH_ACORN && SERIAL_8250]
   depends on [ARCH_ACORN && SERIAL_8250]
   inherited [HAS_IOMEM && ARCH_ACORN && SERIAL_8250]
  }
  config SERIAL_8250_AU1X00 boolean {
   prompt "Au1x00 serial port support" if [HAS_IOMEM && SERIAL_8250 && SOC_AU1X00]
   depends on [SERIAL_8250 && SOC_AU1X00]
   inherited [HAS_IOMEM && SERIAL_8250 && SOC_AU1X00]
  }
  config SERIAL_8250_RM9K boolean {
   prompt "Support for MIPS RM9xxx integrated serial port" if [HAS_IOMEM && SERIAL_8250 && SERIAL_RM9000]
   depends on [SERIAL_8250 && SERIAL_RM9000]
   select SERIAL_8250_SHARE_IRQ if [HAS_IOMEM && SERIAL_8250 && SERIAL_RM9000]
   inherited [HAS_IOMEM && SERIAL_8250 && SERIAL_RM9000]
  }
  config SERIAL_AMBA_PL010 tristate {
   prompt "ARM AMBA PL010 serial port support" if [HAS_IOMEM && ARM_AMBA && (BROKEN || !ARCH_VERSATILE)]
   depends on [ARM_AMBA && (BROKEN || !ARCH_VERSATILE)]
   select SERIAL_CORE if [HAS_IOMEM && ARM_AMBA && (BROKEN || !ARCH_VERSATILE)]
   inherited [HAS_IOMEM && ARM_AMBA && (BROKEN || !ARCH_VERSATILE)]
   config SERIAL_AMBA_PL010_CONSOLE boolean {
    prompt "Support for console on AMBA serial port" if [HAS_IOMEM && SERIAL_AMBA_PL010="y"]
    depends on [SERIAL_AMBA_PL010="y"]
    select SERIAL_CORE_CONSOLE if [HAS_IOMEM && SERIAL_AMBA_PL010="y"]
    inherited [HAS_IOMEM && SERIAL_AMBA_PL010="y"]
   }
  }
  config SERIAL_AMBA_PL011 tristate {
   prompt "ARM AMBA PL011 serial port support" if [HAS_IOMEM && ARM_AMBA]
   depends on [ARM_AMBA]
   select SERIAL_CORE if [HAS_IOMEM && ARM_AMBA]
   inherited [HAS_IOMEM && ARM_AMBA]
   config SERIAL_AMBA_PL011_CONSOLE boolean {
    prompt "Support for console on AMBA serial port" if [HAS_IOMEM && SERIAL_AMBA_PL011="y"]
    depends on [SERIAL_AMBA_PL011="y"]
    select SERIAL_CORE_CONSOLE if [HAS_IOMEM && SERIAL_AMBA_PL011="y"]
    inherited [HAS_IOMEM && SERIAL_AMBA_PL011="y"]
   }
  }
  config SERIAL_SB1250_DUART tristate {
   prompt "BCM1xxx on-chip DUART serial support" if [HAS_IOMEM && SIBYTE_SB1xxx_SOC="y"]
   depends on [SIBYTE_SB1xxx_SOC="y"]
   select SERIAL_CORE if [HAS_IOMEM && SIBYTE_SB1xxx_SOC="y"]
   default [y] if [HAS_IOMEM && SIBYTE_SB1xxx_SOC="y"]
   inherited [HAS_IOMEM && SIBYTE_SB1xxx_SOC="y"]
   config SERIAL_SB1250_DUART_CONSOLE boolean {
    prompt "Support for console on a BCM1xxx DUART serial port" if [HAS_IOMEM && SERIAL_SB1250_DUART="y"]
    depends on [SERIAL_SB1250_DUART="y"]
    select SERIAL_CORE_CONSOLE if [HAS_IOMEM && SERIAL_SB1250_DUART="y"]
    default [y] if [HAS_IOMEM && SERIAL_SB1250_DUART="y"]
    inherited [HAS_IOMEM && SERIAL_SB1250_DUART="y"]
   }
  }
  config SERIAL_ATMEL boolean {
   prompt "AT91 / AT32 on-chip serial port support" if [HAS_IOMEM && (ARM && ARCH_AT91 || AVR32)]
   depends on [ARM && ARCH_AT91 || AVR32]
   select SERIAL_CORE if [HAS_IOMEM && (ARM && ARCH_AT91 || AVR32)]
   inherited [HAS_IOMEM && (ARM && ARCH_AT91 || AVR32)]
   config SERIAL_ATMEL_CONSOLE boolean {
    prompt "Support for console on AT91 / AT32 serial port" if [HAS_IOMEM && SERIAL_ATMEL]
    depends on [SERIAL_ATMEL="y"]
    select SERIAL_CORE_CONSOLE if [HAS_IOMEM && SERIAL_ATMEL]
    inherited [HAS_IOMEM && SERIAL_ATMEL]
   }
   config SERIAL_ATMEL_PDC boolean {
    prompt "Support DMA transfers on AT91 / AT32 serial port" if [HAS_IOMEM && SERIAL_ATMEL]
    depends on [SERIAL_ATMEL]
    default [y] if [HAS_IOMEM && SERIAL_ATMEL]
    inherited [HAS_IOMEM && SERIAL_ATMEL]
   }
   config SERIAL_ATMEL_TTYAT boolean {
    prompt "Install as device ttyATn instead of ttySn" if [HAS_IOMEM && SERIAL_ATMEL]
    depends on [SERIAL_ATMEL="y"]
    inherited [HAS_IOMEM && SERIAL_ATMEL]
   }
  }
  config SERIAL_KS8695 boolean {
   prompt "Micrel KS8695 (Centaur) serial port support" if [HAS_IOMEM && ARCH_KS8695]
   depends on [ARCH_KS8695]
   select SERIAL_CORE if [HAS_IOMEM && ARCH_KS8695]
   inherited [HAS_IOMEM && ARCH_KS8695]
   config SERIAL_KS8695_CONSOLE boolean {
    prompt "Support for console on KS8695 (Centaur) serial port" if [HAS_IOMEM && SERIAL_KS8695]
    depends on [SERIAL_KS8695="y"]
    select SERIAL_CORE_CONSOLE if [HAS_IOMEM && SERIAL_KS8695]
    inherited [HAS_IOMEM && SERIAL_KS8695]
   }
  }
  config SERIAL_CLPS711X tristate {
   prompt "CLPS711X serial port support" if [HAS_IOMEM && ARM && ARCH_CLPS711X]
   depends on [ARM && ARCH_CLPS711X]
   select SERIAL_CORE if [HAS_IOMEM && ARM && ARCH_CLPS711X]
   inherited [HAS_IOMEM && ARM && ARCH_CLPS711X]
   config SERIAL_CLPS711X_CONSOLE boolean {
    prompt "Support for console on CLPS711X serial port" if [HAS_IOMEM && SERIAL_CLPS711X="y"]
    depends on [SERIAL_CLPS711X="y"]
    select SERIAL_CORE_CONSOLE if [HAS_IOMEM && SERIAL_CLPS711X="y"]
    inherited [HAS_IOMEM && SERIAL_CLPS711X="y"]
   }
  }
  config SERIAL_SAMSUNG tristate {
   prompt "Samsung SoC serial support" if [HAS_IOMEM && ARM && PLAT_S3C]
   depends on [ARM && PLAT_S3C]
   select SERIAL_CORE if [HAS_IOMEM && ARM && PLAT_S3C]
   inherited [HAS_IOMEM && ARM && PLAT_S3C]
  }
  config SERIAL_SAMSUNG_UARTS integer {
   depends on [ARM && PLAT_S3C]
   default [2] if [HAS_IOMEM && ARM && PLAT_S3C && ARCH_S3C2400]
   default [4] if [HAS_IOMEM && ARM && PLAT_S3C && (ARCH_S5PC1XX || ARCH_S3C64XX || CPU_S3C2443)]
   default [3] if [HAS_IOMEM && ARM && PLAT_S3C]
   inherited [HAS_IOMEM && ARM && PLAT_S3C]
  }
  config SERIAL_SAMSUNG_DEBUG boolean {
   prompt "Samsung SoC serial debug" if [HAS_IOMEM && SERIAL_SAMSUNG && DEBUG_LL]
   depends on [SERIAL_SAMSUNG && DEBUG_LL]
   inherited [HAS_IOMEM && SERIAL_SAMSUNG && DEBUG_LL]
  }
  config SERIAL_SAMSUNG_CONSOLE boolean {
   prompt "Support for console on Samsung SoC serial port" if [HAS_IOMEM && SERIAL_SAMSUNG="y"]
   depends on [SERIAL_SAMSUNG="y"]
   select SERIAL_CORE_CONSOLE if [HAS_IOMEM && SERIAL_SAMSUNG="y"]
   inherited [HAS_IOMEM && SERIAL_SAMSUNG="y"]
  }
  config SERIAL_S3C2400 tristate {
   prompt "Samsung S3C2410 Serial port support" if [HAS_IOMEM && ARM && SERIAL_SAMSUNG && CPU_S3C2400]
   depends on [ARM && SERIAL_SAMSUNG && CPU_S3C2400]
   default [y] if [HAS_IOMEM && ARM && SERIAL_SAMSUNG && CPU_S3C2400]
   inherited [HAS_IOMEM && ARM && SERIAL_SAMSUNG && CPU_S3C2400]
  }
  config SERIAL_S3C2410 tristate {
   prompt "Samsung S3C2410 Serial port support" if [HAS_IOMEM && SERIAL_SAMSUNG && CPU_S3C2410]
   depends on [SERIAL_SAMSUNG && CPU_S3C2410]
   default [y] if [HAS_IOMEM && SERIAL_SAMSUNG && CPU_S3C2410]
   inherited [HAS_IOMEM && SERIAL_SAMSUNG && CPU_S3C2410]
  }
  config SERIAL_S3C2412 tristate {
   prompt "Samsung S3C2412/S3C2413 Serial port support" if [HAS_IOMEM && SERIAL_SAMSUNG && CPU_S3C2412]
   depends on [SERIAL_SAMSUNG && CPU_S3C2412]
   default [y] if [HAS_IOMEM && SERIAL_SAMSUNG && CPU_S3C2412]
   inherited [HAS_IOMEM && SERIAL_SAMSUNG && CPU_S3C2412]
  }
  config SERIAL_S3C2440 tristate {
   prompt "Samsung S3C2440/S3C2442 Serial port support" if [HAS_IOMEM && SERIAL_SAMSUNG && (CPU_S3C2440 || CPU_S3C2442)]
   depends on [SERIAL_SAMSUNG && (CPU_S3C2440 || CPU_S3C2442)]
   default [y] if [HAS_IOMEM && SERIAL_SAMSUNG && (CPU_S3C2440 || CPU_S3C2442) && CPU_S3C2440]
   default [y] if [HAS_IOMEM && SERIAL_SAMSUNG && (CPU_S3C2440 || CPU_S3C2442) && CPU_S3C2442]
   inherited [HAS_IOMEM && SERIAL_SAMSUNG && (CPU_S3C2440 || CPU_S3C2442)]
  }
  config SERIAL_S3C24A0 tristate {
   prompt "Samsung S3C24A0 Serial port support" if [HAS_IOMEM && SERIAL_SAMSUNG && CPU_S3C24A0]
   depends on [SERIAL_SAMSUNG && CPU_S3C24A0]
   default [y] if [HAS_IOMEM && SERIAL_SAMSUNG && CPU_S3C24A0]
   inherited [HAS_IOMEM && SERIAL_SAMSUNG && CPU_S3C24A0]
  }
  config SERIAL_S3C6400 tristate {
   prompt "Samsung S3C6400/S3C6410 Serial port support" if [HAS_IOMEM && SERIAL_SAMSUNG && (CPU_S3C6400 || CPU_S3C6410)]
   depends on [SERIAL_SAMSUNG && (CPU_S3C6400 || CPU_S3C6410)]
   default [y] if [HAS_IOMEM && SERIAL_SAMSUNG && (CPU_S3C6400 || CPU_S3C6410)]
   inherited [HAS_IOMEM && SERIAL_SAMSUNG && (CPU_S3C6400 || CPU_S3C6410)]
  }
  config SERIAL_S5PC100 tristate {
   prompt "Samsung S5PC100 Serial port support" if [HAS_IOMEM && SERIAL_SAMSUNG && CPU_S5PC100]
   depends on [SERIAL_SAMSUNG && CPU_S5PC100]
   default [y] if [HAS_IOMEM && SERIAL_SAMSUNG && CPU_S5PC100]
   inherited [HAS_IOMEM && SERIAL_SAMSUNG && CPU_S5PC100]
  }
  config SERIAL_MAX3100 tristate {
   prompt "MAX3100 support" if [HAS_IOMEM && SPI]
   depends on [SPI]
   select SERIAL_CORE if [HAS_IOMEM && SPI]
   inherited [HAS_IOMEM && SPI]
  }
  config SERIAL_DZ boolean {
   prompt "DECstation DZ serial driver" if [HAS_IOMEM && MACH_DECSTATION && 32BIT]
   depends on [MACH_DECSTATION && 32BIT]
   select SERIAL_CORE if [HAS_IOMEM && MACH_DECSTATION && 32BIT]
   default [y] if [HAS_IOMEM && MACH_DECSTATION && 32BIT]
   inherited [HAS_IOMEM && MACH_DECSTATION && 32BIT]
   config SERIAL_DZ_CONSOLE boolean {
    prompt "Support console on DECstation DZ serial driver" if [HAS_IOMEM && SERIAL_DZ]
    depends on [SERIAL_DZ="y"]
    select SERIAL_CORE_CONSOLE if [HAS_IOMEM && SERIAL_DZ]
    default [y] if [HAS_IOMEM && SERIAL_DZ]
    inherited [HAS_IOMEM && SERIAL_DZ]
   }
  }
  config SERIAL_ZS tristate {
   prompt "DECstation Z85C30 serial support" if [HAS_IOMEM && MACH_DECSTATION]
   depends on [MACH_DECSTATION]
   select SERIAL_CORE if [HAS_IOMEM && MACH_DECSTATION]
   default [y] if [HAS_IOMEM && MACH_DECSTATION]
   inherited [HAS_IOMEM && MACH_DECSTATION]
   config SERIAL_ZS_CONSOLE boolean {
    prompt "Support for console on a DECstation Z85C30 serial port" if [HAS_IOMEM && SERIAL_ZS="y"]
    depends on [SERIAL_ZS="y"]
    select SERIAL_CORE_CONSOLE if [HAS_IOMEM && SERIAL_ZS="y"]
    default [y] if [HAS_IOMEM && SERIAL_ZS="y"]
    inherited [HAS_IOMEM && SERIAL_ZS="y"]
   }
  }
  config SERIAL_21285 tristate {
   prompt "DC21285 serial port support" if [HAS_IOMEM && ARM && FOOTBRIDGE]
   depends on [ARM && FOOTBRIDGE]
   select SERIAL_CORE if [HAS_IOMEM && ARM && FOOTBRIDGE]
   inherited [HAS_IOMEM && ARM && FOOTBRIDGE]
   config SERIAL_21285_CONSOLE boolean {
    prompt "Console on DC21285 serial port" if [HAS_IOMEM && SERIAL_21285="y"]
    depends on [SERIAL_21285="y"]
    select SERIAL_CORE_CONSOLE if [HAS_IOMEM && SERIAL_21285="y"]
    inherited [HAS_IOMEM && SERIAL_21285="y"]
   }
  }
  config SERIAL_MPSC boolean {
   prompt "Marvell MPSC serial port support" if [HAS_IOMEM && PPC32 && MV64X60]
   depends on [PPC32 && MV64X60]
   select SERIAL_CORE if [HAS_IOMEM && PPC32 && MV64X60]
   inherited [HAS_IOMEM && PPC32 && MV64X60]
   config SERIAL_MPSC_CONSOLE boolean {
    prompt "Support for console on Marvell MPSC serial port" if [HAS_IOMEM && SERIAL_MPSC]
    depends on [SERIAL_MPSC]
    select SERIAL_CORE_CONSOLE if [HAS_IOMEM && SERIAL_MPSC]
    inherited [HAS_IOMEM && SERIAL_MPSC]
   }
  }
  config SERIAL_PXA boolean {
   prompt "PXA serial port support" if [HAS_IOMEM && (ARCH_PXA || ARCH_MMP)]
   depends on [ARCH_PXA || ARCH_MMP]
   select SERIAL_CORE if [HAS_IOMEM && (ARCH_PXA || ARCH_MMP)]
   inherited [HAS_IOMEM && (ARCH_PXA || ARCH_MMP)]
   config SERIAL_PXA_CONSOLE boolean {
    prompt "Console on PXA serial port" if [HAS_IOMEM && SERIAL_PXA]
    depends on [SERIAL_PXA]
    select SERIAL_CORE_CONSOLE if [HAS_IOMEM && SERIAL_PXA]
    inherited [HAS_IOMEM && SERIAL_PXA]
   }
  }
  config SERIAL_SA1100 boolean {
   prompt "SA1100 serial port support" if [HAS_IOMEM && ARM && ARCH_SA1100]
   depends on [ARM && ARCH_SA1100]
   select SERIAL_CORE if [HAS_IOMEM && ARM && ARCH_SA1100]
   inherited [HAS_IOMEM && ARM && ARCH_SA1100]
   config SERIAL_SA1100_CONSOLE boolean {
    prompt "Console on SA1100 serial port" if [HAS_IOMEM && SERIAL_SA1100]
    depends on [SERIAL_SA1100]
    select SERIAL_CORE_CONSOLE if [HAS_IOMEM && SERIAL_SA1100]
    inherited [HAS_IOMEM && SERIAL_SA1100]
   }
  }
  config SERIAL_BFIN tristate {
   prompt "Blackfin serial port support" if [HAS_IOMEM && BLACKFIN]
   depends on [BLACKFIN]
   select SERIAL_CORE if [HAS_IOMEM && BLACKFIN]
   select SERIAL_BFIN_UART0 if [HAS_IOMEM && BLACKFIN && (BF531 || BF532 || BF533 || BF561)]
   inherited [HAS_IOMEM && BLACKFIN]
   config SERIAL_BFIN_CONSOLE boolean {
    prompt "Console on Blackfin serial port" if [HAS_IOMEM && SERIAL_BFIN="y"]
    depends on [SERIAL_BFIN="y"]
    select SERIAL_CORE_CONSOLE if [HAS_IOMEM && SERIAL_BFIN="y"]
    inherited [HAS_IOMEM && SERIAL_BFIN="y"]
   }
   choice boolean {
    prompt "UART Mode" if [HAS_IOMEM && SERIAL_BFIN]
    depends on [SERIAL_BFIN]
    default [SERIAL_BFIN_DMA] if [HAS_IOMEM && SERIAL_BFIN]
    config SERIAL_BFIN_DMA boolean {
     prompt "DMA mode" if [<choice> && !DMA_UNCACHED_NONE && KGDB_SERIAL_CONSOLE="n"]
     depends on [!DMA_UNCACHED_NONE && KGDB_SERIAL_CONSOLE="n"]
     inherited [<choice> && !DMA_UNCACHED_NONE && KGDB_SERIAL_CONSOLE="n"]
    }
    config SERIAL_BFIN_PIO boolean {
     prompt "PIO mode" if [<choice>]
     inherited [<choice>]
    }
   }
   config SERIAL_BFIN_UART0 boolean {
    prompt "Enable UART0" if [HAS_IOMEM && SERIAL_BFIN]
    depends on [SERIAL_BFIN]
    inherited [HAS_IOMEM && SERIAL_BFIN]
    config BFIN_UART0_CTSRTS boolean {
     prompt "Enable UART0 hardware flow control" if [HAS_IOMEM && SERIAL_BFIN_UART0]
     depends on [SERIAL_BFIN_UART0]
     inherited [HAS_IOMEM && SERIAL_BFIN_UART0]
     config UART0_CTS_PIN integer {
      prompt "UART0 CTS pin" if [HAS_IOMEM && BFIN_UART0_CTSRTS && !BF548]
      depends on [BFIN_UART0_CTSRTS && !BF548]
      default [23] if [HAS_IOMEM && BFIN_UART0_CTSRTS && !BF548]
      inherited [HAS_IOMEM && BFIN_UART0_CTSRTS && !BF548]
     }
     config UART0_RTS_PIN integer {
      prompt "UART0 RTS pin" if [HAS_IOMEM && BFIN_UART0_CTSRTS && !BF548]
      depends on [BFIN_UART0_CTSRTS && !BF548]
      default [22] if [HAS_IOMEM && BFIN_UART0_CTSRTS && !BF548]
      inherited [HAS_IOMEM && BFIN_UART0_CTSRTS && !BF548]
     }
    }
   }
   config SERIAL_BFIN_UART1 boolean {
    prompt "Enable UART1" if [HAS_IOMEM && SERIAL_BFIN && !BF531 && !BF532 && !BF533 && !BF561]
    depends on [SERIAL_BFIN && !BF531 && !BF532 && !BF533 && !BF561]
    inherited [HAS_IOMEM && SERIAL_BFIN && !BF531 && !BF532 && !BF533 && !BF561]
    config BFIN_UART1_CTSRTS boolean {
     prompt "Enable UART1 hardware flow control" if [HAS_IOMEM && SERIAL_BFIN_UART1]
     depends on [SERIAL_BFIN_UART1]
     inherited [HAS_IOMEM && SERIAL_BFIN_UART1]
     config UART1_CTS_PIN integer {
      prompt "UART1 CTS pin" if [HAS_IOMEM && BFIN_UART1_CTSRTS && !BF548]
      depends on [BFIN_UART1_CTSRTS && !BF548]
      default [-1] if [HAS_IOMEM && BFIN_UART1_CTSRTS && !BF548]
      inherited [HAS_IOMEM && BFIN_UART1_CTSRTS && !BF548]
     }
     config UART1_RTS_PIN integer {
      prompt "UART1 RTS pin" if [HAS_IOMEM && BFIN_UART1_CTSRTS && !BF548]
      depends on [BFIN_UART1_CTSRTS && !BF548]
      default [-1] if [HAS_IOMEM && BFIN_UART1_CTSRTS && !BF548]
      inherited [HAS_IOMEM && BFIN_UART1_CTSRTS && !BF548]
     }
    }
   }
   config SERIAL_BFIN_UART2 boolean {
    prompt "Enable UART2" if [HAS_IOMEM && SERIAL_BFIN && (BF54x || BF538 || BF539)]
    depends on [SERIAL_BFIN && (BF54x || BF538 || BF539)]
    inherited [HAS_IOMEM && SERIAL_BFIN && (BF54x || BF538 || BF539)]
    config BFIN_UART2_CTSRTS boolean {
     prompt "Enable UART2 hardware flow control" if [HAS_IOMEM && SERIAL_BFIN_UART2]
     depends on [SERIAL_BFIN_UART2]
     inherited [HAS_IOMEM && SERIAL_BFIN_UART2]
     config UART2_CTS_PIN integer {
      prompt "UART2 CTS pin" if [HAS_IOMEM && BFIN_UART2_CTSRTS && !BF548]
      depends on [BFIN_UART2_CTSRTS && !BF548]
      default [-1] if [HAS_IOMEM && BFIN_UART2_CTSRTS && !BF548]
      inherited [HAS_IOMEM && BFIN_UART2_CTSRTS && !BF548]
     }
     config UART2_RTS_PIN integer {
      prompt "UART2 RTS pin" if [HAS_IOMEM && BFIN_UART2_CTSRTS && !BF548]
      depends on [BFIN_UART2_CTSRTS && !BF548]
      default [-1] if [HAS_IOMEM && BFIN_UART2_CTSRTS && !BF548]
      inherited [HAS_IOMEM && BFIN_UART2_CTSRTS && !BF548]
     }
    }
   }
   config SERIAL_BFIN_UART3 boolean {
    prompt "Enable UART3" if [HAS_IOMEM && SERIAL_BFIN && BF54x]
    depends on [SERIAL_BFIN && BF54x]
    inherited [HAS_IOMEM && SERIAL_BFIN && BF54x]
    config BFIN_UART3_CTSRTS boolean {
     prompt "Enable UART3 hardware flow control" if [HAS_IOMEM && SERIAL_BFIN_UART3]
     depends on [SERIAL_BFIN_UART3]
     inherited [HAS_IOMEM && SERIAL_BFIN_UART3]
     config UART3_CTS_PIN integer {
      prompt "UART3 CTS pin" if [HAS_IOMEM && BFIN_UART3_CTSRTS && !BF548]
      depends on [BFIN_UART3_CTSRTS && !BF548]
      default [-1] if [HAS_IOMEM && BFIN_UART3_CTSRTS && !BF548]
      inherited [HAS_IOMEM && BFIN_UART3_CTSRTS && !BF548]
     }
     config UART3_RTS_PIN integer {
      prompt "UART3 RTS pin" if [HAS_IOMEM && BFIN_UART3_CTSRTS && !BF548]
      depends on [BFIN_UART3_CTSRTS && !BF548]
      default [-1] if [HAS_IOMEM && BFIN_UART3_CTSRTS && !BF548]
      inherited [HAS_IOMEM && BFIN_UART3_CTSRTS && !BF548]
     }
    }
   }
  }
  config SERIAL_IMX boolean {
   prompt "IMX serial port support" if [HAS_IOMEM && ARM && (ARCH_IMX || ARCH_MXC)]
   depends on [ARM && (ARCH_IMX || ARCH_MXC)]
   select SERIAL_CORE if [HAS_IOMEM && ARM && (ARCH_IMX || ARCH_MXC)]
   select RATIONAL if [HAS_IOMEM && ARM && (ARCH_IMX || ARCH_MXC)]
   inherited [HAS_IOMEM && ARM && (ARCH_IMX || ARCH_MXC)]
   config SERIAL_IMX_CONSOLE boolean {
    prompt "Console on IMX serial port" if [HAS_IOMEM && SERIAL_IMX]
    depends on [SERIAL_IMX]
    select SERIAL_CORE_CONSOLE if [HAS_IOMEM && SERIAL_IMX]
    inherited [HAS_IOMEM && SERIAL_IMX]
   }
  }
  config SERIAL_UARTLITE tristate {
   prompt "Xilinx uartlite serial port support" if [HAS_IOMEM && (PPC32 || MICROBLAZE || MFD_TIMBERDALE)]
   depends on [PPC32 || MICROBLAZE || MFD_TIMBERDALE]
   select SERIAL_CORE if [HAS_IOMEM && (PPC32 || MICROBLAZE || MFD_TIMBERDALE)]
   inherited [HAS_IOMEM && (PPC32 || MICROBLAZE || MFD_TIMBERDALE)]
   config SERIAL_UARTLITE_CONSOLE boolean {
    prompt "Support for console on Xilinx uartlite serial port" if [HAS_IOMEM && SERIAL_UARTLITE="y"]
    depends on [SERIAL_UARTLITE="y"]
    select SERIAL_CORE_CONSOLE if [HAS_IOMEM && SERIAL_UARTLITE="y"]
    inherited [HAS_IOMEM && SERIAL_UARTLITE="y"]
   }
  }
  config SERIAL_SUNCORE boolean {
   depends on [SPARC]
   select SERIAL_CORE if [HAS_IOMEM && SPARC]
   select SERIAL_CORE_CONSOLE if [HAS_IOMEM && SPARC]
   default [y] if [HAS_IOMEM && SPARC]
   inherited [HAS_IOMEM && SPARC]
  }
  config SERIAL_SUNZILOG tristate {
   prompt "Sun Zilog8530 serial support" if [HAS_IOMEM && SPARC]
   depends on [SPARC]
   inherited [HAS_IOMEM && SPARC]
   config SERIAL_SUNZILOG_CONSOLE boolean {
    prompt "Console on Sun Zilog8530 serial port" if [HAS_IOMEM && SERIAL_SUNZILOG="y"]
    depends on [SERIAL_SUNZILOG="y"]
    inherited [HAS_IOMEM && SERIAL_SUNZILOG="y"]
   }
  }
  config SERIAL_SUNSU tristate {
   prompt "Sun SU serial support" if [HAS_IOMEM && SPARC && PCI]
   depends on [SPARC && PCI]
   inherited [HAS_IOMEM && SPARC && PCI]
   config SERIAL_SUNSU_CONSOLE boolean {
    prompt "Console on Sun SU serial port" if [HAS_IOMEM && SERIAL_SUNSU="y"]
    depends on [SERIAL_SUNSU="y"]
    inherited [HAS_IOMEM && SERIAL_SUNSU="y"]
   }
  }
  config SERIAL_MUX tristate {
   prompt "Serial MUX support" if [HAS_IOMEM && GSC]
   depends on [GSC]
   select SERIAL_CORE if [HAS_IOMEM && GSC]
   default [y] if [HAS_IOMEM && GSC]
   inherited [HAS_IOMEM && GSC]
   config SERIAL_MUX_CONSOLE boolean {
    prompt "Support for console on serial MUX" if [HAS_IOMEM && SERIAL_MUX="y"]
    depends on [SERIAL_MUX="y"]
    select SERIAL_CORE_CONSOLE if [HAS_IOMEM && SERIAL_MUX="y"]
    default [y] if [HAS_IOMEM && SERIAL_MUX="y"]
    inherited [HAS_IOMEM && SERIAL_MUX="y"]
   }
  }
  config PDC_CONSOLE boolean {
   prompt "PDC software console support" if [HAS_IOMEM && PARISC && !SERIAL_MUX && VT]
   depends on [PARISC && !SERIAL_MUX && VT]
   default [n] if [HAS_IOMEM && PARISC && !SERIAL_MUX && VT]
   inherited [HAS_IOMEM && PARISC && !SERIAL_MUX && VT]
  }
  config SERIAL_SUNSAB tristate {
   prompt "Sun Siemens SAB82532 serial support" if [HAS_IOMEM && SPARC && PCI]
   depends on [SPARC && PCI]
   inherited [HAS_IOMEM && SPARC && PCI]
   config SERIAL_SUNSAB_CONSOLE boolean {
    prompt "Console on Sun Siemens SAB82532 serial port" if [HAS_IOMEM && SERIAL_SUNSAB="y"]
    depends on [SERIAL_SUNSAB="y"]
    inherited [HAS_IOMEM && SERIAL_SUNSAB="y"]
   }
  }
  config SERIAL_SUNHV boolean {
   prompt "Sun4v Hypervisor Console support" if [HAS_IOMEM && SPARC64]
   depends on [SPARC64]
   inherited [HAS_IOMEM && SPARC64]
  }
  config SERIAL_IP22_ZILOG tristate {
   prompt "SGI Zilog8530 serial support" if [HAS_IOMEM && SGI_HAS_ZILOG]
   depends on [SGI_HAS_ZILOG]
   select SERIAL_CORE if [HAS_IOMEM && SGI_HAS_ZILOG]
   inherited [HAS_IOMEM && SGI_HAS_ZILOG]
   config SERIAL_IP22_ZILOG_CONSOLE boolean {
    prompt "Console on SGI Zilog8530 serial port" if [HAS_IOMEM && SERIAL_IP22_ZILOG="y"]
    depends on [SERIAL_IP22_ZILOG="y"]
    select SERIAL_CORE_CONSOLE if [HAS_IOMEM && SERIAL_IP22_ZILOG="y"]
    inherited [HAS_IOMEM && SERIAL_IP22_ZILOG="y"]
   }
  }
  config SERIAL_SH_SCI tristate {
   prompt "SuperH SCI(F) serial port support" if [HAS_IOMEM && HAVE_CLK && (SUPERH || H8300)]
   depends on [HAVE_CLK && (SUPERH || H8300)]
   select SERIAL_CORE if [HAS_IOMEM && HAVE_CLK && (SUPERH || H8300)]
   inherited [HAS_IOMEM && HAVE_CLK && (SUPERH || H8300)]
   config SERIAL_SH_SCI_NR_UARTS integer {
    prompt "Maximum number of SCI(F) serial ports" if [HAS_IOMEM && SERIAL_SH_SCI]
    depends on [SERIAL_SH_SCI]
    default [2] if [HAS_IOMEM && SERIAL_SH_SCI]
    inherited [HAS_IOMEM && SERIAL_SH_SCI]
   }
   config SERIAL_SH_SCI_CONSOLE boolean {
    prompt "Support for console on SuperH SCI(F)" if [HAS_IOMEM && SERIAL_SH_SCI="y"]
    depends on [SERIAL_SH_SCI="y"]
    select SERIAL_CORE_CONSOLE if [HAS_IOMEM && SERIAL_SH_SCI="y"]
    inherited [HAS_IOMEM && SERIAL_SH_SCI="y"]
   }
  }
  config SERIAL_PNX8XXX boolean {
   prompt "Enable PNX8XXX SoCs' UART Support" if [HAS_IOMEM && MIPS && (SOC_PNX8550 || SOC_PNX833X)]
   depends on [MIPS && (SOC_PNX8550 || SOC_PNX833X)]
   select SERIAL_CORE if [HAS_IOMEM && MIPS && (SOC_PNX8550 || SOC_PNX833X)]
   inherited [HAS_IOMEM && MIPS && (SOC_PNX8550 || SOC_PNX833X)]
   config SERIAL_PNX8XXX_CONSOLE boolean {
    prompt "Enable PNX8XX0 serial console" if [HAS_IOMEM && SERIAL_PNX8XXX]
    depends on [SERIAL_PNX8XXX]
    select SERIAL_CORE_CONSOLE if [HAS_IOMEM && SERIAL_PNX8XXX]
    inherited [HAS_IOMEM && SERIAL_PNX8XXX]
   }
  }
  config SERIAL_CORE tristate {
   inherited [HAS_IOMEM]
  }
  config SERIAL_CORE_CONSOLE boolean {
   inherited [HAS_IOMEM]
  }
  config CONSOLE_POLL boolean {
   inherited [HAS_IOMEM]
  }
  config SERIAL_68328 boolean {
   prompt "68328 serial support" if [HAS_IOMEM && (M68328 || M68EZ328 || M68VZ328)]
   depends on [M68328 || M68EZ328 || M68VZ328]
   inherited [HAS_IOMEM && (M68328 || M68EZ328 || M68VZ328)]
   config SERIAL_68328_RTS_CTS boolean {
    prompt "Support RTS/CTS on 68328 serial port" if [HAS_IOMEM && SERIAL_68328]
    depends on [SERIAL_68328]
    inherited [HAS_IOMEM && SERIAL_68328]
   }
  }
  config SERIAL_MCF boolean {
   prompt "Coldfire serial support" if [HAS_IOMEM && COLDFIRE]
   depends on [COLDFIRE]
   select SERIAL_CORE if [HAS_IOMEM && COLDFIRE]
   inherited [HAS_IOMEM && COLDFIRE]
   config SERIAL_MCF_BAUDRATE integer {
    prompt "Default baudrate for Coldfire serial ports" if [HAS_IOMEM && SERIAL_MCF]
    depends on [SERIAL_MCF]
    default [19200] if [HAS_IOMEM && SERIAL_MCF]
    inherited [HAS_IOMEM && SERIAL_MCF]
   }
   config SERIAL_MCF_CONSOLE boolean {
    prompt "Coldfire serial console support" if [HAS_IOMEM && SERIAL_MCF]
    depends on [SERIAL_MCF]
    select SERIAL_CORE_CONSOLE if [HAS_IOMEM && SERIAL_MCF]
    inherited [HAS_IOMEM && SERIAL_MCF]
   }
  }
  config SERIAL_68360_SMC boolean {
   prompt "68360 SMC uart support" if [HAS_IOMEM && M68360]
   depends on [M68360]
   inherited [HAS_IOMEM && M68360]
  }
  config SERIAL_68360_SCC boolean {
   prompt "68360 SCC uart support" if [HAS_IOMEM && M68360]
   depends on [M68360]
   inherited [HAS_IOMEM && M68360]
  }
  config SERIAL_68360 boolean {
   depends on [SERIAL_68360_SMC || SERIAL_68360_SCC]
   default [y] if [HAS_IOMEM && (SERIAL_68360_SMC || SERIAL_68360_SCC)]
   inherited [HAS_IOMEM && (SERIAL_68360_SMC || SERIAL_68360_SCC)]
  }
  config SERIAL_PMACZILOG tristate {
   prompt "PowerMac z85c30 ESCC support" if [HAS_IOMEM && PPC_OF && PPC_PMAC]
   depends on [PPC_OF && PPC_PMAC]
   select SERIAL_CORE if [HAS_IOMEM && PPC_OF && PPC_PMAC]
   inherited [HAS_IOMEM && PPC_OF && PPC_PMAC]
   config SERIAL_PMACZILOG_TTYS boolean {
    prompt "Use ttySn device nodes for Zilog z85c30" if [HAS_IOMEM && SERIAL_PMACZILOG]
    depends on [SERIAL_PMACZILOG]
    inherited [HAS_IOMEM && SERIAL_PMACZILOG]
   }
   config SERIAL_PMACZILOG_CONSOLE boolean {
    prompt "Console on PowerMac z85c30 serial port" if [HAS_IOMEM && SERIAL_PMACZILOG="y"]
    depends on [SERIAL_PMACZILOG="y"]
    select SERIAL_CORE_CONSOLE if [HAS_IOMEM && SERIAL_PMACZILOG="y"]
    inherited [HAS_IOMEM && SERIAL_PMACZILOG="y"]
   }
  }
  config SERIAL_LH7A40X tristate {
   prompt "Sharp LH7A40X embedded UART support" if [HAS_IOMEM && ARM && ARCH_LH7A40X]
   depends on [ARM && ARCH_LH7A40X]
   select SERIAL_CORE if [HAS_IOMEM && ARM && ARCH_LH7A40X]
   inherited [HAS_IOMEM && ARM && ARCH_LH7A40X]
   config SERIAL_LH7A40X_CONSOLE boolean {
    prompt "Support for console on Sharp LH7A40X serial port" if [HAS_IOMEM && SERIAL_LH7A40X="y"]
    depends on [SERIAL_LH7A40X="y"]
    select SERIAL_CORE_CONSOLE if [HAS_IOMEM && SERIAL_LH7A40X="y"]
    inherited [HAS_IOMEM && SERIAL_LH7A40X="y"]
   }
  }
  config SERIAL_CPM tristate {
   prompt "CPM SCC/SMC serial port support" if [HAS_IOMEM && (CPM2 || 8xx)]
   depends on [CPM2 || 8xx]
   select SERIAL_CORE if [HAS_IOMEM && (CPM2 || 8xx)]
   inherited [HAS_IOMEM && (CPM2 || 8xx)]
   config SERIAL_CPM_CONSOLE boolean {
    prompt "Support for console on CPM SCC/SMC serial port" if [HAS_IOMEM && SERIAL_CPM="y"]
    depends on [SERIAL_CPM="y"]
    select SERIAL_CORE_CONSOLE if [HAS_IOMEM && SERIAL_CPM="y"]
    inherited [HAS_IOMEM && SERIAL_CPM="y"]
   }
  }
  config SERIAL_SGI_L1_CONSOLE boolean {
   prompt "SGI Altix L1 serial console support" if [HAS_IOMEM && (IA64_GENERIC || IA64_SGI_SN2)]
   depends on [IA64_GENERIC || IA64_SGI_SN2]
   select SERIAL_CORE if [HAS_IOMEM && (IA64_GENERIC || IA64_SGI_SN2)]
   select SERIAL_CORE_CONSOLE if [HAS_IOMEM && (IA64_GENERIC || IA64_SGI_SN2)]
   inherited [HAS_IOMEM && (IA64_GENERIC || IA64_SGI_SN2)]
  }
  config SERIAL_MPC52xx tristate {
   prompt "Freescale MPC52xx/MPC512x family PSC serial support" if [HAS_IOMEM && (PPC_MPC52xx || PPC_MPC512x)]
   depends on [PPC_MPC52xx || PPC_MPC512x]
   select SERIAL_CORE if [HAS_IOMEM && (PPC_MPC52xx || PPC_MPC512x)]
   inherited [HAS_IOMEM && (PPC_MPC52xx || PPC_MPC512x)]
   config SERIAL_MPC52xx_CONSOLE boolean {
    prompt "Console on a Freescale MPC52xx/MPC512x family PSC serial port" if [HAS_IOMEM && SERIAL_MPC52xx="y"]
    depends on [SERIAL_MPC52xx="y"]
    select SERIAL_CORE_CONSOLE if [HAS_IOMEM && SERIAL_MPC52xx="y"]
    inherited [HAS_IOMEM && SERIAL_MPC52xx="y"]
    config SERIAL_MPC52xx_CONSOLE_BAUD integer {
     prompt "Freescale MPC52xx/MPC512x family PSC serial port baud" if [HAS_IOMEM && SERIAL_MPC52xx_CONSOLE]
     depends on [SERIAL_MPC52xx_CONSOLE="y"]
     default [9600] if [HAS_IOMEM && SERIAL_MPC52xx_CONSOLE]
     inherited [HAS_IOMEM && SERIAL_MPC52xx_CONSOLE]
    }
   }
  }
  config SERIAL_ICOM tristate {
   prompt "IBM Multiport Serial Adapter" if [HAS_IOMEM && PCI && (PPC_ISERIES || PPC_PSERIES)]
   depends on [PCI && (PPC_ISERIES || PPC_PSERIES)]
   select SERIAL_CORE if [HAS_IOMEM && PCI && (PPC_ISERIES || PPC_PSERIES)]
   select FW_LOADER if [HAS_IOMEM && PCI && (PPC_ISERIES || PPC_PSERIES)]
   inherited [HAS_IOMEM && PCI && (PPC_ISERIES || PPC_PSERIES)]
  }
  config SERIAL_M32R_SIO boolean {
   prompt "M32R SIO I/F" if [HAS_IOMEM && M32R]
   depends on [M32R]
   default [y] if [HAS_IOMEM && M32R]
   select SERIAL_CORE if [HAS_IOMEM && M32R]
   inherited [HAS_IOMEM && M32R]
   config SERIAL_M32R_SIO_CONSOLE boolean {
    prompt "use SIO console" if [HAS_IOMEM && SERIAL_M32R_SIO]
    depends on [SERIAL_M32R_SIO="y"]
    select SERIAL_CORE_CONSOLE if [HAS_IOMEM && SERIAL_M32R_SIO]
    inherited [HAS_IOMEM && SERIAL_M32R_SIO]
   }
   config SERIAL_M32R_PLDSIO boolean {
    prompt "M32R SIO I/F on a PLD" if [HAS_IOMEM && SERIAL_M32R_SIO && (PLAT_OPSPUT || PLAT_USRV || PLAT_M32700UT)]
    depends on [SERIAL_M32R_SIO="y" && (PLAT_OPSPUT || PLAT_USRV || PLAT_M32700UT)]
    default [n] if [HAS_IOMEM && SERIAL_M32R_SIO && (PLAT_OPSPUT || PLAT_USRV || PLAT_M32700UT)]
    inherited [HAS_IOMEM && SERIAL_M32R_SIO && (PLAT_OPSPUT || PLAT_USRV || PLAT_M32700UT)]
   }
  }
  config SERIAL_TXX9 boolean {
   prompt "TMPTX39XX/49XX SIO support" if [HAS_IOMEM && HAS_TXX9_SERIAL]
   depends on [HAS_TXX9_SERIAL]
   select SERIAL_CORE if [HAS_IOMEM && HAS_TXX9_SERIAL]
   default [y] if [HAS_IOMEM && HAS_TXX9_SERIAL]
   inherited [HAS_IOMEM && HAS_TXX9_SERIAL]
  }
  config HAS_TXX9_SERIAL boolean {
   inherited [HAS_IOMEM]
  }
  config SERIAL_TXX9_NR_UARTS integer {
   prompt "Maximum number of TMPTX39XX/49XX SIO ports" if [HAS_IOMEM && SERIAL_TXX9]
   depends on [SERIAL_TXX9]
   default [6] if [HAS_IOMEM && SERIAL_TXX9]
   inherited [HAS_IOMEM && SERIAL_TXX9]
  }
  config SERIAL_TXX9_CONSOLE boolean {
   prompt "TMPTX39XX/49XX SIO Console support" if [HAS_IOMEM && SERIAL_TXX9]
   depends on [SERIAL_TXX9="y"]
   select SERIAL_CORE_CONSOLE if [HAS_IOMEM && SERIAL_TXX9]
   inherited [HAS_IOMEM && SERIAL_TXX9]
  }
  config SERIAL_TXX9_STDSERIAL boolean {
   prompt "TX39XX/49XX SIO act as standard serial" if [HAS_IOMEM && !SERIAL_8250 && SERIAL_TXX9]
   depends on [!SERIAL_8250 && SERIAL_TXX9]
   inherited [HAS_IOMEM && !SERIAL_8250 && SERIAL_TXX9]
  }
  config SERIAL_VR41XX tristate {
   prompt "NEC VR4100 series Serial Interface Unit support" if [HAS_IOMEM && CPU_VR41XX]
   depends on [CPU_VR41XX]
   select SERIAL_CORE if [HAS_IOMEM && CPU_VR41XX]
   inherited [HAS_IOMEM && CPU_VR41XX]
   config SERIAL_VR41XX_CONSOLE boolean {
    prompt "Enable NEC VR4100 series Serial Interface Unit console" if [HAS_IOMEM && SERIAL_VR41XX="y"]
    depends on [SERIAL_VR41XX="y"]
    select SERIAL_CORE_CONSOLE if [HAS_IOMEM && SERIAL_VR41XX="y"]
    inherited [HAS_IOMEM && SERIAL_VR41XX="y"]
   }
  }
  config SERIAL_JSM tristate {
   prompt "Digi International NEO PCI Support" if [HAS_IOMEM && PCI]
   depends on [PCI]
   select SERIAL_CORE if [HAS_IOMEM && PCI]
   inherited [HAS_IOMEM && PCI]
  }
  config SERIAL_SGI_IOC4 tristate {
   prompt "SGI IOC4 controller serial support" if [HAS_IOMEM && (IA64_GENERIC || IA64_SGI_SN2) && SGI_IOC4]
   depends on [(IA64_GENERIC || IA64_SGI_SN2) && SGI_IOC4]
   select SERIAL_CORE if [HAS_IOMEM && (IA64_GENERIC || IA64_SGI_SN2) && SGI_IOC4]
   inherited [HAS_IOMEM && (IA64_GENERIC || IA64_SGI_SN2) && SGI_IOC4]
  }
  config SERIAL_SGI_IOC3 tristate {
   prompt "SGI Altix IOC3 serial support" if [HAS_IOMEM && (IA64_GENERIC || IA64_SGI_SN2) && SGI_IOC3]
   depends on [(IA64_GENERIC || IA64_SGI_SN2) && SGI_IOC3]
   select SERIAL_CORE if [HAS_IOMEM && (IA64_GENERIC || IA64_SGI_SN2) && SGI_IOC3]
   inherited [HAS_IOMEM && (IA64_GENERIC || IA64_SGI_SN2) && SGI_IOC3]
  }
  config SERIAL_MSM boolean {
   prompt "MSM on-chip serial port support" if [HAS_IOMEM && ARM && ARCH_MSM]
   depends on [ARM && ARCH_MSM]
   select SERIAL_CORE if [HAS_IOMEM && ARM && ARCH_MSM]
   inherited [HAS_IOMEM && ARM && ARCH_MSM]
   config SERIAL_MSM_CONSOLE boolean {
    prompt "MSM serial console support" if [HAS_IOMEM && SERIAL_MSM]
    depends on [SERIAL_MSM="y"]
    select SERIAL_CORE_CONSOLE if [HAS_IOMEM && SERIAL_MSM]
    inherited [HAS_IOMEM && SERIAL_MSM]
   }
  }
  config SERIAL_NETX tristate {
   prompt "NetX serial port support" if [HAS_IOMEM && ARM && ARCH_NETX]
   depends on [ARM && ARCH_NETX]
   select SERIAL_CORE if [HAS_IOMEM && ARM && ARCH_NETX]
   inherited [HAS_IOMEM && ARM && ARCH_NETX]
   config SERIAL_NETX_CONSOLE boolean {
    prompt "Console on NetX serial port" if [HAS_IOMEM && SERIAL_NETX="y"]
    depends on [SERIAL_NETX="y"]
    select SERIAL_CORE_CONSOLE if [HAS_IOMEM && SERIAL_NETX="y"]
    inherited [HAS_IOMEM && SERIAL_NETX="y"]
   }
  }
  config SERIAL_OF_PLATFORM tristate {
   prompt "Serial port on Open Firmware platform bus" if [HAS_IOMEM && (PPC_OF || MICROBLAZE) && (SERIAL_8250 || SERIAL_OF_PLATFORM_NWPSERIAL)]
   depends on [PPC_OF || MICROBLAZE]
   depends on [SERIAL_8250 || SERIAL_OF_PLATFORM_NWPSERIAL]
   inherited [HAS_IOMEM && (PPC_OF || MICROBLAZE) && (SERIAL_8250 || SERIAL_OF_PLATFORM_NWPSERIAL)]
  }
  config SERIAL_OF_PLATFORM_NWPSERIAL tristate {
   prompt "NWP serial port driver" if [HAS_IOMEM && PPC_OF && PPC_DCR]
   depends on [PPC_OF && PPC_DCR]
   select SERIAL_OF_PLATFORM if [HAS_IOMEM && PPC_OF && PPC_DCR]
   select SERIAL_CORE_CONSOLE if [HAS_IOMEM && PPC_OF && PPC_DCR]
   select SERIAL_CORE if [HAS_IOMEM && PPC_OF && PPC_DCR]
   inherited [HAS_IOMEM && PPC_OF && PPC_DCR]
   config SERIAL_OF_PLATFORM_NWPSERIAL_CONSOLE boolean {
    prompt "Console on NWP serial port" if [HAS_IOMEM && SERIAL_OF_PLATFORM_NWPSERIAL="y"]
    depends on [SERIAL_OF_PLATFORM_NWPSERIAL="y"]
    select SERIAL_CORE_CONSOLE if [HAS_IOMEM && SERIAL_OF_PLATFORM_NWPSERIAL="y"]
    inherited [HAS_IOMEM && SERIAL_OF_PLATFORM_NWPSERIAL="y"]
   }
  }
  config SERIAL_QE tristate {
   prompt "Freescale QUICC Engine serial port support" if [HAS_IOMEM && QUICC_ENGINE]
   depends on [QUICC_ENGINE]
   select SERIAL_CORE if [HAS_IOMEM && QUICC_ENGINE]
   select FW_LOADER if [HAS_IOMEM && QUICC_ENGINE]
   default [n] if [HAS_IOMEM && QUICC_ENGINE]
   inherited [HAS_IOMEM && QUICC_ENGINE]
  }
  config SERIAL_SC26XX tristate {
   prompt "SC2681/SC2692 serial port support" if [HAS_IOMEM && SNI_RM]
   depends on [SNI_RM]
   select SERIAL_CORE if [HAS_IOMEM && SNI_RM]
   inherited [HAS_IOMEM && SNI_RM]
   config SERIAL_SC26XX_CONSOLE boolean {
    prompt "Console on SC2681/SC2692 serial port" if [HAS_IOMEM && SERIAL_SC26XX]
    depends on [SERIAL_SC26XX]
    select SERIAL_CORE_CONSOLE if [HAS_IOMEM && SERIAL_SC26XX]
    inherited [HAS_IOMEM && SERIAL_SC26XX]
   }
  }
  config SERIAL_BFIN_SPORT tristate {
   prompt "Blackfin SPORT emulate UART (EXPERIMENTAL)" if [HAS_IOMEM && BLACKFIN && EXPERIMENTAL]
   depends on [BLACKFIN && EXPERIMENTAL]
   select SERIAL_CORE if [HAS_IOMEM && BLACKFIN && EXPERIMENTAL]
   inherited [HAS_IOMEM && BLACKFIN && EXPERIMENTAL]
   choice boolean {
    prompt "Baud rate for Blackfin SPORT UART" if [HAS_IOMEM && SERIAL_BFIN_SPORT]
    depends on [SERIAL_BFIN_SPORT]
    default [SERIAL_SPORT_BAUD_RATE_57600] if [HAS_IOMEM && SERIAL_BFIN_SPORT]
    config SERIAL_SPORT_BAUD_RATE_115200 boolean {
     prompt "115200" if [<choice>]
     inherited [<choice>]
    }
    config SERIAL_SPORT_BAUD_RATE_57600 boolean {
     prompt "57600" if [<choice>]
     inherited [<choice>]
    }
    config SERIAL_SPORT_BAUD_RATE_38400 boolean {
     prompt "38400" if [<choice>]
     inherited [<choice>]
    }
    config SERIAL_SPORT_BAUD_RATE_19200 boolean {
     prompt "19200" if [<choice>]
     inherited [<choice>]
    }
    config SERIAL_SPORT_BAUD_RATE_9600 boolean {
     prompt "9600" if [<choice>]
     inherited [<choice>]
    }
   }
   config SPORT_BAUD_RATE integer {
    depends on [SERIAL_BFIN_SPORT]
    default [115200] if [HAS_IOMEM && SERIAL_BFIN_SPORT && SERIAL_SPORT_BAUD_RATE_115200]
    default [57600] if [HAS_IOMEM && SERIAL_BFIN_SPORT && SERIAL_SPORT_BAUD_RATE_57600]
    default [38400] if [HAS_IOMEM && SERIAL_BFIN_SPORT && SERIAL_SPORT_BAUD_RATE_38400]
    default [19200] if [HAS_IOMEM && SERIAL_BFIN_SPORT && SERIAL_SPORT_BAUD_RATE_19200]
    default [9600] if [HAS_IOMEM && SERIAL_BFIN_SPORT && SERIAL_SPORT_BAUD_RATE_9600]
    inherited [HAS_IOMEM && SERIAL_BFIN_SPORT]
   }
  }
  config SERIAL_TIMBERDALE tristate {
   prompt "Support for timberdale UART" if [HAS_IOMEM && MFD_TIMBERDALE]
   depends on [MFD_TIMBERDALE]
   select SERIAL_CORE if [HAS_IOMEM && MFD_TIMBERDALE]
   inherited [HAS_IOMEM && MFD_TIMBERDALE]
  }
  config SERIAL_BCM63XX tristate {
   prompt "bcm63xx serial port support" if [HAS_IOMEM && BCM63XX]
   select SERIAL_CORE if [HAS_IOMEM && BCM63XX]
   depends on [BCM63XX]
   inherited [HAS_IOMEM && BCM63XX]
   config SERIAL_BCM63XX_CONSOLE boolean {
    prompt "Console on bcm63xx serial port" if [HAS_IOMEM && SERIAL_BCM63XX="y"]
    depends on [SERIAL_BCM63XX="y"]
    select SERIAL_CORE_CONSOLE if [HAS_IOMEM && SERIAL_BCM63XX="y"]
    inherited [HAS_IOMEM && SERIAL_BCM63XX="y"]
   }
  }
  config SERIAL_GRLIB_GAISLER_APBUART tristate {
   prompt "GRLIB APBUART serial support" if [HAS_IOMEM && OF]
   depends on [OF]
   inherited [HAS_IOMEM && OF]
   config SERIAL_GRLIB_GAISLER_APBUART_CONSOLE boolean {
    prompt "Console on GRLIB APBUART serial port" if [HAS_IOMEM && SERIAL_GRLIB_GAISLER_APBUART="y"]
    depends on [SERIAL_GRLIB_GAISLER_APBUART="y"]
    select SERIAL_CORE_CONSOLE if [HAS_IOMEM && SERIAL_GRLIB_GAISLER_APBUART="y"]
    inherited [HAS_IOMEM && SERIAL_GRLIB_GAISLER_APBUART="y"]
   }
  }
 }
 config UNIX98_PTYS boolean {
  prompt "Unix98 PTY support" if [EMBEDDED]
  default [y] if []
  config DEVPTS_MULTIPLE_INSTANCES boolean {
   prompt "Support multiple instances of devpts" if [UNIX98_PTYS]
   depends on [UNIX98_PTYS]
   default [n] if [UNIX98_PTYS]
   inherited [UNIX98_PTYS]
  }
 }
 config LEGACY_PTYS boolean {
  prompt "Legacy (BSD) PTY support" if []
  default [y] if []
  config LEGACY_PTY_COUNT integer {
   prompt "Maximum number of legacy PTY in use" if [LEGACY_PTYS]
   depends on [LEGACY_PTYS]
   range [0 256] if [LEGACY_PTYS]
   default [256] if [LEGACY_PTYS]
   inherited [LEGACY_PTYS]
  }
 }
 config BRIQ_PANEL tristate {
  prompt "Total Impact briQ front panel driver" if [PPC_CHRP]
  depends on [PPC_CHRP]
  inherited [PPC_CHRP]
 }
 config BFIN_OTP tristate {
  prompt "Blackfin On-Chip OTP Memory Support" if [BLACKFIN && (BF51x || BF52x || BF54x)]
  depends on [BLACKFIN && (BF51x || BF52x || BF54x)]
  default [y] if [BLACKFIN && (BF51x || BF52x || BF54x)]
  inherited [BLACKFIN && (BF51x || BF52x || BF54x)]
  config BFIN_OTP_WRITE_ENABLE boolean {
   prompt "Enable writing support of OTP pages" if [BFIN_OTP]
   depends on [BFIN_OTP]
   default [n] if [BFIN_OTP]
   inherited [BFIN_OTP]
  }
 }
 config PRINTER tristate {
  prompt "Parallel printer support" if [PARPORT]
  depends on [PARPORT]
  inherited [PARPORT]
  config LP_CONSOLE boolean {
   prompt "Support for console on line printer" if [PRINTER]
   depends on [PRINTER]
   inherited [PRINTER]
  }
 }
 config PPDEV tristate {
  prompt "Support for user-space parallel port device drivers" if [PARPORT]
  depends on [PARPORT]
  inherited [PARPORT]
 }
 config HVC_DRIVER boolean {
 }
 config HVC_IRQ boolean {
 }
 config HVC_CONSOLE boolean {
  prompt "pSeries Hypervisor Virtual Console support" if [PPC_PSERIES]
  depends on [PPC_PSERIES]
  select HVC_DRIVER if [PPC_PSERIES]
  select HVC_IRQ if [PPC_PSERIES]
  inherited [PPC_PSERIES]
 }
 config HVC_ISERIES boolean {
  prompt "iSeries Hypervisor Virtual Console support" if [PPC_ISERIES]
  depends on [PPC_ISERIES]
  default [y] if [PPC_ISERIES]
  select HVC_DRIVER if [PPC_ISERIES]
  select HVC_IRQ if [PPC_ISERIES]
  select VIOPATH if [PPC_ISERIES]
  inherited [PPC_ISERIES]
 }
 config HVC_RTAS boolean {
  prompt "IBM RTAS Console support" if [PPC_RTAS]
  depends on [PPC_RTAS]
  select HVC_DRIVER if [PPC_RTAS]
  inherited [PPC_RTAS]
 }
 config HVC_BEAT boolean {
  prompt "Toshiba's Beat Hypervisor Console support" if [PPC_CELLEB]
  depends on [PPC_CELLEB]
  select HVC_DRIVER if [PPC_CELLEB]
  inherited [PPC_CELLEB]
 }
 config HVC_IUCV boolean {
  prompt "z/VM IUCV Hypervisor console support (VM only)" if [S390]
  depends on [S390]
  select HVC_DRIVER if [S390]
  select IUCV if [S390]
  default [y] if [S390]
  inherited [S390]
 }
 config HVC_XEN boolean {
  prompt "Xen Hypervisor Console support" if [XEN]
  depends on [XEN]
  select HVC_DRIVER if [XEN]
  select HVC_IRQ if [XEN]
  default [y] if [XEN]
  inherited [XEN]
 }
 config HVC_UDBG boolean {
  prompt "udbg based fake hypervisor console" if [PPC && EXPERIMENTAL]
  depends on [PPC && EXPERIMENTAL]
  select HVC_DRIVER if [PPC && EXPERIMENTAL]
  default [n] if [PPC && EXPERIMENTAL]
  inherited [PPC && EXPERIMENTAL]
 }
 config VIRTIO_CONSOLE tristate {
  prompt "Virtio console" if [VIRTIO]
  depends on [VIRTIO]
  select HVC_DRIVER if [VIRTIO]
  inherited [VIRTIO]
 }
 config HVCS tristate {
  prompt "IBM Hypervisor Virtual Console Server support" if [PPC_PSERIES && HVC_CONSOLE]
  depends on [PPC_PSERIES && HVC_CONSOLE]
  inherited [PPC_PSERIES && HVC_CONSOLE]
 }
 config IBM_BSR tristate {
  prompt "IBM POWER Barrier Synchronization Register support" if [PPC_PSERIES]
  depends on [PPC_PSERIES]
  inherited [PPC_PSERIES]
 }
 menuconfig IPMI_HANDLER tristate {
  prompt "IPMI top-level message handler" if [HAS_IOMEM]
  depends on [HAS_IOMEM]
  inherited [HAS_IOMEM]
  if [IPMI_HANDLER] {
   config IPMI_PANIC_EVENT boolean {
    prompt "Generate a panic event to all BMCs on a panic" if [IPMI_HANDLER]
    inherited [IPMI_HANDLER]
    config IPMI_PANIC_STRING boolean {
     prompt "Generate OEM events containing the panic string" if [IPMI_HANDLER && IPMI_PANIC_EVENT]
     depends on [IPMI_PANIC_EVENT]
     inherited [IPMI_HANDLER && IPMI_PANIC_EVENT]
    }
   }
   config IPMI_DEVICE_INTERFACE tristate {
    prompt "Device interface for IPMI" if [IPMI_HANDLER]
    inherited [IPMI_HANDLER]
   }
   config IPMI_SI tristate {
    prompt "IPMI System Interface handler" if [IPMI_HANDLER]
    inherited [IPMI_HANDLER]
   }
   config IPMI_WATCHDOG tristate {
    prompt "IPMI Watchdog Timer" if [IPMI_HANDLER]
    inherited [IPMI_HANDLER]
   }
   config IPMI_POWEROFF tristate {
    prompt "IPMI Poweroff" if [IPMI_HANDLER]
    inherited [IPMI_HANDLER]
   }
  }
 }
 config DS1620 tristate {
  prompt "NetWinder thermometer support" if [ARCH_NETWINDER]
  depends on [ARCH_NETWINDER]
  inherited [ARCH_NETWINDER]
 }
 config NWBUTTON tristate {
  prompt "NetWinder Button" if [ARCH_NETWINDER]
  depends on [ARCH_NETWINDER]
  inherited [ARCH_NETWINDER]
  config NWBUTTON_REBOOT boolean {
   prompt "Reboot Using Button" if [NWBUTTON]
   depends on [NWBUTTON]
   inherited [NWBUTTON]
  }
 }
 config NWFLASH tristate {
  prompt "NetWinder flash support" if [ARCH_NETWINDER]
  depends on [ARCH_NETWINDER]
  inherited [ARCH_NETWINDER]
 }
 config HW_RANDOM tristate {
  prompt "Hardware Random Number Generator Core support" if []
  default [m] if []
  config HW_RANDOM_TIMERIOMEM tristate {
   prompt "Timer IOMEM HW Random Number Generator support" if [HW_RANDOM && HAS_IOMEM]
   depends on [HW_RANDOM && HAS_IOMEM]
   inherited [HW_RANDOM && HAS_IOMEM]
  }
  config HW_RANDOM_INTEL tristate {
   prompt "Intel HW Random Number Generator support" if [HW_RANDOM && (X86 || IA64) && PCI]
   depends on [HW_RANDOM && (X86 || IA64) && PCI]
   default [HW_RANDOM] if [HW_RANDOM && (X86 || IA64) && PCI]
   inherited [HW_RANDOM && (X86 || IA64) && PCI]
  }
  config HW_RANDOM_AMD tristate {
   prompt "AMD HW Random Number Generator support" if [HW_RANDOM && X86 && PCI]
   depends on [HW_RANDOM && X86 && PCI]
   default [HW_RANDOM] if [HW_RANDOM && X86 && PCI]
   inherited [HW_RANDOM && X86 && PCI]
  }
  config HW_RANDOM_GEODE tristate {
   prompt "AMD Geode HW Random Number Generator support" if [HW_RANDOM && X86_32 && PCI]
   depends on [HW_RANDOM && X86_32 && PCI]
   default [HW_RANDOM] if [HW_RANDOM && X86_32 && PCI]
   inherited [HW_RANDOM && X86_32 && PCI]
  }
  config HW_RANDOM_N2RNG tristate {
   prompt "Niagara2 Random Number Generator support" if [HW_RANDOM && SPARC64]
   depends on [HW_RANDOM && SPARC64]
   default [HW_RANDOM] if [HW_RANDOM && SPARC64]
   inherited [HW_RANDOM && SPARC64]
  }
  config HW_RANDOM_VIA tristate {
   prompt "VIA HW Random Number Generator support" if [HW_RANDOM && X86]
   depends on [HW_RANDOM && X86]
   default [HW_RANDOM] if [HW_RANDOM && X86]
   inherited [HW_RANDOM && X86]
  }
  config HW_RANDOM_IXP4XX tristate {
   prompt "Intel IXP4xx NPU HW Random Number Generator support" if [HW_RANDOM && ARCH_IXP4XX]
   depends on [HW_RANDOM && ARCH_IXP4XX]
   default [HW_RANDOM] if [HW_RANDOM && ARCH_IXP4XX]
   inherited [HW_RANDOM && ARCH_IXP4XX]
  }
  config HW_RANDOM_OMAP tristate {
   prompt "OMAP Random Number Generator support" if [HW_RANDOM && (ARCH_OMAP16XX || ARCH_OMAP24XX)]
   depends on [HW_RANDOM && (ARCH_OMAP16XX || ARCH_OMAP24XX)]
   default [HW_RANDOM] if [HW_RANDOM && (ARCH_OMAP16XX || ARCH_OMAP24XX)]
   inherited [HW_RANDOM && (ARCH_OMAP16XX || ARCH_OMAP24XX)]
  }
  config HW_RANDOM_OCTEON tristate {
   prompt "Octeon Random Number Generator support" if [HW_RANDOM && CPU_CAVIUM_OCTEON]
   depends on [HW_RANDOM && CPU_CAVIUM_OCTEON]
   default [HW_RANDOM] if [HW_RANDOM && CPU_CAVIUM_OCTEON]
   inherited [HW_RANDOM && CPU_CAVIUM_OCTEON]
  }
  config HW_RANDOM_PASEMI tristate {
   prompt "PA Semi HW Random Number Generator support" if [HW_RANDOM && PPC_PASEMI]
   depends on [HW_RANDOM && PPC_PASEMI]
   default [HW_RANDOM] if [HW_RANDOM && PPC_PASEMI]
   inherited [HW_RANDOM && PPC_PASEMI]
  }
  config HW_RANDOM_VIRTIO tristate {
   prompt "VirtIO Random Number Generator support" if [HW_RANDOM && VIRTIO]
   depends on [HW_RANDOM && VIRTIO]
   inherited [HW_RANDOM && VIRTIO]
  }
  config HW_RANDOM_TX4939 tristate {
   prompt "TX4939 Random Number Generator support" if [HW_RANDOM && SOC_TX4939]
   depends on [HW_RANDOM && SOC_TX4939]
   default [HW_RANDOM] if [HW_RANDOM && SOC_TX4939]
   inherited [HW_RANDOM && SOC_TX4939]
  }
  config HW_RANDOM_MXC_RNGA tristate {
   prompt "Freescale i.MX RNGA Random Number Generator" if [HW_RANDOM && ARCH_HAS_RNGA]
   depends on [HW_RANDOM && ARCH_HAS_RNGA]
   inherited [HW_RANDOM && ARCH_HAS_RNGA]
  }
 }
 config NVRAM tristate {
  prompt "/dev/nvram support" if [ATARI || X86 || ARM && RTC_DRV_CMOS || GENERIC_NVRAM]
  depends on [ATARI || X86 || ARM && RTC_DRV_CMOS || GENERIC_NVRAM]
  inherited [ATARI || X86 || ARM && RTC_DRV_CMOS || GENERIC_NVRAM]
 }
 if [RTC_LIB="n"] {
  config RTC tristate {
   prompt "Enhanced Real Time Clock Support (legacy PC RTC driver)" if [RTC_LIB="n" && !PPC && !PARISC && !IA64 && !M68K && !SPARC && !FRV && !ARM && !SUPERH && !S390 && !AVR32 && !BLACKFIN]
   depends on [!PPC && !PARISC && !IA64 && !M68K && !SPARC && !FRV && !ARM && !SUPERH && !S390 && !AVR32 && !BLACKFIN]
   inherited [RTC_LIB="n" && !PPC && !PARISC && !IA64 && !M68K && !SPARC && !FRV && !ARM && !SUPERH && !S390 && !AVR32 && !BLACKFIN]
  }
  config JS_RTC tristate {
   prompt "Enhanced Real Time Clock Support" if [RTC_LIB="n" && SPARC32 && PCI]
   depends on [SPARC32 && PCI]
   inherited [RTC_LIB="n" && SPARC32 && PCI]
  }
  config GEN_RTC tristate {
   prompt "Generic /dev/rtc emulation" if [RTC_LIB="n" && RTC!="y" && !IA64 && !ARM && !M32R && !MIPS && !SPARC && !FRV && !S390 && !SUPERH && !AVR32 && !BLACKFIN]
   depends on [RTC!="y" && !IA64 && !ARM && !M32R && !MIPS && !SPARC && !FRV && !S390 && !SUPERH && !AVR32 && !BLACKFIN]
   inherited [RTC_LIB="n" && RTC!="y" && !IA64 && !ARM && !M32R && !MIPS && !SPARC && !FRV && !S390 && !SUPERH && !AVR32 && !BLACKFIN]
   config GEN_RTC_X boolean {
    prompt "Extended RTC operation" if [RTC_LIB="n" && GEN_RTC]
    depends on [GEN_RTC]
    inherited [RTC_LIB="n" && GEN_RTC]
   }
  }
  config EFI_RTC boolean {
   prompt "EFI Real Time Clock Services" if [RTC_LIB="n" && IA64]
   depends on [IA64]
   inherited [RTC_LIB="n" && IA64]
  }
  config DS1302 tristate {
   prompt "DS1302 RTC support" if [RTC_LIB="n" && M32R && (PLAT_M32700UT || PLAT_OPSPUT)]
   depends on [M32R && (PLAT_M32700UT || PLAT_OPSPUT)]
   inherited [RTC_LIB="n" && M32R && (PLAT_M32700UT || PLAT_OPSPUT)]
  }
 }
 config DTLK tristate {
  prompt "Double Talk PC internal speech card support" if [ISA]
  depends on [ISA]
  inherited [ISA]
 }
 config XILINX_HWICAP tristate {
  prompt "Xilinx HWICAP Support" if [XILINX_VIRTEX || MICROBLAZE]
  depends on [XILINX_VIRTEX || MICROBLAZE]
  inherited [XILINX_VIRTEX || MICROBLAZE]
 }
 config R3964 tristate {
  prompt "Siemens R3964 line discipline" if []
 }
 config APPLICOM tristate {
  prompt "Applicom intelligent fieldbus card support" if [PCI]
  depends on [PCI]
  inherited [PCI]
 }
 config SONYPI tristate {
  prompt "Sony Vaio Programmable I/O Control Device support (EXPERIMENTAL)" if [EXPERIMENTAL && X86 && PCI && INPUT && !64BIT]
  depends on [EXPERIMENTAL && X86 && PCI && INPUT && !64BIT]
  inherited [EXPERIMENTAL && X86 && PCI && INPUT && !64BIT]
 }
 config GPIO_TB0219 tristate {
  prompt "TANBAC TB0219 GPIO support" if [TANBAC_TB022X]
  depends on [TANBAC_TB022X]
  select GPIO_VR41XX if [TANBAC_TB022X]
  inherited [TANBAC_TB022X]
 }
 menu "PCMCIA character devices" {
  depends on [HOTPLUG && PCMCIA!="n"]
  config SYNCLINK_CS tristate {
   prompt "SyncLink PC Card support" if [HOTPLUG && PCMCIA!="n" && PCMCIA]
   depends on [PCMCIA]
   inherited [HOTPLUG && PCMCIA!="n" && PCMCIA]
  }
  config CARDMAN_4000 tristate {
   prompt "Omnikey Cardman 4000 support" if [HOTPLUG && PCMCIA!="n" && PCMCIA]
   depends on [PCMCIA]
   select BITREVERSE if [HOTPLUG && PCMCIA!="n" && PCMCIA]
   inherited [HOTPLUG && PCMCIA!="n" && PCMCIA]
  }
  config CARDMAN_4040 tristate {
   prompt "Omnikey CardMan 4040 support" if [HOTPLUG && PCMCIA!="n" && PCMCIA]
   depends on [PCMCIA]
   inherited [HOTPLUG && PCMCIA!="n" && PCMCIA]
  }
  config IPWIRELESS tristate {
   prompt "IPWireless 3G UMTS PCMCIA card support" if [HOTPLUG && PCMCIA!="n" && PCMCIA && NETDEVICES]
   depends on [PCMCIA && NETDEVICES]
   select PPP if [HOTPLUG && PCMCIA!="n" && PCMCIA && NETDEVICES]
   inherited [HOTPLUG && PCMCIA!="n" && PCMCIA && NETDEVICES]
  }
 }
 config MWAVE tristate {
  prompt "ACP Modem (Mwave) support" if [X86]
  depends on [X86]
  select SERIAL_8250 if [X86]
  inherited [X86]
 }
 config SCx200_GPIO tristate {
  prompt "NatSemi SCx200 GPIO Support" if [SCx200]
  depends on [SCx200]
  select NSC_GPIO if [SCx200]
  inherited [SCx200]
 }
 config PC8736x_GPIO tristate {
  prompt "NatSemi PC8736x GPIO Support" if [X86]
  depends on [X86]
  default [SCx200_GPIO] if [X86]
  select NSC_GPIO if [X86]
  inherited [X86]
 }
 config NSC_GPIO tristate {
  prompt "NatSemi Base GPIO Support" if [X86_32]
  depends on [X86_32]
  inherited [X86_32]
 }
 config CS5535_GPIO tristate {
  prompt "AMD CS5535/CS5536 GPIO (Geode Companion Device)" if [X86_32]
  depends on [X86_32]
  inherited [X86_32]
 }
 config RAW_DRIVER tristate {
  prompt "RAW driver (/dev/raw/rawN)" if [BLOCK]
  depends on [BLOCK]
  inherited [BLOCK]
  config MAX_RAW_DEVS integer {
   prompt "Maximum number of RAW devices to support (1-8192)" if [RAW_DRIVER]
   depends on [RAW_DRIVER]
   default [256] if [RAW_DRIVER]
   inherited [RAW_DRIVER]
  }
 }
 config HPET boolean {
  prompt "HPET - High Precision Event Timer" if [ACPI && (X86 || IA64)]
  default [n] if [ACPI]
  depends on [ACPI]
  inherited [ACPI]
  config HPET_MMAP boolean {
   prompt "Allow mmap of HPET" if [HPET]
   default [y] if [HPET]
   depends on [HPET]
   inherited [HPET]
  }
 }
 config HANGCHECK_TIMER tristate {
  prompt "Hangcheck timer" if [X86 || IA64 || PPC64 || S390]
  depends on [X86 || IA64 || PPC64 || S390]
  inherited [X86 || IA64 || PPC64 || S390]
 }
 config MMTIMER tristate {
  prompt "MMTIMER Memory mapped RTC for SGI Altix" if [IA64_GENERIC || IA64_SGI_SN2]
  depends on [IA64_GENERIC || IA64_SGI_SN2]
  default [y] if [IA64_GENERIC || IA64_SGI_SN2]
  inherited [IA64_GENERIC || IA64_SGI_SN2]
 }
 config UV_MMTIMER tristate {
  prompt "UV_MMTIMER Memory mapped RTC for SGI UV" if [X86_UV]
  depends on [X86_UV]
  default [m] if [X86_UV]
  inherited [X86_UV]
 }
 menuconfig TCG_TPM tristate {
  prompt "TPM Hardware Support" if [HAS_IOMEM && EXPERIMENTAL]
  depends on [HAS_IOMEM]
  depends on [EXPERIMENTAL]
  select SECURITYFS if [HAS_IOMEM && EXPERIMENTAL]
  inherited [HAS_IOMEM && EXPERIMENTAL]
  if [TCG_TPM] {
   config TCG_TIS tristate {
    prompt "TPM Interface Specification 1.2 Interface" if [TCG_TPM && PNP]
    depends on [PNP]
    inherited [TCG_TPM && PNP]
   }
   config TCG_NSC tristate {
    prompt "National Semiconductor TPM Interface" if [TCG_TPM]
    inherited [TCG_TPM]
   }
   config TCG_ATMEL tristate {
    prompt "Atmel TPM Interface" if [TCG_TPM]
    inherited [TCG_TPM]
   }
   config TCG_INFINEON tristate {
    prompt "Infineon Technologies TPM Interface" if [TCG_TPM && PNP]
    depends on [PNP]
    inherited [TCG_TPM && PNP]
   }
  }
 }
 config TELCLOCK tristate {
  prompt "Telecom clock driver for ATCA SBC" if [EXPERIMENTAL && X86]
  depends on [EXPERIMENTAL && X86]
  default [n] if [EXPERIMENTAL && X86]
  inherited [EXPERIMENTAL && X86]
 }
 config DEVPORT boolean {
  depends on [!M68K]
  depends on [ISA || PCI]
  default [y] if [!M68K && (ISA || PCI)]
  inherited [!M68K && (ISA || PCI)]
 }
 config TN3270 tristate {
  prompt "Support for locally attached 3270 terminals" if [CCW]
  depends on [CCW]
  inherited [CCW]
  config TN3270_TTY tristate {
   prompt "Support for tty input/output on 3270 terminals" if [TN3270]
   depends on [TN3270]
   inherited [TN3270]
  }
  config TN3270_FS tristate {
   prompt "Support for fullscreen applications on 3270 terminals" if [TN3270]
   depends on [TN3270]
   inherited [TN3270]
  }
  config TN3270_CONSOLE boolean {
   prompt "Support for console on 3270 terminal" if [TN3270="y" && TN3270_TTY="y"]
   depends on [TN3270="y" && TN3270_TTY="y"]
   inherited [TN3270="y" && TN3270_TTY="y"]
  }
 }
 config TN3215 boolean {
  prompt "Support for 3215 line mode terminal" if [CCW]
  depends on [CCW]
  inherited [CCW]
  config TN3215_CONSOLE boolean {
   prompt "Support for console on 3215 line mode terminal" if [TN3215]
   depends on [TN3215]
   inherited [TN3215]
  }
 }
 config CCW_CONSOLE boolean {
  depends on [TN3215_CONSOLE || TN3270_CONSOLE]
  default [y] if [TN3215_CONSOLE || TN3270_CONSOLE]
  inherited [TN3215_CONSOLE || TN3270_CONSOLE]
 }
 config SCLP_TTY boolean {
  prompt "Support for SCLP line mode terminal" if [S390]
  depends on [S390]
  inherited [S390]
  config SCLP_CONSOLE boolean {
   prompt "Support for console on SCLP line mode terminal" if [SCLP_TTY]
   depends on [SCLP_TTY]
   inherited [SCLP_TTY]
  }
 }
 config SCLP_VT220_TTY boolean {
  prompt "Support for SCLP VT220-compatible terminal" if [S390]
  depends on [S390]
  inherited [S390]
  config SCLP_VT220_CONSOLE boolean {
   prompt "Support for console on SCLP VT220-compatible terminal" if [SCLP_VT220_TTY]
   depends on [SCLP_VT220_TTY]
   inherited [SCLP_VT220_TTY]
  }
 }
 config SCLP_CPI tristate {
  prompt "Control-Program Identification" if [S390]
  depends on [S390]
  inherited [S390]
 }
 config SCLP_ASYNC tristate {
  prompt "Support for Call Home via Asynchronous SCLP Records" if [S390]
  depends on [S390]
  inherited [S390]
 }
 config S390_TAPE tristate {
  prompt "S/390 tape device support" if [CCW]
  depends on [CCW]
  inherited [CCW]
  config S390_TAPE_BLOCK boolean {
   prompt "Support for tape block devices" if [S390_TAPE && BLOCK]
   depends on [S390_TAPE && BLOCK]
   inherited [S390_TAPE && BLOCK]
  }
  config S390_TAPE_34XX tristate {
   prompt "Support for 3480/3490 tape hardware" if [S390_TAPE]
   depends on [S390_TAPE]
   inherited [S390_TAPE]
  }
  config S390_TAPE_3590 tristate {
   prompt "Support for 3590 tape hardware" if [S390_TAPE]
   depends on [S390_TAPE]
   inherited [S390_TAPE]
  }
 }
 config VMLOGRDR tristate {
  prompt "Support for the z/VM recording system services (VM only)" if [IUCV]
  depends on [IUCV]
  inherited [IUCV]
 }
 config VMCP tristate {
  prompt "Support for the z/VM CP interface (VM only)" if [S390]
  depends on [S390]
  inherited [S390]
 }
 config MONREADER tristate {
  prompt "API for reading z/VM monitor service records" if [IUCV]
  depends on [IUCV]
  inherited [IUCV]
 }
 config MONWRITER tristate {
  prompt "API for writing z/VM monitor service records" if [S390]
  depends on [S390]
  default [m] if [S390]
  inherited [S390]
 }
 config S390_VMUR tristate {
  prompt "z/VM unit record device driver" if [S390]
  depends on [S390]
  default [m] if [S390]
  inherited [S390]
 }
}
menu "File systems" {
 if [BLOCK] {
  config EXT2_FS tristate {
   prompt "Second extended fs support" if [BLOCK]
   inherited [BLOCK]
   config EXT2_FS_XATTR boolean {
    prompt "Ext2 extended attributes" if [BLOCK && EXT2_FS]
    depends on [EXT2_FS]
    inherited [BLOCK && EXT2_FS]
    config EXT2_FS_POSIX_ACL boolean {
     prompt "Ext2 POSIX Access Control Lists" if [BLOCK && EXT2_FS_XATTR]
     depends on [EXT2_FS_XATTR]
     select FS_POSIX_ACL if [BLOCK && EXT2_FS_XATTR]
     inherited [BLOCK && EXT2_FS_XATTR]
    }
    config EXT2_FS_SECURITY boolean {
     prompt "Ext2 Security Labels" if [BLOCK && EXT2_FS_XATTR]
     depends on [EXT2_FS_XATTR]
     inherited [BLOCK && EXT2_FS_XATTR]
    }
   }
   config EXT2_FS_XIP boolean {
    prompt "Ext2 execute in place support" if [BLOCK && EXT2_FS && MMU]
    depends on [EXT2_FS && MMU]
    inherited [BLOCK && EXT2_FS && MMU]
   }
  }
  config EXT3_FS tristate {
   prompt "Ext3 journalling file system support" if [BLOCK]
   select JBD if [BLOCK]
   inherited [BLOCK]
   config EXT3_DEFAULTS_TO_ORDERED boolean {
    prompt "Default to 'data=ordered' in ext3" if [BLOCK && EXT3_FS]
    depends on [EXT3_FS]
    inherited [BLOCK && EXT3_FS]
   }
   config EXT3_FS_XATTR boolean {
    prompt "Ext3 extended attributes" if [BLOCK && EXT3_FS]
    depends on [EXT3_FS]
    default [y] if [BLOCK && EXT3_FS]
    inherited [BLOCK && EXT3_FS]
    config EXT3_FS_POSIX_ACL boolean {
     prompt "Ext3 POSIX Access Control Lists" if [BLOCK && EXT3_FS_XATTR]
     depends on [EXT3_FS_XATTR]
     select FS_POSIX_ACL if [BLOCK && EXT3_FS_XATTR]
     inherited [BLOCK && EXT3_FS_XATTR]
    }
    config EXT3_FS_SECURITY boolean {
     prompt "Ext3 Security Labels" if [BLOCK && EXT3_FS_XATTR]
     depends on [EXT3_FS_XATTR]
     inherited [BLOCK && EXT3_FS_XATTR]
    }
   }
  }
  config EXT4_FS tristate {
   prompt "The Extended 4 (ext4) filesystem" if [BLOCK]
   select JBD2 if [BLOCK]
   select CRC16 if [BLOCK]
   inherited [BLOCK]
   config EXT4_USE_FOR_EXT23 boolean {
    prompt "Use ext4 for ext2/ext3 file systems" if [BLOCK && EXT4_FS && (EXT3_FS="n" || EXT2_FS="n")]
    depends on [EXT4_FS]
    depends on [EXT3_FS="n" || EXT2_FS="n"]
    default [y] if [BLOCK && EXT4_FS && (EXT3_FS="n" || EXT2_FS="n")]
    inherited [BLOCK && EXT4_FS && (EXT3_FS="n" || EXT2_FS="n")]
   }
   config EXT4_FS_XATTR boolean {
    prompt "Ext4 extended attributes" if [BLOCK && EXT4_FS]
    depends on [EXT4_FS]
    default [y] if [BLOCK && EXT4_FS]
    inherited [BLOCK && EXT4_FS]
    config EXT4_FS_POSIX_ACL boolean {
     prompt "Ext4 POSIX Access Control Lists" if [BLOCK && EXT4_FS_XATTR]
     depends on [EXT4_FS_XATTR]
     select FS_POSIX_ACL if [BLOCK && EXT4_FS_XATTR]
     inherited [BLOCK && EXT4_FS_XATTR]
    }
    config EXT4_FS_SECURITY boolean {
     prompt "Ext4 Security Labels" if [BLOCK && EXT4_FS_XATTR]
     depends on [EXT4_FS_XATTR]
     inherited [BLOCK && EXT4_FS_XATTR]
    }
   }
   config EXT4_DEBUG boolean {
    prompt "EXT4 debugging support" if [BLOCK && EXT4_FS]
    depends on [EXT4_FS]
    inherited [BLOCK && EXT4_FS]
   }
  }
  config FS_XIP boolean {
   depends on [EXT2_FS_XIP]
   default [y] if [BLOCK && EXT2_FS_XIP]
   inherited [BLOCK && EXT2_FS_XIP]
  }
  config JBD tristate {
   inherited [BLOCK]
  }
  config JBD_DEBUG boolean {
   prompt "JBD (ext3) debugging support" if [BLOCK && JBD && DEBUG_FS]
   depends on [JBD && DEBUG_FS]
   inherited [BLOCK && JBD && DEBUG_FS]
  }
  config JBD2 tristate {
   select CRC32 if [BLOCK]
   inherited [BLOCK]
  }
  config JBD2_DEBUG boolean {
   prompt "JBD2 (ext4) debugging support" if [BLOCK && JBD2 && DEBUG_FS]
   depends on [JBD2 && DEBUG_FS]
   inherited [BLOCK && JBD2 && DEBUG_FS]
  }
  config FS_MBCACHE tristate {
   default [y] if [BLOCK && EXT2_FS="y" && EXT2_FS_XATTR]
   default [y] if [BLOCK && EXT3_FS="y" && EXT3_FS_XATTR]
   default [y] if [BLOCK && EXT4_FS="y" && EXT4_FS_XATTR]
   default [m] if [BLOCK && (EXT2_FS_XATTR || EXT3_FS_XATTR || EXT4_FS_XATTR)]
   inherited [BLOCK]
  }
  config REISERFS_FS tristate {
   prompt "Reiserfs support" if [BLOCK]
   select CRC32 if [BLOCK]
   inherited [BLOCK]
   config REISERFS_CHECK boolean {
    prompt "Enable reiserfs debug mode" if [BLOCK && REISERFS_FS]
    depends on [REISERFS_FS]
    inherited [BLOCK && REISERFS_FS]
   }
   config REISERFS_PROC_INFO boolean {
    prompt "Stats in /proc/fs/reiserfs" if [BLOCK && REISERFS_FS && PROC_FS]
    depends on [REISERFS_FS && PROC_FS]
    inherited [BLOCK && REISERFS_FS && PROC_FS]
   }
   config REISERFS_FS_XATTR boolean {
    prompt "ReiserFS extended attributes" if [BLOCK && REISERFS_FS]
    depends on [REISERFS_FS]
    inherited [BLOCK && REISERFS_FS]
    config REISERFS_FS_POSIX_ACL boolean {
     prompt "ReiserFS POSIX Access Control Lists" if [BLOCK && REISERFS_FS_XATTR]
     depends on [REISERFS_FS_XATTR]
     select FS_POSIX_ACL if [BLOCK && REISERFS_FS_XATTR]
     inherited [BLOCK && REISERFS_FS_XATTR]
    }
    config REISERFS_FS_SECURITY boolean {
     prompt "ReiserFS Security Labels" if [BLOCK && REISERFS_FS_XATTR]
     depends on [REISERFS_FS_XATTR]
     inherited [BLOCK && REISERFS_FS_XATTR]
    }
   }
  }
  config JFS_FS tristate {
   prompt "JFS filesystem support" if [BLOCK]
   select NLS if [BLOCK]
   select CRC32 if [BLOCK]
   inherited [BLOCK]
   config JFS_POSIX_ACL boolean {
    prompt "JFS POSIX Access Control Lists" if [BLOCK && JFS_FS]
    depends on [JFS_FS]
    select FS_POSIX_ACL if [BLOCK && JFS_FS]
    inherited [BLOCK && JFS_FS]
   }
   config JFS_SECURITY boolean {
    prompt "JFS Security Labels" if [BLOCK && JFS_FS]
    depends on [JFS_FS]
    inherited [BLOCK && JFS_FS]
   }
   config JFS_DEBUG boolean {
    prompt "JFS debugging" if [BLOCK && JFS_FS]
    depends on [JFS_FS]
    inherited [BLOCK && JFS_FS]
   }
   config JFS_STATISTICS boolean {
    prompt "JFS statistics" if [BLOCK && JFS_FS]
    depends on [JFS_FS]
    inherited [BLOCK && JFS_FS]
   }
  }
  config FS_POSIX_ACL boolean {
   default [n] if [BLOCK]
   inherited [BLOCK]
  }
  config XFS_FS tristate {
   prompt "XFS filesystem support" if [BLOCK]
   depends on [BLOCK]
   select EXPORTFS if [BLOCK]
   inherited [BLOCK]
   config XFS_QUOTA boolean {
    prompt "XFS Quota support" if [BLOCK && XFS_FS]
    depends on [XFS_FS]
    inherited [BLOCK && XFS_FS]
   }
   config XFS_POSIX_ACL boolean {
    prompt "XFS POSIX ACL support" if [BLOCK && XFS_FS]
    depends on [XFS_FS]
    select FS_POSIX_ACL if [BLOCK && XFS_FS]
    inherited [BLOCK && XFS_FS]
   }
   config XFS_RT boolean {
    prompt "XFS Realtime subvolume support" if [BLOCK && XFS_FS]
    depends on [XFS_FS]
    inherited [BLOCK && XFS_FS]
   }
   config XFS_DEBUG boolean {
    prompt "XFS Debugging support (EXPERIMENTAL)" if [BLOCK && XFS_FS && EXPERIMENTAL]
    depends on [XFS_FS && EXPERIMENTAL]
    inherited [BLOCK && XFS_FS && EXPERIMENTAL]
   }
  }
  config GFS2_FS tristate {
   prompt "GFS2 file system support" if [BLOCK && EXPERIMENTAL && (64BIT || LBDAF)]
   depends on [EXPERIMENTAL && (64BIT || LBDAF)]
   select DLM if [BLOCK && EXPERIMENTAL && (64BIT || LBDAF) && GFS2_FS_LOCKING_DLM]
   select CONFIGFS_FS if [BLOCK && EXPERIMENTAL && (64BIT || LBDAF) && GFS2_FS_LOCKING_DLM]
   select SYSFS if [BLOCK && EXPERIMENTAL && (64BIT || LBDAF) && GFS2_FS_LOCKING_DLM]
   select IP_SCTP if [BLOCK && EXPERIMENTAL && (64BIT || LBDAF) && DLM_SCTP]
   select FS_POSIX_ACL if [BLOCK && EXPERIMENTAL && (64BIT || LBDAF)]
   select CRC32 if [BLOCK && EXPERIMENTAL && (64BIT || LBDAF)]
   select SLOW_WORK if [BLOCK && EXPERIMENTAL && (64BIT || LBDAF)]
   select QUOTA if [BLOCK && EXPERIMENTAL && (64BIT || LBDAF)]
   select QUOTACTL if [BLOCK && EXPERIMENTAL && (64BIT || LBDAF)]
   inherited [BLOCK && EXPERIMENTAL && (64BIT || LBDAF)]
   config GFS2_FS_LOCKING_DLM boolean {
    prompt "GFS2 DLM locking" if [BLOCK && GFS2_FS && NET && INET && (IPV6 || IPV6="n") && HOTPLUG]
    depends on [GFS2_FS && NET && INET && (IPV6 || IPV6="n") && HOTPLUG]
    inherited [BLOCK && GFS2_FS && NET && INET && (IPV6 || IPV6="n") && HOTPLUG]
   }
  }
  config OCFS2_FS tristate {
   prompt "OCFS2 file system support" if [BLOCK && NET && SYSFS]
   depends on [NET && SYSFS]
   select CONFIGFS_FS if [BLOCK && NET && SYSFS]
   select JBD2 if [BLOCK && NET && SYSFS]
   select CRC32 if [BLOCK && NET && SYSFS]
   select QUOTA if [BLOCK && NET && SYSFS]
   select QUOTA_TREE if [BLOCK && NET && SYSFS]
   select FS_POSIX_ACL if [BLOCK && NET && SYSFS]
   inherited [BLOCK && NET && SYSFS]
   config OCFS2_FS_O2CB tristate {
    prompt "O2CB Kernelspace Clustering" if [BLOCK && OCFS2_FS]
    depends on [OCFS2_FS]
    default [y] if [BLOCK && OCFS2_FS]
    inherited [BLOCK && OCFS2_FS]
   }
   config OCFS2_FS_USERSPACE_CLUSTER tristate {
    prompt "OCFS2 Userspace Clustering" if [BLOCK && OCFS2_FS && DLM]
    depends on [OCFS2_FS && DLM]
    default [y] if [BLOCK && OCFS2_FS && DLM]
    inherited [BLOCK && OCFS2_FS && DLM]
   }
   config OCFS2_FS_STATS boolean {
    prompt "OCFS2 statistics" if [BLOCK && OCFS2_FS]
    depends on [OCFS2_FS]
    default [y] if [BLOCK && OCFS2_FS]
    inherited [BLOCK && OCFS2_FS]
   }
   config OCFS2_DEBUG_MASKLOG boolean {
    prompt "OCFS2 logging support" if [BLOCK && OCFS2_FS]
    depends on [OCFS2_FS]
    default [y] if [BLOCK && OCFS2_FS]
    inherited [BLOCK && OCFS2_FS]
   }
   config OCFS2_DEBUG_FS boolean {
    prompt "OCFS2 expensive checks" if [BLOCK && OCFS2_FS]
    depends on [OCFS2_FS]
    default [n] if [BLOCK && OCFS2_FS]
    inherited [BLOCK && OCFS2_FS]
   }
  }
  config BTRFS_FS tristate {
   prompt "Btrfs filesystem (EXPERIMENTAL) Unstable disk format" if [BLOCK && EXPERIMENTAL]
   depends on [EXPERIMENTAL]
   select LIBCRC32C if [BLOCK && EXPERIMENTAL]
   select ZLIB_INFLATE if [BLOCK && EXPERIMENTAL]
   select ZLIB_DEFLATE if [BLOCK && EXPERIMENTAL]
   inherited [BLOCK && EXPERIMENTAL]
   config BTRFS_FS_POSIX_ACL boolean {
    prompt "Btrfs POSIX Access Control Lists" if [BLOCK && BTRFS_FS]
    depends on [BTRFS_FS]
    select FS_POSIX_ACL if [BLOCK && BTRFS_FS]
    inherited [BLOCK && BTRFS_FS]
   }
  }
  config NILFS2_FS tristate {
   prompt "NILFS2 file system support (EXPERIMENTAL)" if [BLOCK && EXPERIMENTAL]
   depends on [EXPERIMENTAL]
   select CRC32 if [BLOCK && EXPERIMENTAL]
   inherited [BLOCK && EXPERIMENTAL]
  }
 }
 config FILE_LOCKING boolean {
  prompt "Enable POSIX file locking API" if [EMBEDDED]
  default [y] if []
 }
 config FSNOTIFY boolean {
  default [n] if []
 }
 config DNOTIFY boolean {
  prompt "Dnotify support" if []
  select FSNOTIFY if []
  default [y] if []
 }
 config INOTIFY boolean {
  prompt "Inotify file change notification support" if []
  default [n] if []
 }
 config INOTIFY_USER boolean {
  prompt "Inotify support for userspace" if []
  select FSNOTIFY if []
  default [y] if []
 }
 config QUOTA boolean {
  prompt "Quota support" if []
 }
 config QUOTA_NETLINK_INTERFACE boolean {
  prompt "Report quota messages through netlink interface" if [QUOTACTL && NET]
  depends on [QUOTACTL && NET]
  inherited [QUOTACTL && NET]
 }
 config PRINT_QUOTA_WARNING boolean {
  prompt "Print quota warnings to console (OBSOLETE)" if [QUOTA]
  depends on [QUOTA]
  default [y] if [QUOTA]
  inherited [QUOTA]
 }
 config QUOTA_TREE tristate {
 }
 config QFMT_V1 tristate {
  prompt "Old quota format support" if [QUOTA]
  depends on [QUOTA]
  inherited [QUOTA]
 }
 config QFMT_V2 tristate {
  prompt "Quota format vfsv0 and vfsv1 support" if [QUOTA]
  depends on [QUOTA]
  select QUOTA_TREE if [QUOTA]
  inherited [QUOTA]
 }
 config QUOTACTL boolean {
  depends on [XFS_QUOTA || QUOTA]
  default [y] if [XFS_QUOTA || QUOTA]
  inherited [XFS_QUOTA || QUOTA]
 }
 config AUTOFS_FS tristate {
  prompt "Kernel automounter support" if []
 }
 config AUTOFS4_FS tristate {
  prompt "Kernel automounter version 4 support (also supports v3)" if []
 }
 config FUSE_FS tristate {
  prompt "FUSE (Filesystem in Userspace) support" if []
  config CUSE tristate {
   prompt "Character device in Userpace support" if [FUSE_FS]
   depends on [FUSE_FS]
   inherited [FUSE_FS]
  }
 }
 config GENERIC_ACL boolean {
  select FS_POSIX_ACL if []
 }
 menu "Caches" {
  config FSCACHE tristate {
   prompt "General filesystem local caching manager" if [EXPERIMENTAL]
   depends on [EXPERIMENTAL]
   select SLOW_WORK if [EXPERIMENTAL]
   inherited [EXPERIMENTAL]
   config FSCACHE_STATS boolean {
    prompt "Gather statistical information on local caching" if [FSCACHE && PROC_FS]
    depends on [FSCACHE && PROC_FS]
    inherited [FSCACHE && PROC_FS]
   }
   config FSCACHE_HISTOGRAM boolean {
    prompt "Gather latency information on local caching" if [FSCACHE && PROC_FS]
    depends on [FSCACHE && PROC_FS]
    inherited [FSCACHE && PROC_FS]
   }
   config FSCACHE_DEBUG boolean {
    prompt "Debug FS-Cache" if [FSCACHE]
    depends on [FSCACHE]
    inherited [FSCACHE]
   }
   config FSCACHE_OBJECT_LIST boolean {
    prompt "Maintain global object list for debugging purposes" if [FSCACHE && PROC_FS]
    depends on [FSCACHE && PROC_FS]
    inherited [FSCACHE && PROC_FS]
   }
   config CACHEFILES tristate {
    prompt "Filesystem caching on files" if [FSCACHE && BLOCK]
    depends on [FSCACHE && BLOCK]
    inherited [FSCACHE && BLOCK]
    config CACHEFILES_DEBUG boolean {
     prompt "Debug CacheFiles" if [CACHEFILES]
     depends on [CACHEFILES]
     inherited [CACHEFILES]
    }
    config CACHEFILES_HISTOGRAM boolean {
     prompt "Gather latency information on CacheFiles" if [CACHEFILES && PROC_FS]
     depends on [CACHEFILES && PROC_FS]
     inherited [CACHEFILES && PROC_FS]
    }
   }
  }
 }
 if [BLOCK] {
  menu "CD-ROM/DVD Filesystems" {
   depends on [BLOCK]
   config ISO9660_FS tristate {
    prompt "ISO 9660 CDROM file system support" if [BLOCK]
    inherited [BLOCK]
    config JOLIET boolean {
     prompt "Microsoft Joliet CDROM extensions" if [BLOCK && ISO9660_FS]
     depends on [ISO9660_FS]
     select NLS if [BLOCK && ISO9660_FS]
     inherited [BLOCK && ISO9660_FS]
    }
    config ZISOFS boolean {
     prompt "Transparent decompression extension" if [BLOCK && ISO9660_FS]
     depends on [ISO9660_FS]
     select ZLIB_INFLATE if [BLOCK && ISO9660_FS]
     inherited [BLOCK && ISO9660_FS]
    }
   }
   config UDF_FS tristate {
    prompt "UDF file system support" if [BLOCK]
    select CRC_ITU_T if [BLOCK]
    inherited [BLOCK]
    config UDF_NLS boolean {
     default [y] if [BLOCK && (UDF_FS="m" && NLS || UDF_FS="y" && NLS="y")]
     depends on [UDF_FS="m" && NLS || UDF_FS="y" && NLS="y"]
     inherited [BLOCK && (UDF_FS="m" && NLS || UDF_FS="y" && NLS="y")]
    }
   }
  }
 }
 if [BLOCK] {
  menu "DOS/FAT/NT Filesystems" {
   depends on [BLOCK]
   config FAT_FS tristate {
    select NLS if [BLOCK]
    inherited [BLOCK]
   }
   config MSDOS_FS tristate {
    prompt "MSDOS fs support" if [BLOCK]
    select FAT_FS if [BLOCK]
    inherited [BLOCK]
   }
   config VFAT_FS tristate {
    prompt "VFAT (Windows-95) fs support" if [BLOCK]
    select FAT_FS if [BLOCK]
    inherited [BLOCK]
    config FAT_DEFAULT_CODEPAGE integer {
     prompt "Default codepage for FAT" if [BLOCK && (MSDOS_FS || VFAT_FS)]
     depends on [MSDOS_FS || VFAT_FS]
     default [437] if [BLOCK && (MSDOS_FS || VFAT_FS)]
     inherited [BLOCK && (MSDOS_FS || VFAT_FS)]
    }
    config FAT_DEFAULT_IOCHARSET string {
     prompt "Default iocharset for FAT" if [BLOCK && VFAT_FS]
     depends on [VFAT_FS]
     default ["iso8859-1"] if [BLOCK && VFAT_FS]
     inherited [BLOCK && VFAT_FS]
    }
   }
   config NTFS_FS tristate {
    prompt "NTFS file system support" if [BLOCK]
    select NLS if [BLOCK]
    inherited [BLOCK]
    config NTFS_DEBUG boolean {
     prompt "NTFS debugging support" if [BLOCK && NTFS_FS]
     depends on [NTFS_FS]
     inherited [BLOCK && NTFS_FS]
    }
    config NTFS_RW boolean {
     prompt "NTFS write support" if [BLOCK && NTFS_FS]
     depends on [NTFS_FS]
     inherited [BLOCK && NTFS_FS]
    }
   }
  }
 }
 menu "Pseudo filesystems" {
  config PROC_FS boolean {
   prompt "/proc file system support" if [EMBEDDED]
   default [y] if []
   config PROC_KCORE boolean {
    prompt "/proc/kcore support" if [PROC_FS && MMU && !ARM]
    depends on [PROC_FS && MMU]
    inherited [PROC_FS && MMU]
   }
   config PROC_VMCORE boolean {
    prompt "/proc/vmcore support (EXPERIMENTAL)" if [PROC_FS && CRASH_DUMP]
    depends on [PROC_FS && CRASH_DUMP]
    default [y] if [PROC_FS && CRASH_DUMP]
    inherited [PROC_FS && CRASH_DUMP]
   }
   config PROC_SYSCTL boolean {
    prompt "Sysctl support (/proc/sys)" if [PROC_FS && EMBEDDED]
    depends on [PROC_FS]
    select SYSCTL if [PROC_FS]
    default [y] if [PROC_FS]
    inherited [PROC_FS]
   }
   config PROC_PAGE_MONITOR boolean {
    default [y] if [PROC_FS && MMU]
    depends on [PROC_FS && MMU]
    prompt "Enable /proc page monitoring" if [PROC_FS && MMU && EMBEDDED]
    inherited [PROC_FS && MMU]
   }
  }
  config SYSFS boolean {
   prompt "sysfs file system support" if [EMBEDDED]
   default [y] if []
  }
  config TMPFS boolean {
   prompt "Virtual memory file system support (former shm fs)" if [SHMEM]
   depends on [SHMEM]
   inherited [SHMEM]
   config TMPFS_POSIX_ACL boolean {
    prompt "Tmpfs POSIX Access Control Lists" if [TMPFS]
    depends on [TMPFS]
    select GENERIC_ACL if [TMPFS]
    inherited [TMPFS]
   }
  }
  config HUGETLBFS boolean {
   prompt "HugeTLB file system support" if [X86 || IA64 || SPARC64 || S390 && 64BIT || SYS_SUPPORTS_HUGETLBFS || BROKEN]
   depends on [X86 || IA64 || SPARC64 || S390 && 64BIT || SYS_SUPPORTS_HUGETLBFS || BROKEN]
   inherited [X86 || IA64 || SPARC64 || S390 && 64BIT || SYS_SUPPORTS_HUGETLBFS || BROKEN]
  }
  config HUGETLB_PAGE boolean {
   default [HUGETLBFS] if []
  }
  config CONFIGFS_FS tristate {
   prompt "Userspace-driven configuration filesystem" if [SYSFS]
   depends on [SYSFS]
   inherited [SYSFS]
  }
 }
 menuconfig MISC_FILESYSTEMS boolean {
  prompt "Miscellaneous filesystems" if []
  default [y] if []
  if [MISC_FILESYSTEMS] {
   config ADFS_FS tristate {
    prompt "ADFS file system support (EXPERIMENTAL)" if [MISC_FILESYSTEMS && BLOCK && EXPERIMENTAL]
    depends on [BLOCK && EXPERIMENTAL]
    inherited [MISC_FILESYSTEMS && BLOCK && EXPERIMENTAL]
    config ADFS_FS_RW boolean {
     prompt "ADFS write support (DANGEROUS)" if [MISC_FILESYSTEMS && ADFS_FS]
     depends on [ADFS_FS]
     inherited [MISC_FILESYSTEMS && ADFS_FS]
    }
   }
   config AFFS_FS tristate {
    prompt "Amiga FFS file system support (EXPERIMENTAL)" if [MISC_FILESYSTEMS && BLOCK && EXPERIMENTAL]
    depends on [BLOCK && EXPERIMENTAL]
    inherited [MISC_FILESYSTEMS && BLOCK && EXPERIMENTAL]
   }
   config ECRYPT_FS tristate {
    prompt "eCrypt filesystem layer support (EXPERIMENTAL)" if [MISC_FILESYSTEMS && EXPERIMENTAL && KEYS && CRYPTO]
    depends on [EXPERIMENTAL && KEYS && CRYPTO]
    select CRYPTO_ECB if [MISC_FILESYSTEMS && EXPERIMENTAL && KEYS && CRYPTO]
    select CRYPTO_CBC if [MISC_FILESYSTEMS && EXPERIMENTAL && KEYS && CRYPTO]
    select CRYPTO_MD5 if [MISC_FILESYSTEMS && EXPERIMENTAL && KEYS && CRYPTO]
    inherited [MISC_FILESYSTEMS && EXPERIMENTAL && KEYS && CRYPTO]
   }
   config HFS_FS tristate {
    prompt "Apple Macintosh file system support (EXPERIMENTAL)" if [MISC_FILESYSTEMS && BLOCK && EXPERIMENTAL]
    depends on [BLOCK && EXPERIMENTAL]
    select NLS if [MISC_FILESYSTEMS && BLOCK && EXPERIMENTAL]
    inherited [MISC_FILESYSTEMS && BLOCK && EXPERIMENTAL]
   }
   config HFSPLUS_FS tristate {
    prompt "Apple Extended HFS file system support" if [MISC_FILESYSTEMS && BLOCK]
    depends on [BLOCK]
    select NLS if [MISC_FILESYSTEMS && BLOCK]
    select NLS_UTF8 if [MISC_FILESYSTEMS && BLOCK]
    inherited [MISC_FILESYSTEMS && BLOCK]
   }
   config BEFS_FS tristate {
    prompt "BeOS file system (BeFS) support (read only) (EXPERIMENTAL)" if [MISC_FILESYSTEMS && BLOCK && EXPERIMENTAL]
    depends on [BLOCK && EXPERIMENTAL]
    select NLS if [MISC_FILESYSTEMS && BLOCK && EXPERIMENTAL]
    inherited [MISC_FILESYSTEMS && BLOCK && EXPERIMENTAL]
    config BEFS_DEBUG boolean {
     prompt "Debug BeFS" if [MISC_FILESYSTEMS && BEFS_FS]
     depends on [BEFS_FS]
     inherited [MISC_FILESYSTEMS && BEFS_FS]
    }
   }
   config BFS_FS tristate {
    prompt "BFS file system support (EXPERIMENTAL)" if [MISC_FILESYSTEMS && BLOCK && EXPERIMENTAL]
    depends on [BLOCK && EXPERIMENTAL]
    inherited [MISC_FILESYSTEMS && BLOCK && EXPERIMENTAL]
   }
   config EFS_FS tristate {
    prompt "EFS file system support (read only) (EXPERIMENTAL)" if [MISC_FILESYSTEMS && BLOCK && EXPERIMENTAL]
    depends on [BLOCK && EXPERIMENTAL]
    inherited [MISC_FILESYSTEMS && BLOCK && EXPERIMENTAL]
   }
   config JFFS2_FS tristate {
    prompt "Journalling Flash File System v2 (JFFS2) support" if [MISC_FILESYSTEMS && MTD]
    select CRC32 if [MISC_FILESYSTEMS && MTD]
    depends on [MTD]
    inherited [MISC_FILESYSTEMS && MTD]
    config JFFS2_FS_DEBUG integer {
     prompt "JFFS2 debugging verbosity (0 = quiet, 2 = noisy)" if [MISC_FILESYSTEMS && JFFS2_FS]
     depends on [JFFS2_FS]
     default [0] if [MISC_FILESYSTEMS && JFFS2_FS]
     inherited [MISC_FILESYSTEMS && JFFS2_FS]
    }
    config JFFS2_FS_WRITEBUFFER boolean {
     prompt "JFFS2 write-buffering support" if [MISC_FILESYSTEMS && JFFS2_FS]
     depends on [JFFS2_FS]
     default [y] if [MISC_FILESYSTEMS && JFFS2_FS]
     inherited [MISC_FILESYSTEMS && JFFS2_FS]
     config JFFS2_FS_WBUF_VERIFY boolean {
      prompt "Verify JFFS2 write-buffer reads" if [MISC_FILESYSTEMS && JFFS2_FS_WRITEBUFFER]
      depends on [JFFS2_FS_WRITEBUFFER]
      default [n] if [MISC_FILESYSTEMS && JFFS2_FS_WRITEBUFFER]
      inherited [MISC_FILESYSTEMS && JFFS2_FS_WRITEBUFFER]
     }
    }
    config JFFS2_SUMMARY boolean {
     prompt "JFFS2 summary support (EXPERIMENTAL)" if [MISC_FILESYSTEMS && JFFS2_FS && EXPERIMENTAL]
     depends on [JFFS2_FS && EXPERIMENTAL]
     default [n] if [MISC_FILESYSTEMS && JFFS2_FS && EXPERIMENTAL]
     inherited [MISC_FILESYSTEMS && JFFS2_FS && EXPERIMENTAL]
    }
    config JFFS2_FS_XATTR boolean {
     prompt "JFFS2 XATTR support (EXPERIMENTAL)" if [MISC_FILESYSTEMS && JFFS2_FS && EXPERIMENTAL]
     depends on [JFFS2_FS && EXPERIMENTAL]
     default [n] if [MISC_FILESYSTEMS && JFFS2_FS && EXPERIMENTAL]
     inherited [MISC_FILESYSTEMS && JFFS2_FS && EXPERIMENTAL]
     config JFFS2_FS_POSIX_ACL boolean {
      prompt "JFFS2 POSIX Access Control Lists" if [MISC_FILESYSTEMS && JFFS2_FS_XATTR]
      depends on [JFFS2_FS_XATTR]
      default [y] if [MISC_FILESYSTEMS && JFFS2_FS_XATTR]
      select FS_POSIX_ACL if [MISC_FILESYSTEMS && JFFS2_FS_XATTR]
      inherited [MISC_FILESYSTEMS && JFFS2_FS_XATTR]
     }
     config JFFS2_FS_SECURITY boolean {
      prompt "JFFS2 Security Labels" if [MISC_FILESYSTEMS && JFFS2_FS_XATTR]
      depends on [JFFS2_FS_XATTR]
      default [y] if [MISC_FILESYSTEMS && JFFS2_FS_XATTR]
      inherited [MISC_FILESYSTEMS && JFFS2_FS_XATTR]
     }
    }
    config JFFS2_COMPRESSION_OPTIONS boolean {
     prompt "Advanced compression options for JFFS2" if [MISC_FILESYSTEMS && JFFS2_FS]
     depends on [JFFS2_FS]
     default [n] if [MISC_FILESYSTEMS && JFFS2_FS]
     inherited [MISC_FILESYSTEMS && JFFS2_FS]
     config JFFS2_ZLIB boolean {
      prompt "JFFS2 ZLIB compression support" if [MISC_FILESYSTEMS && JFFS2_FS && JFFS2_COMPRESSION_OPTIONS]
      select ZLIB_INFLATE if [MISC_FILESYSTEMS && JFFS2_FS]
      select ZLIB_DEFLATE if [MISC_FILESYSTEMS && JFFS2_FS]
      depends on [JFFS2_FS]
      default [y] if [MISC_FILESYSTEMS && JFFS2_FS]
      inherited [MISC_FILESYSTEMS && JFFS2_FS]
     }
     config JFFS2_LZO boolean {
      prompt "JFFS2 LZO compression support" if [MISC_FILESYSTEMS && JFFS2_FS && JFFS2_COMPRESSION_OPTIONS]
      select LZO_COMPRESS if [MISC_FILESYSTEMS && JFFS2_FS]
      select LZO_DECOMPRESS if [MISC_FILESYSTEMS && JFFS2_FS]
      depends on [JFFS2_FS]
      default [n] if [MISC_FILESYSTEMS && JFFS2_FS]
      inherited [MISC_FILESYSTEMS && JFFS2_FS]
     }
     config JFFS2_RTIME boolean {
      prompt "JFFS2 RTIME compression support" if [MISC_FILESYSTEMS && JFFS2_FS && JFFS2_COMPRESSION_OPTIONS]
      depends on [JFFS2_FS]
      default [y] if [MISC_FILESYSTEMS && JFFS2_FS]
      inherited [MISC_FILESYSTEMS && JFFS2_FS]
     }
     config JFFS2_RUBIN boolean {
      prompt "JFFS2 RUBIN compression support" if [MISC_FILESYSTEMS && JFFS2_FS && JFFS2_COMPRESSION_OPTIONS]
      depends on [JFFS2_FS]
      default [n] if [MISC_FILESYSTEMS && JFFS2_FS]
      inherited [MISC_FILESYSTEMS && JFFS2_FS]
     }
     choice boolean {
      prompt "JFFS2 default compression mode" if [MISC_FILESYSTEMS && JFFS2_FS && JFFS2_COMPRESSION_OPTIONS]
      default [JFFS2_CMODE_PRIORITY] if [MISC_FILESYSTEMS && JFFS2_FS]
      depends on [JFFS2_FS]
      config JFFS2_CMODE_NONE boolean {
       prompt "no compression" if [<choice>]
       inherited [<choice>]
      }
      config JFFS2_CMODE_PRIORITY boolean {
       prompt "priority" if [<choice>]
       inherited [<choice>]
      }
      config JFFS2_CMODE_SIZE boolean {
       prompt "size (EXPERIMENTAL)" if [<choice>]
       inherited [<choice>]
      }
      config JFFS2_CMODE_FAVOURLZO boolean {
       prompt "Favour LZO" if [<choice>]
       inherited [<choice>]
      }
     }
    }
   }
   config UBIFS_FS tristate {
    prompt "UBIFS file system support" if [MISC_FILESYSTEMS && MTD_UBI]
    select CRC16 if [MISC_FILESYSTEMS && MTD_UBI]
    select CRC32 if [MISC_FILESYSTEMS && MTD_UBI]
    select CRYPTO if [MISC_FILESYSTEMS && MTD_UBI && UBIFS_FS_ADVANCED_COMPR]
    select CRYPTO if [MISC_FILESYSTEMS && MTD_UBI && UBIFS_FS_LZO]
    select CRYPTO if [MISC_FILESYSTEMS && MTD_UBI && UBIFS_FS_ZLIB]
    select CRYPTO_LZO if [MISC_FILESYSTEMS && MTD_UBI && UBIFS_FS_LZO]
    select CRYPTO_DEFLATE if [MISC_FILESYSTEMS && MTD_UBI && UBIFS_FS_ZLIB]
    depends on [MTD_UBI]
    inherited [MISC_FILESYSTEMS && MTD_UBI]
    config UBIFS_FS_XATTR boolean {
     prompt "Extended attributes support" if [MISC_FILESYSTEMS && UBIFS_FS]
     depends on [UBIFS_FS]
     inherited [MISC_FILESYSTEMS && UBIFS_FS]
    }
    config UBIFS_FS_ADVANCED_COMPR boolean {
     prompt "Advanced compression options" if [MISC_FILESYSTEMS && UBIFS_FS]
     depends on [UBIFS_FS]
     inherited [MISC_FILESYSTEMS && UBIFS_FS]
     config UBIFS_FS_LZO boolean {
      prompt "LZO compression support" if [MISC_FILESYSTEMS && UBIFS_FS && UBIFS_FS_ADVANCED_COMPR]
      depends on [UBIFS_FS]
      default [y] if [MISC_FILESYSTEMS && UBIFS_FS]
      inherited [MISC_FILESYSTEMS && UBIFS_FS]
     }
     config UBIFS_FS_ZLIB boolean {
      prompt "ZLIB compression support" if [MISC_FILESYSTEMS && UBIFS_FS && UBIFS_FS_ADVANCED_COMPR]
      depends on [UBIFS_FS]
      default [y] if [MISC_FILESYSTEMS && UBIFS_FS]
      inherited [MISC_FILESYSTEMS && UBIFS_FS]
     }
    }
    config UBIFS_FS_DEBUG boolean {
     prompt "Enable debugging" if [MISC_FILESYSTEMS && UBIFS_FS]
     depends on [UBIFS_FS]
     select DEBUG_FS if [MISC_FILESYSTEMS && UBIFS_FS]
     select KALLSYMS_ALL if [MISC_FILESYSTEMS && UBIFS_FS]
     inherited [MISC_FILESYSTEMS && UBIFS_FS]
     config UBIFS_FS_DEBUG_MSG_LVL integer {
      prompt "Default message level (0 = no extra messages, 3 = lots)" if [MISC_FILESYSTEMS && UBIFS_FS_DEBUG]
      depends on [UBIFS_FS_DEBUG]
      default [0] if [MISC_FILESYSTEMS && UBIFS_FS_DEBUG]
      inherited [MISC_FILESYSTEMS && UBIFS_FS_DEBUG]
     }
     config UBIFS_FS_DEBUG_CHKS boolean {
      prompt "Enable extra checks" if [MISC_FILESYSTEMS && UBIFS_FS_DEBUG]
      depends on [UBIFS_FS_DEBUG]
      inherited [MISC_FILESYSTEMS && UBIFS_FS_DEBUG]
     }
    }
   }
   config CRAMFS tristate {
    prompt "Compressed ROM file system support (cramfs)" if [MISC_FILESYSTEMS && BLOCK]
    depends on [BLOCK]
    select ZLIB_INFLATE if [MISC_FILESYSTEMS && BLOCK]
    inherited [MISC_FILESYSTEMS && BLOCK]
   }
   config SQUASHFS tristate {
    prompt "SquashFS 4.0 - Squashed file system support" if [MISC_FILESYSTEMS && BLOCK]
    depends on [BLOCK]
    select ZLIB_INFLATE if [MISC_FILESYSTEMS && BLOCK]
    inherited [MISC_FILESYSTEMS && BLOCK]
    config SQUASHFS_EMBEDDED boolean {
     prompt "Additional option for memory-constrained systems" if [MISC_FILESYSTEMS && SQUASHFS]
     depends on [SQUASHFS]
     default [n] if [MISC_FILESYSTEMS && SQUASHFS]
     inherited [MISC_FILESYSTEMS && SQUASHFS]
     config SQUASHFS_FRAGMENT_CACHE_SIZE integer {
      prompt "Number of fragments cached" if [MISC_FILESYSTEMS && SQUASHFS && SQUASHFS_EMBEDDED]
      depends on [SQUASHFS]
      default [3] if [MISC_FILESYSTEMS && SQUASHFS]
      inherited [MISC_FILESYSTEMS && SQUASHFS]
     }
    }
   }
   config VXFS_FS tristate {
    prompt "FreeVxFS file system support (VERITAS VxFS(TM) compatible)" if [MISC_FILESYSTEMS && BLOCK]
    depends on [BLOCK]
    inherited [MISC_FILESYSTEMS && BLOCK]
   }
   config MINIX_FS tristate {
    prompt "Minix file system support" if [MISC_FILESYSTEMS && BLOCK]
    depends on [BLOCK]
    inherited [MISC_FILESYSTEMS && BLOCK]
   }
   config OMFS_FS tristate {
    prompt "SonicBlue Optimized MPEG File System support" if [MISC_FILESYSTEMS && BLOCK]
    depends on [BLOCK]
    select CRC_ITU_T if [MISC_FILESYSTEMS && BLOCK]
    inherited [MISC_FILESYSTEMS && BLOCK]
   }
   config HPFS_FS tristate {
    prompt "OS/2 HPFS file system support" if [MISC_FILESYSTEMS && BLOCK]
    depends on [BLOCK]
    inherited [MISC_FILESYSTEMS && BLOCK]
   }
   config QNX4FS_FS tristate {
    prompt "QNX4 file system support (read only)" if [MISC_FILESYSTEMS && BLOCK]
    depends on [BLOCK]
    inherited [MISC_FILESYSTEMS && BLOCK]
   }
   config ROMFS_FS tristate {
    prompt "ROM file system support" if [MISC_FILESYSTEMS && (BLOCK || MTD)]
    depends on [BLOCK || MTD]
    inherited [MISC_FILESYSTEMS && (BLOCK || MTD)]
    choice boolean {
     prompt "RomFS backing stores" if [MISC_FILESYSTEMS && ROMFS_FS]
     depends on [ROMFS_FS]
     default [ROMFS_BACKED_BY_BLOCK] if [MISC_FILESYSTEMS && ROMFS_FS]
     config ROMFS_BACKED_BY_BLOCK boolean {
      prompt "Block device-backed ROM file system support" if [<choice> && BLOCK]
      depends on [BLOCK]
      inherited [<choice> && BLOCK]
     }
     config ROMFS_BACKED_BY_MTD boolean {
      prompt "MTD-backed ROM file system support" if [<choice> && (MTD="y" || ROMFS_FS="m" && MTD)]
      depends on [MTD="y" || ROMFS_FS="m" && MTD]
      inherited [<choice> && (MTD="y" || ROMFS_FS="m" && MTD)]
     }
     config ROMFS_BACKED_BY_BOTH boolean {
      prompt "Both the above" if [<choice> && BLOCK && (MTD="y" || ROMFS_FS="m" && MTD)]
      depends on [BLOCK && (MTD="y" || ROMFS_FS="m" && MTD)]
      inherited [<choice> && BLOCK && (MTD="y" || ROMFS_FS="m" && MTD)]
     }
    }
   }
   config ROMFS_ON_BLOCK boolean {
    default [y] if [MISC_FILESYSTEMS && (ROMFS_BACKED_BY_BLOCK || ROMFS_BACKED_BY_BOTH)]
    inherited [MISC_FILESYSTEMS]
   }
   config ROMFS_ON_MTD boolean {
    default [y] if [MISC_FILESYSTEMS && (ROMFS_BACKED_BY_MTD || ROMFS_BACKED_BY_BOTH)]
    inherited [MISC_FILESYSTEMS]
   }
   config SYSV_FS tristate {
    prompt "System V/Xenix/V7/Coherent file system support" if [MISC_FILESYSTEMS && BLOCK]
    depends on [BLOCK]
    inherited [MISC_FILESYSTEMS && BLOCK]
   }
   config UFS_FS tristate {
    prompt "UFS file system support (read only)" if [MISC_FILESYSTEMS && BLOCK]
    depends on [BLOCK]
    inherited [MISC_FILESYSTEMS && BLOCK]
    config UFS_FS_WRITE boolean {
     prompt "UFS file system write support (DANGEROUS)" if [MISC_FILESYSTEMS && UFS_FS && EXPERIMENTAL]
     depends on [UFS_FS && EXPERIMENTAL]
     inherited [MISC_FILESYSTEMS && UFS_FS && EXPERIMENTAL]
    }
    config UFS_DEBUG boolean {
     prompt "UFS debugging" if [MISC_FILESYSTEMS && UFS_FS]
     depends on [UFS_FS]
     inherited [MISC_FILESYSTEMS && UFS_FS]
    }
   }
   config EXOFS_FS tristate {
    prompt "exofs: OSD based file system support" if [MISC_FILESYSTEMS && SCSI_OSD_ULD]
    depends on [SCSI_OSD_ULD]
    inherited [MISC_FILESYSTEMS && SCSI_OSD_ULD]
    config EXOFS_DEBUG boolean {
     prompt "Enable debugging" if [MISC_FILESYSTEMS && EXOFS_FS]
     depends on [EXOFS_FS]
     inherited [MISC_FILESYSTEMS && EXOFS_FS]
    }
   }
  }
 }
 menuconfig NETWORK_FILESYSTEMS boolean {
  prompt "Network File Systems" if [NET]
  default [y] if [NET]
  depends on [NET]
  inherited [NET]
  if [NETWORK_FILESYSTEMS] {
   config NFS_FS tristate {
    prompt "NFS client support" if [NETWORK_FILESYSTEMS && INET && FILE_LOCKING]
    depends on [INET && FILE_LOCKING]
    select LOCKD if [NETWORK_FILESYSTEMS && INET && FILE_LOCKING]
    select SUNRPC if [NETWORK_FILESYSTEMS && INET && FILE_LOCKING]
    select NFS_ACL_SUPPORT if [NETWORK_FILESYSTEMS && INET && FILE_LOCKING && NFS_V3_ACL]
    inherited [NETWORK_FILESYSTEMS && INET && FILE_LOCKING]
    config NFS_V3 boolean {
     prompt "NFS client support for NFS version 3" if [NETWORK_FILESYSTEMS && NFS_FS]
     depends on [NFS_FS]
     inherited [NETWORK_FILESYSTEMS && NFS_FS]
     config NFS_V3_ACL boolean {
      prompt "NFS client support for the NFSv3 ACL protocol extension" if [NETWORK_FILESYSTEMS && NFS_V3]
      depends on [NFS_V3]
      inherited [NETWORK_FILESYSTEMS && NFS_V3]
     }
    }
    config NFS_V4 boolean {
     prompt "NFS client support for NFS version 4 (EXPERIMENTAL)" if [NETWORK_FILESYSTEMS && NFS_FS && EXPERIMENTAL]
     depends on [NFS_FS && EXPERIMENTAL]
     select RPCSEC_GSS_KRB5 if [NETWORK_FILESYSTEMS && NFS_FS && EXPERIMENTAL]
     inherited [NETWORK_FILESYSTEMS && NFS_FS && EXPERIMENTAL]
     config NFS_V4_1 boolean {
      prompt "NFS client support for NFSv4.1 (DEVELOPER ONLY)" if [NETWORK_FILESYSTEMS && NFS_V4 && EXPERIMENTAL]
      depends on [NFS_V4 && EXPERIMENTAL]
      inherited [NETWORK_FILESYSTEMS && NFS_V4 && EXPERIMENTAL]
     }
    }
    config ROOT_NFS boolean {
     prompt "Root file system on NFS" if [NETWORK_FILESYSTEMS && NFS_FS="y" && IP_PNP]
     depends on [NFS_FS="y" && IP_PNP]
     inherited [NETWORK_FILESYSTEMS && NFS_FS="y" && IP_PNP]
    }
   }
   config NFS_FSCACHE boolean {
    prompt "Provide NFS client caching support (EXPERIMENTAL)" if [NETWORK_FILESYSTEMS && EXPERIMENTAL && (NFS_FS="m" && FSCACHE || NFS_FS="y" && FSCACHE="y")]
    depends on [EXPERIMENTAL]
    depends on [NFS_FS="m" && FSCACHE || NFS_FS="y" && FSCACHE="y"]
    inherited [NETWORK_FILESYSTEMS && EXPERIMENTAL && (NFS_FS="m" && FSCACHE || NFS_FS="y" && FSCACHE="y")]
   }
   config NFSD tristate {
    prompt "NFS server support" if [NETWORK_FILESYSTEMS && INET && FILE_LOCKING]
    depends on [INET]
    depends on [FILE_LOCKING]
    select LOCKD if [NETWORK_FILESYSTEMS && INET && FILE_LOCKING]
    select SUNRPC if [NETWORK_FILESYSTEMS && INET && FILE_LOCKING]
    select EXPORTFS if [NETWORK_FILESYSTEMS && INET && FILE_LOCKING]
    select NFS_ACL_SUPPORT if [NETWORK_FILESYSTEMS && INET && FILE_LOCKING && NFSD_V2_ACL]
    inherited [NETWORK_FILESYSTEMS && INET && FILE_LOCKING]
    config NFSD_V2_ACL boolean {
     depends on [NFSD]
     inherited [NETWORK_FILESYSTEMS && NFSD]
    }
    config NFSD_V3 boolean {
     prompt "NFS server support for NFS version 3" if [NETWORK_FILESYSTEMS && NFSD]
     depends on [NFSD]
     inherited [NETWORK_FILESYSTEMS && NFSD]
     config NFSD_V3_ACL boolean {
      prompt "NFS server support for the NFSv3 ACL protocol extension" if [NETWORK_FILESYSTEMS && NFSD_V3]
      depends on [NFSD_V3]
      select NFSD_V2_ACL if [NETWORK_FILESYSTEMS && NFSD_V3]
      inherited [NETWORK_FILESYSTEMS && NFSD_V3]
     }
    }
    config NFSD_V4 boolean {
     prompt "NFS server support for NFS version 4 (EXPERIMENTAL)" if [NETWORK_FILESYSTEMS && NFSD && PROC_FS && EXPERIMENTAL]
     depends on [NFSD && PROC_FS && EXPERIMENTAL]
     select NFSD_V3 if [NETWORK_FILESYSTEMS && NFSD && PROC_FS && EXPERIMENTAL]
     select FS_POSIX_ACL if [NETWORK_FILESYSTEMS && NFSD && PROC_FS && EXPERIMENTAL]
     select RPCSEC_GSS_KRB5 if [NETWORK_FILESYSTEMS && NFSD && PROC_FS && EXPERIMENTAL]
     inherited [NETWORK_FILESYSTEMS && NFSD && PROC_FS && EXPERIMENTAL]
    }
   }
   config LOCKD tristate {
    depends on [FILE_LOCKING]
    inherited [NETWORK_FILESYSTEMS && FILE_LOCKING]
   }
   config LOCKD_V4 boolean {
    depends on [NFSD_V3 || NFS_V3]
    depends on [FILE_LOCKING]
    default [y] if [NETWORK_FILESYSTEMS && (NFSD_V3 || NFS_V3) && FILE_LOCKING]
    inherited [NETWORK_FILESYSTEMS && (NFSD_V3 || NFS_V3) && FILE_LOCKING]
   }
   config EXPORTFS tristate {
    inherited [NETWORK_FILESYSTEMS]
   }
   config NFS_ACL_SUPPORT tristate {
    select FS_POSIX_ACL if [NETWORK_FILESYSTEMS]
    inherited [NETWORK_FILESYSTEMS]
   }
   config NFS_COMMON boolean {
    depends on [NFSD || NFS_FS]
    default [y] if [NETWORK_FILESYSTEMS && (NFSD || NFS_FS)]
    inherited [NETWORK_FILESYSTEMS && (NFSD || NFS_FS)]
   }
   config SUNRPC tristate {
    inherited [NETWORK_FILESYSTEMS]
   }
   config SUNRPC_GSS tristate {
    inherited [NETWORK_FILESYSTEMS]
   }
   config SUNRPC_XPRT_RDMA tristate {
    depends on [SUNRPC && INFINIBAND && INFINIBAND_ADDR_TRANS && EXPERIMENTAL]
    default [SUNRPC && INFINIBAND] if [NETWORK_FILESYSTEMS && SUNRPC && INFINIBAND && INFINIBAND_ADDR_TRANS && EXPERIMENTAL]
    inherited [NETWORK_FILESYSTEMS && SUNRPC && INFINIBAND && INFINIBAND_ADDR_TRANS && EXPERIMENTAL]
   }
   config RPCSEC_GSS_KRB5 tristate {
    prompt "Secure RPC: Kerberos V mechanism (EXPERIMENTAL)" if [NETWORK_FILESYSTEMS && SUNRPC && EXPERIMENTAL]
    depends on [SUNRPC && EXPERIMENTAL]
    select SUNRPC_GSS if [NETWORK_FILESYSTEMS && SUNRPC && EXPERIMENTAL]
    select CRYPTO if [NETWORK_FILESYSTEMS && SUNRPC && EXPERIMENTAL]
    select CRYPTO_MD5 if [NETWORK_FILESYSTEMS && SUNRPC && EXPERIMENTAL]
    select CRYPTO_DES if [NETWORK_FILESYSTEMS && SUNRPC && EXPERIMENTAL]
    select CRYPTO_CBC if [NETWORK_FILESYSTEMS && SUNRPC && EXPERIMENTAL]
    inherited [NETWORK_FILESYSTEMS && SUNRPC && EXPERIMENTAL]
   }
   config RPCSEC_GSS_SPKM3 tristate {
    prompt "Secure RPC: SPKM3 mechanism (EXPERIMENTAL)" if [NETWORK_FILESYSTEMS && SUNRPC && EXPERIMENTAL]
    depends on [SUNRPC && EXPERIMENTAL]
    select SUNRPC_GSS if [NETWORK_FILESYSTEMS && SUNRPC && EXPERIMENTAL]
    select CRYPTO if [NETWORK_FILESYSTEMS && SUNRPC && EXPERIMENTAL]
    select CRYPTO_MD5 if [NETWORK_FILESYSTEMS && SUNRPC && EXPERIMENTAL]
    select CRYPTO_DES if [NETWORK_FILESYSTEMS && SUNRPC && EXPERIMENTAL]
    select CRYPTO_CAST5 if [NETWORK_FILESYSTEMS && SUNRPC && EXPERIMENTAL]
    select CRYPTO_CBC if [NETWORK_FILESYSTEMS && SUNRPC && EXPERIMENTAL]
    inherited [NETWORK_FILESYSTEMS && SUNRPC && EXPERIMENTAL]
   }
   config SMB_FS tristate {
    prompt "SMB file system support (OBSOLETE, please use CIFS)" if [NETWORK_FILESYSTEMS && INET]
    depends on [INET]
    select NLS if [NETWORK_FILESYSTEMS && INET]
    inherited [NETWORK_FILESYSTEMS && INET]
    config SMB_NLS_DEFAULT boolean {
     prompt "Use a default NLS" if [NETWORK_FILESYSTEMS && SMB_FS]
     depends on [SMB_FS]
     inherited [NETWORK_FILESYSTEMS && SMB_FS]
     config SMB_NLS_REMOTE string {
      prompt "Default Remote NLS Option" if [NETWORK_FILESYSTEMS && SMB_NLS_DEFAULT]
      depends on [SMB_NLS_DEFAULT]
      default ["cp437"] if [NETWORK_FILESYSTEMS && SMB_NLS_DEFAULT]
      inherited [NETWORK_FILESYSTEMS && SMB_NLS_DEFAULT]
     }
    }
   }
   config CIFS tristate {
    prompt "CIFS support (advanced network filesystem, SMBFS successor)" if [NETWORK_FILESYSTEMS && INET]
    depends on [INET]
    select NLS if [NETWORK_FILESYSTEMS && INET]
    select SLOW_WORK if [NETWORK_FILESYSTEMS && INET]
    inherited [NETWORK_FILESYSTEMS && INET]
    config CIFS_STATS boolean {
     prompt "CIFS statistics" if [NETWORK_FILESYSTEMS && CIFS]
     depends on [CIFS]
     inherited [NETWORK_FILESYSTEMS && CIFS]
     config CIFS_STATS2 boolean {
      prompt "Extended statistics" if [NETWORK_FILESYSTEMS && CIFS_STATS]
      depends on [CIFS_STATS]
      inherited [NETWORK_FILESYSTEMS && CIFS_STATS]
     }
    }
    config CIFS_WEAK_PW_HASH boolean {
     prompt "Support legacy servers which use weaker LANMAN security" if [NETWORK_FILESYSTEMS && CIFS]
     depends on [CIFS]
     inherited [NETWORK_FILESYSTEMS && CIFS]
    }
    config CIFS_UPCALL boolean {
     prompt "Kerberos/SPNEGO advanced session setup" if [NETWORK_FILESYSTEMS && CIFS && KEYS]
     depends on [CIFS && KEYS]
     inherited [NETWORK_FILESYSTEMS && CIFS && KEYS]
    }
    config CIFS_XATTR boolean {
     prompt "CIFS extended attributes" if [NETWORK_FILESYSTEMS && CIFS]
     depends on [CIFS]
     inherited [NETWORK_FILESYSTEMS && CIFS]
     config CIFS_POSIX boolean {
      prompt "CIFS POSIX Extensions" if [NETWORK_FILESYSTEMS && CIFS_XATTR]
      depends on [CIFS_XATTR]
      inherited [NETWORK_FILESYSTEMS && CIFS_XATTR]
     }
    }
    config CIFS_DEBUG2 boolean {
     prompt "Enable additional CIFS debugging routines" if [NETWORK_FILESYSTEMS && CIFS]
     depends on [CIFS]
     inherited [NETWORK_FILESYSTEMS && CIFS]
    }
    config CIFS_DFS_UPCALL boolean {
     prompt "DFS feature support" if [NETWORK_FILESYSTEMS && CIFS && KEYS]
     depends on [CIFS && KEYS]
     inherited [NETWORK_FILESYSTEMS && CIFS && KEYS]
    }
    config CIFS_EXPERIMENTAL boolean {
     prompt "CIFS Experimental Features (EXPERIMENTAL)" if [NETWORK_FILESYSTEMS && CIFS && EXPERIMENTAL]
     depends on [CIFS && EXPERIMENTAL]
     inherited [NETWORK_FILESYSTEMS && CIFS && EXPERIMENTAL]
    }
   }
   config NCP_FS tristate {
    prompt "NCP file system support (to mount NetWare volumes)" if [NETWORK_FILESYSTEMS && (IPX!="n" || INET)]
    depends on [IPX!="n" || INET]
    inherited [NETWORK_FILESYSTEMS && (IPX!="n" || INET)]
    config NCPFS_PACKET_SIGNING boolean {
     prompt "Packet signatures" if [NETWORK_FILESYSTEMS && NCP_FS]
     depends on [NCP_FS]
     inherited [NETWORK_FILESYSTEMS && NCP_FS]
    }
    config NCPFS_IOCTL_LOCKING boolean {
     prompt "Proprietary file locking" if [NETWORK_FILESYSTEMS && NCP_FS]
     depends on [NCP_FS]
     inherited [NETWORK_FILESYSTEMS && NCP_FS]
    }
    config NCPFS_STRONG boolean {
     prompt "Clear remove/delete inhibit when needed" if [NETWORK_FILESYSTEMS && NCP_FS]
     depends on [NCP_FS]
     inherited [NETWORK_FILESYSTEMS && NCP_FS]
    }
    config NCPFS_NFS_NS boolean {
     prompt "Use NFS namespace if available" if [NETWORK_FILESYSTEMS && NCP_FS]
     depends on [NCP_FS]
     inherited [NETWORK_FILESYSTEMS && NCP_FS]
    }
    config NCPFS_OS2_NS boolean {
     prompt "Use LONG (OS/2) namespace if available" if [NETWORK_FILESYSTEMS && NCP_FS]
     depends on [NCP_FS]
     inherited [NETWORK_FILESYSTEMS && NCP_FS]
    }
    config NCPFS_SMALLDOS boolean {
     prompt "Lowercase DOS filenames" if [NETWORK_FILESYSTEMS && NCP_FS]
     depends on [NCP_FS]
     inherited [NETWORK_FILESYSTEMS && NCP_FS]
    }
    config NCPFS_NLS boolean {
     prompt "Use Native Language Support" if [NETWORK_FILESYSTEMS && NCP_FS]
     depends on [NCP_FS]
     select NLS if [NETWORK_FILESYSTEMS && NCP_FS]
     inherited [NETWORK_FILESYSTEMS && NCP_FS]
    }
    config NCPFS_EXTRAS boolean {
     prompt "Enable symbolic links and execute flags" if [NETWORK_FILESYSTEMS && NCP_FS]
     depends on [NCP_FS]
     inherited [NETWORK_FILESYSTEMS && NCP_FS]
    }
   }
   config CODA_FS tristate {
    prompt "Coda file system support (advanced network fs)" if [NETWORK_FILESYSTEMS && INET]
    depends on [INET]
    inherited [NETWORK_FILESYSTEMS && INET]
   }
   config AFS_FS tristate {
    prompt "Andrew File System support (AFS) (EXPERIMENTAL)" if [NETWORK_FILESYSTEMS && INET && EXPERIMENTAL]
    depends on [INET && EXPERIMENTAL]
    select AF_RXRPC if [NETWORK_FILESYSTEMS && INET && EXPERIMENTAL]
    inherited [NETWORK_FILESYSTEMS && INET && EXPERIMENTAL]
    config AFS_DEBUG boolean {
     prompt "AFS dynamic debugging" if [NETWORK_FILESYSTEMS && AFS_FS]
     depends on [AFS_FS]
     inherited [NETWORK_FILESYSTEMS && AFS_FS]
    }
   }
   config AFS_FSCACHE boolean {
    prompt "Provide AFS client caching support (EXPERIMENTAL)" if [NETWORK_FILESYSTEMS && EXPERIMENTAL && (AFS_FS="m" && FSCACHE || AFS_FS="y" && FSCACHE="y")]
    depends on [EXPERIMENTAL]
    depends on [AFS_FS="m" && FSCACHE || AFS_FS="y" && FSCACHE="y"]
    inherited [NETWORK_FILESYSTEMS && EXPERIMENTAL && (AFS_FS="m" && FSCACHE || AFS_FS="y" && FSCACHE="y")]
   }
   config 9P_FS tristate {
    prompt "Plan 9 Resource Sharing Support (9P2000) (Experimental)" if [NETWORK_FILESYSTEMS && INET && NET_9P && EXPERIMENTAL]
    depends on [INET && NET_9P && EXPERIMENTAL]
    inherited [NETWORK_FILESYSTEMS && INET && NET_9P && EXPERIMENTAL]
   }
   config 9P_FSCACHE boolean {
    prompt "Enable 9P client caching support (EXPERIMENTAL)" if [NETWORK_FILESYSTEMS && EXPERIMENTAL && (9P_FS="m" && FSCACHE || 9P_FS="y" && FSCACHE="y")]
    depends on [EXPERIMENTAL]
    depends on [9P_FS="m" && FSCACHE || 9P_FS="y" && FSCACHE="y"]
    inherited [NETWORK_FILESYSTEMS && EXPERIMENTAL && (9P_FS="m" && FSCACHE || 9P_FS="y" && FSCACHE="y")]
   }
  }
 }
 if [BLOCK] {
  menu "Partition Types" {
   depends on [BLOCK]
   config PARTITION_ADVANCED boolean {
    prompt "Advanced partition selection" if [BLOCK]
    inherited [BLOCK]
    config ACORN_PARTITION boolean {
     prompt "Acorn partition support" if [BLOCK && PARTITION_ADVANCED]
     default [y] if [BLOCK && ARCH_ACORN]
     inherited [BLOCK]
     config ACORN_PARTITION_CUMANA boolean {
      prompt "Cumana partition support" if [BLOCK && ACORN_PARTITION && PARTITION_ADVANCED]
      default [y] if [BLOCK && ACORN_PARTITION && ARCH_ACORN]
      depends on [ACORN_PARTITION]
      inherited [BLOCK && ACORN_PARTITION]
     }
     config ACORN_PARTITION_EESOX boolean {
      prompt "EESOX partition support" if [BLOCK && ACORN_PARTITION && PARTITION_ADVANCED]
      default [y] if [BLOCK && ACORN_PARTITION && ARCH_ACORN]
      depends on [ACORN_PARTITION]
      inherited [BLOCK && ACORN_PARTITION]
     }
     config ACORN_PARTITION_ICS boolean {
      prompt "ICS partition support" if [BLOCK && ACORN_PARTITION && PARTITION_ADVANCED]
      default [y] if [BLOCK && ACORN_PARTITION && ARCH_ACORN]
      depends on [ACORN_PARTITION]
      inherited [BLOCK && ACORN_PARTITION]
     }
     config ACORN_PARTITION_ADFS boolean {
      prompt "Native filecore partition support" if [BLOCK && ACORN_PARTITION && PARTITION_ADVANCED]
      default [y] if [BLOCK && ACORN_PARTITION && ARCH_ACORN]
      depends on [ACORN_PARTITION]
      inherited [BLOCK && ACORN_PARTITION]
     }
     config ACORN_PARTITION_POWERTEC boolean {
      prompt "PowerTec partition support" if [BLOCK && ACORN_PARTITION && PARTITION_ADVANCED]
      default [y] if [BLOCK && ACORN_PARTITION && ARCH_ACORN]
      depends on [ACORN_PARTITION]
      inherited [BLOCK && ACORN_PARTITION]
     }
     config ACORN_PARTITION_RISCIX boolean {
      prompt "RISCiX partition support" if [BLOCK && ACORN_PARTITION && PARTITION_ADVANCED]
      default [y] if [BLOCK && ACORN_PARTITION && ARCH_ACORN]
      depends on [ACORN_PARTITION]
      inherited [BLOCK && ACORN_PARTITION]
     }
    }
    config OSF_PARTITION boolean {
     prompt "Alpha OSF partition support" if [BLOCK && PARTITION_ADVANCED]
     default [y] if [BLOCK && ALPHA]
     inherited [BLOCK]
    }
    config AMIGA_PARTITION boolean {
     prompt "Amiga partition table support" if [BLOCK && PARTITION_ADVANCED]
     default [y] if [BLOCK && (AMIGA || AFFS_FS="y")]
     inherited [BLOCK]
    }
    config ATARI_PARTITION boolean {
     prompt "Atari partition table support" if [BLOCK && PARTITION_ADVANCED]
     default [y] if [BLOCK && ATARI]
     inherited [BLOCK]
    }
    config IBM_PARTITION boolean {
     prompt "IBM disk label and partition support" if [BLOCK && PARTITION_ADVANCED && S390]
     depends on [PARTITION_ADVANCED && S390]
     inherited [BLOCK && PARTITION_ADVANCED && S390]
    }
    config MAC_PARTITION boolean {
     prompt "Macintosh partition map support" if [BLOCK && PARTITION_ADVANCED]
     default [y] if [BLOCK && (MAC || PPC_PMAC)]
     inherited [BLOCK]
    }
    config MSDOS_PARTITION boolean {
     prompt "PC BIOS (MSDOS partition tables) support" if [BLOCK && PARTITION_ADVANCED]
     default [y] if [BLOCK]
     inherited [BLOCK]
     config BSD_DISKLABEL boolean {
      prompt "BSD disklabel (FreeBSD partition tables) support" if [BLOCK && PARTITION_ADVANCED && MSDOS_PARTITION]
      depends on [PARTITION_ADVANCED && MSDOS_PARTITION]
      inherited [BLOCK && PARTITION_ADVANCED && MSDOS_PARTITION]
     }
     config MINIX_SUBPARTITION boolean {
      prompt "Minix subpartition support" if [BLOCK && PARTITION_ADVANCED && MSDOS_PARTITION]
      depends on [PARTITION_ADVANCED && MSDOS_PARTITION]
      inherited [BLOCK && PARTITION_ADVANCED && MSDOS_PARTITION]
     }
     config SOLARIS_X86_PARTITION boolean {
      prompt "Solaris (x86) partition table support" if [BLOCK && PARTITION_ADVANCED && MSDOS_PARTITION]
      depends on [PARTITION_ADVANCED && MSDOS_PARTITION]
      inherited [BLOCK && PARTITION_ADVANCED && MSDOS_PARTITION]
     }
     config UNIXWARE_DISKLABEL boolean {
      prompt "Unixware slices support" if [BLOCK && PARTITION_ADVANCED && MSDOS_PARTITION]
      depends on [PARTITION_ADVANCED && MSDOS_PARTITION]
      inherited [BLOCK && PARTITION_ADVANCED && MSDOS_PARTITION]
     }
    }
    config LDM_PARTITION boolean {
     prompt "Windows Logical Disk Manager (Dynamic Disk) support" if [BLOCK && PARTITION_ADVANCED]
     depends on [PARTITION_ADVANCED]
     inherited [BLOCK && PARTITION_ADVANCED]
     config LDM_DEBUG boolean {
      prompt "Windows LDM extra logging" if [BLOCK && LDM_PARTITION]
      depends on [LDM_PARTITION]
      inherited [BLOCK && LDM_PARTITION]
     }
    }
    config SGI_PARTITION boolean {
     prompt "SGI partition support" if [BLOCK && PARTITION_ADVANCED]
     default [y] if [BLOCK && DEFAULT_SGI_PARTITION]
     inherited [BLOCK]
    }
    config ULTRIX_PARTITION boolean {
     prompt "Ultrix partition table support" if [BLOCK && PARTITION_ADVANCED]
     default [y] if [BLOCK && MACH_DECSTATION]
     inherited [BLOCK]
    }
    config SUN_PARTITION boolean {
     prompt "Sun partition tables support" if [BLOCK && PARTITION_ADVANCED]
     default [y] if [BLOCK && (SPARC || SUN3 || SUN3X)]
     inherited [BLOCK]
    }
    config KARMA_PARTITION boolean {
     prompt "Karma Partition support" if [BLOCK && PARTITION_ADVANCED]
     depends on [PARTITION_ADVANCED]
     inherited [BLOCK && PARTITION_ADVANCED]
    }
    config EFI_PARTITION boolean {
     prompt "EFI GUID Partition support" if [BLOCK && PARTITION_ADVANCED]
     depends on [PARTITION_ADVANCED]
     select CRC32 if [BLOCK && PARTITION_ADVANCED]
     inherited [BLOCK && PARTITION_ADVANCED]
    }
    config SYSV68_PARTITION boolean {
     prompt "SYSV68 partition table support" if [BLOCK && PARTITION_ADVANCED]
     default [y] if [BLOCK && VME]
     inherited [BLOCK]
    }
   }
  }
 }
 menuconfig NLS tristate {
  prompt "Native language support" if []
  if [NLS] {
   config NLS_DEFAULT string {
    prompt "Default NLS Option" if [NLS]
    default ["iso8859-1"] if [NLS]
    inherited [NLS]
   }
   config NLS_CODEPAGE_437 tristate {
    prompt "Codepage 437 (United States, Canada)" if [NLS]
    inherited [NLS]
   }
   config NLS_CODEPAGE_737 tristate {
    prompt "Codepage 737 (Greek)" if [NLS]
    inherited [NLS]
   }
   config NLS_CODEPAGE_775 tristate {
    prompt "Codepage 775 (Baltic Rim)" if [NLS]
    inherited [NLS]
   }
   config NLS_CODEPAGE_850 tristate {
    prompt "Codepage 850 (Europe)" if [NLS]
    inherited [NLS]
   }
   config NLS_CODEPAGE_852 tristate {
    prompt "Codepage 852 (Central/Eastern Europe)" if [NLS]
    inherited [NLS]
   }
   config NLS_CODEPAGE_855 tristate {
    prompt "Codepage 855 (Cyrillic)" if [NLS]
    inherited [NLS]
   }
   config NLS_CODEPAGE_857 tristate {
    prompt "Codepage 857 (Turkish)" if [NLS]
    inherited [NLS]
   }
   config NLS_CODEPAGE_860 tristate {
    prompt "Codepage 860 (Portuguese)" if [NLS]
    inherited [NLS]
   }
   config NLS_CODEPAGE_861 tristate {
    prompt "Codepage 861 (Icelandic)" if [NLS]
    inherited [NLS]
   }
   config NLS_CODEPAGE_862 tristate {
    prompt "Codepage 862 (Hebrew)" if [NLS]
    inherited [NLS]
   }
   config NLS_CODEPAGE_863 tristate {
    prompt "Codepage 863 (Canadian French)" if [NLS]
    inherited [NLS]
   }
   config NLS_CODEPAGE_864 tristate {
    prompt "Codepage 864 (Arabic)" if [NLS]
    inherited [NLS]
   }
   config NLS_CODEPAGE_865 tristate {
    prompt "Codepage 865 (Norwegian, Danish)" if [NLS]
    inherited [NLS]
   }
   config NLS_CODEPAGE_866 tristate {
    prompt "Codepage 866 (Cyrillic/Russian)" if [NLS]
    inherited [NLS]
   }
   config NLS_CODEPAGE_869 tristate {
    prompt "Codepage 869 (Greek)" if [NLS]
    inherited [NLS]
   }
   config NLS_CODEPAGE_936 tristate {
    prompt "Simplified Chinese charset (CP936, GB2312)" if [NLS]
    inherited [NLS]
   }
   config NLS_CODEPAGE_950 tristate {
    prompt "Traditional Chinese charset (Big5)" if [NLS]
    inherited [NLS]
   }
   config NLS_CODEPAGE_932 tristate {
    prompt "Japanese charsets (Shift-JIS, EUC-JP)" if [NLS]
    inherited [NLS]
   }
   config NLS_CODEPAGE_949 tristate {
    prompt "Korean charset (CP949, EUC-KR)" if [NLS]
    inherited [NLS]
   }
   config NLS_CODEPAGE_874 tristate {
    prompt "Thai charset (CP874, TIS-620)" if [NLS]
    inherited [NLS]
   }
   config NLS_ISO8859_8 tristate {
    prompt "Hebrew charsets (ISO-8859-8, CP1255)" if [NLS]
    inherited [NLS]
   }
   config NLS_CODEPAGE_1250 tristate {
    prompt "Windows CP1250 (Slavic/Central European Languages)" if [NLS]
    inherited [NLS]
   }
   config NLS_CODEPAGE_1251 tristate {
    prompt "Windows CP1251 (Bulgarian, Belarusian)" if [NLS]
    inherited [NLS]
   }
   config NLS_ASCII tristate {
    prompt "ASCII (United States)" if [NLS]
    inherited [NLS]
   }
   config NLS_ISO8859_1 tristate {
    prompt "NLS ISO 8859-1  (Latin 1; Western European Languages)" if [NLS]
    inherited [NLS]
   }
   config NLS_ISO8859_2 tristate {
    prompt "NLS ISO 8859-2  (Latin 2; Slavic/Central European Languages)" if [NLS]
    inherited [NLS]
   }
   config NLS_ISO8859_3 tristate {
    prompt "NLS ISO 8859-3  (Latin 3; Esperanto, Galician, Maltese, Turkish)" if [NLS]
    inherited [NLS]
   }
   config NLS_ISO8859_4 tristate {
    prompt "NLS ISO 8859-4  (Latin 4; old Baltic charset)" if [NLS]
    inherited [NLS]
   }
   config NLS_ISO8859_5 tristate {
    prompt "NLS ISO 8859-5  (Cyrillic)" if [NLS]
    inherited [NLS]
   }
   config NLS_ISO8859_6 tristate {
    prompt "NLS ISO 8859-6  (Arabic)" if [NLS]
    inherited [NLS]
   }
   config NLS_ISO8859_7 tristate {
    prompt "NLS ISO 8859-7  (Modern Greek)" if [NLS]
    inherited [NLS]
   }
   config NLS_ISO8859_9 tristate {
    prompt "NLS ISO 8859-9  (Latin 5; Turkish)" if [NLS]
    inherited [NLS]
   }
   config NLS_ISO8859_13 tristate {
    prompt "NLS ISO 8859-13 (Latin 7; Baltic)" if [NLS]
    inherited [NLS]
   }
   config NLS_ISO8859_14 tristate {
    prompt "NLS ISO 8859-14 (Latin 8; Celtic)" if [NLS]
    inherited [NLS]
   }
   config NLS_ISO8859_15 tristate {
    prompt "NLS ISO 8859-15 (Latin 9; Western European Languages with Euro)" if [NLS]
    inherited [NLS]
   }
   config NLS_KOI8_R tristate {
    prompt "NLS KOI8-R (Russian)" if [NLS]
    inherited [NLS]
   }
   config NLS_KOI8_U tristate {
    prompt "NLS KOI8-U/RU (Ukrainian, Belarusian)" if [NLS]
    inherited [NLS]
   }
   config NLS_UTF8 tristate {
    prompt "NLS UTF-8" if [NLS]
    inherited [NLS]
   }
  }
 }
 menuconfig DLM tristate {
  prompt "Distributed Lock Manager (DLM)" if [EXPERIMENTAL && INET && SYSFS && (IPV6 || IPV6="n")]
  depends on [EXPERIMENTAL && INET]
  depends on [SYSFS && (IPV6 || IPV6="n")]
  select CONFIGFS_FS if [EXPERIMENTAL && INET && SYSFS && (IPV6 || IPV6="n")]
  select IP_SCTP if [EXPERIMENTAL && INET && SYSFS && (IPV6 || IPV6="n")]
  inherited [EXPERIMENTAL && INET && SYSFS && (IPV6 || IPV6="n")]
  config DLM_DEBUG boolean {
   prompt "DLM debugging" if [DLM]
   depends on [DLM]
   inherited [DLM]
  }
 }
}
menuconfig USB_SUPPORT boolean {
 prompt "USB support" if [HAS_IOMEM]
 depends on [HAS_IOMEM]
 default [y] if [HAS_IOMEM]
 inherited [HAS_IOMEM]
 if [USB_SUPPORT] {
  config USB_ARCH_HAS_HCD boolean {
   default [y] if [USB_SUPPORT && USB_ARCH_HAS_OHCI]
   default [y] if [USB_SUPPORT && USB_ARCH_HAS_EHCI]
   default [y] if [USB_SUPPORT && PCMCIA && !M32R]
   default [y] if [USB_SUPPORT && ARM]
   default [y] if [USB_SUPPORT && SUPERH]
   default [PCI] if [USB_SUPPORT]
   inherited [USB_SUPPORT]
  }
  config USB_ARCH_HAS_OHCI boolean {
   default [y] if [USB_SUPPORT && SA1111]
   default [y] if [USB_SUPPORT && ARCH_OMAP]
   default [y] if [USB_SUPPORT && ARCH_LH7A404]
   default [y] if [USB_SUPPORT && ARCH_S3C2410]
   default [y] if [USB_SUPPORT && PXA27x]
   default [y] if [USB_SUPPORT && PXA3xx]
   default [y] if [USB_SUPPORT && ARCH_EP93XX]
   default [y] if [USB_SUPPORT && ARCH_AT91]
   default [y] if [USB_SUPPORT && ARCH_PNX4008 && I2C]
   default [y] if [USB_SUPPORT && MFD_TC6393XB]
   default [y] if [USB_SUPPORT && ARCH_W90X900]
   default [y] if [USB_SUPPORT && STB03xxx]
   default [y] if [USB_SUPPORT && PPC_MPC52xx]
   default [y] if [USB_SUPPORT && SOC_AU1X00]
   default [y] if [USB_SUPPORT && CPU_SUBTYPE_SH7720]
   default [y] if [USB_SUPPORT && CPU_SUBTYPE_SH7721]
   default [y] if [USB_SUPPORT && CPU_SUBTYPE_SH7763]
   default [y] if [USB_SUPPORT && CPU_SUBTYPE_SH7786]
   default [PCI] if [USB_SUPPORT]
   inherited [USB_SUPPORT]
  }
  config USB_ARCH_HAS_EHCI boolean {
   default [y] if [USB_SUPPORT && PPC_83xx]
   default [y] if [USB_SUPPORT && SOC_AU1200]
   default [y] if [USB_SUPPORT && ARCH_IXP4XX]
   default [y] if [USB_SUPPORT && ARCH_W90X900]
   default [y] if [USB_SUPPORT && ARCH_AT91SAM9G45]
   default [y] if [USB_SUPPORT && ARCH_MXC]
   default [y] if [USB_SUPPORT && ARCH_OMAP34XX]
   default [PCI] if [USB_SUPPORT]
   inherited [USB_SUPPORT]
  }
  config USB tristate {
   prompt "Support for Host-side USB" if [USB_SUPPORT && USB_ARCH_HAS_HCD]
   depends on [USB_ARCH_HAS_HCD]
   select NLS if [USB_SUPPORT && USB_ARCH_HAS_HCD]
   inherited [USB_SUPPORT && USB_ARCH_HAS_HCD]
   config USB_DEBUG boolean {
    prompt "USB verbose debug messages" if [USB_SUPPORT && USB]
    depends on [USB]
    inherited [USB_SUPPORT && USB]
   }
   config USB_ANNOUNCE_NEW_DEVICES boolean {
    prompt "USB announce new devices" if [USB_SUPPORT && USB]
    depends on [USB]
    default [N] if [USB_SUPPORT && USB]
    inherited [USB_SUPPORT && USB]
   }
   config USB_DEVICEFS boolean {
    prompt "USB device filesystem (DEPRECATED)" if [USB_SUPPORT && USB]
    depends on [USB]
    inherited [USB_SUPPORT && USB]
   }
   config USB_DEVICE_CLASS boolean {
    prompt "USB device class-devices (DEPRECATED)" if [USB_SUPPORT && USB]
    depends on [USB]
    default [y] if [USB_SUPPORT && USB]
    inherited [USB_SUPPORT && USB]
   }
   config USB_DYNAMIC_MINORS boolean {
    prompt "Dynamic USB minor allocation" if [USB_SUPPORT && USB]
    depends on [USB]
    inherited [USB_SUPPORT && USB]
   }
   config USB_SUSPEND boolean {
    prompt "USB selective suspend/resume and wakeup" if [USB_SUPPORT && USB && PM]
    depends on [USB && PM]
    inherited [USB_SUPPORT && USB && PM]
   }
   config USB_OTG boolean {
    depends on [USB && EXPERIMENTAL]
    select USB_SUSPEND if [USB_SUPPORT && USB && EXPERIMENTAL]
    default [n] if [USB_SUPPORT && USB && EXPERIMENTAL]
    prompt "OTG Support" if [<choice> && USB_GADGET_OMAP && ARCH_OMAP_OTG && USB_OHCI_HCD]
    depends on [USB_GADGET_OMAP && ARCH_OMAP_OTG && USB_OHCI_HCD]
    inherited [USB_SUPPORT && USB && EXPERIMENTAL]
   }
   config USB_OTG_WHITELIST boolean {
    prompt "Rely on OTG Targeted Peripherals List" if [USB_SUPPORT && (USB_OTG || EMBEDDED)]
    depends on [USB_OTG || EMBEDDED]
    default [y] if [USB_SUPPORT && (USB_OTG || EMBEDDED) && USB_OTG]
    default [n] if [USB_SUPPORT && (USB_OTG || EMBEDDED) && EMBEDDED]
    inherited [USB_SUPPORT && (USB_OTG || EMBEDDED)]
   }
   config USB_OTG_BLACKLIST_HUB boolean {
    prompt "Disable external hubs" if [USB_SUPPORT && (USB_OTG || EMBEDDED)]
    depends on [USB_OTG || EMBEDDED]
    inherited [USB_SUPPORT && (USB_OTG || EMBEDDED)]
   }
   config USB_MON tristate {
    prompt "USB Monitor" if [USB_SUPPORT && USB]
    depends on [USB]
    inherited [USB_SUPPORT && USB]
   }
   config USB_WUSB tristate {
    prompt "Enable Wireless USB extensions (EXPERIMENTAL)" if [USB_SUPPORT && EXPERIMENTAL && USB]
    depends on [EXPERIMENTAL]
    depends on [USB]
    select UWB if [USB_SUPPORT && EXPERIMENTAL && USB]
    select CRYPTO if [USB_SUPPORT && EXPERIMENTAL && USB]
    select CRYPTO_BLKCIPHER if [USB_SUPPORT && EXPERIMENTAL && USB]
    select CRYPTO_CBC if [USB_SUPPORT && EXPERIMENTAL && USB]
    select CRYPTO_MANAGER if [USB_SUPPORT && EXPERIMENTAL && USB]
    select CRYPTO_AES if [USB_SUPPORT && EXPERIMENTAL && USB]
    inherited [USB_SUPPORT && EXPERIMENTAL && USB]
   }
   config USB_WUSB_CBAF tristate {
    prompt "Support WUSB Cable Based Association (CBA)" if [USB_SUPPORT && USB]
    depends on [USB]
    inherited [USB_SUPPORT && USB]
    config USB_WUSB_CBAF_DEBUG boolean {
     prompt "Enable CBA debug messages" if [USB_SUPPORT && USB_WUSB_CBAF]
     depends on [USB_WUSB_CBAF]
     inherited [USB_SUPPORT && USB_WUSB_CBAF]
    }
   }
   config USB_C67X00_HCD tristate {
    prompt "Cypress C67x00 HCD support" if [USB_SUPPORT && USB]
    depends on [USB]
    inherited [USB_SUPPORT && USB]
   }
   config USB_XHCI_HCD tristate {
    prompt "xHCI HCD (USB 3.0) support (EXPERIMENTAL)" if [USB_SUPPORT && USB && PCI && EXPERIMENTAL]
    depends on [USB && PCI && EXPERIMENTAL]
    inherited [USB_SUPPORT && USB && PCI && EXPERIMENTAL]
    config USB_XHCI_HCD_DEBUGGING boolean {
     prompt "Debugging for the xHCI host controller" if [USB_SUPPORT && USB_XHCI_HCD]
     depends on [USB_XHCI_HCD]
     inherited [USB_SUPPORT && USB_XHCI_HCD]
    }
   }
   config USB_EHCI_HCD tristate {
    prompt "EHCI HCD (USB 2.0) support" if [USB_SUPPORT && USB && USB_ARCH_HAS_EHCI]
    depends on [USB && USB_ARCH_HAS_EHCI]
    inherited [USB_SUPPORT && USB && USB_ARCH_HAS_EHCI]
    config USB_EHCI_ROOT_HUB_TT boolean {
     prompt "Root Hub Transaction Translators" if [USB_SUPPORT && USB_EHCI_HCD]
     depends on [USB_EHCI_HCD]
     inherited [USB_SUPPORT && USB_EHCI_HCD]
    }
    config USB_EHCI_TT_NEWSCHED boolean {
     prompt "Improved Transaction Translator scheduling (EXPERIMENTAL)" if [USB_SUPPORT && USB_EHCI_HCD && EXPERIMENTAL]
     depends on [USB_EHCI_HCD && EXPERIMENTAL]
     inherited [USB_SUPPORT && USB_EHCI_HCD && EXPERIMENTAL]
    }
    config USB_EHCI_BIG_ENDIAN_MMIO boolean {
     depends on [USB_EHCI_HCD && (PPC_CELLEB || PPC_PS3 || 440EPX || ARCH_IXP4XX || XPS_USB_HCD_XILINX)]
     default [y] if [USB_SUPPORT && USB_EHCI_HCD && (PPC_CELLEB || PPC_PS3 || 440EPX || ARCH_IXP4XX || XPS_USB_HCD_XILINX)]
     inherited [USB_SUPPORT && USB_EHCI_HCD && (PPC_CELLEB || PPC_PS3 || 440EPX || ARCH_IXP4XX || XPS_USB_HCD_XILINX)]
    }
    config USB_EHCI_BIG_ENDIAN_DESC boolean {
     depends on [USB_EHCI_HCD && (440EPX || ARCH_IXP4XX || XPS_USB_HCD_XILINX)]
     default [y] if [USB_SUPPORT && USB_EHCI_HCD && (440EPX || ARCH_IXP4XX || XPS_USB_HCD_XILINX)]
     inherited [USB_SUPPORT && USB_EHCI_HCD && (440EPX || ARCH_IXP4XX || XPS_USB_HCD_XILINX)]
    }
    config XPS_USB_HCD_XILINX boolean {
     prompt "Use Xilinx usb host EHCI controller core" if [USB_SUPPORT && USB_EHCI_HCD && (PPC32 || MICROBLAZE)]
     depends on [USB_EHCI_HCD && (PPC32 || MICROBLAZE)]
     select USB_EHCI_BIG_ENDIAN_DESC if [USB_SUPPORT && USB_EHCI_HCD && (PPC32 || MICROBLAZE)]
     select USB_EHCI_BIG_ENDIAN_MMIO if [USB_SUPPORT && USB_EHCI_HCD && (PPC32 || MICROBLAZE)]
     inherited [USB_SUPPORT && USB_EHCI_HCD && (PPC32 || MICROBLAZE)]
    }
    config USB_EHCI_FSL boolean {
     prompt "Support for Freescale on-chip EHCI USB controller" if [USB_SUPPORT && USB_EHCI_HCD && FSL_SOC]
     depends on [USB_EHCI_HCD && FSL_SOC]
     select USB_EHCI_ROOT_HUB_TT if [USB_SUPPORT && USB_EHCI_HCD && FSL_SOC]
     inherited [USB_SUPPORT && USB_EHCI_HCD && FSL_SOC]
    }
    config USB_EHCI_MXC boolean {
     prompt "Support for Freescale on-chip EHCI USB controller" if [USB_SUPPORT && USB_EHCI_HCD && ARCH_MXC]
     depends on [USB_EHCI_HCD && ARCH_MXC]
     select USB_EHCI_ROOT_HUB_TT if [USB_SUPPORT && USB_EHCI_HCD && ARCH_MXC]
     inherited [USB_SUPPORT && USB_EHCI_HCD && ARCH_MXC]
    }
    config USB_EHCI_HCD_PPC_OF boolean {
     prompt "EHCI support for PPC USB controller on OF platform bus" if [USB_SUPPORT && USB_EHCI_HCD && PPC_OF]
     depends on [USB_EHCI_HCD && PPC_OF]
     default [y] if [USB_SUPPORT && USB_EHCI_HCD && PPC_OF]
     inherited [USB_SUPPORT && USB_EHCI_HCD && PPC_OF]
    }
    config USB_W90X900_EHCI boolean {
     prompt "W90X900(W90P910) EHCI support" if [USB_SUPPORT && USB_EHCI_HCD && ARCH_W90X900]
     depends on [USB_EHCI_HCD && ARCH_W90X900]
     inherited [USB_SUPPORT && USB_EHCI_HCD && ARCH_W90X900]
    }
   }
   config USB_OXU210HP_HCD tristate {
    prompt "OXU210HP HCD support" if [USB_SUPPORT && USB]
    depends on [USB]
    inherited [USB_SUPPORT && USB]
   }
   config USB_ISP116X_HCD tristate {
    prompt "ISP116X HCD support" if [USB_SUPPORT && USB]
    depends on [USB]
    inherited [USB_SUPPORT && USB]
   }
   config USB_ISP1760_HCD tristate {
    prompt "ISP 1760 HCD support" if [USB_SUPPORT && USB && EXPERIMENTAL]
    depends on [USB && EXPERIMENTAL]
    inherited [USB_SUPPORT && USB && EXPERIMENTAL]
   }
   config USB_ISP1362_HCD tristate {
    prompt "ISP1362 HCD support" if [USB_SUPPORT && USB]
    depends on [USB]
    default [N] if [USB_SUPPORT && USB]
    inherited [USB_SUPPORT && USB]
   }
   config USB_OHCI_HCD tristate {
    prompt "OHCI HCD support" if [USB_SUPPORT && USB && USB_ARCH_HAS_OHCI]
    depends on [USB && USB_ARCH_HAS_OHCI]
    select ISP1301_OMAP if [USB_SUPPORT && USB && USB_ARCH_HAS_OHCI && (MACH_OMAP_H2 || MACH_OMAP_H3)]
    select USB_OTG_UTILS if [USB_SUPPORT && USB && USB_ARCH_HAS_OHCI && ARCH_OMAP]
    inherited [USB_SUPPORT && USB && USB_ARCH_HAS_OHCI]
    config USB_OHCI_HCD_PPC_SOC boolean {
     prompt "OHCI support for on-chip PPC USB controller" if [USB_SUPPORT && USB_OHCI_HCD && (STB03xxx || PPC_MPC52xx)]
     depends on [USB_OHCI_HCD && (STB03xxx || PPC_MPC52xx)]
     default [y] if [USB_SUPPORT && USB_OHCI_HCD && (STB03xxx || PPC_MPC52xx)]
     select USB_OHCI_BIG_ENDIAN_DESC if [USB_SUPPORT && USB_OHCI_HCD && (STB03xxx || PPC_MPC52xx)]
     select USB_OHCI_BIG_ENDIAN_MMIO if [USB_SUPPORT && USB_OHCI_HCD && (STB03xxx || PPC_MPC52xx)]
     inherited [USB_SUPPORT && USB_OHCI_HCD && (STB03xxx || PPC_MPC52xx)]
    }
    config USB_OHCI_HCD_PPC_OF_BE boolean {
     prompt "OHCI support for OF platform bus (big endian)" if [USB_SUPPORT && USB_OHCI_HCD && PPC_OF]
     depends on [USB_OHCI_HCD && PPC_OF]
     select USB_OHCI_BIG_ENDIAN_DESC if [USB_SUPPORT && USB_OHCI_HCD && PPC_OF]
     select USB_OHCI_BIG_ENDIAN_MMIO if [USB_SUPPORT && USB_OHCI_HCD && PPC_OF]
     inherited [USB_SUPPORT && USB_OHCI_HCD && PPC_OF]
    }
    config USB_OHCI_HCD_PPC_OF_LE boolean {
     prompt "OHCI support for OF platform bus (little endian)" if [USB_SUPPORT && USB_OHCI_HCD && PPC_OF]
     depends on [USB_OHCI_HCD && PPC_OF]
     select USB_OHCI_LITTLE_ENDIAN if [USB_SUPPORT && USB_OHCI_HCD && PPC_OF]
     inherited [USB_SUPPORT && USB_OHCI_HCD && PPC_OF]
    }
    config USB_OHCI_HCD_PPC_OF boolean {
     depends on [USB_OHCI_HCD && PPC_OF]
     default [USB_OHCI_HCD_PPC_OF_BE || USB_OHCI_HCD_PPC_OF_LE] if [USB_SUPPORT && USB_OHCI_HCD && PPC_OF]
     inherited [USB_SUPPORT && USB_OHCI_HCD && PPC_OF]
    }
    config USB_OHCI_HCD_PCI boolean {
     prompt "OHCI support for PCI-bus USB controllers" if [USB_SUPPORT && USB_OHCI_HCD && PCI && (STB03xxx || PPC_MPC52xx || USB_OHCI_HCD_PPC_OF)]
     depends on [USB_OHCI_HCD && PCI && (STB03xxx || PPC_MPC52xx || USB_OHCI_HCD_PPC_OF)]
     default [y] if [USB_SUPPORT && USB_OHCI_HCD && PCI && (STB03xxx || PPC_MPC52xx || USB_OHCI_HCD_PPC_OF)]
     select USB_OHCI_LITTLE_ENDIAN if [USB_SUPPORT && USB_OHCI_HCD && PCI && (STB03xxx || PPC_MPC52xx || USB_OHCI_HCD_PPC_OF)]
     inherited [USB_SUPPORT && USB_OHCI_HCD && PCI && (STB03xxx || PPC_MPC52xx || USB_OHCI_HCD_PPC_OF)]
    }
    config USB_OHCI_HCD_SSB boolean {
     prompt "OHCI support for Broadcom SSB OHCI core" if [USB_SUPPORT && USB_OHCI_HCD && (SSB="y" || SSB="USB_OHCI_HCD") && EXPERIMENTAL]
     depends on [USB_OHCI_HCD && (SSB="y" || SSB="USB_OHCI_HCD") && EXPERIMENTAL]
     default [n] if [USB_SUPPORT && USB_OHCI_HCD && (SSB="y" || SSB="USB_OHCI_HCD") && EXPERIMENTAL]
     inherited [USB_SUPPORT && USB_OHCI_HCD && (SSB="y" || SSB="USB_OHCI_HCD") && EXPERIMENTAL]
    }
    config USB_OHCI_BIG_ENDIAN_DESC boolean {
     depends on [USB_OHCI_HCD]
     default [n] if [USB_SUPPORT && USB_OHCI_HCD]
     inherited [USB_SUPPORT && USB_OHCI_HCD]
    }
    config USB_OHCI_BIG_ENDIAN_MMIO boolean {
     depends on [USB_OHCI_HCD]
     default [n] if [USB_SUPPORT && USB_OHCI_HCD]
     inherited [USB_SUPPORT && USB_OHCI_HCD]
    }
    config USB_OHCI_LITTLE_ENDIAN boolean {
     depends on [USB_OHCI_HCD]
     default [n] if [USB_SUPPORT && USB_OHCI_HCD && (STB03xxx || PPC_MPC52xx)]
     default [y] if [USB_SUPPORT && USB_OHCI_HCD]
     inherited [USB_SUPPORT && USB_OHCI_HCD]
    }
   }
   config USB_UHCI_HCD tristate {
    prompt "UHCI HCD (most Intel and VIA) support" if [USB_SUPPORT && USB && PCI]
    depends on [USB && PCI]
    inherited [USB_SUPPORT && USB && PCI]
   }
   config USB_FHCI_HCD tristate {
    prompt "Freescale QE USB Host Controller support" if [USB_SUPPORT && USB && OF_GPIO && QE_GPIO && QUICC_ENGINE]
    depends on [USB && OF_GPIO && QE_GPIO && QUICC_ENGINE]
    select FSL_GTM if [USB_SUPPORT && USB && OF_GPIO && QE_GPIO && QUICC_ENGINE]
    select QE_USB if [USB_SUPPORT && USB && OF_GPIO && QE_GPIO && QUICC_ENGINE]
    inherited [USB_SUPPORT && USB && OF_GPIO && QE_GPIO && QUICC_ENGINE]
    config FHCI_DEBUG boolean {
     prompt "Freescale QE USB Host Controller debug support" if [USB_SUPPORT && USB_FHCI_HCD && DEBUG_FS]
     depends on [USB_FHCI_HCD && DEBUG_FS]
     inherited [USB_SUPPORT && USB_FHCI_HCD && DEBUG_FS]
    }
   }
   config USB_U132_HCD tristate {
    prompt "Elan U132 Adapter Host Controller" if [USB_SUPPORT && USB && USB_FTDI_ELAN]
    depends on [USB && USB_FTDI_ELAN]
    default [M] if [USB_SUPPORT && USB && USB_FTDI_ELAN]
    inherited [USB_SUPPORT && USB && USB_FTDI_ELAN]
   }
   config USB_SL811_HCD tristate {
    prompt "SL811HS HCD support" if [USB_SUPPORT && USB]
    depends on [USB]
    inherited [USB_SUPPORT && USB]
    config USB_SL811_CS tristate {
     prompt "CF/PCMCIA support for SL811HS HCD" if [USB_SUPPORT && USB_SL811_HCD && PCMCIA]
     depends on [USB_SL811_HCD && PCMCIA]
     inherited [USB_SUPPORT && USB_SL811_HCD && PCMCIA]
    }
   }
   config USB_R8A66597_HCD tristate {
    prompt "R8A66597 HCD support" if [USB_SUPPORT && USB]
    depends on [USB]
    inherited [USB_SUPPORT && USB]
   }
   config USB_WHCI_HCD tristate {
    prompt "Wireless USB Host Controller Interface (WHCI) driver (EXPERIMENTAL)" if [USB_SUPPORT && EXPERIMENTAL && PCI && USB]
    depends on [EXPERIMENTAL]
    depends on [PCI && USB]
    select USB_WUSB if [USB_SUPPORT && EXPERIMENTAL && PCI && USB]
    select UWB_WHCI if [USB_SUPPORT && EXPERIMENTAL && PCI && USB]
    inherited [USB_SUPPORT && EXPERIMENTAL && PCI && USB]
   }
   config USB_HWA_HCD tristate {
    prompt "Host Wire Adapter (HWA) driver (EXPERIMENTAL)" if [USB_SUPPORT && EXPERIMENTAL && USB]
    depends on [EXPERIMENTAL]
    depends on [USB]
    select USB_WUSB if [USB_SUPPORT && EXPERIMENTAL && USB]
    select UWB_HWA if [USB_SUPPORT && EXPERIMENTAL && USB]
    inherited [USB_SUPPORT && EXPERIMENTAL && USB]
   }
  }
  config USB_MUSB_HDRC tristate {
   depends on [USB || USB_GADGET]
   depends on [ARM || BF54x && !BF544 || BF52x && !BF522 && !BF523]
   select NOP_USB_XCEIV if [USB_SUPPORT && (USB || USB_GADGET) && (ARM || BF54x && !BF544 || BF52x && !BF522 && !BF523) && (ARCH_DAVINCI || MACH_OMAP3EVM || BLACKFIN)]
   select TWL4030_USB if [USB_SUPPORT && (USB || USB_GADGET) && (ARM || BF54x && !BF544 || BF52x && !BF522 && !BF523) && MACH_OMAP_3430SDP]
   select USB_OTG_UTILS if [USB_SUPPORT && (USB || USB_GADGET) && (ARM || BF54x && !BF544 || BF52x && !BF522 && !BF523)]
   prompt "Inventra Highspeed Dual Role Controller (TI, ADI, ...)" if [USB_SUPPORT && (USB || USB_GADGET) && (ARM || BF54x && !BF544 || BF52x && !BF522 && !BF523)]
   inherited [USB_SUPPORT && (USB || USB_GADGET) && (ARM || BF54x && !BF544 || BF52x && !BF522 && !BF523)]
   config USB_MUSB_SOC boolean {
    depends on [USB_MUSB_HDRC]
    default [y] if [USB_SUPPORT && USB_MUSB_HDRC && ARCH_DAVINCI]
    default [y] if [USB_SUPPORT && USB_MUSB_HDRC && ARCH_OMAP2430]
    default [y] if [USB_SUPPORT && USB_MUSB_HDRC && ARCH_OMAP34XX]
    default [y] if [USB_SUPPORT && USB_MUSB_HDRC && BF54x && !BF544]
    default [y] if [USB_SUPPORT && USB_MUSB_HDRC && BF52x && !BF522 && !BF523]
    inherited [USB_SUPPORT && USB_MUSB_HDRC]
   }
   config USB_TUSB6010 boolean {
    prompt "TUSB 6010 support" if [USB_SUPPORT && USB_MUSB_HDRC && !USB_MUSB_SOC]
    depends on [USB_MUSB_HDRC && !USB_MUSB_SOC]
    select NOP_USB_XCEIV if [USB_SUPPORT && USB_MUSB_HDRC && !USB_MUSB_SOC]
    default [y] if [USB_SUPPORT && USB_MUSB_HDRC && !USB_MUSB_SOC]
    inherited [USB_SUPPORT && USB_MUSB_HDRC && !USB_MUSB_SOC]
   }
   choice boolean {
    prompt "Driver Mode" if [USB_SUPPORT && USB_MUSB_HDRC]
    depends on [USB_MUSB_HDRC]
    config USB_MUSB_HOST boolean {
     depends on [USB]
     prompt "USB Host" if [<choice> && USB]
     inherited [<choice> && USB]
    }
    config USB_MUSB_PERIPHERAL boolean {
     depends on [USB_GADGET]
     prompt "USB Peripheral (gadget stack)" if [<choice> && USB_GADGET]
     select USB_GADGET_MUSB_HDRC if [<choice> && USB_GADGET]
     inherited [<choice> && USB_GADGET]
    }
    config USB_MUSB_OTG boolean {
     depends on [USB && USB_GADGET && PM && EXPERIMENTAL]
     prompt "Both host and peripheral:  USB OTG (On The Go) Device" if [<choice> && USB && USB_GADGET && PM && EXPERIMENTAL]
     select USB_GADGET_MUSB_HDRC if [<choice> && USB && USB_GADGET && PM && EXPERIMENTAL]
     select USB_OTG if [<choice> && USB && USB_GADGET && PM && EXPERIMENTAL]
     inherited [<choice> && USB && USB_GADGET && PM && EXPERIMENTAL]
    }
   }
   config USB_GADGET_MUSB_HDRC boolean {
    depends on [USB_MUSB_HDRC && (USB_MUSB_PERIPHERAL || USB_MUSB_OTG)]
    prompt "Inventra HDRC USB Peripheral (TI, ADI, ...)" if [<choice> && USB_MUSB_HDRC && (USB_MUSB_PERIPHERAL || USB_MUSB_OTG)]
    depends on [USB_MUSB_HDRC && (USB_MUSB_PERIPHERAL || USB_MUSB_OTG)]
    select USB_GADGET_DUALSPEED if [<choice> && USB_MUSB_HDRC && (USB_MUSB_PERIPHERAL || USB_MUSB_OTG)]
    select USB_GADGET_SELECTED if [<choice> && USB_MUSB_HDRC && (USB_MUSB_PERIPHERAL || USB_MUSB_OTG)]
    inherited [USB_SUPPORT && USB_MUSB_HDRC && (USB_MUSB_PERIPHERAL || USB_MUSB_OTG)]
   }
   config USB_MUSB_HDRC_HCD boolean {
    depends on [USB_MUSB_HDRC && (USB_MUSB_HOST || USB_MUSB_OTG)]
    select USB_OTG if [USB_SUPPORT && USB_MUSB_HDRC && (USB_MUSB_HOST || USB_MUSB_OTG) && USB_GADGET_MUSB_HDRC]
    default [y] if [USB_SUPPORT && USB_MUSB_HDRC && (USB_MUSB_HOST || USB_MUSB_OTG)]
    inherited [USB_SUPPORT && USB_MUSB_HDRC && (USB_MUSB_HOST || USB_MUSB_OTG)]
   }
   config MUSB_PIO_ONLY boolean {
    prompt "Disable DMA (always use PIO)" if [USB_SUPPORT && USB_MUSB_HDRC]
    depends on [USB_MUSB_HDRC]
    default [y] if [USB_SUPPORT && USB_MUSB_HDRC && USB_TUSB6010]
    inherited [USB_SUPPORT && USB_MUSB_HDRC]
    config USB_INVENTRA_DMA boolean {
     depends on [USB_MUSB_HDRC && !MUSB_PIO_ONLY]
     default [ARCH_OMAP2430 || ARCH_OMAP34XX || BLACKFIN] if [USB_SUPPORT && USB_MUSB_HDRC && !MUSB_PIO_ONLY]
     inherited [USB_SUPPORT && USB_MUSB_HDRC && !MUSB_PIO_ONLY]
    }
    config USB_TI_CPPI_DMA boolean {
     depends on [USB_MUSB_HDRC && !MUSB_PIO_ONLY]
     default [ARCH_DAVINCI] if [USB_SUPPORT && USB_MUSB_HDRC && !MUSB_PIO_ONLY]
     inherited [USB_SUPPORT && USB_MUSB_HDRC && !MUSB_PIO_ONLY]
    }
    config USB_TUSB_OMAP_DMA boolean {
     depends on [USB_MUSB_HDRC && !MUSB_PIO_ONLY]
     depends on [USB_TUSB6010]
     depends on [ARCH_OMAP]
     default [y] if [USB_SUPPORT && USB_MUSB_HDRC && !MUSB_PIO_ONLY && USB_TUSB6010 && ARCH_OMAP]
     inherited [USB_SUPPORT && USB_MUSB_HDRC && !MUSB_PIO_ONLY && USB_TUSB6010 && ARCH_OMAP]
    }
   }
   config USB_MUSB_DEBUG boolean {
    depends on [USB_MUSB_HDRC]
    prompt "Enable debugging messages" if [USB_SUPPORT && USB_MUSB_HDRC]
    default [n] if [USB_SUPPORT && USB_MUSB_HDRC]
    inherited [USB_SUPPORT && USB_MUSB_HDRC]
   }
  }
  config USB_ACM tristate {
   prompt "USB Modem (CDC ACM) support" if [USB_SUPPORT && USB]
   depends on [USB]
   inherited [USB_SUPPORT && USB]
  }
  config USB_PRINTER tristate {
   prompt "USB Printer support" if [USB_SUPPORT && USB]
   depends on [USB]
   inherited [USB_SUPPORT && USB]
  }
  config USB_WDM tristate {
   prompt "USB Wireless Device Management support" if [USB_SUPPORT && USB]
   depends on [USB]
   inherited [USB_SUPPORT && USB]
  }
  config USB_TMC tristate {
   prompt "USB Test and Measurement Class support" if [USB_SUPPORT && USB]
   depends on [USB]
   inherited [USB_SUPPORT && USB]
  }
  config USB_STORAGE tristate {
   prompt "USB Mass Storage support" if [USB_SUPPORT && USB && SCSI]
   depends on [USB && SCSI]
   inherited [USB_SUPPORT && USB && SCSI]
   config USB_STORAGE_DEBUG boolean {
    prompt "USB Mass Storage verbose debug" if [USB_SUPPORT && USB_STORAGE]
    depends on [USB_STORAGE]
    inherited [USB_SUPPORT && USB_STORAGE]
   }
   config USB_STORAGE_DATAFAB tristate {
    prompt "Datafab Compact Flash Reader support" if [USB_SUPPORT && USB_STORAGE]
    depends on [USB_STORAGE]
    inherited [USB_SUPPORT && USB_STORAGE]
   }
   config USB_STORAGE_FREECOM tristate {
    prompt "Freecom USB/ATAPI Bridge support" if [USB_SUPPORT && USB_STORAGE]
    depends on [USB_STORAGE]
    inherited [USB_SUPPORT && USB_STORAGE]
   }
   config USB_STORAGE_ISD200 tristate {
    prompt "ISD-200 USB/ATA Bridge support" if [USB_SUPPORT && USB_STORAGE]
    depends on [USB_STORAGE]
    inherited [USB_SUPPORT && USB_STORAGE]
   }
   config USB_STORAGE_USBAT tristate {
    prompt "USBAT/USBAT02-based storage support" if [USB_SUPPORT && USB_STORAGE]
    depends on [USB_STORAGE]
    inherited [USB_SUPPORT && USB_STORAGE]
   }
   config USB_STORAGE_SDDR09 tristate {
    prompt "SanDisk SDDR-09 (and other SmartMedia, including DPCM) support" if [USB_SUPPORT && USB_STORAGE]
    depends on [USB_STORAGE]
    inherited [USB_SUPPORT && USB_STORAGE]
   }
   config USB_STORAGE_SDDR55 tristate {
    prompt "SanDisk SDDR-55 SmartMedia support" if [USB_SUPPORT && USB_STORAGE]
    depends on [USB_STORAGE]
    inherited [USB_SUPPORT && USB_STORAGE]
   }
   config USB_STORAGE_JUMPSHOT tristate {
    prompt "Lexar Jumpshot Compact Flash Reader" if [USB_SUPPORT && USB_STORAGE]
    depends on [USB_STORAGE]
    inherited [USB_SUPPORT && USB_STORAGE]
   }
   config USB_STORAGE_ALAUDA tristate {
    prompt "Olympus MAUSB-10/Fuji DPC-R1 support" if [USB_SUPPORT && USB_STORAGE]
    depends on [USB_STORAGE]
    inherited [USB_SUPPORT && USB_STORAGE]
   }
   config USB_STORAGE_ONETOUCH tristate {
    prompt "Support OneTouch Button on Maxtor Hard Drives" if [USB_SUPPORT && USB_STORAGE && (INPUT="y" || INPUT="USB_STORAGE")]
    depends on [USB_STORAGE]
    depends on [INPUT="y" || INPUT="USB_STORAGE"]
    inherited [USB_SUPPORT && USB_STORAGE && (INPUT="y" || INPUT="USB_STORAGE")]
   }
   config USB_STORAGE_KARMA tristate {
    prompt "Support for Rio Karma music player" if [USB_SUPPORT && USB_STORAGE]
    depends on [USB_STORAGE]
    inherited [USB_SUPPORT && USB_STORAGE]
   }
   config USB_STORAGE_CYPRESS_ATACB tristate {
    prompt "SAT emulation on Cypress USB/ATA Bridge with ATACB" if [USB_SUPPORT && USB_STORAGE]
    depends on [USB_STORAGE]
    inherited [USB_SUPPORT && USB_STORAGE]
   }
  }
  config USB_LIBUSUAL boolean {
   prompt "The shared table of common (or usual) storage devices" if [USB_SUPPORT && USB]
   depends on [USB]
   inherited [USB_SUPPORT && USB]
  }
  config USB_MDC800 tristate {
   prompt "USB Mustek MDC800 Digital Camera support" if [USB_SUPPORT && USB]
   depends on [USB]
   inherited [USB_SUPPORT && USB]
  }
  config USB_MICROTEK tristate {
   prompt "Microtek X6USB scanner support" if [USB_SUPPORT && USB && SCSI]
   depends on [USB && SCSI]
   inherited [USB_SUPPORT && USB && SCSI]
  }
  config USB_USS720 tristate {
   prompt "USS720 parport driver" if [USB_SUPPORT && USB && PARPORT]
   depends on [USB && PARPORT]
   select PARPORT_NOT_PC if [USB_SUPPORT && USB && PARPORT]
   inherited [USB_SUPPORT && USB && PARPORT]
  }
  menuconfig USB_SERIAL tristate {
   prompt "USB Serial Converter support" if [USB_SUPPORT && USB]
   depends on [USB]
   inherited [USB_SUPPORT && USB]
   if [USB_SUPPORT && USB_SERIAL] {
    config USB_SERIAL_CONSOLE boolean {
     prompt "USB Serial Console device support" if [USB_SUPPORT && USB_SERIAL="y"]
     depends on [USB_SERIAL="y"]
     inherited [USB_SUPPORT && USB_SERIAL="y"]
    }
    config USB_EZUSB boolean {
     prompt "Functions for loading firmware on EZUSB chips" if [USB_SUPPORT && USB_SERIAL]
     inherited [USB_SUPPORT && USB_SERIAL]
    }
    config USB_SERIAL_GENERIC boolean {
     prompt "USB Generic Serial Driver" if [USB_SUPPORT && USB_SERIAL]
     inherited [USB_SUPPORT && USB_SERIAL]
    }
    config USB_SERIAL_AIRCABLE tristate {
     prompt "USB AIRcable Bluetooth Dongle Driver" if [USB_SUPPORT && USB_SERIAL]
     inherited [USB_SUPPORT && USB_SERIAL]
    }
    config USB_SERIAL_ARK3116 tristate {
     prompt "USB ARK Micro 3116 USB Serial Driver" if [USB_SUPPORT && USB_SERIAL]
     inherited [USB_SUPPORT && USB_SERIAL]
    }
    config USB_SERIAL_BELKIN tristate {
     prompt "USB Belkin and Peracom Single Port Serial Driver" if [USB_SUPPORT && USB_SERIAL]
     inherited [USB_SUPPORT && USB_SERIAL]
    }
    config USB_SERIAL_CH341 tristate {
     prompt "USB Winchiphead CH341 Single Port Serial Driver" if [USB_SUPPORT && USB_SERIAL]
     inherited [USB_SUPPORT && USB_SERIAL]
    }
    config USB_SERIAL_WHITEHEAT tristate {
     prompt "USB ConnectTech WhiteHEAT Serial Driver" if [USB_SUPPORT && USB_SERIAL]
     select USB_EZUSB if [USB_SUPPORT && USB_SERIAL]
     inherited [USB_SUPPORT && USB_SERIAL]
    }
    config USB_SERIAL_DIGI_ACCELEPORT tristate {
     prompt "USB Digi International AccelePort USB Serial Driver" if [USB_SUPPORT && USB_SERIAL]
     inherited [USB_SUPPORT && USB_SERIAL]
    }
    config USB_SERIAL_CP210X tristate {
     prompt "USB CP210x family of UART Bridge Controllers" if [USB_SUPPORT && USB_SERIAL]
     inherited [USB_SUPPORT && USB_SERIAL]
    }
    config USB_SERIAL_CYPRESS_M8 tristate {
     prompt "USB Cypress M8 USB Serial Driver" if [USB_SUPPORT && USB_SERIAL]
     inherited [USB_SUPPORT && USB_SERIAL]
    }
    config USB_SERIAL_EMPEG tristate {
     prompt "USB Empeg empeg-car Mark I/II Driver" if [USB_SUPPORT && USB_SERIAL]
     inherited [USB_SUPPORT && USB_SERIAL]
    }
    config USB_SERIAL_FTDI_SIO tristate {
     prompt "USB FTDI Single Port Serial Driver" if [USB_SUPPORT && USB_SERIAL]
     inherited [USB_SUPPORT && USB_SERIAL]
    }
    config USB_SERIAL_FUNSOFT tristate {
     prompt "USB Fundamental Software Dongle Driver" if [USB_SUPPORT && USB_SERIAL]
     inherited [USB_SUPPORT && USB_SERIAL]
    }
    config USB_SERIAL_VISOR tristate {
     prompt "USB Handspring Visor / Palm m50x / Sony Clie Driver" if [USB_SUPPORT && USB_SERIAL]
     inherited [USB_SUPPORT && USB_SERIAL]
    }
    config USB_SERIAL_IPAQ tristate {
     prompt "USB PocketPC PDA Driver" if [USB_SUPPORT && USB_SERIAL]
     inherited [USB_SUPPORT && USB_SERIAL]
    }
    config USB_SERIAL_IR tristate {
     prompt "USB IR Dongle Serial Driver" if [USB_SUPPORT && USB_SERIAL]
     inherited [USB_SUPPORT && USB_SERIAL]
    }
    config USB_SERIAL_EDGEPORT tristate {
     prompt "USB Inside Out Edgeport Serial Driver" if [USB_SUPPORT && USB_SERIAL]
     inherited [USB_SUPPORT && USB_SERIAL]
    }
    config USB_SERIAL_EDGEPORT_TI tristate {
     prompt "USB Inside Out Edgeport Serial Driver (TI devices)" if [USB_SUPPORT && USB_SERIAL]
     inherited [USB_SUPPORT && USB_SERIAL]
    }
    config USB_SERIAL_GARMIN tristate {
     prompt "USB Garmin GPS driver" if [USB_SUPPORT && USB_SERIAL]
     inherited [USB_SUPPORT && USB_SERIAL]
    }
    config USB_SERIAL_IPW tristate {
     prompt "USB IPWireless (3G UMTS TDD) Driver" if [USB_SUPPORT && USB_SERIAL]
     inherited [USB_SUPPORT && USB_SERIAL]
    }
    config USB_SERIAL_IUU tristate {
     prompt "USB Infinity USB Unlimited Phoenix Driver" if [USB_SUPPORT && USB_SERIAL]
     inherited [USB_SUPPORT && USB_SERIAL]
    }
    config USB_SERIAL_KEYSPAN_PDA tristate {
     prompt "USB Keyspan PDA Single Port Serial Driver" if [USB_SUPPORT && USB_SERIAL]
     select USB_EZUSB if [USB_SUPPORT && USB_SERIAL]
     inherited [USB_SUPPORT && USB_SERIAL]
    }
    config USB_SERIAL_KEYSPAN tristate {
     prompt "USB Keyspan USA-xxx Serial Driver" if [USB_SUPPORT && USB_SERIAL]
     select USB_EZUSB if [USB_SUPPORT && USB_SERIAL]
     inherited [USB_SUPPORT && USB_SERIAL]
     config USB_SERIAL_KEYSPAN_MPR boolean {
      prompt "USB Keyspan MPR Firmware" if [USB_SUPPORT && USB_SERIAL && USB_SERIAL_KEYSPAN && FIRMWARE_IN_KERNEL]
      depends on [USB_SERIAL_KEYSPAN && FIRMWARE_IN_KERNEL]
      inherited [USB_SUPPORT && USB_SERIAL && USB_SERIAL_KEYSPAN && FIRMWARE_IN_KERNEL]
     }
     config USB_SERIAL_KEYSPAN_USA28 boolean {
      prompt "USB Keyspan USA-28 Firmware" if [USB_SUPPORT && USB_SERIAL && USB_SERIAL_KEYSPAN && FIRMWARE_IN_KERNEL]
      depends on [USB_SERIAL_KEYSPAN && FIRMWARE_IN_KERNEL]
      inherited [USB_SUPPORT && USB_SERIAL && USB_SERIAL_KEYSPAN && FIRMWARE_IN_KERNEL]
     }
     config USB_SERIAL_KEYSPAN_USA28X boolean {
      prompt "USB Keyspan USA-28X Firmware" if [USB_SUPPORT && USB_SERIAL && USB_SERIAL_KEYSPAN && FIRMWARE_IN_KERNEL]
      depends on [USB_SERIAL_KEYSPAN && FIRMWARE_IN_KERNEL]
      inherited [USB_SUPPORT && USB_SERIAL && USB_SERIAL_KEYSPAN && FIRMWARE_IN_KERNEL]
     }
     config USB_SERIAL_KEYSPAN_USA28XA boolean {
      prompt "USB Keyspan USA-28XA Firmware" if [USB_SUPPORT && USB_SERIAL && USB_SERIAL_KEYSPAN && FIRMWARE_IN_KERNEL]
      depends on [USB_SERIAL_KEYSPAN && FIRMWARE_IN_KERNEL]
      inherited [USB_SUPPORT && USB_SERIAL && USB_SERIAL_KEYSPAN && FIRMWARE_IN_KERNEL]
     }
     config USB_SERIAL_KEYSPAN_USA28XB boolean {
      prompt "USB Keyspan USA-28XB Firmware" if [USB_SUPPORT && USB_SERIAL && USB_SERIAL_KEYSPAN && FIRMWARE_IN_KERNEL]
      depends on [USB_SERIAL_KEYSPAN && FIRMWARE_IN_KERNEL]
      inherited [USB_SUPPORT && USB_SERIAL && USB_SERIAL_KEYSPAN && FIRMWARE_IN_KERNEL]
     }
     config USB_SERIAL_KEYSPAN_USA19 boolean {
      prompt "USB Keyspan USA-19 Firmware" if [USB_SUPPORT && USB_SERIAL && USB_SERIAL_KEYSPAN && FIRMWARE_IN_KERNEL]
      depends on [USB_SERIAL_KEYSPAN && FIRMWARE_IN_KERNEL]
      inherited [USB_SUPPORT && USB_SERIAL && USB_SERIAL_KEYSPAN && FIRMWARE_IN_KERNEL]
     }
     config USB_SERIAL_KEYSPAN_USA18X boolean {
      prompt "USB Keyspan USA-18X Firmware" if [USB_SUPPORT && USB_SERIAL && USB_SERIAL_KEYSPAN && FIRMWARE_IN_KERNEL]
      depends on [USB_SERIAL_KEYSPAN && FIRMWARE_IN_KERNEL]
      inherited [USB_SUPPORT && USB_SERIAL && USB_SERIAL_KEYSPAN && FIRMWARE_IN_KERNEL]
     }
     config USB_SERIAL_KEYSPAN_USA19W boolean {
      prompt "USB Keyspan USA-19W Firmware" if [USB_SUPPORT && USB_SERIAL && USB_SERIAL_KEYSPAN && FIRMWARE_IN_KERNEL]
      depends on [USB_SERIAL_KEYSPAN && FIRMWARE_IN_KERNEL]
      inherited [USB_SUPPORT && USB_SERIAL && USB_SERIAL_KEYSPAN && FIRMWARE_IN_KERNEL]
     }
     config USB_SERIAL_KEYSPAN_USA19QW boolean {
      prompt "USB Keyspan USA-19QW Firmware" if [USB_SUPPORT && USB_SERIAL && USB_SERIAL_KEYSPAN && FIRMWARE_IN_KERNEL]
      depends on [USB_SERIAL_KEYSPAN && FIRMWARE_IN_KERNEL]
      inherited [USB_SUPPORT && USB_SERIAL && USB_SERIAL_KEYSPAN && FIRMWARE_IN_KERNEL]
     }
     config USB_SERIAL_KEYSPAN_USA19QI boolean {
      prompt "USB Keyspan USA-19QI Firmware" if [USB_SUPPORT && USB_SERIAL && USB_SERIAL_KEYSPAN && FIRMWARE_IN_KERNEL]
      depends on [USB_SERIAL_KEYSPAN && FIRMWARE_IN_KERNEL]
      inherited [USB_SUPPORT && USB_SERIAL && USB_SERIAL_KEYSPAN && FIRMWARE_IN_KERNEL]
     }
     config USB_SERIAL_KEYSPAN_USA49W boolean {
      prompt "USB Keyspan USA-49W Firmware" if [USB_SUPPORT && USB_SERIAL && USB_SERIAL_KEYSPAN && FIRMWARE_IN_KERNEL]
      depends on [USB_SERIAL_KEYSPAN && FIRMWARE_IN_KERNEL]
      inherited [USB_SUPPORT && USB_SERIAL && USB_SERIAL_KEYSPAN && FIRMWARE_IN_KERNEL]
     }
     config USB_SERIAL_KEYSPAN_USA49WLC boolean {
      prompt "USB Keyspan USA-49WLC Firmware" if [USB_SUPPORT && USB_SERIAL && USB_SERIAL_KEYSPAN && FIRMWARE_IN_KERNEL]
      depends on [USB_SERIAL_KEYSPAN && FIRMWARE_IN_KERNEL]
      inherited [USB_SUPPORT && USB_SERIAL && USB_SERIAL_KEYSPAN && FIRMWARE_IN_KERNEL]
     }
    }
    config USB_SERIAL_KLSI tristate {
     prompt "USB KL5KUSB105 (Palmconnect) Driver" if [USB_SUPPORT && USB_SERIAL]
     inherited [USB_SUPPORT && USB_SERIAL]
    }
    config USB_SERIAL_KOBIL_SCT tristate {
     prompt "USB KOBIL chipcard reader" if [USB_SUPPORT && USB_SERIAL]
     inherited [USB_SUPPORT && USB_SERIAL]
    }
    config USB_SERIAL_MCT_U232 tristate {
     prompt "USB MCT Single Port Serial Driver" if [USB_SUPPORT && USB_SERIAL]
     inherited [USB_SUPPORT && USB_SERIAL]
    }
    config USB_SERIAL_MOS7720 tristate {
     prompt "USB Moschip 7720 Serial Driver" if [USB_SUPPORT && USB_SERIAL]
     inherited [USB_SUPPORT && USB_SERIAL]
    }
    config USB_SERIAL_MOS7840 tristate {
     prompt "USB Moschip 7840/7820 USB Serial Driver" if [USB_SUPPORT && USB_SERIAL]
     inherited [USB_SUPPORT && USB_SERIAL]
    }
    config USB_SERIAL_MOTOROLA tristate {
     prompt "USB Motorola Phone modem driver" if [USB_SUPPORT && USB_SERIAL]
     inherited [USB_SUPPORT && USB_SERIAL]
    }
    config USB_SERIAL_NAVMAN tristate {
     prompt "USB Navman GPS device" if [USB_SUPPORT && USB_SERIAL]
     inherited [USB_SUPPORT && USB_SERIAL]
    }
    config USB_SERIAL_PL2303 tristate {
     prompt "USB Prolific 2303 Single Port Serial Driver" if [USB_SUPPORT && USB_SERIAL]
     inherited [USB_SUPPORT && USB_SERIAL]
    }
    config USB_SERIAL_OTI6858 tristate {
     prompt "USB Ours Technology Inc. OTi-6858 USB To RS232 Bridge Controller" if [USB_SUPPORT && USB_SERIAL]
     inherited [USB_SUPPORT && USB_SERIAL]
    }
    config USB_SERIAL_QUALCOMM tristate {
     prompt "USB Qualcomm Serial modem" if [USB_SUPPORT && USB_SERIAL]
     inherited [USB_SUPPORT && USB_SERIAL]
    }
    config USB_SERIAL_SPCP8X5 tristate {
     prompt "USB SPCP8x5 USB To Serial Driver" if [USB_SUPPORT && USB_SERIAL]
     inherited [USB_SUPPORT && USB_SERIAL]
    }
    config USB_SERIAL_HP4X tristate {
     prompt "USB HP4x Calculators support" if [USB_SUPPORT && USB_SERIAL]
     inherited [USB_SUPPORT && USB_SERIAL]
    }
    config USB_SERIAL_SAFE tristate {
     prompt "USB Safe Serial (Encapsulated) Driver" if [USB_SUPPORT && USB_SERIAL]
     inherited [USB_SUPPORT && USB_SERIAL]
     config USB_SERIAL_SAFE_PADDED boolean {
      prompt "USB Secure Encapsulated Driver - Padded" if [USB_SUPPORT && USB_SERIAL && USB_SERIAL_SAFE]
      depends on [USB_SERIAL_SAFE]
      inherited [USB_SUPPORT && USB_SERIAL && USB_SERIAL_SAFE]
     }
    }
    config USB_SERIAL_SIEMENS_MPI tristate {
     prompt "USB Siemens MPI driver" if [USB_SUPPORT && USB_SERIAL]
     inherited [USB_SUPPORT && USB_SERIAL]
    }
    config USB_SERIAL_SIERRAWIRELESS tristate {
     prompt "USB Sierra Wireless Driver" if [USB_SUPPORT && USB_SERIAL]
     inherited [USB_SUPPORT && USB_SERIAL]
    }
    config USB_SERIAL_SYMBOL tristate {
     prompt "USB Symbol Barcode driver (serial mode)" if [USB_SUPPORT && USB_SERIAL]
     inherited [USB_SUPPORT && USB_SERIAL]
    }
    config USB_SERIAL_TI tristate {
     prompt "USB TI 3410/5052 Serial Driver" if [USB_SUPPORT && USB_SERIAL]
     inherited [USB_SUPPORT && USB_SERIAL]
    }
    config USB_SERIAL_CYBERJACK tristate {
     prompt "USB REINER SCT cyberJack pinpad/e-com chipcard reader" if [USB_SUPPORT && USB_SERIAL]
     inherited [USB_SUPPORT && USB_SERIAL]
    }
    config USB_SERIAL_XIRCOM tristate {
     prompt "USB Xircom / Entregra Single Port Serial Driver" if [USB_SUPPORT && USB_SERIAL]
     select USB_EZUSB if [USB_SUPPORT && USB_SERIAL]
     inherited [USB_SUPPORT && USB_SERIAL]
    }
    config USB_SERIAL_OPTION tristate {
     prompt "USB driver for GSM and CDMA modems" if [USB_SUPPORT && USB_SERIAL]
     inherited [USB_SUPPORT && USB_SERIAL]
    }
    config USB_SERIAL_OMNINET tristate {
     prompt "USB ZyXEL omni.net LCD Plus Driver" if [USB_SUPPORT && USB_SERIAL]
     inherited [USB_SUPPORT && USB_SERIAL]
    }
    config USB_SERIAL_OPTICON tristate {
     prompt "USB Opticon Barcode driver (serial mode)" if [USB_SUPPORT && USB_SERIAL]
     inherited [USB_SUPPORT && USB_SERIAL]
    }
    config USB_SERIAL_DEBUG tristate {
     prompt "USB Debugging Device" if [USB_SUPPORT && USB_SERIAL]
     inherited [USB_SUPPORT && USB_SERIAL]
    }
   }
  }
  config USB_EMI62 tristate {
   prompt "EMI 6|2m USB Audio interface support" if [USB_SUPPORT && USB]
   depends on [USB]
   inherited [USB_SUPPORT && USB]
  }
  config USB_EMI26 tristate {
   prompt "EMI 2|6 USB Audio interface support" if [USB_SUPPORT && USB]
   depends on [USB]
   inherited [USB_SUPPORT && USB]
  }
  config USB_ADUTUX tristate {
   prompt "ADU devices from Ontrak Control Systems" if [USB_SUPPORT && USB]
   depends on [USB]
   inherited [USB_SUPPORT && USB]
  }
  config USB_SEVSEG tristate {
   prompt "USB 7-Segment LED Display" if [USB_SUPPORT && USB]
   depends on [USB]
   inherited [USB_SUPPORT && USB]
  }
  config USB_RIO500 tristate {
   prompt "USB Diamond Rio500 support" if [USB_SUPPORT && USB]
   depends on [USB]
   inherited [USB_SUPPORT && USB]
  }
  config USB_LEGOTOWER tristate {
   prompt "USB Lego Infrared Tower support" if [USB_SUPPORT && USB]
   depends on [USB]
   inherited [USB_SUPPORT && USB]
  }
  config USB_LCD tristate {
   prompt "USB LCD driver support" if [USB_SUPPORT && USB]
   depends on [USB]
   inherited [USB_SUPPORT && USB]
  }
  config USB_BERRY_CHARGE tristate {
   prompt "USB BlackBerry recharge support" if [USB_SUPPORT && USB]
   depends on [USB]
   inherited [USB_SUPPORT && USB]
  }
  config USB_LED tristate {
   prompt "USB LED driver support" if [USB_SUPPORT && USB]
   depends on [USB]
   inherited [USB_SUPPORT && USB]
  }
  config USB_CYPRESS_CY7C63 tristate {
   prompt "Cypress CY7C63xxx USB driver support" if [USB_SUPPORT && USB]
   depends on [USB]
   inherited [USB_SUPPORT && USB]
  }
  config USB_CYTHERM tristate {
   prompt "Cypress USB thermometer driver support" if [USB_SUPPORT && USB]
   depends on [USB]
   inherited [USB_SUPPORT && USB]
  }
  config USB_IDMOUSE tristate {
   prompt "Siemens ID USB Mouse Fingerprint sensor support" if [USB_SUPPORT && USB]
   depends on [USB]
   inherited [USB_SUPPORT && USB]
  }
  config USB_FTDI_ELAN tristate {
   prompt "Elan PCMCIA CardBus Adapter USB Client" if [USB_SUPPORT && USB]
   depends on [USB]
   default [M] if [USB_SUPPORT && USB]
   inherited [USB_SUPPORT && USB]
  }
  config USB_APPLEDISPLAY tristate {
   prompt "Apple Cinema Display support" if [USB_SUPPORT && USB]
   depends on [USB]
   select BACKLIGHT_LCD_SUPPORT if [USB_SUPPORT && USB]
   select BACKLIGHT_CLASS_DEVICE if [USB_SUPPORT && USB]
   inherited [USB_SUPPORT && USB]
  }
  config USB_SISUSBVGA tristate {
   prompt "USB 2.0 SVGA dongle support (Net2280/SiS315)" if [USB_SUPPORT && USB && (USB_MUSB_HDRC || USB_EHCI_HCD)]
   depends on [USB && (USB_MUSB_HDRC || USB_EHCI_HCD)]
   inherited [USB_SUPPORT && USB && (USB_MUSB_HDRC || USB_EHCI_HCD)]
   config USB_SISUSBVGA_CON boolean {
    prompt "Text console and mode switching support" if [USB_SUPPORT && VT && USB_SISUSBVGA]
    depends on [VT]
    select FONT_8x16 if [USB_SUPPORT && VT]
    inherited [USB_SUPPORT && VT]
   }
  }
  config USB_LD tristate {
   prompt "USB LD driver" if [USB_SUPPORT && USB]
   depends on [USB]
   inherited [USB_SUPPORT && USB]
  }
  config USB_TRANCEVIBRATOR tristate {
   prompt "PlayStation 2 Trance Vibrator driver support" if [USB_SUPPORT && USB]
   depends on [USB]
   inherited [USB_SUPPORT && USB]
  }
  config USB_IOWARRIOR tristate {
   prompt "IO Warrior driver support" if [USB_SUPPORT && USB]
   depends on [USB]
   inherited [USB_SUPPORT && USB]
  }
  config USB_TEST tristate {
   prompt "USB testing driver" if [USB_SUPPORT && USB]
   depends on [USB]
   inherited [USB_SUPPORT && USB]
  }
  config USB_ISIGHTFW tristate {
   prompt "iSight firmware loading support" if [USB_SUPPORT && USB]
   depends on [USB]
   select FW_LOADER if [USB_SUPPORT && USB]
   inherited [USB_SUPPORT && USB]
  }
  config USB_VST tristate {
   prompt "USB VST driver" if [USB_SUPPORT && USB]
   depends on [USB]
   inherited [USB_SUPPORT && USB]
  }
  menuconfig USB_ATM tristate {
   prompt "USB DSL modem support" if [USB_SUPPORT && USB && ATM]
   depends on [USB && ATM]
   select CRC32 if [USB_SUPPORT && USB && ATM]
   default [n] if [USB_SUPPORT && USB && ATM]
   inherited [USB_SUPPORT && USB && ATM]
   if [USB_SUPPORT && USB_ATM] {
    config USB_SPEEDTOUCH tristate {
     prompt "Speedtouch USB support" if [USB_SUPPORT && USB_ATM]
     select FW_LOADER if [USB_SUPPORT && USB_ATM]
     inherited [USB_SUPPORT && USB_ATM]
    }
    config USB_CXACRU tristate {
     prompt "Conexant AccessRunner USB support" if [USB_SUPPORT && USB_ATM]
     select FW_LOADER if [USB_SUPPORT && USB_ATM]
     inherited [USB_SUPPORT && USB_ATM]
    }
    config USB_UEAGLEATM tristate {
     prompt "ADI 930 and eagle USB DSL modem" if [USB_SUPPORT && USB_ATM]
     select FW_LOADER if [USB_SUPPORT && USB_ATM]
     inherited [USB_SUPPORT && USB_ATM]
    }
    config USB_XUSBATM tristate {
     prompt "Other USB DSL modem support" if [USB_SUPPORT && USB_ATM]
     inherited [USB_SUPPORT && USB_ATM]
    }
   }
  }
  menuconfig USB_GADGET tristate {
   prompt "USB Gadget Support" if [USB_SUPPORT]
   inherited [USB_SUPPORT]
   if [USB_SUPPORT && USB_GADGET] {
    config USB_GADGET_DEBUG boolean {
     prompt "Debugging messages (DEVELOPMENT)" if [USB_SUPPORT && USB_GADGET && DEBUG_KERNEL]
     depends on [DEBUG_KERNEL]
     inherited [USB_SUPPORT && USB_GADGET && DEBUG_KERNEL]
    }
    config USB_GADGET_DEBUG_FILES boolean {
     prompt "Debugging information files (DEVELOPMENT)" if [USB_SUPPORT && USB_GADGET && PROC_FS]
     depends on [PROC_FS]
     inherited [USB_SUPPORT && USB_GADGET && PROC_FS]
    }
    config USB_GADGET_DEBUG_FS boolean {
     prompt "Debugging information files in debugfs (DEVELOPMENT)" if [USB_SUPPORT && USB_GADGET && DEBUG_FS]
     depends on [DEBUG_FS]
     inherited [USB_SUPPORT && USB_GADGET && DEBUG_FS]
    }
    config USB_GADGET_VBUS_DRAW integer {
     prompt "Maximum VBUS Power usage (2-500 mA)" if [USB_SUPPORT && USB_GADGET]
     range [2 500] if [USB_SUPPORT && USB_GADGET]
     default [2] if [USB_SUPPORT && USB_GADGET]
     inherited [USB_SUPPORT && USB_GADGET]
    }
    config USB_GADGET_SELECTED boolean {
     inherited [USB_SUPPORT && USB_GADGET]
    }
    choice boolean {
     prompt "USB Peripheral Controller" if [USB_SUPPORT && USB_GADGET]
     depends on [USB_GADGET]
     config USB_GADGET_AT91 boolean {
      prompt "Atmel AT91 USB Device Port" if [<choice> && ARCH_AT91 && !ARCH_AT91SAM9RL && !ARCH_AT91CAP9 && !ARCH_AT91SAM9G45]
      depends on [ARCH_AT91 && !ARCH_AT91SAM9RL && !ARCH_AT91CAP9 && !ARCH_AT91SAM9G45]
      select USB_GADGET_SELECTED if [<choice> && ARCH_AT91 && !ARCH_AT91SAM9RL && !ARCH_AT91CAP9 && !ARCH_AT91SAM9G45]
      inherited [<choice> && ARCH_AT91 && !ARCH_AT91SAM9RL && !ARCH_AT91CAP9 && !ARCH_AT91SAM9G45]
      config USB_AT91 tristate {
       depends on [USB_GADGET_AT91]
       default [USB_GADGET] if [<choice> && USB_GADGET_AT91]
       inherited [<choice> && USB_GADGET_AT91]
      }
     }
     config USB_GADGET_ATMEL_USBA boolean {
      prompt "Atmel USBA" if [<choice> && (AVR32 || ARCH_AT91CAP9 || ARCH_AT91SAM9RL || ARCH_AT91SAM9G45)]
      select USB_GADGET_DUALSPEED if [<choice> && (AVR32 || ARCH_AT91CAP9 || ARCH_AT91SAM9RL || ARCH_AT91SAM9G45)]
      depends on [AVR32 || ARCH_AT91CAP9 || ARCH_AT91SAM9RL || ARCH_AT91SAM9G45]
      inherited [<choice> && (AVR32 || ARCH_AT91CAP9 || ARCH_AT91SAM9RL || ARCH_AT91SAM9G45)]
      config USB_ATMEL_USBA tristate {
       depends on [USB_GADGET_ATMEL_USBA]
       default [USB_GADGET] if [<choice> && USB_GADGET_ATMEL_USBA]
       select USB_GADGET_SELECTED if [<choice> && USB_GADGET_ATMEL_USBA]
       inherited [<choice> && USB_GADGET_ATMEL_USBA]
      }
     }
     config USB_GADGET_FSL_USB2 boolean {
      prompt "Freescale Highspeed USB DR Peripheral Controller" if [<choice> && (FSL_SOC || ARCH_MXC)]
      depends on [FSL_SOC || ARCH_MXC]
      select USB_GADGET_DUALSPEED if [<choice> && (FSL_SOC || ARCH_MXC)]
      inherited [<choice> && (FSL_SOC || ARCH_MXC)]
      config USB_FSL_USB2 tristate {
       depends on [USB_GADGET_FSL_USB2]
       default [USB_GADGET] if [<choice> && USB_GADGET_FSL_USB2]
       select USB_GADGET_SELECTED if [<choice> && USB_GADGET_FSL_USB2]
       inherited [<choice> && USB_GADGET_FSL_USB2]
      }
     }
     config USB_GADGET_LH7A40X boolean {
      prompt "LH7A40X" if [<choice> && ARCH_LH7A40X]
      depends on [ARCH_LH7A40X]
      inherited [<choice> && ARCH_LH7A40X]
      config USB_LH7A40X tristate {
       depends on [USB_GADGET_LH7A40X]
       default [USB_GADGET] if [<choice> && USB_GADGET_LH7A40X]
       select USB_GADGET_SELECTED if [<choice> && USB_GADGET_LH7A40X]
       inherited [<choice> && USB_GADGET_LH7A40X]
      }
     }
     config USB_GADGET_OMAP boolean {
      prompt "OMAP USB Device Controller" if [<choice> && ARCH_OMAP]
      depends on [ARCH_OMAP]
      select ISP1301_OMAP if [<choice> && ARCH_OMAP && (MACH_OMAP_H2 || MACH_OMAP_H3 || MACH_OMAP_H4_OTG)]
      select USB_OTG_UTILS if [<choice> && ARCH_OMAP]
      inherited [<choice> && ARCH_OMAP]
      config USB_OMAP tristate {
       depends on [USB_GADGET_OMAP]
       default [USB_GADGET] if [<choice> && USB_GADGET_OMAP]
       select USB_GADGET_SELECTED if [<choice> && USB_GADGET_OMAP]
       inherited [<choice> && USB_GADGET_OMAP]
      }
      config USB_OTG boolean {
       depends on [USB && EXPERIMENTAL]
       select USB_SUSPEND if [USB_SUPPORT && USB && EXPERIMENTAL]
       default [n] if [USB_SUPPORT && USB && EXPERIMENTAL]
       prompt "OTG Support" if [<choice> && USB_GADGET_OMAP && ARCH_OMAP_OTG && USB_OHCI_HCD]
       depends on [USB_GADGET_OMAP && ARCH_OMAP_OTG && USB_OHCI_HCD]
       inherited [<choice> && USB_GADGET_OMAP && ARCH_OMAP_OTG && USB_OHCI_HCD]
      }
     }
     config USB_GADGET_PXA25X boolean {
      prompt "PXA 25x or IXP 4xx" if [<choice> && (ARCH_PXA && PXA25x || ARCH_IXP4XX)]
      depends on [ARCH_PXA && PXA25x || ARCH_IXP4XX]
      select USB_OTG_UTILS if [<choice> && (ARCH_PXA && PXA25x || ARCH_IXP4XX)]
      inherited [<choice> && (ARCH_PXA && PXA25x || ARCH_IXP4XX)]
      config USB_PXA25X tristate {
       depends on [USB_GADGET_PXA25X]
       default [USB_GADGET] if [<choice> && USB_GADGET_PXA25X]
       select USB_GADGET_SELECTED if [<choice> && USB_GADGET_PXA25X]
       inherited [<choice> && USB_GADGET_PXA25X]
      }
      config USB_PXA25X_SMALL boolean {
       depends on [USB_GADGET_PXA25X]
       default [n] if [<choice> && USB_GADGET_PXA25X && USB_ETH_RNDIS]
       default [y] if [<choice> && USB_GADGET_PXA25X && USB_ZERO]
       default [y] if [<choice> && USB_GADGET_PXA25X && USB_ETH]
       default [y] if [<choice> && USB_GADGET_PXA25X && USB_G_SERIAL]
       inherited [<choice> && USB_GADGET_PXA25X]
      }
     }
     config USB_GADGET_R8A66597 boolean {
      prompt "Renesas R8A66597 USB Peripheral Controller" if [<choice>]
      select USB_GADGET_DUALSPEED if [<choice>]
      inherited [<choice>]
      config USB_R8A66597 tristate {
       depends on [USB_GADGET_R8A66597]
       default [USB_GADGET] if [<choice> && USB_GADGET_R8A66597]
       select USB_GADGET_SELECTED if [<choice> && USB_GADGET_R8A66597]
       inherited [<choice> && USB_GADGET_R8A66597]
      }
     }
     config USB_GADGET_PXA27X boolean {
      prompt "PXA 27x" if [<choice> && ARCH_PXA && (PXA27x || PXA3xx)]
      depends on [ARCH_PXA && (PXA27x || PXA3xx)]
      select USB_OTG_UTILS if [<choice> && ARCH_PXA && (PXA27x || PXA3xx)]
      inherited [<choice> && ARCH_PXA && (PXA27x || PXA3xx)]
      config USB_PXA27X tristate {
       depends on [USB_GADGET_PXA27X]
       default [USB_GADGET] if [<choice> && USB_GADGET_PXA27X]
       select USB_GADGET_SELECTED if [<choice> && USB_GADGET_PXA27X]
       inherited [<choice> && USB_GADGET_PXA27X]
      }
     }
     config USB_GADGET_S3C_HSOTG boolean {
      prompt "S3C HS/OtG USB Device controller" if [<choice> && S3C_DEV_USB_HSOTG]
      depends on [S3C_DEV_USB_HSOTG]
      select USB_GADGET_S3C_HSOTG_PIO if [<choice> && S3C_DEV_USB_HSOTG]
      inherited [<choice> && S3C_DEV_USB_HSOTG]
      config USB_S3C_HSOTG tristate {
       depends on [USB_GADGET_S3C_HSOTG]
       default [USB_GADGET] if [<choice> && USB_GADGET_S3C_HSOTG]
       select USB_GADGET_SELECTED if [<choice> && USB_GADGET_S3C_HSOTG]
       inherited [<choice> && USB_GADGET_S3C_HSOTG]
      }
     }
     config USB_GADGET_IMX boolean {
      prompt "Freescale IMX USB Peripheral Controller" if [<choice> && ARCH_MX1]
      depends on [ARCH_MX1]
      inherited [<choice> && ARCH_MX1]
      config USB_IMX tristate {
       depends on [USB_GADGET_IMX]
       default [USB_GADGET] if [<choice> && USB_GADGET_IMX]
       select USB_GADGET_SELECTED if [<choice> && USB_GADGET_IMX]
       inherited [<choice> && USB_GADGET_IMX]
      }
     }
     config USB_GADGET_S3C2410 boolean {
      prompt "S3C2410 USB Device Controller" if [<choice> && ARCH_S3C2410]
      depends on [ARCH_S3C2410]
      inherited [<choice> && ARCH_S3C2410]
      config USB_S3C2410 tristate {
       depends on [USB_GADGET_S3C2410]
       default [USB_GADGET] if [<choice> && USB_GADGET_S3C2410]
       select USB_GADGET_SELECTED if [<choice> && USB_GADGET_S3C2410]
       inherited [<choice> && USB_GADGET_S3C2410]
      }
      config USB_S3C2410_DEBUG boolean {
       prompt "S3C2410 udc debug messages" if [<choice> && USB_GADGET_S3C2410]
       depends on [USB_GADGET_S3C2410]
       inherited [<choice> && USB_GADGET_S3C2410]
      }
     }
     config USB_GADGET_MUSB_HDRC boolean {
      depends on [USB_MUSB_HDRC && (USB_MUSB_PERIPHERAL || USB_MUSB_OTG)]
      prompt "Inventra HDRC USB Peripheral (TI, ADI, ...)" if [<choice> && USB_MUSB_HDRC && (USB_MUSB_PERIPHERAL || USB_MUSB_OTG)]
      depends on [USB_MUSB_HDRC && (USB_MUSB_PERIPHERAL || USB_MUSB_OTG)]
      select USB_GADGET_DUALSPEED if [<choice> && USB_MUSB_HDRC && (USB_MUSB_PERIPHERAL || USB_MUSB_OTG)]
      select USB_GADGET_SELECTED if [<choice> && USB_MUSB_HDRC && (USB_MUSB_PERIPHERAL || USB_MUSB_OTG)]
      inherited [<choice> && USB_MUSB_HDRC && (USB_MUSB_PERIPHERAL || USB_MUSB_OTG)]
     }
     config USB_GADGET_M66592 boolean {
      prompt "Renesas M66592 USB Peripheral Controller" if [<choice>]
      select USB_GADGET_DUALSPEED if [<choice>]
      inherited [<choice>]
      config USB_M66592 tristate {
       depends on [USB_GADGET_M66592]
       default [USB_GADGET] if [<choice> && USB_GADGET_M66592]
       select USB_GADGET_SELECTED if [<choice> && USB_GADGET_M66592]
       inherited [<choice> && USB_GADGET_M66592]
      }
     }
     config USB_GADGET_AMD5536UDC boolean {
      prompt "AMD5536 UDC" if [<choice> && PCI]
      depends on [PCI]
      select USB_GADGET_DUALSPEED if [<choice> && PCI]
      inherited [<choice> && PCI]
      config USB_AMD5536UDC tristate {
       depends on [USB_GADGET_AMD5536UDC]
       default [USB_GADGET] if [<choice> && USB_GADGET_AMD5536UDC]
       select USB_GADGET_SELECTED if [<choice> && USB_GADGET_AMD5536UDC]
       inherited [<choice> && USB_GADGET_AMD5536UDC]
      }
     }
     config USB_GADGET_FSL_QE boolean {
      prompt "Freescale QE/CPM USB Device Controller" if [<choice> && FSL_SOC && (QUICC_ENGINE || CPM)]
      depends on [FSL_SOC && (QUICC_ENGINE || CPM)]
      inherited [<choice> && FSL_SOC && (QUICC_ENGINE || CPM)]
      config USB_FSL_QE tristate {
       depends on [USB_GADGET_FSL_QE]
       default [USB_GADGET] if [<choice> && USB_GADGET_FSL_QE]
       select USB_GADGET_SELECTED if [<choice> && USB_GADGET_FSL_QE]
       inherited [<choice> && USB_GADGET_FSL_QE]
      }
     }
     config USB_GADGET_CI13XXX boolean {
      prompt "MIPS USB CI13xxx" if [<choice> && PCI]
      depends on [PCI]
      select USB_GADGET_DUALSPEED if [<choice> && PCI]
      inherited [<choice> && PCI]
      config USB_CI13XXX tristate {
       depends on [USB_GADGET_CI13XXX]
       default [USB_GADGET] if [<choice> && USB_GADGET_CI13XXX]
       select USB_GADGET_SELECTED if [<choice> && USB_GADGET_CI13XXX]
       inherited [<choice> && USB_GADGET_CI13XXX]
      }
     }
     config USB_GADGET_NET2280 boolean {
      prompt "NetChip 228x" if [<choice> && PCI]
      depends on [PCI]
      select USB_GADGET_DUALSPEED if [<choice> && PCI]
      inherited [<choice> && PCI]
      config USB_NET2280 tristate {
       depends on [USB_GADGET_NET2280]
       default [USB_GADGET] if [<choice> && USB_GADGET_NET2280]
       select USB_GADGET_SELECTED if [<choice> && USB_GADGET_NET2280]
       inherited [<choice> && USB_GADGET_NET2280]
      }
     }
     config USB_GADGET_GOKU boolean {
      prompt "Toshiba TC86C001 'Goku-S'" if [<choice> && PCI]
      depends on [PCI]
      inherited [<choice> && PCI]
      config USB_GOKU tristate {
       depends on [USB_GADGET_GOKU]
       default [USB_GADGET] if [<choice> && USB_GADGET_GOKU]
       select USB_GADGET_SELECTED if [<choice> && USB_GADGET_GOKU]
       inherited [<choice> && USB_GADGET_GOKU]
      }
     }
     config USB_GADGET_LANGWELL boolean {
      prompt "Intel Langwell USB Device Controller" if [<choice> && PCI]
      depends on [PCI]
      select USB_GADGET_DUALSPEED if [<choice> && PCI]
      inherited [<choice> && PCI]
      config USB_LANGWELL tristate {
       depends on [USB_GADGET_LANGWELL]
       default [USB_GADGET] if [<choice> && USB_GADGET_LANGWELL]
       select USB_GADGET_SELECTED if [<choice> && USB_GADGET_LANGWELL]
       inherited [<choice> && USB_GADGET_LANGWELL]
      }
     }
     config USB_GADGET_DUMMY_HCD boolean {
      prompt "Dummy HCD (DEVELOPMENT)" if [<choice> && (USB="y" || USB="m" && USB_GADGET="m")]
      depends on [USB="y" || USB="m" && USB_GADGET="m"]
      select USB_GADGET_DUALSPEED if [<choice> && (USB="y" || USB="m" && USB_GADGET="m")]
      inherited [<choice> && (USB="y" || USB="m" && USB_GADGET="m")]
      config USB_DUMMY_HCD tristate {
       depends on [USB_GADGET_DUMMY_HCD]
       default [USB_GADGET] if [<choice> && USB_GADGET_DUMMY_HCD]
       select USB_GADGET_SELECTED if [<choice> && USB_GADGET_DUMMY_HCD]
       inherited [<choice> && USB_GADGET_DUMMY_HCD]
      }
     }
    }
    config USB_GADGET_DUALSPEED boolean {
     depends on [USB_GADGET]
     default [n] if [USB_SUPPORT && USB_GADGET]
     inherited [USB_SUPPORT && USB_GADGET]
    }
    choice tristate {
     prompt "USB Gadget Drivers" if [USB_SUPPORT && USB_GADGET && USB_GADGET_SELECTED]
     depends on [USB_GADGET && USB_GADGET_SELECTED]
     default [USB_ETH] if [USB_SUPPORT && USB_GADGET && USB_GADGET_SELECTED]
     config USB_ZERO tristate {
      prompt "Gadget Zero (DEVELOPMENT)" if [<choice>]
      inherited [<choice>]
      config USB_ZERO_HNPTEST boolean {
       prompt "HNP Test Device" if [<choice> && USB_ZERO && USB_OTG]
       depends on [USB_ZERO && USB_OTG]
       inherited [<choice> && USB_ZERO && USB_OTG]
      }
     }
     config USB_AUDIO tristate {
      prompt "Audio Gadget (EXPERIMENTAL)" if [<choice> && SND]
      depends on [SND]
      select SND_PCM if [<choice> && SND]
      inherited [<choice> && SND]
     }
     config USB_ETH tristate {
      prompt "Ethernet Gadget (with CDC Ethernet support)" if [<choice> && NET]
      depends on [NET]
      select CRC32 if [<choice> && NET]
      inherited [<choice> && NET]
      config USB_ETH_RNDIS boolean {
       prompt "RNDIS support" if [<choice> && USB_ETH]
       depends on [USB_ETH]
       default [y] if [<choice> && USB_ETH]
       inherited [<choice> && USB_ETH]
      }
      config USB_ETH_EEM boolean {
       prompt "Ethernet Emulation Model (EEM) support" if [<choice> && USB_ETH]
       depends on [USB_ETH]
       default [n] if [<choice> && USB_ETH]
       inherited [<choice> && USB_ETH]
      }
     }
     config USB_GADGETFS tristate {
      prompt "Gadget Filesystem (EXPERIMENTAL)" if [<choice> && EXPERIMENTAL]
      depends on [EXPERIMENTAL]
      inherited [<choice> && EXPERIMENTAL]
     }
     config USB_FILE_STORAGE tristate {
      prompt "File-backed Storage Gadget" if [<choice> && BLOCK]
      depends on [BLOCK]
      inherited [<choice> && BLOCK]
      config USB_FILE_STORAGE_TEST boolean {
       prompt "File-backed Storage Gadget testing version" if [<choice> && USB_FILE_STORAGE]
       depends on [USB_FILE_STORAGE]
       default [n] if [<choice> && USB_FILE_STORAGE]
       inherited [<choice> && USB_FILE_STORAGE]
      }
     }
     config USB_MASS_STORAGE tristate {
      prompt "Mass Storage Gadget" if [<choice> && BLOCK]
      depends on [BLOCK]
      inherited [<choice> && BLOCK]
     }
     config USB_G_SERIAL tristate {
      prompt "Serial Gadget (with CDC ACM and CDC OBEX support)" if [<choice>]
      inherited [<choice>]
     }
     config USB_MIDI_GADGET tristate {
      prompt "MIDI Gadget (EXPERIMENTAL)" if [<choice> && SND && EXPERIMENTAL]
      depends on [SND && EXPERIMENTAL]
      select SND_RAWMIDI if [<choice> && SND && EXPERIMENTAL]
      inherited [<choice> && SND && EXPERIMENTAL]
     }
     config USB_G_PRINTER tristate {
      prompt "Printer Gadget" if [<choice>]
      inherited [<choice>]
     }
     config USB_CDC_COMPOSITE tristate {
      prompt "CDC Composite Device (Ethernet and ACM)" if [<choice> && NET]
      depends on [NET]
      inherited [<choice> && NET]
     }
     config USB_G_MULTI tristate {
      prompt "Multifunction Composite Gadget (EXPERIMENTAL)" if [<choice> && BLOCK && NET]
      depends on [BLOCK && NET]
      inherited [<choice> && BLOCK && NET]
      config USB_G_MULTI_RNDIS boolean {
       prompt "RNDIS + CDC Serial + Storage configuration" if [<choice> && USB_G_MULTI]
       depends on [USB_G_MULTI]
       default [y] if [<choice> && USB_G_MULTI]
       inherited [<choice> && USB_G_MULTI]
      }
      config USB_G_MULTI_CDC boolean {
       prompt "CDC Ethernet + CDC Serial + Storage configuration" if [<choice> && USB_G_MULTI]
       depends on [USB_G_MULTI]
       default [n] if [<choice> && USB_G_MULTI]
       inherited [<choice> && USB_G_MULTI]
      }
     }
    }
   }
  }
  config USB_OTG_UTILS boolean {
   inherited [USB_SUPPORT]
  }
  if [USB_SUPPORT && (USB || USB_GADGET)] {
   config USB_GPIO_VBUS tristate {
    prompt "GPIO based peripheral-only VBUS sensing 'transceiver'" if [USB_SUPPORT && (USB || USB_GADGET) && GENERIC_GPIO]
    depends on [GENERIC_GPIO]
    select USB_OTG_UTILS if [USB_SUPPORT && (USB || USB_GADGET) && GENERIC_GPIO]
    inherited [USB_SUPPORT && (USB || USB_GADGET) && GENERIC_GPIO]
   }
   config ISP1301_OMAP tristate {
    prompt "Philips ISP1301 with OMAP OTG" if [USB_SUPPORT && (USB || USB_GADGET) && I2C && ARCH_OMAP_OTG]
    depends on [I2C && ARCH_OMAP_OTG]
    select USB_OTG_UTILS if [USB_SUPPORT && (USB || USB_GADGET) && I2C && ARCH_OMAP_OTG]
    inherited [USB_SUPPORT && (USB || USB_GADGET) && I2C && ARCH_OMAP_OTG]
   }
   config USB_ULPI boolean {
    prompt "Generic ULPI Transceiver Driver" if [USB_SUPPORT && (USB || USB_GADGET) && ARM]
    depends on [ARM]
    select USB_OTG_UTILS if [USB_SUPPORT && (USB || USB_GADGET) && ARM]
    inherited [USB_SUPPORT && (USB || USB_GADGET) && ARM]
   }
   config TWL4030_USB tristate {
    prompt "TWL4030 USB Transceiver Driver" if [USB_SUPPORT && (USB || USB_GADGET) && TWL4030_CORE && REGULATOR_TWL4030]
    depends on [TWL4030_CORE && REGULATOR_TWL4030]
    select USB_OTG_UTILS if [USB_SUPPORT && (USB || USB_GADGET) && TWL4030_CORE && REGULATOR_TWL4030]
    inherited [USB_SUPPORT && (USB || USB_GADGET) && TWL4030_CORE && REGULATOR_TWL4030]
   }
   config NOP_USB_XCEIV tristate {
    prompt "NOP USB Transceiver Driver" if [USB_SUPPORT && (USB || USB_GADGET)]
    select USB_OTG_UTILS if [USB_SUPPORT && (USB || USB_GADGET)]
    inherited [USB_SUPPORT && (USB || USB_GADGET)]
   }
  }
 }
}
menuconfig UWB tristate {
 prompt "Ultra Wideband devices (EXPERIMENTAL)" if [EXPERIMENTAL && PCI]
 depends on [EXPERIMENTAL]
 depends on [PCI]
 default [n] if [EXPERIMENTAL && PCI]
 inherited [EXPERIMENTAL && PCI]
 if [UWB] {
  config UWB_HWA tristate {
   prompt "UWB Radio Control driver for WUSB-compliant USB dongles (HWA)" if [UWB && USB]
   depends on [USB]
   inherited [UWB && USB]
  }
  config UWB_WHCI tristate {
   prompt "UWB Radio Control driver for WHCI-compliant cards" if [UWB && PCI]
   depends on [PCI]
   inherited [UWB && PCI]
  }
  config UWB_WLP tristate {
   prompt "Support WiMedia Link Protocol (Ethernet/IP over UWB)" if [UWB && NET]
   depends on [UWB && NET]
   inherited [UWB && NET]
  }
  config UWB_I1480U tristate {
   prompt "Support for Intel Wireless UWB Link 1480 HWA" if [UWB && UWB_HWA]
   depends on [UWB_HWA]
   select FW_LOADER if [UWB && UWB_HWA]
   inherited [UWB && UWB_HWA]
   config UWB_I1480U_WLP tristate {
    prompt "Support for Intel Wireless UWB Link 1480 HWA's WLP interface" if [UWB && UWB_I1480U && UWB_WLP && NET]
    depends on [UWB_I1480U && UWB_WLP && NET]
    inherited [UWB && UWB_I1480U && UWB_WLP && NET]
   }
  }
 }
}
menuconfig STAGING boolean {
 prompt "Staging drivers" if []
 default [n] if []
 if [STAGING] {
  config STAGING_EXCLUDE_BUILD boolean {
   prompt "Exclude Staging drivers from being built" if [STAGING]
   default [y] if [STAGING]
   inherited [STAGING]
   if [STAGING && !STAGING_EXCLUDE_BUILD] {
    config ET131X tristate {
     prompt "Agere ET-1310 Gigabit Ethernet support" if [STAGING && !STAGING_EXCLUDE_BUILD && NETDEV_1000 && PCI]
     depends on [NETDEV_1000 && PCI]
     default [n] if [STAGING && !STAGING_EXCLUDE_BUILD && NETDEV_1000 && PCI]
     inherited [STAGING && !STAGING_EXCLUDE_BUILD && NETDEV_1000 && PCI]
     config ET131X_DEBUG boolean {
      prompt "Enable et131x debugging" if [STAGING && !STAGING_EXCLUDE_BUILD && ET131X]
      depends on [ET131X]
      default [n] if [STAGING && !STAGING_EXCLUDE_BUILD && ET131X]
      inherited [STAGING && !STAGING_EXCLUDE_BUILD && ET131X]
     }
    }
    config SLICOSS tristate {
     prompt "Alacritech Gigabit IS-NIC support" if [STAGING && !STAGING_EXCLUDE_BUILD && PCI && X86 && NETDEV_1000]
     depends on [PCI && X86 && NETDEV_1000]
     default [n] if [STAGING && !STAGING_EXCLUDE_BUILD && PCI && X86 && NETDEV_1000]
     inherited [STAGING && !STAGING_EXCLUDE_BUILD && PCI && X86 && NETDEV_1000]
    }
    config VIDEO_GO7007 tristate {
     prompt "WIS GO7007 MPEG encoder support" if [STAGING && !STAGING_EXCLUDE_BUILD && VIDEO_DEV && PCI && I2C && INPUT && SND]
     depends on [VIDEO_DEV && PCI && I2C && INPUT]
     depends on [SND]
     select VIDEOBUF_DMA_SG if [STAGING && !STAGING_EXCLUDE_BUILD && VIDEO_DEV && PCI && I2C && INPUT && SND]
     select VIDEO_IR if [STAGING && !STAGING_EXCLUDE_BUILD && VIDEO_DEV && PCI && I2C && INPUT && SND]
     select VIDEO_TUNER if [STAGING && !STAGING_EXCLUDE_BUILD && VIDEO_DEV && PCI && I2C && INPUT && SND]
     select VIDEO_TVEEPROM if [STAGING && !STAGING_EXCLUDE_BUILD && VIDEO_DEV && PCI && I2C && INPUT && SND]
     select SND_PCM if [STAGING && !STAGING_EXCLUDE_BUILD && VIDEO_DEV && PCI && I2C && INPUT && SND]
     select CRC32 if [STAGING && !STAGING_EXCLUDE_BUILD && VIDEO_DEV && PCI && I2C && INPUT && SND]
     default [N] if [STAGING && !STAGING_EXCLUDE_BUILD && VIDEO_DEV && PCI && I2C && INPUT && SND]
     inherited [STAGING && !STAGING_EXCLUDE_BUILD && VIDEO_DEV && PCI && I2C && INPUT && SND]
     config VIDEO_GO7007_USB tristate {
      prompt "WIS GO7007 USB support" if [STAGING && !STAGING_EXCLUDE_BUILD && VIDEO_GO7007 && USB]
      depends on [VIDEO_GO7007 && USB]
      default [N] if [STAGING && !STAGING_EXCLUDE_BUILD && VIDEO_GO7007 && USB]
      inherited [STAGING && !STAGING_EXCLUDE_BUILD && VIDEO_GO7007 && USB]
      config VIDEO_GO7007_USB_S2250_BOARD tristate {
       prompt "Sensoray 2250/2251 support" if [STAGING && !STAGING_EXCLUDE_BUILD && VIDEO_GO7007_USB && DVB_USB]
       depends on [VIDEO_GO7007_USB && DVB_USB]
       default [N] if [STAGING && !STAGING_EXCLUDE_BUILD && VIDEO_GO7007_USB && DVB_USB]
       inherited [STAGING && !STAGING_EXCLUDE_BUILD && VIDEO_GO7007_USB && DVB_USB]
      }
     }
     config VIDEO_GO7007_OV7640 tristate {
      prompt "OV7640 subdev support" if [STAGING && !STAGING_EXCLUDE_BUILD && VIDEO_GO7007]
      depends on [VIDEO_GO7007]
      default [N] if [STAGING && !STAGING_EXCLUDE_BUILD && VIDEO_GO7007]
      inherited [STAGING && !STAGING_EXCLUDE_BUILD && VIDEO_GO7007]
     }
     config VIDEO_GO7007_SAA7113 tristate {
      prompt "SAA7113 subdev support" if [STAGING && !STAGING_EXCLUDE_BUILD && VIDEO_GO7007]
      depends on [VIDEO_GO7007]
      default [N] if [STAGING && !STAGING_EXCLUDE_BUILD && VIDEO_GO7007]
      inherited [STAGING && !STAGING_EXCLUDE_BUILD && VIDEO_GO7007]
     }
     config VIDEO_GO7007_SAA7115 tristate {
      prompt "SAA7115 subdev support" if [STAGING && !STAGING_EXCLUDE_BUILD && VIDEO_GO7007]
      depends on [VIDEO_GO7007]
      default [N] if [STAGING && !STAGING_EXCLUDE_BUILD && VIDEO_GO7007]
      inherited [STAGING && !STAGING_EXCLUDE_BUILD && VIDEO_GO7007]
     }
     config VIDEO_GO7007_TW9903 tristate {
      prompt "TW9903 subdev support" if [STAGING && !STAGING_EXCLUDE_BUILD && VIDEO_GO7007]
      depends on [VIDEO_GO7007]
      default [N] if [STAGING && !STAGING_EXCLUDE_BUILD && VIDEO_GO7007]
      inherited [STAGING && !STAGING_EXCLUDE_BUILD && VIDEO_GO7007]
     }
     config VIDEO_GO7007_UDA1342 tristate {
      prompt "UDA1342 subdev support" if [STAGING && !STAGING_EXCLUDE_BUILD && VIDEO_GO7007]
      depends on [VIDEO_GO7007]
      default [N] if [STAGING && !STAGING_EXCLUDE_BUILD && VIDEO_GO7007]
      inherited [STAGING && !STAGING_EXCLUDE_BUILD && VIDEO_GO7007]
     }
     config VIDEO_GO7007_SONY_TUNER tristate {
      prompt "Sony tuner subdev support" if [STAGING && !STAGING_EXCLUDE_BUILD && VIDEO_GO7007]
      depends on [VIDEO_GO7007]
      default [N] if [STAGING && !STAGING_EXCLUDE_BUILD && VIDEO_GO7007]
      inherited [STAGING && !STAGING_EXCLUDE_BUILD && VIDEO_GO7007]
     }
     config VIDEO_GO7007_TW2804 tristate {
      prompt "TW2804 subdev support" if [STAGING && !STAGING_EXCLUDE_BUILD && VIDEO_GO7007]
      depends on [VIDEO_GO7007]
      default [N] if [STAGING && !STAGING_EXCLUDE_BUILD && VIDEO_GO7007]
      inherited [STAGING && !STAGING_EXCLUDE_BUILD && VIDEO_GO7007]
     }
    }
    config VIDEO_CX25821 tristate {
     prompt "Conexant cx25821 support" if [STAGING && !STAGING_EXCLUDE_BUILD && DVB_CORE && VIDEO_DEV && PCI && I2C && INPUT]
     depends on [DVB_CORE && VIDEO_DEV && PCI && I2C && INPUT]
     select I2C_ALGOBIT if [STAGING && !STAGING_EXCLUDE_BUILD && DVB_CORE && VIDEO_DEV && PCI && I2C && INPUT]
     select VIDEO_BTCX if [STAGING && !STAGING_EXCLUDE_BUILD && DVB_CORE && VIDEO_DEV && PCI && I2C && INPUT]
     select VIDEO_TVEEPROM if [STAGING && !STAGING_EXCLUDE_BUILD && DVB_CORE && VIDEO_DEV && PCI && I2C && INPUT]
     select VIDEO_IR if [STAGING && !STAGING_EXCLUDE_BUILD && DVB_CORE && VIDEO_DEV && PCI && I2C && INPUT]
     select VIDEOBUF_DVB if [STAGING && !STAGING_EXCLUDE_BUILD && DVB_CORE && VIDEO_DEV && PCI && I2C && INPUT]
     select VIDEOBUF_DMA_SG if [STAGING && !STAGING_EXCLUDE_BUILD && DVB_CORE && VIDEO_DEV && PCI && I2C && INPUT]
     select VIDEO_CX25840 if [STAGING && !STAGING_EXCLUDE_BUILD && DVB_CORE && VIDEO_DEV && PCI && I2C && INPUT]
     select VIDEO_CX2341X if [STAGING && !STAGING_EXCLUDE_BUILD && DVB_CORE && VIDEO_DEV && PCI && I2C && INPUT]
     inherited [STAGING && !STAGING_EXCLUDE_BUILD && DVB_CORE && VIDEO_DEV && PCI && I2C && INPUT]
     config VIDEO_CX25821_ALSA tristate {
      prompt "Conexant 25821 DMA audio support" if [STAGING && !STAGING_EXCLUDE_BUILD && VIDEO_CX25821 && SND && EXPERIMENTAL]
      depends on [VIDEO_CX25821 && SND && EXPERIMENTAL]
      select SND_PCM if [STAGING && !STAGING_EXCLUDE_BUILD && VIDEO_CX25821 && SND && EXPERIMENTAL]
      inherited [STAGING && !STAGING_EXCLUDE_BUILD && VIDEO_CX25821 && SND && EXPERIMENTAL]
     }
    }
    config USB_IP_COMMON tristate {
     prompt "USB IP support (EXPERIMENTAL)" if [STAGING && !STAGING_EXCLUDE_BUILD && USB && NET && EXPERIMENTAL]
     depends on [USB && NET && EXPERIMENTAL]
     default [N] if [STAGING && !STAGING_EXCLUDE_BUILD && USB && NET && EXPERIMENTAL]
     inherited [STAGING && !STAGING_EXCLUDE_BUILD && USB && NET && EXPERIMENTAL]
     config USB_IP_VHCI_HCD tristate {
      prompt "USB IP client driver" if [STAGING && !STAGING_EXCLUDE_BUILD && USB_IP_COMMON]
      depends on [USB_IP_COMMON]
      default [N] if [STAGING && !STAGING_EXCLUDE_BUILD && USB_IP_COMMON]
      inherited [STAGING && !STAGING_EXCLUDE_BUILD && USB_IP_COMMON]
     }
     config USB_IP_HOST tristate {
      prompt "USB IP host driver" if [STAGING && !STAGING_EXCLUDE_BUILD && USB_IP_COMMON]
      depends on [USB_IP_COMMON]
      default [N] if [STAGING && !STAGING_EXCLUDE_BUILD && USB_IP_COMMON]
      inherited [STAGING && !STAGING_EXCLUDE_BUILD && USB_IP_COMMON]
     }
    }
    config W35UND tristate {
     prompt "IS89C35 WLAN USB driver" if [STAGING && !STAGING_EXCLUDE_BUILD && MAC80211 && WLAN && USB && EXPERIMENTAL]
     depends on [MAC80211 && WLAN && USB && EXPERIMENTAL]
     default [n] if [STAGING && !STAGING_EXCLUDE_BUILD && MAC80211 && WLAN && USB && EXPERIMENTAL]
     inherited [STAGING && !STAGING_EXCLUDE_BUILD && MAC80211 && WLAN && USB && EXPERIMENTAL]
    }
    config PRISM2_USB tristate {
     prompt "Prism2.5/3 USB driver" if [STAGING && !STAGING_EXCLUDE_BUILD && WLAN && USB && WIRELESS_EXT]
     depends on [WLAN && USB && WIRELESS_EXT]
     select WEXT_PRIV if [STAGING && !STAGING_EXCLUDE_BUILD && WLAN && USB && WIRELESS_EXT]
     default [n] if [STAGING && !STAGING_EXCLUDE_BUILD && WLAN && USB && WIRELESS_EXT]
     inherited [STAGING && !STAGING_EXCLUDE_BUILD && WLAN && USB && WIRELESS_EXT]
    }
    config ECHO tristate {
     prompt "Line Echo Canceller support" if [STAGING && !STAGING_EXCLUDE_BUILD]
     default [n] if [STAGING && !STAGING_EXCLUDE_BUILD]
     inherited [STAGING && !STAGING_EXCLUDE_BUILD]
    }
    config POCH tristate {
     prompt "Redrapids Pocket Change CardBus support" if [STAGING && !STAGING_EXCLUDE_BUILD && PCI && UIO]
     depends on [PCI && UIO]
     default [N] if [STAGING && !STAGING_EXCLUDE_BUILD && PCI && UIO]
     inherited [STAGING && !STAGING_EXCLUDE_BUILD && PCI && UIO]
    }
    config OTUS tristate {
     prompt "Atheros OTUS 802.11n USB wireless support" if [STAGING && !STAGING_EXCLUDE_BUILD && USB && WLAN && MAC80211]
     depends on [USB && WLAN && MAC80211]
     default [N] if [STAGING && !STAGING_EXCLUDE_BUILD && USB && WLAN && MAC80211]
     inherited [STAGING && !STAGING_EXCLUDE_BUILD && USB && WLAN && MAC80211]
    }
    config RT2860 tristate {
     prompt "Ralink 2860/3090 wireless support" if [STAGING && !STAGING_EXCLUDE_BUILD && PCI && X86 && WLAN]
     depends on [PCI && X86 && WLAN]
     select WIRELESS_EXT if [STAGING && !STAGING_EXCLUDE_BUILD && PCI && X86 && WLAN]
     select WEXT_PRIV if [STAGING && !STAGING_EXCLUDE_BUILD && PCI && X86 && WLAN]
     inherited [STAGING && !STAGING_EXCLUDE_BUILD && PCI && X86 && WLAN]
    }
    config RT2870 tristate {
     prompt "Ralink 2870/3070 wireless support" if [STAGING && !STAGING_EXCLUDE_BUILD && USB && X86 && WLAN]
     depends on [USB && X86 && WLAN]
     select WIRELESS_EXT if [STAGING && !STAGING_EXCLUDE_BUILD && USB && X86 && WLAN]
     select WEXT_PRIV if [STAGING && !STAGING_EXCLUDE_BUILD && USB && X86 && WLAN]
     inherited [STAGING && !STAGING_EXCLUDE_BUILD && USB && X86 && WLAN]
    }
    config COMEDI tristate {
     prompt "Data acquisition support (comedi)" if [STAGING && !STAGING_EXCLUDE_BUILD && m && <choice> && (PCI || PCMCIA || PCCARD || USB)]
     default [N] if [STAGING && !STAGING_EXCLUDE_BUILD && m && <choice> && (PCI || PCMCIA || PCCARD || USB)]
     depends on [m && (PCI || PCMCIA || PCCARD || USB)]
     inherited [STAGING && !STAGING_EXCLUDE_BUILD && m && <choice> && (PCI || PCMCIA || PCCARD || USB)]
     config COMEDI_DEBUG boolean {
      prompt "Comedi debugging" if [STAGING && !STAGING_EXCLUDE_BUILD && COMEDI]
      depends on [COMEDI]
      inherited [STAGING && !STAGING_EXCLUDE_BUILD && COMEDI]
     }
     config COMEDI_PCI_DRIVERS tristate {
      prompt "Comedi PCI drivers" if [STAGING && !STAGING_EXCLUDE_BUILD && COMEDI && PCI]
      depends on [COMEDI && PCI]
      default [N] if [STAGING && !STAGING_EXCLUDE_BUILD && COMEDI && PCI]
      inherited [STAGING && !STAGING_EXCLUDE_BUILD && COMEDI && PCI]
     }
     config COMEDI_PCMCIA_DRIVERS tristate {
      prompt "Comedi PCMCIA drivers" if [STAGING && !STAGING_EXCLUDE_BUILD && COMEDI && PCMCIA && PCCARD]
      depends on [COMEDI && PCMCIA && PCCARD]
      default [N] if [STAGING && !STAGING_EXCLUDE_BUILD && COMEDI && PCMCIA && PCCARD]
      inherited [STAGING && !STAGING_EXCLUDE_BUILD && COMEDI && PCMCIA && PCCARD]
     }
     config COMEDI_USB_DRIVERS tristate {
      prompt "Comedi USB drivers" if [STAGING && !STAGING_EXCLUDE_BUILD && COMEDI && USB]
      depends on [COMEDI && USB]
      default [N] if [STAGING && !STAGING_EXCLUDE_BUILD && COMEDI && USB]
      inherited [STAGING && !STAGING_EXCLUDE_BUILD && COMEDI && USB]
     }
    }
    config ASUS_OLED tristate {
     prompt "Asus OLED driver" if [STAGING && !STAGING_EXCLUDE_BUILD && USB]
     depends on [USB]
     default [N] if [STAGING && !STAGING_EXCLUDE_BUILD && USB]
     inherited [STAGING && !STAGING_EXCLUDE_BUILD && USB]
    }
    config PANEL tristate {
     prompt "Parallel port LCD/Keypad Panel support" if [STAGING && !STAGING_EXCLUDE_BUILD && PARPORT]
     depends on [PARPORT]
     inherited [STAGING && !STAGING_EXCLUDE_BUILD && PARPORT]
     config PANEL_PARPORT integer {
      prompt "Default parallel port number (0=LPT1)" if [STAGING && !STAGING_EXCLUDE_BUILD && PANEL]
      depends on [PANEL]
      range [0 255] if [STAGING && !STAGING_EXCLUDE_BUILD && PANEL]
      default [0] if [STAGING && !STAGING_EXCLUDE_BUILD && PANEL]
      inherited [STAGING && !STAGING_EXCLUDE_BUILD && PANEL]
     }
     config PANEL_PROFILE integer {
      prompt "Default panel profile (0-5, 0=custom)" if [STAGING && !STAGING_EXCLUDE_BUILD && PANEL]
      depends on [PANEL]
      range [0 5] if [STAGING && !STAGING_EXCLUDE_BUILD && PANEL]
      default [5] if [STAGING && !STAGING_EXCLUDE_BUILD && PANEL]
      inherited [STAGING && !STAGING_EXCLUDE_BUILD && PANEL]
      config PANEL_KEYPAD integer {
       depends on [PANEL && PANEL_PROFILE="0"]
       prompt "Keypad type (0=none, 1=old 6 keys, 2=new 6 keys, 3=Nexcom 4 keys)" if [STAGING && !STAGING_EXCLUDE_BUILD && PANEL && PANEL_PROFILE="0"]
       range [0 3] if [STAGING && !STAGING_EXCLUDE_BUILD && PANEL && PANEL_PROFILE="0"]
       default [0] if [STAGING && !STAGING_EXCLUDE_BUILD && PANEL && PANEL_PROFILE="0"]
       inherited [STAGING && !STAGING_EXCLUDE_BUILD && PANEL && PANEL_PROFILE="0"]
      }
      config PANEL_LCD integer {
       depends on [PANEL && PANEL_PROFILE="0"]
       prompt "LCD type (0=none, 1=custom, 2=old //, 3=ks0074, 4=hantronix, 5=Nexcom)" if [STAGING && !STAGING_EXCLUDE_BUILD && PANEL && PANEL_PROFILE="0"]
       range [0 5] if [STAGING && !STAGING_EXCLUDE_BUILD && PANEL && PANEL_PROFILE="0"]
       default [0] if [STAGING && !STAGING_EXCLUDE_BUILD && PANEL && PANEL_PROFILE="0"]
       inherited [STAGING && !STAGING_EXCLUDE_BUILD && PANEL && PANEL_PROFILE="0"]
       config PANEL_LCD_HEIGHT integer {
        depends on [PANEL && PANEL_PROFILE="0" && PANEL_LCD="1"]
        prompt "Number of lines on the LCD (1-2)" if [STAGING && !STAGING_EXCLUDE_BUILD && PANEL && PANEL_PROFILE="0" && PANEL_LCD="1"]
        range [1 2] if [STAGING && !STAGING_EXCLUDE_BUILD && PANEL && PANEL_PROFILE="0" && PANEL_LCD="1"]
        default [2] if [STAGING && !STAGING_EXCLUDE_BUILD && PANEL && PANEL_PROFILE="0" && PANEL_LCD="1"]
        inherited [STAGING && !STAGING_EXCLUDE_BUILD && PANEL && PANEL_PROFILE="0" && PANEL_LCD="1"]
       }
       config PANEL_LCD_WIDTH integer {
        depends on [PANEL && PANEL_PROFILE="0" && PANEL_LCD="1"]
        prompt "Number of characters per line on the LCD (1-40)" if [STAGING && !STAGING_EXCLUDE_BUILD && PANEL && PANEL_PROFILE="0" && PANEL_LCD="1"]
        range [1 40] if [STAGING && !STAGING_EXCLUDE_BUILD && PANEL && PANEL_PROFILE="0" && PANEL_LCD="1"]
        default [40] if [STAGING && !STAGING_EXCLUDE_BUILD && PANEL && PANEL_PROFILE="0" && PANEL_LCD="1"]
        inherited [STAGING && !STAGING_EXCLUDE_BUILD && PANEL && PANEL_PROFILE="0" && PANEL_LCD="1"]
       }
       config PANEL_LCD_BWIDTH integer {
        depends on [PANEL && PANEL_PROFILE="0" && PANEL_LCD="1"]
        prompt "Internal LCD line width (1-40, 40 by default)" if [STAGING && !STAGING_EXCLUDE_BUILD && PANEL && PANEL_PROFILE="0" && PANEL_LCD="1"]
        range [1 40] if [STAGING && !STAGING_EXCLUDE_BUILD && PANEL && PANEL_PROFILE="0" && PANEL_LCD="1"]
        default [40] if [STAGING && !STAGING_EXCLUDE_BUILD && PANEL && PANEL_PROFILE="0" && PANEL_LCD="1"]
        inherited [STAGING && !STAGING_EXCLUDE_BUILD && PANEL && PANEL_PROFILE="0" && PANEL_LCD="1"]
       }
       config PANEL_LCD_HWIDTH integer {
        depends on [PANEL && PANEL_PROFILE="0" && PANEL_LCD="1"]
        prompt "Hardware LCD line width (1-64, 64 by default)" if [STAGING && !STAGING_EXCLUDE_BUILD && PANEL && PANEL_PROFILE="0" && PANEL_LCD="1"]
        range [1 64] if [STAGING && !STAGING_EXCLUDE_BUILD && PANEL && PANEL_PROFILE="0" && PANEL_LCD="1"]
        default [64] if [STAGING && !STAGING_EXCLUDE_BUILD && PANEL && PANEL_PROFILE="0" && PANEL_LCD="1"]
        inherited [STAGING && !STAGING_EXCLUDE_BUILD && PANEL && PANEL_PROFILE="0" && PANEL_LCD="1"]
       }
       config PANEL_LCD_CHARSET integer {
        depends on [PANEL && PANEL_PROFILE="0" && PANEL_LCD="1"]
        prompt "LCD character set (0=normal, 1=KS0074)" if [STAGING && !STAGING_EXCLUDE_BUILD && PANEL && PANEL_PROFILE="0" && PANEL_LCD="1"]
        range [0 1] if [STAGING && !STAGING_EXCLUDE_BUILD && PANEL && PANEL_PROFILE="0" && PANEL_LCD="1"]
        default [0] if [STAGING && !STAGING_EXCLUDE_BUILD && PANEL && PANEL_PROFILE="0" && PANEL_LCD="1"]
        inherited [STAGING && !STAGING_EXCLUDE_BUILD && PANEL && PANEL_PROFILE="0" && PANEL_LCD="1"]
       }
       config PANEL_LCD_PROTO integer {
        depends on [PANEL && PANEL_PROFILE="0" && PANEL_LCD="1"]
        prompt "LCD communication mode (0=parallel 8 bits, 1=serial)" if [STAGING && !STAGING_EXCLUDE_BUILD && PANEL && PANEL_PROFILE="0" && PANEL_LCD="1"]
        range [0 1] if [STAGING && !STAGING_EXCLUDE_BUILD && PANEL && PANEL_PROFILE="0" && PANEL_LCD="1"]
        default [0] if [STAGING && !STAGING_EXCLUDE_BUILD && PANEL && PANEL_PROFILE="0" && PANEL_LCD="1"]
        inherited [STAGING && !STAGING_EXCLUDE_BUILD && PANEL && PANEL_PROFILE="0" && PANEL_LCD="1"]
        config PANEL_LCD_PIN_E integer {
         depends on [PANEL && PANEL_PROFILE="0" && PANEL_LCD="1" && PANEL_LCD_PROTO="0"]
         prompt "Parallel port pin number & polarity connected to the LCD E signal (-17...17) " if [STAGING && !STAGING_EXCLUDE_BUILD && PANEL && PANEL_PROFILE="0" && PANEL_LCD="1" && PANEL_LCD_PROTO="0"]
         range [-17 17] if [STAGING && !STAGING_EXCLUDE_BUILD && PANEL && PANEL_PROFILE="0" && PANEL_LCD="1" && PANEL_LCD_PROTO="0"]
         default [14] if [STAGING && !STAGING_EXCLUDE_BUILD && PANEL && PANEL_PROFILE="0" && PANEL_LCD="1" && PANEL_LCD_PROTO="0"]
         inherited [STAGING && !STAGING_EXCLUDE_BUILD && PANEL && PANEL_PROFILE="0" && PANEL_LCD="1" && PANEL_LCD_PROTO="0"]
        }
        config PANEL_LCD_PIN_RS integer {
         depends on [PANEL && PANEL_PROFILE="0" && PANEL_LCD="1" && PANEL_LCD_PROTO="0"]
         prompt "Parallel port pin number & polarity connected to the LCD RS signal (-17...17) " if [STAGING && !STAGING_EXCLUDE_BUILD && PANEL && PANEL_PROFILE="0" && PANEL_LCD="1" && PANEL_LCD_PROTO="0"]
         range [-17 17] if [STAGING && !STAGING_EXCLUDE_BUILD && PANEL && PANEL_PROFILE="0" && PANEL_LCD="1" && PANEL_LCD_PROTO="0"]
         default [17] if [STAGING && !STAGING_EXCLUDE_BUILD && PANEL && PANEL_PROFILE="0" && PANEL_LCD="1" && PANEL_LCD_PROTO="0"]
         inherited [STAGING && !STAGING_EXCLUDE_BUILD && PANEL && PANEL_PROFILE="0" && PANEL_LCD="1" && PANEL_LCD_PROTO="0"]
        }
        config PANEL_LCD_PIN_RW integer {
         depends on [PANEL && PANEL_PROFILE="0" && PANEL_LCD="1" && PANEL_LCD_PROTO="0"]
         prompt "Parallel port pin number & polarity connected to the LCD RW signal (-17...17) " if [STAGING && !STAGING_EXCLUDE_BUILD && PANEL && PANEL_PROFILE="0" && PANEL_LCD="1" && PANEL_LCD_PROTO="0"]
         range [-17 17] if [STAGING && !STAGING_EXCLUDE_BUILD && PANEL && PANEL_PROFILE="0" && PANEL_LCD="1" && PANEL_LCD_PROTO="0"]
         default [16] if [STAGING && !STAGING_EXCLUDE_BUILD && PANEL && PANEL_PROFILE="0" && PANEL_LCD="1" && PANEL_LCD_PROTO="0"]
         inherited [STAGING && !STAGING_EXCLUDE_BUILD && PANEL && PANEL_PROFILE="0" && PANEL_LCD="1" && PANEL_LCD_PROTO="0"]
        }
        config PANEL_LCD_PIN_SCL integer {
         depends on [PANEL && PANEL_PROFILE="0" && PANEL_LCD="1" && PANEL_LCD_PROTO!="0"]
         prompt "Parallel port pin number & polarity connected to the LCD SCL signal (-17...17) " if [STAGING && !STAGING_EXCLUDE_BUILD && PANEL && PANEL_PROFILE="0" && PANEL_LCD="1" && PANEL_LCD_PROTO!="0"]
         range [-17 17] if [STAGING && !STAGING_EXCLUDE_BUILD && PANEL && PANEL_PROFILE="0" && PANEL_LCD="1" && PANEL_LCD_PROTO!="0"]
         default [1] if [STAGING && !STAGING_EXCLUDE_BUILD && PANEL && PANEL_PROFILE="0" && PANEL_LCD="1" && PANEL_LCD_PROTO!="0"]
         inherited [STAGING && !STAGING_EXCLUDE_BUILD && PANEL && PANEL_PROFILE="0" && PANEL_LCD="1" && PANEL_LCD_PROTO!="0"]
        }
        config PANEL_LCD_PIN_SDA integer {
         depends on [PANEL && PANEL_PROFILE="0" && PANEL_LCD="1" && PANEL_LCD_PROTO!="0"]
         prompt "Parallel port pin number & polarity connected to the LCD SDA signal (-17...17) " if [STAGING && !STAGING_EXCLUDE_BUILD && PANEL && PANEL_PROFILE="0" && PANEL_LCD="1" && PANEL_LCD_PROTO!="0"]
         range [-17 17] if [STAGING && !STAGING_EXCLUDE_BUILD && PANEL && PANEL_PROFILE="0" && PANEL_LCD="1" && PANEL_LCD_PROTO!="0"]
         default [2] if [STAGING && !STAGING_EXCLUDE_BUILD && PANEL && PANEL_PROFILE="0" && PANEL_LCD="1" && PANEL_LCD_PROTO!="0"]
         inherited [STAGING && !STAGING_EXCLUDE_BUILD && PANEL && PANEL_PROFILE="0" && PANEL_LCD="1" && PANEL_LCD_PROTO!="0"]
        }
       }
       config PANEL_LCD_PIN_BL integer {
        depends on [PANEL && PANEL_PROFILE="0" && PANEL_LCD="1"]
        prompt "Parallel port pin number & polarity connected to the LCD backlight signal (-17...17) " if [STAGING && !STAGING_EXCLUDE_BUILD && PANEL && PANEL_PROFILE="0" && PANEL_LCD="1"]
        range [-17 17] if [STAGING && !STAGING_EXCLUDE_BUILD && PANEL && PANEL_PROFILE="0" && PANEL_LCD="1"]
        default [0] if [STAGING && !STAGING_EXCLUDE_BUILD && PANEL && PANEL_PROFILE="0" && PANEL_LCD="1"]
        inherited [STAGING && !STAGING_EXCLUDE_BUILD && PANEL && PANEL_PROFILE="0" && PANEL_LCD="1"]
       }
      }
     }
     config PANEL_CHANGE_MESSAGE boolean {
      depends on [PANEL]
      prompt "Change LCD initialization message ?" if [STAGING && !STAGING_EXCLUDE_BUILD && PANEL]
      default [n] if [STAGING && !STAGING_EXCLUDE_BUILD && PANEL]
      inherited [STAGING && !STAGING_EXCLUDE_BUILD && PANEL]
      config PANEL_BOOT_MESSAGE string {
       depends on [PANEL && PANEL_CHANGE_MESSAGE="y"]
       prompt "New initialization message" if [STAGING && !STAGING_EXCLUDE_BUILD && PANEL && PANEL_CHANGE_MESSAGE]
       default [""] if [STAGING && !STAGING_EXCLUDE_BUILD && PANEL && PANEL_CHANGE_MESSAGE]
       inherited [STAGING && !STAGING_EXCLUDE_BUILD && PANEL && PANEL_CHANGE_MESSAGE]
      }
     }
    }
    config ALTERA_PCIE_CHDMA tristate {
     prompt "Altera PCI Express Chaining DMA driver" if [STAGING && !STAGING_EXCLUDE_BUILD && PCI]
     depends on [PCI]
     default [N] if [STAGING && !STAGING_EXCLUDE_BUILD && PCI]
     inherited [STAGING && !STAGING_EXCLUDE_BUILD && PCI]
    }
    config R8187SE tristate {
     prompt "RealTek RTL8187SE Wireless LAN NIC driver" if [STAGING && !STAGING_EXCLUDE_BUILD && PCI && WLAN]
     depends on [PCI && WLAN]
     select WIRELESS_EXT if [STAGING && !STAGING_EXCLUDE_BUILD && PCI && WLAN]
     select WEXT_PRIV if [STAGING && !STAGING_EXCLUDE_BUILD && PCI && WLAN]
     default [N] if [STAGING && !STAGING_EXCLUDE_BUILD && PCI && WLAN]
     inherited [STAGING && !STAGING_EXCLUDE_BUILD && PCI && WLAN]
    }
    config RTL8192SU tristate {
     prompt "RealTek RTL8192SU Wireless LAN NIC driver" if [STAGING && !STAGING_EXCLUDE_BUILD && PCI && WLAN && USB && WIRELESS_EXT]
     depends on [PCI && WLAN && USB]
     depends on [WIRELESS_EXT]
     default [N] if [STAGING && !STAGING_EXCLUDE_BUILD && PCI && WLAN && USB && WIRELESS_EXT]
     inherited [STAGING && !STAGING_EXCLUDE_BUILD && PCI && WLAN && USB && WIRELESS_EXT]
    }
    config RTL8192U tristate {
     prompt "RealTek RTL8192U Wireless LAN NIC driver" if [STAGING && !STAGING_EXCLUDE_BUILD && PCI && WLAN && USB && WIRELESS_EXT]
     depends on [PCI && WLAN && USB]
     depends on [WIRELESS_EXT]
     default [N] if [STAGING && !STAGING_EXCLUDE_BUILD && PCI && WLAN && USB && WIRELESS_EXT]
     inherited [STAGING && !STAGING_EXCLUDE_BUILD && PCI && WLAN && USB && WIRELESS_EXT]
    }
    config RTL8192E tristate {
     prompt "RealTek RTL8192E Wireless LAN NIC driver" if [STAGING && !STAGING_EXCLUDE_BUILD && PCI && WLAN]
     depends on [PCI && WLAN]
     select WIRELESS_EXT if [STAGING && !STAGING_EXCLUDE_BUILD && PCI && WLAN]
     select WEXT_PRIV if [STAGING && !STAGING_EXCLUDE_BUILD && PCI && WLAN]
     default [N] if [STAGING && !STAGING_EXCLUDE_BUILD && PCI && WLAN]
     inherited [STAGING && !STAGING_EXCLUDE_BUILD && PCI && WLAN]
    }
    config TRANZPORT tristate {
     prompt "Frontier Tranzport and Alphatrack support" if [STAGING && !STAGING_EXCLUDE_BUILD && USB]
     depends on [USB]
     default [N] if [STAGING && !STAGING_EXCLUDE_BUILD && USB]
     inherited [STAGING && !STAGING_EXCLUDE_BUILD && USB]
    }
    config DREAM tristate {
     prompt "HTC Dream support" if [STAGING && !STAGING_EXCLUDE_BUILD && BROKEN]
     depends on [BROKEN]
     inherited [STAGING && !STAGING_EXCLUDE_BUILD && BROKEN]
    }
    config MSM_SMD boolean {
     depends on [ARCH_MSM]
     default [y] if [STAGING && !STAGING_EXCLUDE_BUILD && ARCH_MSM]
     prompt "MSM Shared Memory Driver (SMD)" if [STAGING && !STAGING_EXCLUDE_BUILD && ARCH_MSM]
     inherited [STAGING && !STAGING_EXCLUDE_BUILD && ARCH_MSM]
     config MSM_ONCRPCROUTER boolean {
      depends on [MSM_SMD]
      default [y] if [STAGING && !STAGING_EXCLUDE_BUILD && MSM_SMD]
      prompt "MSM ONCRPC router support" if [STAGING && !STAGING_EXCLUDE_BUILD && MSM_SMD]
      inherited [STAGING && !STAGING_EXCLUDE_BUILD && MSM_SMD]
      config MSM_RPCSERVERS boolean {
       depends on [MSM_ONCRPCROUTER]
       default [y] if [STAGING && !STAGING_EXCLUDE_BUILD && MSM_ONCRPCROUTER]
       prompt "Kernel side RPC server bundle" if [STAGING && !STAGING_EXCLUDE_BUILD && MSM_ONCRPCROUTER]
       inherited [STAGING && !STAGING_EXCLUDE_BUILD && MSM_ONCRPCROUTER]
      }
     }
    }
    menuconfig MSM_CAMERA boolean {
     prompt "Qualcomm MSM camera and video capture support" if [STAGING && !STAGING_EXCLUDE_BUILD && ARCH_MSM && VIDEO_V4L2_COMMON]
     depends on [ARCH_MSM && VIDEO_V4L2_COMMON]
     inherited [STAGING && !STAGING_EXCLUDE_BUILD && ARCH_MSM && VIDEO_V4L2_COMMON]
     config MSM_CAMERA_DEBUG boolean {
      prompt "Qualcomm MSM camera debugging with printk" if [STAGING && !STAGING_EXCLUDE_BUILD && MSM_CAMERA]
      depends on [MSM_CAMERA]
      inherited [STAGING && !STAGING_EXCLUDE_BUILD && MSM_CAMERA]
     }
     config MSM_CAMERA_FLASH boolean {
      prompt "Qualcomm MSM camera flash support" if [STAGING && !STAGING_EXCLUDE_BUILD && MSM_CAMERA]
      depends on [MSM_CAMERA]
      inherited [STAGING && !STAGING_EXCLUDE_BUILD && MSM_CAMERA]
     }
    }
    config MT9T013 boolean {
     prompt "Sensor mt9t013 (BAYER 3M)" if [STAGING && !STAGING_EXCLUDE_BUILD && MSM_CAMERA]
     depends on [MSM_CAMERA]
     inherited [STAGING && !STAGING_EXCLUDE_BUILD && MSM_CAMERA]
    }
    config MT9D112 boolean {
     prompt "Sensor mt9d112 (YUV 2M)" if [STAGING && !STAGING_EXCLUDE_BUILD && MSM_CAMERA]
     depends on [MSM_CAMERA]
     inherited [STAGING && !STAGING_EXCLUDE_BUILD && MSM_CAMERA]
    }
    config MT9P012 boolean {
     prompt "Sensor mt9p012 (BAYER 5M)" if [STAGING && !STAGING_EXCLUDE_BUILD && MSM_CAMERA]
     depends on [MSM_CAMERA]
     inherited [STAGING && !STAGING_EXCLUDE_BUILD && MSM_CAMERA]
    }
    config S5K3E2FX boolean {
     prompt "Sensor s5k3e2fx (Samsung 5M)" if [STAGING && !STAGING_EXCLUDE_BUILD && MSM_CAMERA]
     depends on [MSM_CAMERA]
     inherited [STAGING && !STAGING_EXCLUDE_BUILD && MSM_CAMERA]
    }
    config INPUT_GPIO tristate {
     prompt "GPIO driver support" if [STAGING && !STAGING_EXCLUDE_BUILD]
     inherited [STAGING && !STAGING_EXCLUDE_BUILD]
    }
    config POHMELFS tristate {
     prompt "POHMELFS filesystem support" if [STAGING && !STAGING_EXCLUDE_BUILD && NET]
     depends on [NET]
     select CONNECTOR if [STAGING && !STAGING_EXCLUDE_BUILD && NET]
     select CRYPTO if [STAGING && !STAGING_EXCLUDE_BUILD && NET]
     select CRYPTO_BLKCIPHER if [STAGING && !STAGING_EXCLUDE_BUILD && NET]
     select CRYPTO_HMAC if [STAGING && !STAGING_EXCLUDE_BUILD && NET]
     inherited [STAGING && !STAGING_EXCLUDE_BUILD && NET]
     config POHMELFS_DEBUG boolean {
      prompt "POHMELFS debugging" if [STAGING && !STAGING_EXCLUDE_BUILD && POHMELFS]
      depends on [POHMELFS]
      default [n] if [STAGING && !STAGING_EXCLUDE_BUILD && POHMELFS]
      inherited [STAGING && !STAGING_EXCLUDE_BUILD && POHMELFS]
     }
     config POHMELFS_CRYPTO boolean {
      prompt "POHMELFS crypto support" if [STAGING && !STAGING_EXCLUDE_BUILD && POHMELFS]
      depends on [POHMELFS]
      inherited [STAGING && !STAGING_EXCLUDE_BUILD && POHMELFS]
     }
    }
    config B3DFG tristate {
     prompt "Brontes 3d Frame Framegrabber" if [STAGING && !STAGING_EXCLUDE_BUILD && PCI]
     depends on [PCI]
     default [n] if [STAGING && !STAGING_EXCLUDE_BUILD && PCI]
     inherited [STAGING && !STAGING_EXCLUDE_BUILD && PCI]
    }
    config IDE_PHISON tristate {
     prompt "PCIE ATA PS5000 IDE support" if [STAGING && !STAGING_EXCLUDE_BUILD && PCI && ATA && ATA_SFF]
     depends on [PCI && ATA && ATA_SFF]
     inherited [STAGING && !STAGING_EXCLUDE_BUILD && PCI && ATA && ATA_SFF]
    }
    config PLAN9AUTH tristate {
     prompt "Plan 9 style capability device implementation" if [STAGING && !STAGING_EXCLUDE_BUILD && CRYPTO]
     default [n] if [STAGING && !STAGING_EXCLUDE_BUILD && CRYPTO]
     depends on [CRYPTO]
     inherited [STAGING && !STAGING_EXCLUDE_BUILD && CRYPTO]
    }
    config LINE6_USB tristate {
     prompt "Line6 USB support" if [STAGING && !STAGING_EXCLUDE_BUILD && USB && SND]
     depends on [USB && SND]
     select SND_RAWMIDI if [STAGING && !STAGING_EXCLUDE_BUILD && USB && SND]
     inherited [STAGING && !STAGING_EXCLUDE_BUILD && USB && SND]
    }
    config DRM_VMWGFX tristate {
     prompt "DRM driver for VMware Virtual GPU" if [STAGING && !STAGING_EXCLUDE_BUILD && DRM && PCI]
     depends on [DRM && PCI]
     select FB_DEFERRED_IO if [STAGING && !STAGING_EXCLUDE_BUILD && DRM && PCI]
     select FB_CFB_FILLRECT if [STAGING && !STAGING_EXCLUDE_BUILD && DRM && PCI]
     select FB_CFB_COPYAREA if [STAGING && !STAGING_EXCLUDE_BUILD && DRM && PCI]
     select FB_CFB_IMAGEBLIT if [STAGING && !STAGING_EXCLUDE_BUILD && DRM && PCI]
     select DRM_TTM if [STAGING && !STAGING_EXCLUDE_BUILD && DRM && PCI]
     inherited [STAGING && !STAGING_EXCLUDE_BUILD && DRM && PCI]
    }
    config DRM_NOUVEAU tristate {
     prompt "Nouveau (nVidia) cards" if [STAGING && !STAGING_EXCLUDE_BUILD && DRM]
     depends on [DRM]
     select FW_LOADER if [STAGING && !STAGING_EXCLUDE_BUILD && DRM]
     select DRM_KMS_HELPER if [STAGING && !STAGING_EXCLUDE_BUILD && DRM]
     select DRM_TTM if [STAGING && !STAGING_EXCLUDE_BUILD && DRM]
     select FB_CFB_FILLRECT if [STAGING && !STAGING_EXCLUDE_BUILD && DRM]
     select FB_CFB_COPYAREA if [STAGING && !STAGING_EXCLUDE_BUILD && DRM]
     select FB_CFB_IMAGEBLIT if [STAGING && !STAGING_EXCLUDE_BUILD && DRM]
     select FB if [STAGING && !STAGING_EXCLUDE_BUILD && DRM]
     select FRAMEBUFFER_CONSOLE if [STAGING && !STAGING_EXCLUDE_BUILD && DRM && !EMBEDDED]
     select FB_BACKLIGHT if [STAGING && !STAGING_EXCLUDE_BUILD && DRM && DRM_NOUVEAU_BACKLIGHT]
     inherited [STAGING && !STAGING_EXCLUDE_BUILD && DRM]
     config DRM_NOUVEAU_BACKLIGHT boolean {
      prompt "Support for backlight control" if [STAGING && !STAGING_EXCLUDE_BUILD && DRM_NOUVEAU]
      depends on [DRM_NOUVEAU]
      default [y] if [STAGING && !STAGING_EXCLUDE_BUILD && DRM_NOUVEAU]
      inherited [STAGING && !STAGING_EXCLUDE_BUILD && DRM_NOUVEAU]
     }
     config DRM_NOUVEAU_DEBUG boolean {
      prompt "Build in Nouveau's debugfs support" if [STAGING && !STAGING_EXCLUDE_BUILD && DRM_NOUVEAU && DEBUG_FS]
      depends on [DRM_NOUVEAU && DEBUG_FS]
      default [y] if [STAGING && !STAGING_EXCLUDE_BUILD && DRM_NOUVEAU && DEBUG_FS]
      inherited [STAGING && !STAGING_EXCLUDE_BUILD && DRM_NOUVEAU && DEBUG_FS]
     }
    }
    menu "I2C encoder or helper chips" {
     depends on [STAGING && !STAGING_EXCLUDE_BUILD && DRM && DRM_KMS_HELPER && I2C]
     config DRM_I2C_CH7006 tristate {
      prompt "Chrontel ch7006 TV encoder" if [STAGING && !STAGING_EXCLUDE_BUILD && DRM && DRM_KMS_HELPER && I2C]
      default [m] if [STAGING && !STAGING_EXCLUDE_BUILD && DRM && DRM_KMS_HELPER && I2C && DRM_NOUVEAU]
      inherited [STAGING && !STAGING_EXCLUDE_BUILD && DRM && DRM_KMS_HELPER && I2C]
     }
    }
    config OCTEON_ETHERNET tristate {
     prompt "Cavium Networks Octeon Ethernet support" if [STAGING && !STAGING_EXCLUDE_BUILD && CPU_CAVIUM_OCTEON]
     depends on [CPU_CAVIUM_OCTEON]
     select PHYLIB if [STAGING && !STAGING_EXCLUDE_BUILD && CPU_CAVIUM_OCTEON]
     select MDIO_OCTEON if [STAGING && !STAGING_EXCLUDE_BUILD && CPU_CAVIUM_OCTEON]
     inherited [STAGING && !STAGING_EXCLUDE_BUILD && CPU_CAVIUM_OCTEON]
    }
    config USB_SERIAL_QUATECH2 tristate {
     prompt "USB Quatech ESU-100 8 Port Serial Driver" if [STAGING && !STAGING_EXCLUDE_BUILD && USB_SERIAL]
     depends on [USB_SERIAL]
     inherited [STAGING && !STAGING_EXCLUDE_BUILD && USB_SERIAL]
    }
    config USB_SERIAL_QUATECH_USB2 tristate {
     prompt "USB Quatech xSU2-[14]00 USB Serial Driver" if [STAGING && !STAGING_EXCLUDE_BUILD && USB_SERIAL]
     depends on [USB_SERIAL]
     inherited [STAGING && !STAGING_EXCLUDE_BUILD && USB_SERIAL]
    }
    config VT6655 tristate {
     prompt "VIA Technologies VT6655 support" if [STAGING && !STAGING_EXCLUDE_BUILD && PCI && WLAN]
     depends on [PCI && WLAN]
     select WIRELESS_EXT if [STAGING && !STAGING_EXCLUDE_BUILD && PCI && WLAN]
     select WEXT_PRIV if [STAGING && !STAGING_EXCLUDE_BUILD && PCI && WLAN]
     inherited [STAGING && !STAGING_EXCLUDE_BUILD && PCI && WLAN]
    }
    config VT6656 tristate {
     prompt "VIA Technologies VT6656 support" if [STAGING && !STAGING_EXCLUDE_BUILD && USB && WLAN]
     depends on [USB && WLAN]
     select WIRELESS_EXT if [STAGING && !STAGING_EXCLUDE_BUILD && USB && WLAN]
     select WEXT_PRIV if [STAGING && !STAGING_EXCLUDE_BUILD && USB && WLAN]
     inherited [STAGING && !STAGING_EXCLUDE_BUILD && USB && WLAN]
    }
    config FB_UDL tristate {
     prompt "Displaylink USB Framebuffer support" if [STAGING && !STAGING_EXCLUDE_BUILD && FB && USB]
     depends on [FB && USB]
     inherited [STAGING && !STAGING_EXCLUDE_BUILD && FB && USB]
    }
    config HYPERV tristate {
     prompt "Microsoft Hyper-V client drivers" if [STAGING && !STAGING_EXCLUDE_BUILD && X86 && m && <choice>]
     depends on [X86 && m]
     default [n] if [STAGING && !STAGING_EXCLUDE_BUILD && X86 && m && <choice>]
     inherited [STAGING && !STAGING_EXCLUDE_BUILD && X86 && m && <choice>]
     if [STAGING && !STAGING_EXCLUDE_BUILD && HYPERV] {
      config HYPERV_STORAGE tristate {
       prompt "Microsoft Hyper-V virtual storage driver" if [STAGING && !STAGING_EXCLUDE_BUILD && HYPERV && SCSI]
       depends on [SCSI]
       default [HYPERV] if [STAGING && !STAGING_EXCLUDE_BUILD && HYPERV && SCSI]
       inherited [STAGING && !STAGING_EXCLUDE_BUILD && HYPERV && SCSI]
      }
      config HYPERV_BLOCK tristate {
       prompt "Microsoft Hyper-V virtual block driver" if [STAGING && !STAGING_EXCLUDE_BUILD && HYPERV && BLOCK && SCSI]
       depends on [BLOCK && SCSI]
       default [HYPERV] if [STAGING && !STAGING_EXCLUDE_BUILD && HYPERV && BLOCK && SCSI]
       inherited [STAGING && !STAGING_EXCLUDE_BUILD && HYPERV && BLOCK && SCSI]
      }
      config HYPERV_NET tristate {
       prompt "Microsoft Hyper-V virtual network driver" if [STAGING && !STAGING_EXCLUDE_BUILD && HYPERV && NET]
       depends on [NET]
       default [HYPERV] if [STAGING && !STAGING_EXCLUDE_BUILD && HYPERV && NET]
       inherited [STAGING && !STAGING_EXCLUDE_BUILD && HYPERV && NET]
      }
     }
    }
    menuconfig VME_BUS tristate {
     prompt "VME bridge support" if [STAGING && !STAGING_EXCLUDE_BUILD && PCI]
     depends on [PCI]
     inherited [STAGING && !STAGING_EXCLUDE_BUILD && PCI]
     if [STAGING && !STAGING_EXCLUDE_BUILD && VME_BUS] {
      config VME_CA91CX42 tristate {
       prompt "Universe II" if [STAGING && !STAGING_EXCLUDE_BUILD && VME_BUS]
       inherited [STAGING && !STAGING_EXCLUDE_BUILD && VME_BUS]
      }
      config VME_TSI148 tristate {
       prompt "Tempe" if [STAGING && !STAGING_EXCLUDE_BUILD && VME_BUS]
       inherited [STAGING && !STAGING_EXCLUDE_BUILD && VME_BUS]
      }
      config VME_USER tristate {
       prompt "VME user space access driver" if [STAGING && !STAGING_EXCLUDE_BUILD && VME_BUS]
       inherited [STAGING && !STAGING_EXCLUDE_BUILD && VME_BUS]
      }
     }
    }
    menu "RAR Register Driver" {
     depends on [STAGING && !STAGING_EXCLUDE_BUILD]
     config RAR_REGISTER tristate {
      prompt "Restricted Access Region Register Driver" if [STAGING && !STAGING_EXCLUDE_BUILD]
      default [n] if [STAGING && !STAGING_EXCLUDE_BUILD]
      inherited [STAGING && !STAGING_EXCLUDE_BUILD]
     }
    }
    config DX_SEP tristate {
     prompt "Discretix SEP driver" if [STAGING && !STAGING_EXCLUDE_BUILD && RAR_REGISTER && PCI]
     depends on [RAR_REGISTER && PCI]
     default [y] if [STAGING && !STAGING_EXCLUDE_BUILD && RAR_REGISTER && PCI]
     inherited [STAGING && !STAGING_EXCLUDE_BUILD && RAR_REGISTER && PCI]
    }
    menuconfig IIO tristate {
     prompt "Industrial I/O support" if [STAGING && !STAGING_EXCLUDE_BUILD && !S390]
     depends on [!S390]
     inherited [STAGING && !STAGING_EXCLUDE_BUILD && !S390]
     if [STAGING && !STAGING_EXCLUDE_BUILD && IIO] {
      config IIO_RING_BUFFER boolean {
       prompt "Enable ring buffer support within IIO" if [STAGING && !STAGING_EXCLUDE_BUILD && IIO]
       inherited [STAGING && !STAGING_EXCLUDE_BUILD && IIO]
       if [STAGING && !STAGING_EXCLUDE_BUILD && IIO && IIO_RING_BUFFER] {
        config IIO_SW_RING tristate {
         prompt "Industrial I/O lock free software ring" if [STAGING && !STAGING_EXCLUDE_BUILD && IIO && IIO_RING_BUFFER]
         inherited [STAGING && !STAGING_EXCLUDE_BUILD && IIO && IIO_RING_BUFFER]
        }
       }
      }
      config IIO_TRIGGER boolean {
       prompt "Enable triggered sampling support" if [STAGING && !STAGING_EXCLUDE_BUILD && IIO]
       inherited [STAGING && !STAGING_EXCLUDE_BUILD && IIO]
      }
      config KXSD9 tristate {
       prompt "Kionix KXSD9 Accelerometer Driver" if [STAGING && !STAGING_EXCLUDE_BUILD && IIO && SPI]
       depends on [SPI]
       inherited [STAGING && !STAGING_EXCLUDE_BUILD && IIO && SPI]
      }
      config LIS3L02DQ tristate {
       prompt "ST Microelectronics LIS3L02DQ Accelerometer Driver" if [STAGING && !STAGING_EXCLUDE_BUILD && IIO && SPI]
       depends on [SPI]
       select IIO_TRIGGER if [STAGING && !STAGING_EXCLUDE_BUILD && IIO && SPI && IIO_RING_BUFFER]
       select IIO_SW_RING if [STAGING && !STAGING_EXCLUDE_BUILD && IIO && SPI && IIO_RING_BUFFER]
       inherited [STAGING && !STAGING_EXCLUDE_BUILD && IIO && SPI]
      }
      config SCA3000 tristate {
       depends on [IIO_RING_BUFFER]
       depends on [SPI]
       prompt "VTI SCA3000 series accelerometers" if [STAGING && !STAGING_EXCLUDE_BUILD && IIO && IIO_RING_BUFFER && SPI]
       inherited [STAGING && !STAGING_EXCLUDE_BUILD && IIO && IIO_RING_BUFFER && SPI]
      }
      config MAX1363 tristate {
       prompt "MAXIM max1363 ADC driver" if [STAGING && !STAGING_EXCLUDE_BUILD && IIO && I2C]
       depends on [I2C]
       select IIO_TRIGGER if [STAGING && !STAGING_EXCLUDE_BUILD && IIO && I2C && IIO_RING_BUFFER]
       inherited [STAGING && !STAGING_EXCLUDE_BUILD && IIO && I2C]
       config MAX1363_RING_BUFFER boolean {
        prompt "MAXIM max1363: use ring buffer" if [STAGING && !STAGING_EXCLUDE_BUILD && IIO && MAX1363]
        depends on [MAX1363]
        select IIO_RING_BUFFER if [STAGING && !STAGING_EXCLUDE_BUILD && IIO && MAX1363]
        select IIO_SW_RING if [STAGING && !STAGING_EXCLUDE_BUILD && IIO && MAX1363]
        inherited [STAGING && !STAGING_EXCLUDE_BUILD && IIO && MAX1363]
       }
      }
      config SENSORS_TSL2563 tristate {
       prompt "TAOS TSL256[0-3] ambient light sensor" if [STAGING && !STAGING_EXCLUDE_BUILD && IIO && I2C]
       depends on [I2C]
       inherited [STAGING && !STAGING_EXCLUDE_BUILD && IIO && I2C]
      }
      if [STAGING && !STAGING_EXCLUDE_BUILD && IIO && IIO_TRIGGER] {
       config IIO_PERIODIC_RTC_TRIGGER tristate {
        prompt "Periodic RTC triggers" if [STAGING && !STAGING_EXCLUDE_BUILD && IIO && IIO_TRIGGER && RTC_CLASS]
        depends on [RTC_CLASS]
        inherited [STAGING && !STAGING_EXCLUDE_BUILD && IIO && IIO_TRIGGER && RTC_CLASS]
       }
       config IIO_GPIO_TRIGGER tristate {
        prompt "GPIO trigger" if [STAGING && !STAGING_EXCLUDE_BUILD && IIO && IIO_TRIGGER && GENERIC_GPIO]
        depends on [GENERIC_GPIO]
        inherited [STAGING && !STAGING_EXCLUDE_BUILD && IIO && IIO_TRIGGER && GENERIC_GPIO]
       }
      }
     }
    }
    config RAMZSWAP tristate {
     prompt "Compressed in-memory swap device (ramzswap)" if [STAGING && !STAGING_EXCLUDE_BUILD && SWAP]
     depends on [SWAP]
     select LZO_COMPRESS if [STAGING && !STAGING_EXCLUDE_BUILD && SWAP]
     select LZO_DECOMPRESS if [STAGING && !STAGING_EXCLUDE_BUILD && SWAP]
     default [n] if [STAGING && !STAGING_EXCLUDE_BUILD && SWAP]
     inherited [STAGING && !STAGING_EXCLUDE_BUILD && SWAP]
     config RAMZSWAP_STATS boolean {
      prompt "Enable ramzswap stats" if [STAGING && !STAGING_EXCLUDE_BUILD && RAMZSWAP]
      depends on [RAMZSWAP]
      default [y] if [STAGING && !STAGING_EXCLUDE_BUILD && RAMZSWAP]
      inherited [STAGING && !STAGING_EXCLUDE_BUILD && RAMZSWAP]
     }
    }
    config WLAGS49_H2 tristate {
     prompt "Agere Systems HERMES II Wireless PC Card Model 0110" if [STAGING && !STAGING_EXCLUDE_BUILD && WLAN_80211 && WIRELESS_EXT && PCMCIA]
     depends on [WLAN_80211 && WIRELESS_EXT && PCMCIA]
     select WEXT_SPY if [STAGING && !STAGING_EXCLUDE_BUILD && WLAN_80211 && WIRELESS_EXT && PCMCIA]
     inherited [STAGING && !STAGING_EXCLUDE_BUILD && WLAN_80211 && WIRELESS_EXT && PCMCIA]
    }
    config WLAGS49_H25 tristate {
     prompt "Linksys HERMES II.5 WCF54G_Wireless-G_CompactFlash_Card" if [STAGING && !STAGING_EXCLUDE_BUILD && WLAN_80211 && WIRELESS_EXT && PCMCIA]
     depends on [WLAN_80211 && WIRELESS_EXT && PCMCIA]
     select WEXT_SPY if [STAGING && !STAGING_EXCLUDE_BUILD && WLAN_80211 && WIRELESS_EXT && PCMCIA]
     inherited [STAGING && !STAGING_EXCLUDE_BUILD && WLAN_80211 && WIRELESS_EXT && PCMCIA]
    }
    config BATMAN_ADV tristate {
     prompt "B.A.T.M.A.N. Advanced Meshing Protocol" if [STAGING && !STAGING_EXCLUDE_BUILD && PROC_FS && PACKET]
     depends on [PROC_FS && PACKET]
     default [n] if [STAGING && !STAGING_EXCLUDE_BUILD && PROC_FS && PACKET]
     inherited [STAGING && !STAGING_EXCLUDE_BUILD && PROC_FS && PACKET]
     config BATMAN_DEBUG boolean {
      prompt "B.A.T.M.A.N. debugging" if [STAGING && !STAGING_EXCLUDE_BUILD && BATMAN_ADV]
      depends on [BATMAN_ADV]
      inherited [STAGING && !STAGING_EXCLUDE_BUILD && BATMAN_ADV]
     }
    }
    config SAMSUNG_LAPTOP tristate {
     prompt "Samsung Laptop driver" if [STAGING && !STAGING_EXCLUDE_BUILD && RFKILL && BACKLIGHT_CLASS_DEVICE && X86]
     default [n] if [STAGING && !STAGING_EXCLUDE_BUILD && RFKILL && BACKLIGHT_CLASS_DEVICE && X86]
     depends on [RFKILL && BACKLIGHT_CLASS_DEVICE && X86]
     inherited [STAGING && !STAGING_EXCLUDE_BUILD && RFKILL && BACKLIGHT_CLASS_DEVICE && X86]
    }
    config STRIP tristate {
     prompt "STRIP (Metricom starmode radio IP)" if [STAGING && !STAGING_EXCLUDE_BUILD && INET]
     depends on [INET]
     select WIRELESS_EXT if [STAGING && !STAGING_EXCLUDE_BUILD && INET]
     inherited [STAGING && !STAGING_EXCLUDE_BUILD && INET]
    }
    config ARLAN tristate {
     prompt "Aironet Arlan 655 & IC2200 DS support" if [STAGING && !STAGING_EXCLUDE_BUILD && ISA && !64BIT && WLAN]
     depends on [ISA && !64BIT && WLAN]
     select WIRELESS_EXT if [STAGING && !STAGING_EXCLUDE_BUILD && ISA && !64BIT && WLAN]
     inherited [STAGING && !STAGING_EXCLUDE_BUILD && ISA && !64BIT && WLAN]
    }
    config WAVELAN tristate {
     prompt "AT&T/Lucent old WaveLAN & DEC RoamAbout DS ISA support" if [STAGING && !STAGING_EXCLUDE_BUILD && ISA && WLAN]
     depends on [ISA && WLAN]
     select WIRELESS_EXT if [STAGING && !STAGING_EXCLUDE_BUILD && ISA && WLAN]
     select WEXT_SPY if [STAGING && !STAGING_EXCLUDE_BUILD && ISA && WLAN]
     select WEXT_PRIV if [STAGING && !STAGING_EXCLUDE_BUILD && ISA && WLAN]
     inherited [STAGING && !STAGING_EXCLUDE_BUILD && ISA && WLAN]
    }
    config PCMCIA_WAVELAN tristate {
     prompt "AT&T/Lucent old WaveLAN Pcmcia wireless support" if [STAGING && !STAGING_EXCLUDE_BUILD && PCMCIA && WLAN]
     depends on [PCMCIA && WLAN]
     select WIRELESS_EXT if [STAGING && !STAGING_EXCLUDE_BUILD && PCMCIA && WLAN]
     select WEXT_SPY if [STAGING && !STAGING_EXCLUDE_BUILD && PCMCIA && WLAN]
     select WEXT_PRIV if [STAGING && !STAGING_EXCLUDE_BUILD && PCMCIA && WLAN]
     inherited [STAGING && !STAGING_EXCLUDE_BUILD && PCMCIA && WLAN]
    }
    config PCMCIA_NETWAVE tristate {
     prompt "Xircom Netwave AirSurfer Pcmcia wireless support" if [STAGING && !STAGING_EXCLUDE_BUILD && PCMCIA && WLAN]
     depends on [PCMCIA && WLAN]
     select WIRELESS_EXT if [STAGING && !STAGING_EXCLUDE_BUILD && PCMCIA && WLAN]
     select WEXT_PRIV if [STAGING && !STAGING_EXCLUDE_BUILD && PCMCIA && WLAN]
     inherited [STAGING && !STAGING_EXCLUDE_BUILD && PCMCIA && WLAN]
    }
    config FB_SM7XX tristate {
     prompt "Silicon Motion SM7XX Frame Buffer Support" if [STAGING && !STAGING_EXCLUDE_BUILD && FB]
     depends on [FB]
     select FB_CFB_FILLRECT if [STAGING && !STAGING_EXCLUDE_BUILD && FB]
     select FB_CFB_COPYAREA if [STAGING && !STAGING_EXCLUDE_BUILD && FB]
     select FB_CFB_IMAGEBLIT if [STAGING && !STAGING_EXCLUDE_BUILD && FB]
     inherited [STAGING && !STAGING_EXCLUDE_BUILD && FB]
     config FB_SM7XX_ACCEL boolean {
      prompt "Siliconmotion Acceleration functions (EXPERIMENTAL)" if [STAGING && !STAGING_EXCLUDE_BUILD && FB_SM7XX && EXPERIMENTAL]
      depends on [FB_SM7XX && EXPERIMENTAL]
      inherited [STAGING && !STAGING_EXCLUDE_BUILD && FB_SM7XX && EXPERIMENTAL]
     }
    }
   }
  }
 }
}
menu "Kernel hacking" {
 config PROFILING boolean {
  prompt "Profiling support (EXPERIMENTAL)" if []
  prompt "Kernel profiling support" if []
 }
 config SYSTEM_PROFILER boolean {
  prompt "System profiling support" if []
 }
 config PRINTK_TIME boolean {
  prompt "Show timing information on printks" if [PRINTK]
  depends on [PRINTK]
  inherited [PRINTK]
 }
 config ENABLE_WARN_DEPRECATED boolean {
  prompt "Enable __deprecated logic" if []
  default [y] if []
 }
 config ENABLE_MUST_CHECK boolean {
  prompt "Enable __must_check logic" if []
  default [y] if []
 }
 config FRAME_WARN integer {
  prompt "Warn for stack frames larger than (needs gcc 4.4)" if []
  range [0 8192] if []
  default [1024] if [!64BIT]
  default [2048] if [64BIT]
 }
 config MAGIC_SYSRQ boolean {
  prompt "Magic SysRq key" if [!UML]
  depends on [!UML]
  inherited [!UML]
 }
 config STRIP_ASM_SYMS boolean {
  prompt "Strip assembler-generated symbols during link" if []
  default [n] if []
 }
 config UNUSED_SYMBOLS boolean {
  prompt "Enable unused/obsolete exported symbols" if []
  default [y] if [X86]
 }
 config DEBUG_FS boolean {
  prompt "Debug Filesystem" if [SYSFS]
  depends on [SYSFS]
  inherited [SYSFS]
 }
 config HEADERS_CHECK boolean {
  prompt "Run 'make headers_check' when building vmlinux" if [!UML]
  depends on [!UML]
  inherited [!UML]
 }
 config DEBUG_SECTION_MISMATCH boolean {
  prompt "Enable full Section mismatch analysis" if [UNDEFINED]
  depends on [UNDEFINED]
  inherited [UNDEFINED]
 }
 config DEBUG_KERNEL boolean {
  prompt "Kernel debugging" if []
  config DEBUG_SHIRQ boolean {
   prompt "Debug shared IRQ handlers" if [DEBUG_KERNEL && GENERIC_HARDIRQS]
   depends on [DEBUG_KERNEL && GENERIC_HARDIRQS]
   inherited [DEBUG_KERNEL && GENERIC_HARDIRQS]
  }
  config DETECT_SOFTLOCKUP boolean {
   prompt "Detect Soft Lockups" if [DEBUG_KERNEL && !S390]
   depends on [DEBUG_KERNEL && !S390]
   default [y] if [DEBUG_KERNEL && !S390]
   inherited [DEBUG_KERNEL && !S390]
   config BOOTPARAM_SOFTLOCKUP_PANIC boolean {
    prompt "Panic (Reboot) On Soft Lockups" if [DETECT_SOFTLOCKUP]
    depends on [DETECT_SOFTLOCKUP]
    inherited [DETECT_SOFTLOCKUP]
   }
   config BOOTPARAM_SOFTLOCKUP_PANIC_VALUE integer {
    depends on [DETECT_SOFTLOCKUP]
    range [0 1] if [DETECT_SOFTLOCKUP]
    default [0] if [DETECT_SOFTLOCKUP && !BOOTPARAM_SOFTLOCKUP_PANIC]
    default [1] if [DETECT_SOFTLOCKUP && BOOTPARAM_SOFTLOCKUP_PANIC]
    inherited [DETECT_SOFTLOCKUP]
   }
  }
  config DETECT_HUNG_TASK boolean {
   prompt "Detect Hung Tasks" if [DEBUG_KERNEL]
   depends on [DEBUG_KERNEL]
   default [DETECT_SOFTLOCKUP] if [DEBUG_KERNEL]
   inherited [DEBUG_KERNEL]
   config BOOTPARAM_HUNG_TASK_PANIC boolean {
    prompt "Panic (Reboot) On Hung Tasks" if [DETECT_HUNG_TASK]
    depends on [DETECT_HUNG_TASK]
    inherited [DETECT_HUNG_TASK]
   }
   config BOOTPARAM_HUNG_TASK_PANIC_VALUE integer {
    depends on [DETECT_HUNG_TASK]
    range [0 1] if [DETECT_HUNG_TASK]
    default [0] if [DETECT_HUNG_TASK && !BOOTPARAM_HUNG_TASK_PANIC]
    default [1] if [DETECT_HUNG_TASK && BOOTPARAM_HUNG_TASK_PANIC]
    inherited [DETECT_HUNG_TASK]
   }
  }
  config SCHED_DEBUG boolean {
   prompt "Collect scheduler debugging info" if [DEBUG_KERNEL && PROC_FS]
   depends on [DEBUG_KERNEL && PROC_FS]
   default [y] if [DEBUG_KERNEL && PROC_FS]
   inherited [DEBUG_KERNEL && PROC_FS]
  }
  config SCHEDSTATS boolean {
   prompt "Collect scheduler statistics" if [DEBUG_KERNEL && PROC_FS]
   depends on [DEBUG_KERNEL && PROC_FS]
   inherited [DEBUG_KERNEL && PROC_FS]
  }
  config TIMER_STATS boolean {
   prompt "Collect kernel timers statistics" if [DEBUG_KERNEL && PROC_FS]
   depends on [DEBUG_KERNEL && PROC_FS]
   inherited [DEBUG_KERNEL && PROC_FS]
  }
  config DEBUG_OBJECTS boolean {
   prompt "Debug object operations" if [DEBUG_KERNEL]
   depends on [DEBUG_KERNEL]
   inherited [DEBUG_KERNEL]
   config DEBUG_OBJECTS_SELFTEST boolean {
    prompt "Debug objects selftest" if [DEBUG_OBJECTS]
    depends on [DEBUG_OBJECTS]
    inherited [DEBUG_OBJECTS]
   }
   config DEBUG_OBJECTS_FREE boolean {
    prompt "Debug objects in freed memory" if [DEBUG_OBJECTS]
    depends on [DEBUG_OBJECTS]
    inherited [DEBUG_OBJECTS]
   }
   config DEBUG_OBJECTS_TIMERS boolean {
    prompt "Debug timer objects" if [DEBUG_OBJECTS]
    depends on [DEBUG_OBJECTS]
    inherited [DEBUG_OBJECTS]
   }
   config DEBUG_OBJECTS_WORK boolean {
    prompt "Debug work objects" if [DEBUG_OBJECTS]
    depends on [DEBUG_OBJECTS]
    inherited [DEBUG_OBJECTS]
   }
   config DEBUG_OBJECTS_ENABLE_DEFAULT integer {
    prompt "debug_objects bootup default value (0-1)" if [DEBUG_OBJECTS]
    range [0 1] if [DEBUG_OBJECTS]
    default [1] if [DEBUG_OBJECTS]
    depends on [DEBUG_OBJECTS]
    inherited [DEBUG_OBJECTS]
   }
  }
  config DEBUG_SLAB boolean {
   prompt "Debug slab memory allocations" if [DEBUG_KERNEL && SLAB && !KMEMCHECK]
   depends on [DEBUG_KERNEL && SLAB && !KMEMCHECK]
   inherited [DEBUG_KERNEL && SLAB && !KMEMCHECK]
   config DEBUG_SLAB_LEAK boolean {
    prompt "Memory leak debugging" if [DEBUG_SLAB]
    depends on [DEBUG_SLAB]
    inherited [DEBUG_SLAB]
   }
  }
 }
 config SLUB_DEBUG_ON boolean {
  prompt "SLUB debugging on by default" if [SLUB && SLUB_DEBUG && !KMEMCHECK]
  depends on [SLUB && SLUB_DEBUG && !KMEMCHECK]
  default [n] if [SLUB && SLUB_DEBUG && !KMEMCHECK]
  inherited [SLUB && SLUB_DEBUG && !KMEMCHECK]
 }
 config SLUB_STATS boolean {
  default [n] if [SLUB && SLUB_DEBUG && SYSFS]
  prompt "Enable SLUB performance statistics" if [SLUB && SLUB_DEBUG && SYSFS]
  depends on [SLUB && SLUB_DEBUG && SYSFS]
  inherited [SLUB && SLUB_DEBUG && SYSFS]
 }
 config DEBUG_KMEMLEAK boolean {
  prompt "Kernel memory leak detector" if [DEBUG_KERNEL && EXPERIMENTAL && !MEMORY_HOTPLUG && (X86 || ARM || PPC || S390)]
  depends on [DEBUG_KERNEL && EXPERIMENTAL && !MEMORY_HOTPLUG && (X86 || ARM || PPC || S390)]
  select DEBUG_FS if [DEBUG_KERNEL && EXPERIMENTAL && !MEMORY_HOTPLUG && (X86 || ARM || PPC || S390) && SYSFS]
  select STACKTRACE if [DEBUG_KERNEL && EXPERIMENTAL && !MEMORY_HOTPLUG && (X86 || ARM || PPC || S390) && STACKTRACE_SUPPORT]
  select KALLSYMS if [DEBUG_KERNEL && EXPERIMENTAL && !MEMORY_HOTPLUG && (X86 || ARM || PPC || S390)]
  select CRC32 if [DEBUG_KERNEL && EXPERIMENTAL && !MEMORY_HOTPLUG && (X86 || ARM || PPC || S390)]
  inherited [DEBUG_KERNEL && EXPERIMENTAL && !MEMORY_HOTPLUG && (X86 || ARM || PPC || S390)]
  config DEBUG_KMEMLEAK_EARLY_LOG_SIZE integer {
   prompt "Maximum kmemleak early log entries" if [DEBUG_KMEMLEAK]
   depends on [DEBUG_KMEMLEAK]
   range [200 40000] if [DEBUG_KMEMLEAK]
   default [400] if [DEBUG_KMEMLEAK]
   inherited [DEBUG_KMEMLEAK]
  }
  config DEBUG_KMEMLEAK_TEST tristate {
   prompt "Simple test for the kernel memory leak detector" if [DEBUG_KMEMLEAK]
   depends on [DEBUG_KMEMLEAK]
   inherited [DEBUG_KMEMLEAK]
  }
 }
 config DEBUG_PREEMPT boolean {
  prompt "Debug preemptible kernel" if [DEBUG_KERNEL && PREEMPT && TRACE_IRQFLAGS_SUPPORT]
  depends on [DEBUG_KERNEL && PREEMPT && TRACE_IRQFLAGS_SUPPORT]
  default [y] if [DEBUG_KERNEL && PREEMPT && TRACE_IRQFLAGS_SUPPORT]
  inherited [DEBUG_KERNEL && PREEMPT && TRACE_IRQFLAGS_SUPPORT]
 }
 config DEBUG_RT_MUTEXES boolean {
  prompt "RT Mutex debugging, deadlock detection" if [DEBUG_KERNEL && RT_MUTEXES]
  depends on [DEBUG_KERNEL && RT_MUTEXES]
  inherited [DEBUG_KERNEL && RT_MUTEXES]
  config DEBUG_PI_LIST boolean {
   default [y] if [DEBUG_RT_MUTEXES]
   depends on [DEBUG_RT_MUTEXES]
   inherited [DEBUG_RT_MUTEXES]
  }
 }
 config RT_MUTEX_TESTER boolean {
  prompt "Built-in scriptable tester for rt-mutexes" if [DEBUG_KERNEL && RT_MUTEXES]
  depends on [DEBUG_KERNEL && RT_MUTEXES]
  inherited [DEBUG_KERNEL && RT_MUTEXES]
 }
 config DEBUG_SPINLOCK boolean {
  prompt "Spinlock and rw-lock debugging: basic checks" if [DEBUG_KERNEL]
  depends on [DEBUG_KERNEL]
  inherited [DEBUG_KERNEL]
 }
 config DEBUG_MUTEXES boolean {
  prompt "Mutex debugging: basic checks" if [DEBUG_KERNEL]
  depends on [DEBUG_KERNEL]
  inherited [DEBUG_KERNEL]
 }
 config DEBUG_LOCK_ALLOC boolean {
  prompt "Lock debugging: detect incorrect freeing of live locks" if [DEBUG_KERNEL && TRACE_IRQFLAGS_SUPPORT && STACKTRACE_SUPPORT && LOCKDEP_SUPPORT]
  depends on [DEBUG_KERNEL && TRACE_IRQFLAGS_SUPPORT && STACKTRACE_SUPPORT && LOCKDEP_SUPPORT]
  select DEBUG_SPINLOCK if [DEBUG_KERNEL && TRACE_IRQFLAGS_SUPPORT && STACKTRACE_SUPPORT && LOCKDEP_SUPPORT]
  select DEBUG_MUTEXES if [DEBUG_KERNEL && TRACE_IRQFLAGS_SUPPORT && STACKTRACE_SUPPORT && LOCKDEP_SUPPORT]
  select LOCKDEP if [DEBUG_KERNEL && TRACE_IRQFLAGS_SUPPORT && STACKTRACE_SUPPORT && LOCKDEP_SUPPORT]
  inherited [DEBUG_KERNEL && TRACE_IRQFLAGS_SUPPORT && STACKTRACE_SUPPORT && LOCKDEP_SUPPORT]
 }
 config PROVE_LOCKING boolean {
  prompt "Lock debugging: prove locking correctness" if [DEBUG_KERNEL && TRACE_IRQFLAGS_SUPPORT && STACKTRACE_SUPPORT && LOCKDEP_SUPPORT]
  depends on [DEBUG_KERNEL && TRACE_IRQFLAGS_SUPPORT && STACKTRACE_SUPPORT && LOCKDEP_SUPPORT]
  select LOCKDEP if [DEBUG_KERNEL && TRACE_IRQFLAGS_SUPPORT && STACKTRACE_SUPPORT && LOCKDEP_SUPPORT]
  select DEBUG_SPINLOCK if [DEBUG_KERNEL && TRACE_IRQFLAGS_SUPPORT && STACKTRACE_SUPPORT && LOCKDEP_SUPPORT]
  select DEBUG_MUTEXES if [DEBUG_KERNEL && TRACE_IRQFLAGS_SUPPORT && STACKTRACE_SUPPORT && LOCKDEP_SUPPORT]
  select DEBUG_LOCK_ALLOC if [DEBUG_KERNEL && TRACE_IRQFLAGS_SUPPORT && STACKTRACE_SUPPORT && LOCKDEP_SUPPORT]
  default [n] if [DEBUG_KERNEL && TRACE_IRQFLAGS_SUPPORT && STACKTRACE_SUPPORT && LOCKDEP_SUPPORT]
  inherited [DEBUG_KERNEL && TRACE_IRQFLAGS_SUPPORT && STACKTRACE_SUPPORT && LOCKDEP_SUPPORT]
 }
 config LOCKDEP boolean {
  depends on [DEBUG_KERNEL && TRACE_IRQFLAGS_SUPPORT && STACKTRACE_SUPPORT && LOCKDEP_SUPPORT]
  select STACKTRACE if [DEBUG_KERNEL && TRACE_IRQFLAGS_SUPPORT && STACKTRACE_SUPPORT && LOCKDEP_SUPPORT]
  select FRAME_POINTER if [DEBUG_KERNEL && TRACE_IRQFLAGS_SUPPORT && STACKTRACE_SUPPORT && LOCKDEP_SUPPORT && !MIPS && !PPC && !ARM_UNWIND && !S390]
  select KALLSYMS if [DEBUG_KERNEL && TRACE_IRQFLAGS_SUPPORT && STACKTRACE_SUPPORT && LOCKDEP_SUPPORT]
  select KALLSYMS_ALL if [DEBUG_KERNEL && TRACE_IRQFLAGS_SUPPORT && STACKTRACE_SUPPORT && LOCKDEP_SUPPORT]
  inherited [DEBUG_KERNEL && TRACE_IRQFLAGS_SUPPORT && STACKTRACE_SUPPORT && LOCKDEP_SUPPORT]
 }
 config LOCK_STAT boolean {
  prompt "Lock usage statistics" if [DEBUG_KERNEL && TRACE_IRQFLAGS_SUPPORT && STACKTRACE_SUPPORT && LOCKDEP_SUPPORT]
  depends on [DEBUG_KERNEL && TRACE_IRQFLAGS_SUPPORT && STACKTRACE_SUPPORT && LOCKDEP_SUPPORT]
  select LOCKDEP if [DEBUG_KERNEL && TRACE_IRQFLAGS_SUPPORT && STACKTRACE_SUPPORT && LOCKDEP_SUPPORT]
  select DEBUG_SPINLOCK if [DEBUG_KERNEL && TRACE_IRQFLAGS_SUPPORT && STACKTRACE_SUPPORT && LOCKDEP_SUPPORT]
  select DEBUG_MUTEXES if [DEBUG_KERNEL && TRACE_IRQFLAGS_SUPPORT && STACKTRACE_SUPPORT && LOCKDEP_SUPPORT]
  select DEBUG_LOCK_ALLOC if [DEBUG_KERNEL && TRACE_IRQFLAGS_SUPPORT && STACKTRACE_SUPPORT && LOCKDEP_SUPPORT]
  default [n] if [DEBUG_KERNEL && TRACE_IRQFLAGS_SUPPORT && STACKTRACE_SUPPORT && LOCKDEP_SUPPORT]
  inherited [DEBUG_KERNEL && TRACE_IRQFLAGS_SUPPORT && STACKTRACE_SUPPORT && LOCKDEP_SUPPORT]
 }
 config DEBUG_LOCKDEP boolean {
  prompt "Lock dependency engine debugging" if [DEBUG_KERNEL && LOCKDEP]
  depends on [DEBUG_KERNEL && LOCKDEP]
  inherited [DEBUG_KERNEL && LOCKDEP]
 }
 config TRACE_IRQFLAGS boolean {
  depends on [DEBUG_KERNEL]
  default [y] if [DEBUG_KERNEL && TRACE_IRQFLAGS_SUPPORT && PROVE_LOCKING]
  depends on [TRACE_IRQFLAGS_SUPPORT]
  depends on [PROVE_LOCKING]
  inherited [DEBUG_KERNEL && TRACE_IRQFLAGS_SUPPORT && PROVE_LOCKING]
 }
 config DEBUG_SPINLOCK_SLEEP boolean {
  prompt "Spinlock debugging: sleep-inside-spinlock checking" if [DEBUG_KERNEL]
  depends on [DEBUG_KERNEL]
  inherited [DEBUG_KERNEL]
 }
 config DEBUG_LOCKING_API_SELFTESTS boolean {
  prompt "Locking API boot-time self-tests" if [DEBUG_KERNEL]
  depends on [DEBUG_KERNEL]
  inherited [DEBUG_KERNEL]
 }
 config STACKTRACE boolean {
  depends on [STACKTRACE_SUPPORT]
  inherited [STACKTRACE_SUPPORT]
 }
 config DEBUG_KOBJECT boolean {
  prompt "kobject debugging" if [DEBUG_KERNEL]
  depends on [DEBUG_KERNEL]
  inherited [DEBUG_KERNEL]
 }
 config DEBUG_HIGHMEM boolean {
  prompt "Highmem debugging" if [DEBUG_KERNEL && HIGHMEM]
  depends on [DEBUG_KERNEL && HIGHMEM]
  inherited [DEBUG_KERNEL && HIGHMEM]
 }
 config DEBUG_BUGVERBOSE boolean {
  prompt "Verbose BUG() reporting (adds 70K)" if [BUG && (ARM || AVR32 || M32R || M68K || SPARC32 || SPARC64 || FRV || SUPERH || GENERIC_BUG || BLACKFIN || MN10300) && DEBUG_KERNEL && EMBEDDED]
  depends on [BUG]
  depends on [ARM || AVR32 || M32R || M68K || SPARC32 || SPARC64 || FRV || SUPERH || GENERIC_BUG || BLACKFIN || MN10300]
  default [y] if [BUG && (ARM || AVR32 || M32R || M68K || SPARC32 || SPARC64 || FRV || SUPERH || GENERIC_BUG || BLACKFIN || MN10300)]
  inherited [BUG && (ARM || AVR32 || M32R || M68K || SPARC32 || SPARC64 || FRV || SUPERH || GENERIC_BUG || BLACKFIN || MN10300)]
 }
 config DEBUG_INFO boolean {
  prompt "Compile the kernel with debug info" if [DEBUG_KERNEL]
  depends on [DEBUG_KERNEL]
  inherited [DEBUG_KERNEL]
 }
 config DEBUG_VM boolean {
  prompt "Debug VM" if [DEBUG_KERNEL]
  depends on [DEBUG_KERNEL]
  inherited [DEBUG_KERNEL]
 }
 config DEBUG_VIRTUAL boolean {
  prompt "Debug VM translations" if [DEBUG_KERNEL && X86]
  depends on [DEBUG_KERNEL && X86]
  inherited [DEBUG_KERNEL && X86]
 }
 config DEBUG_NOMMU_REGIONS boolean {
  prompt "Debug the global anon/private NOMMU mapping region tree" if [DEBUG_KERNEL && !MMU]
  depends on [DEBUG_KERNEL && !MMU]
  inherited [DEBUG_KERNEL && !MMU]
 }
 config DEBUG_WRITECOUNT boolean {
  prompt "Debug filesystem writers count" if [DEBUG_KERNEL]
  depends on [DEBUG_KERNEL]
  inherited [DEBUG_KERNEL]
 }
 config DEBUG_MEMORY_INIT boolean {
  prompt "Debug memory initialisation" if [EMBEDDED]
  default [!EMBEDDED] if []
 }
 config DEBUG_LIST boolean {
  prompt "Debug linked list manipulation" if [DEBUG_KERNEL]
  depends on [DEBUG_KERNEL]
  inherited [DEBUG_KERNEL]
 }
 config DEBUG_SG boolean {
  prompt "Debug SG table operations" if [DEBUG_KERNEL]
  depends on [DEBUG_KERNEL]
  inherited [DEBUG_KERNEL]
 }
 config DEBUG_NOTIFIERS boolean {
  prompt "Debug notifier call chains" if [DEBUG_KERNEL]
  depends on [DEBUG_KERNEL]
  inherited [DEBUG_KERNEL]
 }
 config DEBUG_CREDENTIALS boolean {
  prompt "Debug credential management" if [DEBUG_KERNEL]
  depends on [DEBUG_KERNEL]
  inherited [DEBUG_KERNEL]
 }
 config ARCH_WANT_FRAME_POINTERS boolean {
 }
 config FRAME_POINTER boolean {
  prompt "Compile the kernel with frame pointers" if [DEBUG_KERNEL && (CRIS || M68K || M68KNOMMU || FRV || UML || AVR32 || SUPERH || BLACKFIN || MN10300) || ARCH_WANT_FRAME_POINTERS]
  depends on [DEBUG_KERNEL && (CRIS || M68K || M68KNOMMU || FRV || UML || AVR32 || SUPERH || BLACKFIN || MN10300) || ARCH_WANT_FRAME_POINTERS]
  default [y] if [(DEBUG_KERNEL && (CRIS || M68K || M68KNOMMU || FRV || UML || AVR32 || SUPERH || BLACKFIN || MN10300) || ARCH_WANT_FRAME_POINTERS) && (DEBUG_INFO && UML || ARCH_WANT_FRAME_POINTERS)]
  inherited [DEBUG_KERNEL && (CRIS || M68K || M68KNOMMU || FRV || UML || AVR32 || SUPERH || BLACKFIN || MN10300) || ARCH_WANT_FRAME_POINTERS]
 }
 config BOOT_PRINTK_DELAY boolean {
  prompt "Delay each boot printk message by N milliseconds" if [DEBUG_KERNEL && PRINTK && GENERIC_CALIBRATE_DELAY]
  depends on [DEBUG_KERNEL && PRINTK && GENERIC_CALIBRATE_DELAY]
  inherited [DEBUG_KERNEL && PRINTK && GENERIC_CALIBRATE_DELAY]
 }
 config RCU_TORTURE_TEST tristate {
  prompt "torture tests for RCU" if [DEBUG_KERNEL]
  depends on [DEBUG_KERNEL]
  default [n] if [DEBUG_KERNEL]
  inherited [DEBUG_KERNEL]
  config RCU_TORTURE_TEST_RUNNABLE boolean {
   prompt "torture tests for RCU runnable by default" if [RCU_TORTURE_TEST="y"]
   depends on [RCU_TORTURE_TEST="y"]
   default [n] if [RCU_TORTURE_TEST="y"]
   inherited [RCU_TORTURE_TEST="y"]
  }
 }
 config RCU_CPU_STALL_DETECTOR boolean {
  prompt "Check for stalled CPUs delaying RCU grace periods" if [TREE_RCU || TREE_PREEMPT_RCU]
  depends on [TREE_RCU || TREE_PREEMPT_RCU]
  default [y] if [TREE_RCU || TREE_PREEMPT_RCU]
  inherited [TREE_RCU || TREE_PREEMPT_RCU]
 }
 config KPROBES_SANITY_TEST boolean {
  prompt "Kprobes sanity tests" if [DEBUG_KERNEL && KPROBES]
  depends on [DEBUG_KERNEL]
  depends on [KPROBES]
  default [n] if [DEBUG_KERNEL && KPROBES]
  inherited [DEBUG_KERNEL && KPROBES]
 }
 config BACKTRACE_SELF_TEST tristate {
  prompt "Self test for the backtrace code" if [DEBUG_KERNEL]
  depends on [DEBUG_KERNEL]
  default [n] if [DEBUG_KERNEL]
  inherited [DEBUG_KERNEL]
 }
 config DEBUG_BLOCK_EXT_DEVT boolean {
  prompt "Force extended block device numbers and spread them" if [DEBUG_KERNEL && BLOCK]
  depends on [DEBUG_KERNEL]
  depends on [BLOCK]
  default [n] if [DEBUG_KERNEL && BLOCK]
  inherited [DEBUG_KERNEL && BLOCK]
 }
 config DEBUG_FORCE_WEAK_PER_CPU boolean {
  prompt "Force weak per-cpu definitions" if [DEBUG_KERNEL]
  depends on [DEBUG_KERNEL]
  inherited [DEBUG_KERNEL]
 }
 config LKDTM tristate {
  prompt "Linux Kernel Dump Test Tool Module" if [DEBUG_KERNEL && KPROBES && BLOCK]
  depends on [DEBUG_KERNEL]
  depends on [KPROBES]
  depends on [BLOCK]
  default [n] if [DEBUG_KERNEL && KPROBES && BLOCK]
  inherited [DEBUG_KERNEL && KPROBES && BLOCK]
 }
 config FAULT_INJECTION boolean {
  prompt "Fault-injection framework" if [DEBUG_KERNEL]
  depends on [DEBUG_KERNEL]
  inherited [DEBUG_KERNEL]
  config FAILSLAB boolean {
   prompt "Fault-injection capability for kmalloc" if [FAULT_INJECTION && (SLAB || SLUB)]
   depends on [FAULT_INJECTION]
   depends on [SLAB || SLUB]
   inherited [FAULT_INJECTION && (SLAB || SLUB)]
  }
  config FAIL_PAGE_ALLOC boolean {
   prompt "Fault-injection capabilitiy for alloc_pages()" if [FAULT_INJECTION]
   depends on [FAULT_INJECTION]
   inherited [FAULT_INJECTION]
  }
  config FAIL_MAKE_REQUEST boolean {
   prompt "Fault-injection capability for disk IO" if [FAULT_INJECTION && BLOCK]
   depends on [FAULT_INJECTION && BLOCK]
   inherited [FAULT_INJECTION && BLOCK]
  }
  config FAIL_IO_TIMEOUT boolean {
   prompt "Faul-injection capability for faking disk interrupts" if [FAULT_INJECTION && BLOCK]
   depends on [FAULT_INJECTION && BLOCK]
   inherited [FAULT_INJECTION && BLOCK]
  }
  config FAULT_INJECTION_DEBUG_FS boolean {
   prompt "Debugfs entries for fault-injection capabilities" if [FAULT_INJECTION && SYSFS && DEBUG_FS]
   depends on [FAULT_INJECTION && SYSFS && DEBUG_FS]
   inherited [FAULT_INJECTION && SYSFS && DEBUG_FS]
   config FAULT_INJECTION_STACKTRACE_FILTER boolean {
    prompt "stacktrace filter for fault-injection capabilities" if [FAULT_INJECTION_DEBUG_FS && STACKTRACE_SUPPORT && !X86_64]
    depends on [FAULT_INJECTION_DEBUG_FS && STACKTRACE_SUPPORT]
    depends on [!X86_64]
    select STACKTRACE if [FAULT_INJECTION_DEBUG_FS && STACKTRACE_SUPPORT && !X86_64]
    select FRAME_POINTER if [FAULT_INJECTION_DEBUG_FS && STACKTRACE_SUPPORT && !X86_64 && !PPC && !S390]
    inherited [FAULT_INJECTION_DEBUG_FS && STACKTRACE_SUPPORT && !X86_64]
   }
  }
 }
 config LATENCYTOP boolean {
  prompt "Latency measuring infrastructure" if [HAVE_LATENCYTOP_SUPPORT]
  select FRAME_POINTER if [HAVE_LATENCYTOP_SUPPORT && !MIPS && !PPC && !S390]
  select KALLSYMS if [HAVE_LATENCYTOP_SUPPORT]
  select KALLSYMS_ALL if [HAVE_LATENCYTOP_SUPPORT]
  select STACKTRACE if [HAVE_LATENCYTOP_SUPPORT]
  select SCHEDSTATS if [HAVE_LATENCYTOP_SUPPORT]
  select SCHED_DEBUG if [HAVE_LATENCYTOP_SUPPORT]
  depends on [HAVE_LATENCYTOP_SUPPORT]
  inherited [HAVE_LATENCYTOP_SUPPORT]
 }
 config SYSCTL_SYSCALL_CHECK boolean {
  prompt "Sysctl checks" if [SYSCTL]
  depends on [SYSCTL]
  inherited [SYSCTL]
 }
 config DEBUG_PAGEALLOC boolean {
  prompt "Debug page memory allocations" if [DEBUG_KERNEL && ARCH_SUPPORTS_DEBUG_PAGEALLOC && (!HIBERNATION || !PPC && !SPARC) && !KMEMCHECK]
  depends on [DEBUG_KERNEL && ARCH_SUPPORTS_DEBUG_PAGEALLOC]
  depends on [!HIBERNATION || !PPC && !SPARC]
  depends on [!KMEMCHECK]
  inherited [DEBUG_KERNEL && ARCH_SUPPORTS_DEBUG_PAGEALLOC && (!HIBERNATION || !PPC && !SPARC) && !KMEMCHECK]
 }
 config WANT_PAGE_DEBUG_FLAGS boolean {
 }
 config PAGE_POISONING boolean {
  prompt "Debug page memory allocations" if [DEBUG_KERNEL && !ARCH_SUPPORTS_DEBUG_PAGEALLOC && !HIBERNATION]
  depends on [DEBUG_KERNEL && !ARCH_SUPPORTS_DEBUG_PAGEALLOC]
  depends on [!HIBERNATION]
  select DEBUG_PAGEALLOC if [DEBUG_KERNEL && !ARCH_SUPPORTS_DEBUG_PAGEALLOC && !HIBERNATION]
  select WANT_PAGE_DEBUG_FLAGS if [DEBUG_KERNEL && !ARCH_SUPPORTS_DEBUG_PAGEALLOC && !HIBERNATION]
  inherited [DEBUG_KERNEL && !ARCH_SUPPORTS_DEBUG_PAGEALLOC && !HIBERNATION]
 }
 config USER_STACKTRACE_SUPPORT boolean {
 }
 config NOP_TRACER boolean {
 }
 config HAVE_FTRACE_NMI_ENTER boolean {
 }
 config HAVE_FUNCTION_TRACER boolean {
 }
 config HAVE_FUNCTION_GRAPH_TRACER boolean {
 }
 config HAVE_FUNCTION_GRAPH_FP_TEST boolean {
 }
 config HAVE_FUNCTION_TRACE_MCOUNT_TEST boolean {
 }
 config HAVE_DYNAMIC_FTRACE boolean {
 }
 config HAVE_FTRACE_MCOUNT_RECORD boolean {
 }
 config HAVE_HW_BRANCH_TRACER boolean {
 }
 config HAVE_SYSCALL_TRACEPOINTS boolean {
 }
 config TRACER_MAX_TRACE boolean {
 }
 config RING_BUFFER boolean {
 }
 config FTRACE_NMI_ENTER boolean {
  depends on [HAVE_FTRACE_NMI_ENTER]
  default [y] if [HAVE_FTRACE_NMI_ENTER]
  inherited [HAVE_FTRACE_NMI_ENTER]
 }
 config EVENT_TRACING boolean {
  select CONTEXT_SWITCH_TRACER if []
 }
 config CONTEXT_SWITCH_TRACER boolean {
 }
 config RING_BUFFER_ALLOW_SWAP boolean {
 }
 config TRACING boolean {
  select DEBUG_FS if []
  select RING_BUFFER if []
  select STACKTRACE if [STACKTRACE_SUPPORT]
  select TRACEPOINTS if []
  select NOP_TRACER if []
  select BINARY_PRINTF if []
  select EVENT_TRACING if []
 }
 config GENERIC_TRACER boolean {
  select TRACING if []
 }
 config TRACING_SUPPORT boolean {
  depends on [TRACE_IRQFLAGS_SUPPORT || PPC32]
  depends on [STACKTRACE_SUPPORT]
  default [y] if [(TRACE_IRQFLAGS_SUPPORT || PPC32) && STACKTRACE_SUPPORT]
  inherited [(TRACE_IRQFLAGS_SUPPORT || PPC32) && STACKTRACE_SUPPORT]
 }
 if [TRACING_SUPPORT] {
  menuconfig FTRACE boolean {
   prompt "Tracers" if [TRACING_SUPPORT]
   default [y] if [TRACING_SUPPORT && DEBUG_KERNEL]
   inherited [TRACING_SUPPORT]
   if [TRACING_SUPPORT && FTRACE] {
    config FUNCTION_TRACER boolean {
     prompt "Kernel Function Tracer" if [TRACING_SUPPORT && FTRACE && HAVE_FUNCTION_TRACER]
     depends on [HAVE_FUNCTION_TRACER]
     select FRAME_POINTER if [TRACING_SUPPORT && FTRACE && HAVE_FUNCTION_TRACER]
     select KALLSYMS if [TRACING_SUPPORT && FTRACE && HAVE_FUNCTION_TRACER]
     select GENERIC_TRACER if [TRACING_SUPPORT && FTRACE && HAVE_FUNCTION_TRACER]
     select CONTEXT_SWITCH_TRACER if [TRACING_SUPPORT && FTRACE && HAVE_FUNCTION_TRACER]
     inherited [TRACING_SUPPORT && FTRACE && HAVE_FUNCTION_TRACER]
     config FUNCTION_GRAPH_TRACER boolean {
      prompt "Kernel Function Graph Tracer" if [TRACING_SUPPORT && FTRACE && HAVE_FUNCTION_GRAPH_TRACER && FUNCTION_TRACER && (!X86_32 || !CC_OPTIMIZE_FOR_SIZE)]
      depends on [HAVE_FUNCTION_GRAPH_TRACER]
      depends on [FUNCTION_TRACER]
      depends on [!X86_32 || !CC_OPTIMIZE_FOR_SIZE]
      default [y] if [TRACING_SUPPORT && FTRACE && HAVE_FUNCTION_GRAPH_TRACER && FUNCTION_TRACER && (!X86_32 || !CC_OPTIMIZE_FOR_SIZE)]
      inherited [TRACING_SUPPORT && FTRACE && HAVE_FUNCTION_GRAPH_TRACER && FUNCTION_TRACER && (!X86_32 || !CC_OPTIMIZE_FOR_SIZE)]
     }
    }
    config IRQSOFF_TRACER boolean {
     prompt "Interrupts-off Latency Tracer" if [TRACING_SUPPORT && FTRACE && TRACE_IRQFLAGS_SUPPORT && GENERIC_TIME]
     default [n] if [TRACING_SUPPORT && FTRACE && TRACE_IRQFLAGS_SUPPORT && GENERIC_TIME]
     depends on [TRACE_IRQFLAGS_SUPPORT]
     depends on [GENERIC_TIME]
     select TRACE_IRQFLAGS if [TRACING_SUPPORT && FTRACE && TRACE_IRQFLAGS_SUPPORT && GENERIC_TIME]
     select GENERIC_TRACER if [TRACING_SUPPORT && FTRACE && TRACE_IRQFLAGS_SUPPORT && GENERIC_TIME]
     select TRACER_MAX_TRACE if [TRACING_SUPPORT && FTRACE && TRACE_IRQFLAGS_SUPPORT && GENERIC_TIME]
     select RING_BUFFER_ALLOW_SWAP if [TRACING_SUPPORT && FTRACE && TRACE_IRQFLAGS_SUPPORT && GENERIC_TIME]
     inherited [TRACING_SUPPORT && FTRACE && TRACE_IRQFLAGS_SUPPORT && GENERIC_TIME]
    }
    config PREEMPT_TRACER boolean {
     prompt "Preemption-off Latency Tracer" if [TRACING_SUPPORT && FTRACE && GENERIC_TIME && PREEMPT]
     default [n] if [TRACING_SUPPORT && FTRACE && GENERIC_TIME && PREEMPT]
     depends on [GENERIC_TIME]
     depends on [PREEMPT]
     select GENERIC_TRACER if [TRACING_SUPPORT && FTRACE && GENERIC_TIME && PREEMPT]
     select TRACER_MAX_TRACE if [TRACING_SUPPORT && FTRACE && GENERIC_TIME && PREEMPT]
     select RING_BUFFER_ALLOW_SWAP if [TRACING_SUPPORT && FTRACE && GENERIC_TIME && PREEMPT]
     inherited [TRACING_SUPPORT && FTRACE && GENERIC_TIME && PREEMPT]
    }
    config SYSPROF_TRACER boolean {
     prompt "Sysprof Tracer" if [TRACING_SUPPORT && FTRACE && X86]
     depends on [X86]
     select GENERIC_TRACER if [TRACING_SUPPORT && FTRACE && X86]
     select CONTEXT_SWITCH_TRACER if [TRACING_SUPPORT && FTRACE && X86]
     inherited [TRACING_SUPPORT && FTRACE && X86]
    }
    config SCHED_TRACER boolean {
     prompt "Scheduling Latency Tracer" if [TRACING_SUPPORT && FTRACE]
     select GENERIC_TRACER if [TRACING_SUPPORT && FTRACE]
     select CONTEXT_SWITCH_TRACER if [TRACING_SUPPORT && FTRACE]
     select TRACER_MAX_TRACE if [TRACING_SUPPORT && FTRACE]
     inherited [TRACING_SUPPORT && FTRACE]
    }
    config ENABLE_DEFAULT_TRACERS boolean {
     prompt "Trace process context switches and events" if [TRACING_SUPPORT && FTRACE && !GENERIC_TRACER]
     depends on [!GENERIC_TRACER]
     select TRACING if [TRACING_SUPPORT && FTRACE && !GENERIC_TRACER]
     inherited [TRACING_SUPPORT && FTRACE && !GENERIC_TRACER]
    }
    config FTRACE_SYSCALLS boolean {
     prompt "Trace syscalls" if [TRACING_SUPPORT && FTRACE && HAVE_SYSCALL_TRACEPOINTS]
     depends on [HAVE_SYSCALL_TRACEPOINTS]
     select GENERIC_TRACER if [TRACING_SUPPORT && FTRACE && HAVE_SYSCALL_TRACEPOINTS]
     select KALLSYMS if [TRACING_SUPPORT && FTRACE && HAVE_SYSCALL_TRACEPOINTS]
     inherited [TRACING_SUPPORT && FTRACE && HAVE_SYSCALL_TRACEPOINTS]
    }
    config BOOT_TRACER boolean {
     prompt "Trace boot initcalls" if [TRACING_SUPPORT && FTRACE]
     select GENERIC_TRACER if [TRACING_SUPPORT && FTRACE]
     select CONTEXT_SWITCH_TRACER if [TRACING_SUPPORT && FTRACE]
     inherited [TRACING_SUPPORT && FTRACE]
    }
    config TRACE_BRANCH_PROFILING boolean {
     select GENERIC_TRACER if [TRACING_SUPPORT && FTRACE]
     inherited [TRACING_SUPPORT && FTRACE]
    }
    choice boolean {
     prompt "Branch Profiling" if [TRACING_SUPPORT && FTRACE]
     default [BRANCH_PROFILE_NONE] if [TRACING_SUPPORT && FTRACE]
     config BRANCH_PROFILE_NONE boolean {
      prompt "No branch profiling" if [<choice>]
      inherited [<choice>]
     }
     config PROFILE_ANNOTATED_BRANCHES boolean {
      prompt "Trace likely/unlikely profiler" if [<choice>]
      select TRACE_BRANCH_PROFILING if [<choice>]
      inherited [<choice>]
     }
     config PROFILE_ALL_BRANCHES boolean {
      prompt "Profile all if conditionals" if [<choice>]
      select TRACE_BRANCH_PROFILING if [<choice>]
      inherited [<choice>]
     }
    }
    config TRACING_BRANCHES boolean {
     inherited [TRACING_SUPPORT && FTRACE]
    }
    config BRANCH_TRACER boolean {
     prompt "Trace likely/unlikely instances" if [TRACING_SUPPORT && FTRACE && TRACE_BRANCH_PROFILING]
     depends on [TRACE_BRANCH_PROFILING]
     select TRACING_BRANCHES if [TRACING_SUPPORT && FTRACE && TRACE_BRANCH_PROFILING]
     inherited [TRACING_SUPPORT && FTRACE && TRACE_BRANCH_PROFILING]
    }
    config POWER_TRACER boolean {
     prompt "Trace power consumption behavior" if [TRACING_SUPPORT && FTRACE && X86]
     depends on [X86]
     select GENERIC_TRACER if [TRACING_SUPPORT && FTRACE && X86]
     inherited [TRACING_SUPPORT && FTRACE && X86]
    }
    config KSYM_TRACER boolean {
     prompt "Trace read and write access on kernel memory locations" if [TRACING_SUPPORT && FTRACE && HAVE_HW_BREAKPOINT]
     depends on [HAVE_HW_BREAKPOINT]
     select TRACING if [TRACING_SUPPORT && FTRACE && HAVE_HW_BREAKPOINT]
     inherited [TRACING_SUPPORT && FTRACE && HAVE_HW_BREAKPOINT]
     config PROFILE_KSYM_TRACER boolean {
      prompt "Profile all kernel memory accesses on 'watched' variables" if [TRACING_SUPPORT && FTRACE && KSYM_TRACER]
      depends on [KSYM_TRACER]
      inherited [TRACING_SUPPORT && FTRACE && KSYM_TRACER]
     }
    }
    config STACK_TRACER boolean {
     prompt "Trace max stack" if [TRACING_SUPPORT && FTRACE && HAVE_FUNCTION_TRACER]
     depends on [HAVE_FUNCTION_TRACER]
     select FUNCTION_TRACER if [TRACING_SUPPORT && FTRACE && HAVE_FUNCTION_TRACER]
     select STACKTRACE if [TRACING_SUPPORT && FTRACE && HAVE_FUNCTION_TRACER]
     select KALLSYMS if [TRACING_SUPPORT && FTRACE && HAVE_FUNCTION_TRACER]
     inherited [TRACING_SUPPORT && FTRACE && HAVE_FUNCTION_TRACER]
    }
    config HW_BRANCH_TRACER boolean {
     depends on [HAVE_HW_BRANCH_TRACER]
     prompt "Trace hw branches" if [TRACING_SUPPORT && FTRACE && HAVE_HW_BRANCH_TRACER]
     select GENERIC_TRACER if [TRACING_SUPPORT && FTRACE && HAVE_HW_BRANCH_TRACER]
     inherited [TRACING_SUPPORT && FTRACE && HAVE_HW_BRANCH_TRACER]
    }
    config KMEMTRACE boolean {
     prompt "Trace SLAB allocations" if [TRACING_SUPPORT && FTRACE]
     select GENERIC_TRACER if [TRACING_SUPPORT && FTRACE]
     inherited [TRACING_SUPPORT && FTRACE]
    }
    config WORKQUEUE_TRACER boolean {
     prompt "Trace workqueues" if [TRACING_SUPPORT && FTRACE]
     select GENERIC_TRACER if [TRACING_SUPPORT && FTRACE]
     inherited [TRACING_SUPPORT && FTRACE]
    }
    config BLK_DEV_IO_TRACE boolean {
     prompt "Support for tracing block IO actions" if [TRACING_SUPPORT && FTRACE && SYSFS && BLOCK]
     depends on [SYSFS]
     depends on [BLOCK]
     select RELAY if [TRACING_SUPPORT && FTRACE && SYSFS && BLOCK]
     select DEBUG_FS if [TRACING_SUPPORT && FTRACE && SYSFS && BLOCK]
     select TRACEPOINTS if [TRACING_SUPPORT && FTRACE && SYSFS && BLOCK]
     select GENERIC_TRACER if [TRACING_SUPPORT && FTRACE && SYSFS && BLOCK]
     select STACKTRACE if [TRACING_SUPPORT && FTRACE && SYSFS && BLOCK]
     inherited [TRACING_SUPPORT && FTRACE && SYSFS && BLOCK]
    }
    config KPROBE_EVENT boolean {
     depends on [KPROBES]
     depends on [X86]
     prompt "Enable kprobes-based dynamic events" if [TRACING_SUPPORT && FTRACE && KPROBES && X86]
     select TRACING if [TRACING_SUPPORT && FTRACE && KPROBES && X86]
     default [y] if [TRACING_SUPPORT && FTRACE && KPROBES && X86]
     inherited [TRACING_SUPPORT && FTRACE && KPROBES && X86]
    }
    config DYNAMIC_FTRACE boolean {
     prompt "enable/disable ftrace tracepoints dynamically" if [TRACING_SUPPORT && FTRACE && FUNCTION_TRACER && HAVE_DYNAMIC_FTRACE]
     depends on [FUNCTION_TRACER]
     depends on [HAVE_DYNAMIC_FTRACE]
     default [y] if [TRACING_SUPPORT && FTRACE && FUNCTION_TRACER && HAVE_DYNAMIC_FTRACE]
     inherited [TRACING_SUPPORT && FTRACE && FUNCTION_TRACER && HAVE_DYNAMIC_FTRACE]
    }
    config FUNCTION_PROFILER boolean {
     prompt "Kernel function profiler" if [TRACING_SUPPORT && FTRACE && FUNCTION_TRACER]
     depends on [FUNCTION_TRACER]
     default [n] if [TRACING_SUPPORT && FTRACE && FUNCTION_TRACER]
     inherited [TRACING_SUPPORT && FTRACE && FUNCTION_TRACER]
    }
    config FTRACE_MCOUNT_RECORD boolean {
     default [y] if [TRACING_SUPPORT && FTRACE && DYNAMIC_FTRACE && HAVE_FTRACE_MCOUNT_RECORD]
     depends on [DYNAMIC_FTRACE]
     depends on [HAVE_FTRACE_MCOUNT_RECORD]
     inherited [TRACING_SUPPORT && FTRACE && DYNAMIC_FTRACE && HAVE_FTRACE_MCOUNT_RECORD]
    }
    config FTRACE_SELFTEST boolean {
     inherited [TRACING_SUPPORT && FTRACE]
    }
    config FTRACE_STARTUP_TEST boolean {
     prompt "Perform a startup test on ftrace" if [TRACING_SUPPORT && FTRACE && GENERIC_TRACER]
     depends on [GENERIC_TRACER]
     select FTRACE_SELFTEST if [TRACING_SUPPORT && FTRACE && GENERIC_TRACER]
     inherited [TRACING_SUPPORT && FTRACE && GENERIC_TRACER]
     config EVENT_TRACE_TEST_SYSCALLS boolean {
      prompt "Run selftest on syscall events" if [TRACING_SUPPORT && FTRACE && FTRACE_STARTUP_TEST]
      depends on [FTRACE_STARTUP_TEST]
      inherited [TRACING_SUPPORT && FTRACE && FTRACE_STARTUP_TEST]
     }
    }
    config MMIOTRACE boolean {
     prompt "Memory mapped IO tracing" if [TRACING_SUPPORT && FTRACE && HAVE_MMIOTRACE_SUPPORT && PCI]
     depends on [HAVE_MMIOTRACE_SUPPORT && PCI]
     select GENERIC_TRACER if [TRACING_SUPPORT && FTRACE && HAVE_MMIOTRACE_SUPPORT && PCI]
     inherited [TRACING_SUPPORT && FTRACE && HAVE_MMIOTRACE_SUPPORT && PCI]
     config MMIOTRACE_TEST tristate {
      prompt "Test module for mmiotrace" if [TRACING_SUPPORT && FTRACE && MMIOTRACE && m && <choice>]
      depends on [MMIOTRACE && m]
      inherited [TRACING_SUPPORT && FTRACE && MMIOTRACE && m && <choice>]
     }
    }
    config RING_BUFFER_BENCHMARK tristate {
     prompt "Ring buffer benchmark stress tester" if [TRACING_SUPPORT && FTRACE && RING_BUFFER]
     depends on [RING_BUFFER]
     inherited [TRACING_SUPPORT && FTRACE && RING_BUFFER]
    }
   }
  }
 }
 config PROVIDE_OHCI1394_DMA_INIT boolean {
  prompt "Remote debugging over FireWire early on boot" if [PCI && X86]
  depends on [PCI && X86]
  inherited [PCI && X86]
 }
 config FIREWIRE_OHCI_REMOTE_DMA boolean {
  prompt "Remote debugging over FireWire with firewire-ohci" if [FIREWIRE_OHCI]
  depends on [FIREWIRE_OHCI]
  inherited [FIREWIRE_OHCI]
 }
 config BUILD_DOCSRC boolean {
  prompt "Build targets in Documentation/ tree" if [HEADERS_CHECK]
  depends on [HEADERS_CHECK]
  inherited [HEADERS_CHECK]
 }
 config DYNAMIC_DEBUG boolean {
  prompt "Enable dynamic printk() support" if [PRINTK && DEBUG_FS]
  default [n] if [PRINTK && DEBUG_FS]
  depends on [PRINTK]
  depends on [DEBUG_FS]
  inherited [PRINTK && DEBUG_FS]
 }
 config DMA_API_DEBUG boolean {
  prompt "Enable debugging of DMA-API usage" if [HAVE_DMA_API_DEBUG]
  depends on [HAVE_DMA_API_DEBUG]
  inherited [HAVE_DMA_API_DEBUG]
 }
 menuconfig SAMPLES boolean {
  prompt "Sample kernel code" if []
  if [SAMPLES] {
   config SAMPLE_TRACEPOINTS tristate {
    prompt "Build tracepoints examples -- loadable modules only" if [SAMPLES && TRACEPOINTS && m && <choice>]
    depends on [TRACEPOINTS && m]
    inherited [SAMPLES && TRACEPOINTS && m && <choice>]
   }
   config SAMPLE_TRACE_EVENTS tristate {
    prompt "Build trace_events examples -- loadable modules only" if [SAMPLES && EVENT_TRACING && m && <choice>]
    depends on [EVENT_TRACING && m]
    inherited [SAMPLES && EVENT_TRACING && m && <choice>]
   }
   config SAMPLE_KOBJECT tristate {
    prompt "Build kobject examples -- loadable modules only" if [SAMPLES && m && <choice>]
    depends on [m]
    inherited [SAMPLES && m && <choice>]
   }
   config SAMPLE_KPROBES tristate {
    prompt "Build kprobes examples -- loadable modules only" if [SAMPLES && KPROBES && m && <choice>]
    depends on [KPROBES && m]
    inherited [SAMPLES && KPROBES && m && <choice>]
    config SAMPLE_KRETPROBES tristate {
     prompt "Build kretprobes example -- loadable modules only" if [SAMPLES && SAMPLE_KPROBES && KRETPROBES]
     default [m] if [SAMPLES && SAMPLE_KPROBES && KRETPROBES]
     depends on [SAMPLE_KPROBES && KRETPROBES]
     inherited [SAMPLES && SAMPLE_KPROBES && KRETPROBES]
    }
   }
   config SAMPLE_HW_BREAKPOINT tristate {
    prompt "Build kernel hardware breakpoint examples -- loadable module only" if [SAMPLES && HAVE_HW_BREAKPOINT && m && <choice>]
    depends on [HAVE_HW_BREAKPOINT && m]
    inherited [SAMPLES && HAVE_HW_BREAKPOINT && m && <choice>]
   }
  }
 }
 config HAVE_ARCH_KGDB boolean {
 }
 menuconfig KGDB boolean {
  prompt "KGDB: kernel debugging with remote gdb" if [HAVE_ARCH_KGDB && DEBUG_KERNEL && EXPERIMENTAL]
  depends on [HAVE_ARCH_KGDB]
  depends on [DEBUG_KERNEL && EXPERIMENTAL]
  inherited [HAVE_ARCH_KGDB && DEBUG_KERNEL && EXPERIMENTAL]
  if [KGDB] {
   config KGDB_SERIAL_CONSOLE tristate {
    prompt "KGDB: use kgdb over the serial console" if [KGDB]
    select CONSOLE_POLL if [KGDB]
    select MAGIC_SYSRQ if [KGDB]
    default [y] if [KGDB]
    inherited [KGDB]
   }
   config KGDB_TESTS boolean {
    prompt "KGDB: internal test suite" if [KGDB]
    default [n] if [KGDB]
    inherited [KGDB]
    config KGDB_TESTS_ON_BOOT boolean {
     prompt "KGDB: Run tests on boot" if [KGDB && KGDB_TESTS]
     depends on [KGDB_TESTS]
     default [n] if [KGDB && KGDB_TESTS]
     inherited [KGDB && KGDB_TESTS]
     config KGDB_TESTS_BOOT_STRING string {
      prompt "KGDB: which internal kgdb tests to run" if [KGDB && KGDB_TESTS_ON_BOOT]
      depends on [KGDB_TESTS_ON_BOOT]
      default ["V1F100"] if [KGDB && KGDB_TESTS_ON_BOOT]
      inherited [KGDB && KGDB_TESTS_ON_BOOT]
     }
    }
   }
  }
 }
 config HAVE_ARCH_KMEMCHECK boolean {
 }
 if [HAVE_ARCH_KMEMCHECK] {
  menuconfig KMEMCHECK boolean {
   prompt "kmemcheck: trap use of uninitialized memory" if [HAVE_ARCH_KMEMCHECK && DEBUG_KERNEL && !X86_USE_3DNOW && (SLUB || SLAB) && !CC_OPTIMIZE_FOR_SIZE && !FUNCTION_TRACER]
   depends on [DEBUG_KERNEL]
   depends on [!X86_USE_3DNOW]
   depends on [SLUB || SLAB]
   depends on [!CC_OPTIMIZE_FOR_SIZE]
   depends on [!FUNCTION_TRACER]
   select FRAME_POINTER if [HAVE_ARCH_KMEMCHECK && DEBUG_KERNEL && !X86_USE_3DNOW && (SLUB || SLAB) && !CC_OPTIMIZE_FOR_SIZE && !FUNCTION_TRACER]
   select STACKTRACE if [HAVE_ARCH_KMEMCHECK && DEBUG_KERNEL && !X86_USE_3DNOW && (SLUB || SLAB) && !CC_OPTIMIZE_FOR_SIZE && !FUNCTION_TRACER]
   default [n] if [HAVE_ARCH_KMEMCHECK && DEBUG_KERNEL && !X86_USE_3DNOW && (SLUB || SLAB) && !CC_OPTIMIZE_FOR_SIZE && !FUNCTION_TRACER]
   inherited [HAVE_ARCH_KMEMCHECK && DEBUG_KERNEL && !X86_USE_3DNOW && (SLUB || SLAB) && !CC_OPTIMIZE_FOR_SIZE && !FUNCTION_TRACER]
   choice boolean {
    prompt "kmemcheck: default mode at boot" if [HAVE_ARCH_KMEMCHECK && KMEMCHECK]
    depends on [KMEMCHECK]
    default [KMEMCHECK_ONESHOT_BY_DEFAULT] if [HAVE_ARCH_KMEMCHECK && KMEMCHECK]
    config KMEMCHECK_DISABLED_BY_DEFAULT boolean {
     prompt "disabled" if [<choice> && KMEMCHECK]
     depends on [KMEMCHECK]
     inherited [<choice> && KMEMCHECK]
    }
    config KMEMCHECK_ENABLED_BY_DEFAULT boolean {
     prompt "enabled" if [<choice> && KMEMCHECK]
     depends on [KMEMCHECK]
     inherited [<choice> && KMEMCHECK]
    }
    config KMEMCHECK_ONESHOT_BY_DEFAULT boolean {
     prompt "one-shot" if [<choice> && KMEMCHECK]
     depends on [KMEMCHECK]
     inherited [<choice> && KMEMCHECK]
    }
   }
   config KMEMCHECK_QUEUE_SIZE integer {
    prompt "kmemcheck: error queue size" if [HAVE_ARCH_KMEMCHECK && KMEMCHECK]
    depends on [KMEMCHECK]
    default [64] if [HAVE_ARCH_KMEMCHECK && KMEMCHECK]
    inherited [HAVE_ARCH_KMEMCHECK && KMEMCHECK]
   }
   config KMEMCHECK_SHADOW_COPY_SHIFT integer {
    prompt "kmemcheck: shadow copy size (5 => 32 bytes, 6 => 64 bytes)" if [HAVE_ARCH_KMEMCHECK && KMEMCHECK]
    depends on [KMEMCHECK]
    range [2 8] if [HAVE_ARCH_KMEMCHECK && KMEMCHECK]
    default [5] if [HAVE_ARCH_KMEMCHECK && KMEMCHECK]
    inherited [HAVE_ARCH_KMEMCHECK && KMEMCHECK]
   }
   config KMEMCHECK_PARTIAL_OK boolean {
    prompt "kmemcheck: allow partially uninitialized memory" if [HAVE_ARCH_KMEMCHECK && KMEMCHECK]
    depends on [KMEMCHECK]
    default [y] if [HAVE_ARCH_KMEMCHECK && KMEMCHECK]
    inherited [HAVE_ARCH_KMEMCHECK && KMEMCHECK]
   }
   config KMEMCHECK_BITOPS_OK boolean {
    prompt "kmemcheck: allow bit-field manipulation" if [HAVE_ARCH_KMEMCHECK && KMEMCHECK]
    depends on [KMEMCHECK]
    default [n] if [HAVE_ARCH_KMEMCHECK && KMEMCHECK]
    inherited [HAVE_ARCH_KMEMCHECK && KMEMCHECK]
   }
  }
 }
 config ETRAX_KGDB boolean {
  prompt "Use kernel GDB debugger" if [DEBUG_KERNEL]
  depends on [DEBUG_KERNEL]
  inherited [DEBUG_KERNEL]
 }
 config DEBUG_NMI_OOPS boolean {
  prompt "NMI causes oops printout" if [DEBUG_KERNEL]
  depends on [DEBUG_KERNEL]
  inherited [DEBUG_KERNEL]
 }
}
menu "Security options" {
 config KEYS boolean {
  prompt "Enable access key retention support" if []
  config KEYS_DEBUG_PROC_KEYS boolean {
   prompt "Enable the /proc/keys file by which keys may be viewed" if [KEYS]
   depends on [KEYS]
   inherited [KEYS]
  }
 }
 config SECURITY boolean {
  prompt "Enable different security models" if [SYSFS]
  depends on [SYSFS]
  inherited [SYSFS]
 }
 config SECURITYFS boolean {
  prompt "Enable the securityfs filesystem" if []
 }
 config SECURITY_NETWORK boolean {
  prompt "Socket and Networking Security Hooks" if [SECURITY]
  depends on [SECURITY]
  inherited [SECURITY]
  config SECURITY_NETWORK_XFRM boolean {
   prompt "XFRM (IPSec) Networking Security Hooks" if [XFRM && SECURITY_NETWORK]
   depends on [XFRM && SECURITY_NETWORK]
   inherited [XFRM && SECURITY_NETWORK]
  }
 }
 config SECURITY_PATH boolean {
  prompt "Security hooks for pathname based access control" if [SECURITY]
  depends on [SECURITY]
  inherited [SECURITY]
 }
 config INTEL_TXT boolean {
  prompt "Enable Intel(R) Trusted Execution Technology (Intel(R) TXT)" if [HAVE_INTEL_TXT]
  depends on [HAVE_INTEL_TXT]
  inherited [HAVE_INTEL_TXT]
 }
 config LSM_MMAP_MIN_ADDR integer {
  prompt "Low address space for LSM to protect from user allocation" if [SECURITY && SECURITY_SELINUX]
  depends on [SECURITY && SECURITY_SELINUX]
  default [65536] if [SECURITY && SECURITY_SELINUX]
  inherited [SECURITY && SECURITY_SELINUX]
 }
 config SECURITY_SELINUX boolean {
  prompt "NSA SELinux Support" if [SECURITY_NETWORK && AUDIT && NET && INET]
  depends on [SECURITY_NETWORK && AUDIT && NET && INET]
  select NETWORK_SECMARK if [SECURITY_NETWORK && AUDIT && NET && INET]
  default [n] if [SECURITY_NETWORK && AUDIT && NET && INET]
  inherited [SECURITY_NETWORK && AUDIT && NET && INET]
  config SECURITY_SELINUX_BOOTPARAM boolean {
   prompt "NSA SELinux boot parameter" if [SECURITY_SELINUX]
   depends on [SECURITY_SELINUX]
   default [n] if [SECURITY_SELINUX]
   inherited [SECURITY_SELINUX]
   config SECURITY_SELINUX_BOOTPARAM_VALUE integer {
    prompt "NSA SELinux boot parameter default value" if [SECURITY_SELINUX_BOOTPARAM]
    depends on [SECURITY_SELINUX_BOOTPARAM]
    range [0 1] if [SECURITY_SELINUX_BOOTPARAM]
    default [1] if [SECURITY_SELINUX_BOOTPARAM]
    inherited [SECURITY_SELINUX_BOOTPARAM]
   }
  }
  config SECURITY_SELINUX_DISABLE boolean {
   prompt "NSA SELinux runtime disable" if [SECURITY_SELINUX]
   depends on [SECURITY_SELINUX]
   default [n] if [SECURITY_SELINUX]
   inherited [SECURITY_SELINUX]
  }
  config SECURITY_SELINUX_DEVELOP boolean {
   prompt "NSA SELinux Development Support" if [SECURITY_SELINUX]
   depends on [SECURITY_SELINUX]
   default [y] if [SECURITY_SELINUX]
   inherited [SECURITY_SELINUX]
  }
  config SECURITY_SELINUX_AVC_STATS boolean {
   prompt "NSA SELinux AVC Statistics" if [SECURITY_SELINUX]
   depends on [SECURITY_SELINUX]
   default [y] if [SECURITY_SELINUX]
   inherited [SECURITY_SELINUX]
  }
  config SECURITY_SELINUX_CHECKREQPROT_VALUE integer {
   prompt "NSA SELinux checkreqprot default value" if [SECURITY_SELINUX]
   depends on [SECURITY_SELINUX]
   range [0 1] if [SECURITY_SELINUX]
   default [1] if [SECURITY_SELINUX]
   inherited [SECURITY_SELINUX]
  }
  config SECURITY_SELINUX_POLICYDB_VERSION_MAX boolean {
   prompt "NSA SELinux maximum supported policy format version" if [SECURITY_SELINUX]
   depends on [SECURITY_SELINUX]
   default [n] if [SECURITY_SELINUX]
   inherited [SECURITY_SELINUX]
   config SECURITY_SELINUX_POLICYDB_VERSION_MAX_VALUE integer {
    prompt "NSA SELinux maximum supported policy format version value" if [SECURITY_SELINUX_POLICYDB_VERSION_MAX]
    depends on [SECURITY_SELINUX_POLICYDB_VERSION_MAX]
    range [15 23] if [SECURITY_SELINUX_POLICYDB_VERSION_MAX]
    default [19] if [SECURITY_SELINUX_POLICYDB_VERSION_MAX]
    inherited [SECURITY_SELINUX_POLICYDB_VERSION_MAX]
   }
  }
 }
 config SECURITY_SMACK boolean {
  prompt "Simplified Mandatory Access Control Kernel Support" if [NETLABEL && SECURITY_NETWORK]
  depends on [NETLABEL && SECURITY_NETWORK]
  default [n] if [NETLABEL && SECURITY_NETWORK]
  inherited [NETLABEL && SECURITY_NETWORK]
 }
 config SECURITY_TOMOYO boolean {
  prompt "TOMOYO Linux Support" if [SECURITY]
  depends on [SECURITY]
  select SECURITYFS if [SECURITY]
  select SECURITY_PATH if [SECURITY]
  default [n] if [SECURITY]
  inherited [SECURITY]
 }
 config IMA boolean {
  prompt "Integrity Measurement Architecture(IMA)" if [ACPI && SECURITY]
  depends on [ACPI]
  depends on [SECURITY]
  select SECURITYFS if [ACPI && SECURITY]
  select CRYPTO if [ACPI && SECURITY]
  select CRYPTO_HMAC if [ACPI && SECURITY]
  select CRYPTO_MD5 if [ACPI && SECURITY]
  select CRYPTO_SHA1 if [ACPI && SECURITY]
  select TCG_TPM if [ACPI && SECURITY]
  select TCG_TIS if [ACPI && SECURITY]
  inherited [ACPI && SECURITY]
  config IMA_MEASURE_PCR_IDX integer {
   depends on [IMA]
   range [8 14] if [IMA]
   default [10] if [IMA]
   inherited [IMA]
  }
  config IMA_AUDIT boolean {
   depends on [IMA]
   default [y] if [IMA]
   inherited [IMA]
  }
  config IMA_LSM_RULES boolean {
   depends on [IMA && AUDIT && (SECURITY_SELINUX || SECURITY_SMACK)]
   default [y] if [IMA && AUDIT && (SECURITY_SELINUX || SECURITY_SMACK)]
   inherited [IMA && AUDIT && (SECURITY_SELINUX || SECURITY_SMACK)]
  }
 }
 choice boolean {
  prompt "Default security module" if []
  default [DEFAULT_SECURITY_SELINUX] if [SECURITY_SELINUX]
  default [DEFAULT_SECURITY_SMACK] if [SECURITY_SMACK]
  default [DEFAULT_SECURITY_TOMOYO] if [SECURITY_TOMOYO]
  default [DEFAULT_SECURITY_DAC] if []
  config DEFAULT_SECURITY_SELINUX boolean {
   prompt "SELinux" if [<choice> && SECURITY_SELINUX]
   inherited [<choice>]
  }
  config DEFAULT_SECURITY_SMACK boolean {
   prompt "Simplified Mandatory Access Control" if [<choice> && SECURITY_SMACK]
   inherited [<choice>]
  }
  config DEFAULT_SECURITY_TOMOYO boolean {
   prompt "TOMOYO" if [<choice> && SECURITY_TOMOYO]
   inherited [<choice>]
  }
  config DEFAULT_SECURITY_DAC boolean {
   prompt "Unix Discretionary Access Controls" if [<choice>]
   inherited [<choice>]
  }
 }
 config DEFAULT_SECURITY string {
  default ["selinux"] if [DEFAULT_SECURITY_SELINUX]
  default ["smack"] if [DEFAULT_SECURITY_SMACK]
  default ["tomoyo"] if [DEFAULT_SECURITY_TOMOYO]
  default [""] if [DEFAULT_SECURITY_DAC]
 }
}
config XOR_BLOCKS tristate {
}
config ASYNC_CORE tristate {
}
config ASYNC_MEMCPY tristate {
 select ASYNC_CORE if []
}
config ASYNC_XOR tristate {
 select ASYNC_CORE if []
 select XOR_BLOCKS if []
}
config ASYNC_MEMSET tristate {
 select ASYNC_CORE if []
}
config ASYNC_PQ tristate {
 select ASYNC_CORE if []
}
config ASYNC_RAID6_RECOV tristate {
 select ASYNC_CORE if []
 select ASYNC_PQ if []
}
config ASYNC_TX_DISABLE_PQ_VAL_DMA boolean {
}
config ASYNC_TX_DISABLE_XOR_VAL_DMA boolean {
}
menuconfig CRYPTO tristate {
 prompt "Cryptographic API" if []
 if [CRYPTO] {
  config CRYPTO_FIPS boolean {
   prompt "FIPS 200 compliance" if [CRYPTO && CRYPTO_ANSI_CPRNG]
   depends on [CRYPTO_ANSI_CPRNG]
   inherited [CRYPTO && CRYPTO_ANSI_CPRNG]
  }
  config CRYPTO_ALGAPI tristate {
   select CRYPTO_ALGAPI2 if [CRYPTO]
   inherited [CRYPTO]
  }
  config CRYPTO_ALGAPI2 tristate {
   inherited [CRYPTO]
  }
  config CRYPTO_AEAD tristate {
   select CRYPTO_AEAD2 if [CRYPTO]
   select CRYPTO_ALGAPI if [CRYPTO]
   inherited [CRYPTO]
  }
  config CRYPTO_AEAD2 tristate {
   select CRYPTO_ALGAPI2 if [CRYPTO]
   inherited [CRYPTO]
  }
  config CRYPTO_BLKCIPHER tristate {
   select CRYPTO_BLKCIPHER2 if [CRYPTO]
   select CRYPTO_ALGAPI if [CRYPTO]
   inherited [CRYPTO]
  }
  config CRYPTO_BLKCIPHER2 tristate {
   select CRYPTO_ALGAPI2 if [CRYPTO]
   select CRYPTO_RNG2 if [CRYPTO]
   select CRYPTO_WORKQUEUE if [CRYPTO]
   inherited [CRYPTO]
  }
  config CRYPTO_HASH tristate {
   select CRYPTO_HASH2 if [CRYPTO]
   select CRYPTO_ALGAPI if [CRYPTO]
   inherited [CRYPTO]
  }
  config CRYPTO_HASH2 tristate {
   select CRYPTO_ALGAPI2 if [CRYPTO]
   inherited [CRYPTO]
  }
  config CRYPTO_RNG tristate {
   select CRYPTO_RNG2 if [CRYPTO]
   select CRYPTO_ALGAPI if [CRYPTO]
   inherited [CRYPTO]
  }
  config CRYPTO_RNG2 tristate {
   select CRYPTO_ALGAPI2 if [CRYPTO]
   inherited [CRYPTO]
  }
  config CRYPTO_PCOMP tristate {
   select CRYPTO_ALGAPI2 if [CRYPTO]
   inherited [CRYPTO]
  }
  config CRYPTO_MANAGER tristate {
   prompt "Cryptographic algorithm manager" if [CRYPTO]
   select CRYPTO_MANAGER2 if [CRYPTO]
   inherited [CRYPTO]
  }
  config CRYPTO_MANAGER2 tristate {
   default [CRYPTO_MANAGER || CRYPTO_MANAGER!="n" && CRYPTO_ALGAPI="y"] if [CRYPTO]
   select CRYPTO_AEAD2 if [CRYPTO]
   select CRYPTO_HASH2 if [CRYPTO]
   select CRYPTO_BLKCIPHER2 if [CRYPTO]
   select CRYPTO_PCOMP if [CRYPTO]
   inherited [CRYPTO]
  }
  config CRYPTO_GF128MUL tristate {
   prompt "GF(2^128) multiplication functions (EXPERIMENTAL)" if [CRYPTO && EXPERIMENTAL]
   depends on [EXPERIMENTAL]
   inherited [CRYPTO && EXPERIMENTAL]
  }
  config CRYPTO_NULL tristate {
   prompt "Null algorithms" if [CRYPTO]
   select CRYPTO_ALGAPI if [CRYPTO]
   select CRYPTO_BLKCIPHER if [CRYPTO]
   select CRYPTO_HASH if [CRYPTO]
   inherited [CRYPTO]
  }
  config CRYPTO_WORKQUEUE tristate {
   inherited [CRYPTO]
  }
  config CRYPTO_CRYPTD tristate {
   prompt "Software async crypto daemon" if [CRYPTO]
   select CRYPTO_BLKCIPHER if [CRYPTO]
   select CRYPTO_HASH if [CRYPTO]
   select CRYPTO_MANAGER if [CRYPTO]
   select CRYPTO_WORKQUEUE if [CRYPTO]
   inherited [CRYPTO]
  }
  config CRYPTO_AUTHENC tristate {
   prompt "Authenc support" if [CRYPTO]
   select CRYPTO_AEAD if [CRYPTO]
   select CRYPTO_BLKCIPHER if [CRYPTO]
   select CRYPTO_MANAGER if [CRYPTO]
   select CRYPTO_HASH if [CRYPTO]
   inherited [CRYPTO]
  }
  config CRYPTO_TEST tristate {
   prompt "Testing module" if [CRYPTO && m && <choice>]
   depends on [m]
   select CRYPTO_MANAGER if [CRYPTO && m && <choice>]
   inherited [CRYPTO && m && <choice>]
  }
  config CRYPTO_CCM tristate {
   prompt "CCM support" if [CRYPTO]
   select CRYPTO_CTR if [CRYPTO]
   select CRYPTO_AEAD if [CRYPTO]
   inherited [CRYPTO]
  }
  config CRYPTO_GCM tristate {
   prompt "GCM/GMAC support" if [CRYPTO]
   select CRYPTO_CTR if [CRYPTO]
   select CRYPTO_AEAD if [CRYPTO]
   select CRYPTO_GHASH if [CRYPTO]
   inherited [CRYPTO]
  }
  config CRYPTO_SEQIV tristate {
   prompt "Sequence Number IV Generator" if [CRYPTO]
   select CRYPTO_AEAD if [CRYPTO]
   select CRYPTO_BLKCIPHER if [CRYPTO]
   select CRYPTO_RNG if [CRYPTO]
   inherited [CRYPTO]
  }
  config CRYPTO_CBC tristate {
   prompt "CBC support" if [CRYPTO]
   select CRYPTO_BLKCIPHER if [CRYPTO]
   select CRYPTO_MANAGER if [CRYPTO]
   inherited [CRYPTO]
  }
  config CRYPTO_CTR tristate {
   prompt "CTR support" if [CRYPTO]
   select CRYPTO_BLKCIPHER if [CRYPTO]
   select CRYPTO_SEQIV if [CRYPTO]
   select CRYPTO_MANAGER if [CRYPTO]
   inherited [CRYPTO]
  }
  config CRYPTO_CTS tristate {
   prompt "CTS support" if [CRYPTO]
   select CRYPTO_BLKCIPHER if [CRYPTO]
   inherited [CRYPTO]
  }
  config CRYPTO_ECB tristate {
   prompt "ECB support" if [CRYPTO]
   select CRYPTO_BLKCIPHER if [CRYPTO]
   select CRYPTO_MANAGER if [CRYPTO]
   inherited [CRYPTO]
  }
  config CRYPTO_LRW tristate {
   prompt "LRW support (EXPERIMENTAL)" if [CRYPTO && EXPERIMENTAL]
   depends on [EXPERIMENTAL]
   select CRYPTO_BLKCIPHER if [CRYPTO && EXPERIMENTAL]
   select CRYPTO_MANAGER if [CRYPTO && EXPERIMENTAL]
   select CRYPTO_GF128MUL if [CRYPTO && EXPERIMENTAL]
   inherited [CRYPTO && EXPERIMENTAL]
  }
  config CRYPTO_PCBC tristate {
   prompt "PCBC support" if [CRYPTO]
   select CRYPTO_BLKCIPHER if [CRYPTO]
   select CRYPTO_MANAGER if [CRYPTO]
   inherited [CRYPTO]
  }
  config CRYPTO_XTS tristate {
   prompt "XTS support (EXPERIMENTAL)" if [CRYPTO && EXPERIMENTAL]
   depends on [EXPERIMENTAL]
   select CRYPTO_BLKCIPHER if [CRYPTO && EXPERIMENTAL]
   select CRYPTO_MANAGER if [CRYPTO && EXPERIMENTAL]
   select CRYPTO_GF128MUL if [CRYPTO && EXPERIMENTAL]
   inherited [CRYPTO && EXPERIMENTAL]
  }
  config CRYPTO_FPU tristate {
   select CRYPTO_BLKCIPHER if [CRYPTO]
   select CRYPTO_MANAGER if [CRYPTO]
   inherited [CRYPTO]
  }
  config CRYPTO_HMAC tristate {
   prompt "HMAC support" if [CRYPTO]
   select CRYPTO_HASH if [CRYPTO]
   select CRYPTO_MANAGER if [CRYPTO]
   inherited [CRYPTO]
  }
  config CRYPTO_XCBC tristate {
   prompt "XCBC support" if [CRYPTO && EXPERIMENTAL]
   depends on [EXPERIMENTAL]
   select CRYPTO_HASH if [CRYPTO && EXPERIMENTAL]
   select CRYPTO_MANAGER if [CRYPTO && EXPERIMENTAL]
   inherited [CRYPTO && EXPERIMENTAL]
  }
  config CRYPTO_VMAC tristate {
   prompt "VMAC support" if [CRYPTO && EXPERIMENTAL]
   depends on [EXPERIMENTAL]
   select CRYPTO_HASH if [CRYPTO && EXPERIMENTAL]
   select CRYPTO_MANAGER if [CRYPTO && EXPERIMENTAL]
   inherited [CRYPTO && EXPERIMENTAL]
  }
  config CRYPTO_CRC32C tristate {
   prompt "CRC32c CRC algorithm" if [CRYPTO]
   select CRYPTO_HASH if [CRYPTO]
   inherited [CRYPTO]
  }
  config CRYPTO_CRC32C_INTEL tristate {
   prompt "CRC32c INTEL hardware acceleration" if [CRYPTO && X86]
   depends on [X86]
   select CRYPTO_HASH if [CRYPTO && X86]
   inherited [CRYPTO && X86]
  }
  config CRYPTO_GHASH tristate {
   prompt "GHASH digest algorithm" if [CRYPTO]
   select CRYPTO_SHASH if [CRYPTO]
   select CRYPTO_GF128MUL if [CRYPTO]
   inherited [CRYPTO]
  }
  config CRYPTO_MD4 tristate {
   prompt "MD4 digest algorithm" if [CRYPTO]
   select CRYPTO_HASH if [CRYPTO]
   inherited [CRYPTO]
  }
  config CRYPTO_MD5 tristate {
   prompt "MD5 digest algorithm" if [CRYPTO]
   select CRYPTO_HASH if [CRYPTO]
   inherited [CRYPTO]
  }
  config CRYPTO_MICHAEL_MIC tristate {
   prompt "Michael MIC keyed digest algorithm" if [CRYPTO]
   select CRYPTO_HASH if [CRYPTO]
   inherited [CRYPTO]
  }
  config CRYPTO_RMD128 tristate {
   prompt "RIPEMD-128 digest algorithm" if [CRYPTO]
   select CRYPTO_HASH if [CRYPTO]
   inherited [CRYPTO]
  }
  config CRYPTO_RMD160 tristate {
   prompt "RIPEMD-160 digest algorithm" if [CRYPTO]
   select CRYPTO_HASH if [CRYPTO]
   inherited [CRYPTO]
  }
  config CRYPTO_RMD256 tristate {
   prompt "RIPEMD-256 digest algorithm" if [CRYPTO]
   select CRYPTO_HASH if [CRYPTO]
   inherited [CRYPTO]
  }
  config CRYPTO_RMD320 tristate {
   prompt "RIPEMD-320 digest algorithm" if [CRYPTO]
   select CRYPTO_HASH if [CRYPTO]
   inherited [CRYPTO]
  }
  config CRYPTO_SHA1 tristate {
   prompt "SHA1 digest algorithm" if [CRYPTO]
   select CRYPTO_HASH if [CRYPTO]
   inherited [CRYPTO]
  }
  config CRYPTO_SHA256 tristate {
   prompt "SHA224 and SHA256 digest algorithm" if [CRYPTO]
   select CRYPTO_HASH if [CRYPTO]
   inherited [CRYPTO]
  }
  config CRYPTO_SHA512 tristate {
   prompt "SHA384 and SHA512 digest algorithms" if [CRYPTO]
   select CRYPTO_HASH if [CRYPTO]
   inherited [CRYPTO]
  }
  config CRYPTO_TGR192 tristate {
   prompt "Tiger digest algorithms" if [CRYPTO]
   select CRYPTO_HASH if [CRYPTO]
   inherited [CRYPTO]
  }
  config CRYPTO_WP512 tristate {
   prompt "Whirlpool digest algorithms" if [CRYPTO]
   select CRYPTO_HASH if [CRYPTO]
   inherited [CRYPTO]
  }
  config CRYPTO_GHASH_CLMUL_NI_INTEL tristate {
   prompt "GHASH digest algorithm (CLMUL-NI accelerated)" if [CRYPTO && (X86 || UML_X86) && 64BIT]
   depends on [(X86 || UML_X86) && 64BIT]
   select CRYPTO_SHASH if [CRYPTO && (X86 || UML_X86) && 64BIT]
   select CRYPTO_CRYPTD if [CRYPTO && (X86 || UML_X86) && 64BIT]
   inherited [CRYPTO && (X86 || UML_X86) && 64BIT]
  }
  config CRYPTO_AES tristate {
   prompt "AES cipher algorithms" if [CRYPTO]
   select CRYPTO_ALGAPI if [CRYPTO]
   inherited [CRYPTO]
  }
  config CRYPTO_AES_586 tristate {
   prompt "AES cipher algorithms (i586)" if [CRYPTO && (X86 || UML_X86) && !64BIT]
   depends on [(X86 || UML_X86) && !64BIT]
   select CRYPTO_ALGAPI if [CRYPTO && (X86 || UML_X86) && !64BIT]
   select CRYPTO_AES if [CRYPTO && (X86 || UML_X86) && !64BIT]
   inherited [CRYPTO && (X86 || UML_X86) && !64BIT]
  }
  config CRYPTO_AES_X86_64 tristate {
   prompt "AES cipher algorithms (x86_64)" if [CRYPTO && (X86 || UML_X86) && 64BIT]
   depends on [(X86 || UML_X86) && 64BIT]
   select CRYPTO_ALGAPI if [CRYPTO && (X86 || UML_X86) && 64BIT]
   select CRYPTO_AES if [CRYPTO && (X86 || UML_X86) && 64BIT]
   inherited [CRYPTO && (X86 || UML_X86) && 64BIT]
  }
  config CRYPTO_AES_NI_INTEL tristate {
   prompt "AES cipher algorithms (AES-NI)" if [CRYPTO && (X86 || UML_X86) && 64BIT]
   depends on [(X86 || UML_X86) && 64BIT]
   select CRYPTO_AES_X86_64 if [CRYPTO && (X86 || UML_X86) && 64BIT]
   select CRYPTO_CRYPTD if [CRYPTO && (X86 || UML_X86) && 64BIT]
   select CRYPTO_ALGAPI if [CRYPTO && (X86 || UML_X86) && 64BIT]
   select CRYPTO_FPU if [CRYPTO && (X86 || UML_X86) && 64BIT]
   inherited [CRYPTO && (X86 || UML_X86) && 64BIT]
  }
  config CRYPTO_ANUBIS tristate {
   prompt "Anubis cipher algorithm" if [CRYPTO]
   select CRYPTO_ALGAPI if [CRYPTO]
   inherited [CRYPTO]
  }
  config CRYPTO_ARC4 tristate {
   prompt "ARC4 cipher algorithm" if [CRYPTO]
   select CRYPTO_ALGAPI if [CRYPTO]
   inherited [CRYPTO]
  }
  config CRYPTO_BLOWFISH tristate {
   prompt "Blowfish cipher algorithm" if [CRYPTO]
   select CRYPTO_ALGAPI if [CRYPTO]
   inherited [CRYPTO]
  }
  config CRYPTO_CAMELLIA tristate {
   prompt "Camellia cipher algorithms" if [CRYPTO]
   depends on [CRYPTO]
   select CRYPTO_ALGAPI if [CRYPTO]
   inherited [CRYPTO]
  }
  config CRYPTO_CAST5 tristate {
   prompt "CAST5 (CAST-128) cipher algorithm" if [CRYPTO]
   select CRYPTO_ALGAPI if [CRYPTO]
   inherited [CRYPTO]
  }
  config CRYPTO_CAST6 tristate {
   prompt "CAST6 (CAST-256) cipher algorithm" if [CRYPTO]
   select CRYPTO_ALGAPI if [CRYPTO]
   inherited [CRYPTO]
  }
  config CRYPTO_DES tristate {
   prompt "DES and Triple DES EDE cipher algorithms" if [CRYPTO]
   select CRYPTO_ALGAPI if [CRYPTO]
   inherited [CRYPTO]
  }
  config CRYPTO_FCRYPT tristate {
   prompt "FCrypt cipher algorithm" if [CRYPTO]
   select CRYPTO_ALGAPI if [CRYPTO]
   select CRYPTO_BLKCIPHER if [CRYPTO]
   inherited [CRYPTO]
  }
  config CRYPTO_KHAZAD tristate {
   prompt "Khazad cipher algorithm" if [CRYPTO]
   select CRYPTO_ALGAPI if [CRYPTO]
   inherited [CRYPTO]
  }
  config CRYPTO_SALSA20 tristate {
   prompt "Salsa20 stream cipher algorithm (EXPERIMENTAL)" if [CRYPTO && EXPERIMENTAL]
   depends on [EXPERIMENTAL]
   select CRYPTO_BLKCIPHER if [CRYPTO && EXPERIMENTAL]
   inherited [CRYPTO && EXPERIMENTAL]
  }
  config CRYPTO_SALSA20_586 tristate {
   prompt "Salsa20 stream cipher algorithm (i586) (EXPERIMENTAL)" if [CRYPTO && (X86 || UML_X86) && !64BIT && EXPERIMENTAL]
   depends on [(X86 || UML_X86) && !64BIT]
   depends on [EXPERIMENTAL]
   select CRYPTO_BLKCIPHER if [CRYPTO && (X86 || UML_X86) && !64BIT && EXPERIMENTAL]
   inherited [CRYPTO && (X86 || UML_X86) && !64BIT && EXPERIMENTAL]
  }
  config CRYPTO_SALSA20_X86_64 tristate {
   prompt "Salsa20 stream cipher algorithm (x86_64) (EXPERIMENTAL)" if [CRYPTO && (X86 || UML_X86) && 64BIT && EXPERIMENTAL]
   depends on [(X86 || UML_X86) && 64BIT]
   depends on [EXPERIMENTAL]
   select CRYPTO_BLKCIPHER if [CRYPTO && (X86 || UML_X86) && 64BIT && EXPERIMENTAL]
   inherited [CRYPTO && (X86 || UML_X86) && 64BIT && EXPERIMENTAL]
  }
  config CRYPTO_SEED tristate {
   prompt "SEED cipher algorithm" if [CRYPTO]
   select CRYPTO_ALGAPI if [CRYPTO]
   inherited [CRYPTO]
  }
  config CRYPTO_SERPENT tristate {
   prompt "Serpent cipher algorithm" if [CRYPTO]
   select CRYPTO_ALGAPI if [CRYPTO]
   inherited [CRYPTO]
  }
  config CRYPTO_TEA tristate {
   prompt "TEA, XTEA and XETA cipher algorithms" if [CRYPTO]
   select CRYPTO_ALGAPI if [CRYPTO]
   inherited [CRYPTO]
  }
  config CRYPTO_TWOFISH tristate {
   prompt "Twofish cipher algorithm" if [CRYPTO]
   select CRYPTO_ALGAPI if [CRYPTO]
   select CRYPTO_TWOFISH_COMMON if [CRYPTO]
   inherited [CRYPTO]
  }
  config CRYPTO_TWOFISH_COMMON tristate {
   inherited [CRYPTO]
  }
  config CRYPTO_TWOFISH_586 tristate {
   prompt "Twofish cipher algorithms (i586)" if [CRYPTO && (X86 || UML_X86) && !64BIT]
   depends on [(X86 || UML_X86) && !64BIT]
   select CRYPTO_ALGAPI if [CRYPTO && (X86 || UML_X86) && !64BIT]
   select CRYPTO_TWOFISH_COMMON if [CRYPTO && (X86 || UML_X86) && !64BIT]
   inherited [CRYPTO && (X86 || UML_X86) && !64BIT]
  }
  config CRYPTO_TWOFISH_X86_64 tristate {
   prompt "Twofish cipher algorithm (x86_64)" if [CRYPTO && (X86 || UML_X86) && 64BIT]
   depends on [(X86 || UML_X86) && 64BIT]
   select CRYPTO_ALGAPI if [CRYPTO && (X86 || UML_X86) && 64BIT]
   select CRYPTO_TWOFISH_COMMON if [CRYPTO && (X86 || UML_X86) && 64BIT]
   inherited [CRYPTO && (X86 || UML_X86) && 64BIT]
  }
  config CRYPTO_DEFLATE tristate {
   prompt "Deflate compression algorithm" if [CRYPTO]
   select CRYPTO_ALGAPI if [CRYPTO]
   select ZLIB_INFLATE if [CRYPTO]
   select ZLIB_DEFLATE if [CRYPTO]
   inherited [CRYPTO]
  }
  config CRYPTO_ZLIB tristate {
   prompt "Zlib compression algorithm" if [CRYPTO]
   select CRYPTO_PCOMP if [CRYPTO]
   select ZLIB_INFLATE if [CRYPTO]
   select ZLIB_DEFLATE if [CRYPTO]
   select NLATTR if [CRYPTO]
   inherited [CRYPTO]
  }
  config CRYPTO_LZO tristate {
   prompt "LZO compression algorithm" if [CRYPTO]
   select CRYPTO_ALGAPI if [CRYPTO]
   select LZO_COMPRESS if [CRYPTO]
   select LZO_DECOMPRESS if [CRYPTO]
   inherited [CRYPTO]
  }
  config CRYPTO_ANSI_CPRNG tristate {
   prompt "Pseudo Random Number Generation for Cryptographic modules" if [CRYPTO]
   default [m] if [CRYPTO]
   select CRYPTO_AES if [CRYPTO]
   select CRYPTO_RNG if [CRYPTO]
   inherited [CRYPTO]
  }
  menuconfig CRYPTO_HW boolean {
   prompt "Hardware crypto devices" if [CRYPTO]
   default [y] if [CRYPTO]
   inherited [CRYPTO]
   if [CRYPTO && CRYPTO_HW] {
    config CRYPTO_DEV_PADLOCK tristate {
     prompt "Support for VIA PadLock ACE" if [CRYPTO && CRYPTO_HW && X86 && !UML]
     depends on [X86 && !UML]
     inherited [CRYPTO && CRYPTO_HW && X86 && !UML]
     config CRYPTO_DEV_PADLOCK_AES tristate {
      prompt "PadLock driver for AES algorithm" if [CRYPTO && CRYPTO_HW && CRYPTO_DEV_PADLOCK]
      depends on [CRYPTO_DEV_PADLOCK]
      select CRYPTO_BLKCIPHER if [CRYPTO && CRYPTO_HW && CRYPTO_DEV_PADLOCK]
      select CRYPTO_AES if [CRYPTO && CRYPTO_HW && CRYPTO_DEV_PADLOCK]
      inherited [CRYPTO && CRYPTO_HW && CRYPTO_DEV_PADLOCK]
     }
     config CRYPTO_DEV_PADLOCK_SHA tristate {
      prompt "PadLock driver for SHA1 and SHA256 algorithms" if [CRYPTO && CRYPTO_HW && CRYPTO_DEV_PADLOCK]
      depends on [CRYPTO_DEV_PADLOCK]
      select CRYPTO_HASH if [CRYPTO && CRYPTO_HW && CRYPTO_DEV_PADLOCK]
      select CRYPTO_SHA1 if [CRYPTO && CRYPTO_HW && CRYPTO_DEV_PADLOCK]
      select CRYPTO_SHA256 if [CRYPTO && CRYPTO_HW && CRYPTO_DEV_PADLOCK]
      inherited [CRYPTO && CRYPTO_HW && CRYPTO_DEV_PADLOCK]
     }
    }
    config CRYPTO_DEV_GEODE tristate {
     prompt "Support for the Geode LX AES engine" if [CRYPTO && CRYPTO_HW && X86_32 && PCI]
     depends on [X86_32 && PCI]
     select CRYPTO_ALGAPI if [CRYPTO && CRYPTO_HW && X86_32 && PCI]
     select CRYPTO_BLKCIPHER if [CRYPTO && CRYPTO_HW && X86_32 && PCI]
     inherited [CRYPTO && CRYPTO_HW && X86_32 && PCI]
    }
    config ZCRYPT tristate {
     prompt "Support for PCI-attached cryptographic adapters" if [CRYPTO && CRYPTO_HW && S390]
     depends on [S390]
     select ZCRYPT_MONOLITHIC if [CRYPTO && CRYPTO_HW && S390 && ZCRYPT="y"]
     select HW_RANDOM if [CRYPTO && CRYPTO_HW && S390]
     inherited [CRYPTO && CRYPTO_HW && S390]
     config ZCRYPT_MONOLITHIC boolean {
      prompt "Monolithic zcrypt module" if [CRYPTO && CRYPTO_HW && ZCRYPT="m"]
      depends on [ZCRYPT="m"]
      inherited [CRYPTO && CRYPTO_HW && ZCRYPT="m"]
     }
    }
    config CRYPTO_SHA1_S390 tristate {
     prompt "SHA1 digest algorithm" if [CRYPTO && CRYPTO_HW && S390]
     depends on [S390]
     select CRYPTO_HASH if [CRYPTO && CRYPTO_HW && S390]
     inherited [CRYPTO && CRYPTO_HW && S390]
    }
    config CRYPTO_SHA256_S390 tristate {
     prompt "SHA256 digest algorithm" if [CRYPTO && CRYPTO_HW && S390]
     depends on [S390]
     select CRYPTO_HASH if [CRYPTO && CRYPTO_HW && S390]
     inherited [CRYPTO && CRYPTO_HW && S390]
    }
    config CRYPTO_SHA512_S390 tristate {
     prompt "SHA384 and SHA512 digest algorithm" if [CRYPTO && CRYPTO_HW && S390]
     depends on [S390]
     select CRYPTO_HASH if [CRYPTO && CRYPTO_HW && S390]
     inherited [CRYPTO && CRYPTO_HW && S390]
    }
    config CRYPTO_DES_S390 tristate {
     prompt "DES and Triple DES cipher algorithms" if [CRYPTO && CRYPTO_HW && S390]
     depends on [S390]
     select CRYPTO_ALGAPI if [CRYPTO && CRYPTO_HW && S390]
     select CRYPTO_BLKCIPHER if [CRYPTO && CRYPTO_HW && S390]
     inherited [CRYPTO && CRYPTO_HW && S390]
    }
    config CRYPTO_AES_S390 tristate {
     prompt "AES cipher algorithms" if [CRYPTO && CRYPTO_HW && S390]
     depends on [S390]
     select CRYPTO_ALGAPI if [CRYPTO && CRYPTO_HW && S390]
     select CRYPTO_BLKCIPHER if [CRYPTO && CRYPTO_HW && S390]
     inherited [CRYPTO && CRYPTO_HW && S390]
    }
    config S390_PRNG tristate {
     prompt "Pseudo random number generator device driver" if [CRYPTO && CRYPTO_HW && S390]
     depends on [S390]
     default [m] if [CRYPTO && CRYPTO_HW && S390]
     inherited [CRYPTO && CRYPTO_HW && S390]
    }
    config CRYPTO_DEV_MV_CESA tristate {
     prompt "Marvell's Cryptographic Engine" if [CRYPTO && CRYPTO_HW && PLAT_ORION]
     depends on [PLAT_ORION]
     select CRYPTO_ALGAPI if [CRYPTO && CRYPTO_HW && PLAT_ORION]
     select CRYPTO_AES if [CRYPTO && CRYPTO_HW && PLAT_ORION]
     select CRYPTO_BLKCIPHER2 if [CRYPTO && CRYPTO_HW && PLAT_ORION]
     inherited [CRYPTO && CRYPTO_HW && PLAT_ORION]
    }
    config CRYPTO_DEV_HIFN_795X tristate {
     prompt "Driver HIFN 795x crypto accelerator chips" if [CRYPTO && CRYPTO_HW && PCI]
     select CRYPTO_DES if [CRYPTO && CRYPTO_HW && PCI]
     select CRYPTO_ALGAPI if [CRYPTO && CRYPTO_HW && PCI]
     select CRYPTO_BLKCIPHER if [CRYPTO && CRYPTO_HW && PCI]
     select HW_RANDOM if [CRYPTO && CRYPTO_HW && PCI && CRYPTO_DEV_HIFN_795X_RNG]
     depends on [PCI]
     inherited [CRYPTO && CRYPTO_HW && PCI]
     config CRYPTO_DEV_HIFN_795X_RNG boolean {
      prompt "HIFN 795x random number generator" if [CRYPTO && CRYPTO_HW && CRYPTO_DEV_HIFN_795X]
      depends on [CRYPTO_DEV_HIFN_795X]
      inherited [CRYPTO && CRYPTO_HW && CRYPTO_DEV_HIFN_795X]
     }
    }
    config CRYPTO_DEV_TALITOS tristate {
     prompt "Talitos Freescale Security Engine (SEC)" if [CRYPTO && CRYPTO_HW && FSL_SOC]
     select CRYPTO_ALGAPI if [CRYPTO && CRYPTO_HW && FSL_SOC]
     select CRYPTO_AUTHENC if [CRYPTO && CRYPTO_HW && FSL_SOC]
     select HW_RANDOM if [CRYPTO && CRYPTO_HW && FSL_SOC]
     depends on [FSL_SOC]
     inherited [CRYPTO && CRYPTO_HW && FSL_SOC]
    }
    config CRYPTO_DEV_IXP4XX tristate {
     prompt "Driver for IXP4xx crypto hardware acceleration" if [CRYPTO && CRYPTO_HW && ARCH_IXP4XX]
     depends on [ARCH_IXP4XX]
     select CRYPTO_DES if [CRYPTO && CRYPTO_HW && ARCH_IXP4XX]
     select CRYPTO_ALGAPI if [CRYPTO && CRYPTO_HW && ARCH_IXP4XX]
     select CRYPTO_AUTHENC if [CRYPTO && CRYPTO_HW && ARCH_IXP4XX]
     select CRYPTO_BLKCIPHER if [CRYPTO && CRYPTO_HW && ARCH_IXP4XX]
     inherited [CRYPTO && CRYPTO_HW && ARCH_IXP4XX]
    }
    config CRYPTO_DEV_PPC4XX tristate {
     prompt "Driver AMCC PPC4xx crypto accelerator" if [CRYPTO && CRYPTO_HW && PPC && 4xx]
     depends on [PPC && 4xx]
     select CRYPTO_HASH if [CRYPTO && CRYPTO_HW && PPC && 4xx]
     select CRYPTO_ALGAPI if [CRYPTO && CRYPTO_HW && PPC && 4xx]
     select CRYPTO_BLKCIPHER if [CRYPTO && CRYPTO_HW && PPC && 4xx]
     inherited [CRYPTO && CRYPTO_HW && PPC && 4xx]
    }
   }
  }
 }
}
config BINARY_PRINTF boolean {
 default [n] if []
}
menu "Library routines" {
 config BITREVERSE tristate {
 }
 config RATIONAL boolean {
 }
 config GENERIC_FIND_FIRST_BIT boolean {
 }
 config GENERIC_FIND_NEXT_BIT boolean {
  default [y] if []
 }
 config GENERIC_FIND_LAST_BIT boolean {
  default [y] if []
 }
 config CRC_CCITT tristate {
  prompt "CRC-CCITT functions" if []
 }
 config CRC16 tristate {
  prompt "CRC16 functions" if []
 }
 config CRC_T10DIF tristate {
  prompt "CRC calculation for the T10 Data Integrity Field" if []
 }
 config CRC_ITU_T tristate {
  prompt "CRC ITU-T V.41 functions" if []
 }
 config CRC32 tristate {
  prompt "CRC32 functions" if []
  default [y] if []
  select BITREVERSE if []
 }
 config CRC7 tristate {
  prompt "CRC7 functions" if []
 }
 config LIBCRC32C tristate {
  prompt "CRC32c (Castagnoli, et al) Cyclic Redundancy-Check" if []
  select CRYPTO if []
  select CRYPTO_CRC32C if []
 }
 config AUDIT_GENERIC boolean {
  depends on [AUDIT && !AUDIT_ARCH]
  default [y] if [AUDIT && !AUDIT_ARCH]
  inherited [AUDIT && !AUDIT_ARCH]
 }
 config ZLIB_INFLATE tristate {
 }
 config ZLIB_DEFLATE tristate {
 }
 config LZO_COMPRESS tristate {
 }
 config LZO_DECOMPRESS tristate {
 }
 config DECOMPRESS_GZIP tristate {
  select ZLIB_INFLATE if []
 }
 config DECOMPRESS_BZIP2 tristate {
 }
 config DECOMPRESS_LZMA tristate {
 }
 config DECOMPRESS_LZO tristate {
  select LZO_DECOMPRESS if []
 }
 config GENERIC_ALLOCATOR boolean {
 }
 config REED_SOLOMON tristate {
 }
 config REED_SOLOMON_ENC8 boolean {
 }
 config REED_SOLOMON_DEC8 boolean {
 }
 config REED_SOLOMON_ENC16 boolean {
 }
 config REED_SOLOMON_DEC16 boolean {
 }
 config TEXTSEARCH boolean {
 }
 config TEXTSEARCH_KMP tristate {
 }
 config TEXTSEARCH_BM tristate {
 }
 config TEXTSEARCH_FSM tristate {
 }
 config HAS_IOMEM boolean {
  depends on [!NO_IOMEM]
  default [y] if [!NO_IOMEM]
  inherited [!NO_IOMEM]
 }
 config HAS_IOPORT boolean {
  depends on [HAS_IOMEM && !NO_IOPORT]
  default [y] if [HAS_IOMEM && !NO_IOPORT]
  inherited [HAS_IOMEM && !NO_IOPORT]
 }
 config HAS_DMA boolean {
  depends on [!NO_DMA]
  default [y] if [!NO_DMA]
  inherited [!NO_DMA]
 }
 config CHECK_SIGNATURE boolean {
 }
 config HAVE_LMB boolean {
 }
 config CPUMASK_OFFSTACK boolean {
  prompt "Force CPU masks off stack" if [DEBUG_PER_CPU_MAPS]
 }
 config DISABLE_OBSOLETE_CPUMASK_FUNCTIONS boolean {
  prompt "Disable obsolete cpumask functions" if [EXPERIMENTAL && BROKEN && DEBUG_PER_CPU_MAPS]
  depends on [EXPERIMENTAL && BROKEN]
  inherited [EXPERIMENTAL && BROKEN]
 }
 config NLATTR boolean {
 }
 config GENERIC_ATOMIC64 boolean {
 }
 config LRU_CACHE tristate {
 }
}
